export declare type BeforeEachResult = boolean | undefined | NavTarget | string;

export declare function createRouter(options: RouterOptions): Router;

export declare interface DebuggerArrayConfig {
    error?: boolean;
    warn?: boolean;
    info?: boolean;
    debug?: boolean;
}

export declare type DebuggerConfig = boolean | DebuggerArrayConfig;

export declare type GuardHookRule = (to: Route, from?: Route) => void | Promise<any>;

export declare const enum LifecycleHook {
    BEFORE_EACH = "be",
    AFTER_EACH = "ae"
}

export declare type LifeCycleHooks = Record<string, Array<GuardHookRule>>;

export declare type NavTarget = {
    to: RouteLocationRaw;
    navType: NavType;
};

export declare const enum NavType {
    PUSH = "push",
    REPLACE = "replace",
    REPLACE_ALL = "replaceAll",
    PUSH_TAB = "pushTab"
}

export declare interface OriRoute {
    path?: string;
    fullPath?: string;
    query?: Record<string, any>;
}

export declare interface Route {
    fullPath?: string;
    name?: string;
    path?: string;
    query?: Record<string, any>;
}

export declare interface RouteLocationBase {
    animationType?: 'auto' | 'none' | 'slide-in-right' | 'slide-in-left' | 'slide-in-top' | 'slide-in-bottom' | 'fade-in' | 'zoom-out' | 'zoom-fade-out' | 'pop-in';
    animationDuration?: number;
}

export declare type RouteLocationRaw = RouteUrlLocation | RouteNameLocation | RoutePathLocation;

export declare interface RouteNameLocation extends RouteLocationBase {
    name: string;
    query?: Object;
}

export declare interface RoutePathLocation extends RouteLocationBase {
    path: string;
    query?: object;
}

export declare interface Router {
    readonly routes: RouteRule[];
    readonly proxyMethods: string[];
    readonly routeMap: RouteRuleMap;
    route?: Route;
    readonly lifeCycleHooks: LifeCycleHooks;
    readonly options: RouterOptions;
    $locked: boolean;
    readonly indexRouteRule: RouteRule;
    install(app: any, ...options: any[]): any;
    setupRouter(app: any): void;
    push(to: RouteLocationRaw): void;
    replace(to: RouteLocationRaw): void;
    replaceAll(to: RouteLocationRaw): void;
    pushTab(to: RouteLocationRaw): void;
    beforeEach(userGuard: GuardHookRule): void;
    afterEach(userGuard: GuardHookRule): void;
}

export declare interface RouterOptions {
    pageData: any;
    proxyMode?: RouterProxyMode;
    proxyMethods?: UniLifecycleHook[];
    debugger?: DebuggerConfig;
}

export declare const enum RouterProxyMode {
    HOOK = "hook",
    METHOD = "method",
    NOT = "not"
}

export declare interface RouteRule {
    path: string;
    name?: string;
    redirect?: string | Function;
    alias?: string | Array<string>;
    children?: Array<RouteRule>;
    meta?: any;
    [propName: string]: any;
}

export declare interface RouteRuleMap {
    nameMap: Record<string, RouteRule>;
    pathMap: Record<string, RouteRule>;
}

export declare type RouteUrlLocation = string;

export declare type UniLifecycleHook = 'onShow' | 'onLoad' | 'onInit' | 'onReady' | string;

export declare const UniLifecycleHooks: {
    INIT: string;
    LOAD: string;
    SHOW: string;
    READY: string;
};

export { }
