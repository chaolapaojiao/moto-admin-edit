/**
  * gowiny-js-utils v1.0.7
  * https://gitee.com/gowiny/js-utils
  *
  * (c) 2022-present gowiny
  * @license MIT
  *
  * Date: 2022-03-24T10:27:26Z
  */
'use strict';

var _regeneratorRuntime = require("@babel/runtime/regenerator");

var _asyncToGenerator = require("@babel/runtime/helpers/asyncToGenerator");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, '__esModule', {
  value: true
});

function isString(val) {
  return typeof val === "string";
}

function isBoolean(val) {
  return typeof val === 'boolean';
}

function isNumber(val) {
  return typeof val === 'number';
}

function isObject(val) {
  return _typeof(val) === "object";
}

function isDate(value) {
  return value && value instanceof Date;
}

function isFunction(val) {
  return typeof val === 'function';
}

function isUndefined(val) {
  return typeof val === 'undefined';
}
/**
 * 判断是否为null,此函数undefined也表示为null
 * @param val -需要判断的对象
 * @returns
 */


function isNull(val) {
  return null === val || typeof val === 'undefined';
}

function isEmptyArray(list) {
  return !list || list.length == 0;
}

function type(val) {
  var result;

  if (val === null) {
    result = 'null';
  } else {
    var valType = _typeof(val);

    if (valType === 'object') {
      if (Array.isArray(val)) {
        result = 'array';
      } else if (val instanceof Date) {
        result = 'date';
      } else {
        result = valType;
      }
    } else {
      result = valType;
    }
  }

  return result;
}

var NOT_ATOMIC_TYPES = ['object', 'array'];

function isAtomic(val) {
  var valType = type(val);
  return isAtomicType(valType);
}

function isAtomicType(valType) {
  return NOT_ATOMIC_TYPES.indexOf(valType) == -1;
}

var DEFAULT_COPY_CONF = {
  copyNull: true,
  copyUndefined: true
};

function _depthCopyProps(conf, dest, srcData) {
  if (dest && srcData) {
    for (var key in srcData) {
      var srcVal = srcData[key];
      var srcValType = type(srcVal);

      if (isAtomicType(srcValType)) {
        if (srcValType === 'undefined') {
          if (conf.copyUndefined !== false) {
            dest[key] = srcVal;
          }
        } else if (srcValType === 'null') {
          if (conf.copyNull !== false) {
            dest[key] = srcVal;
          }
        } else {
          dest[key] = srcVal;
        }
      } else {
        var destVal = dest[key];
        var destValType = type(destVal);

        if (destValType !== srcValType) {
          destVal = srcValType === 'array' ? [] : {};
          dest[key] = destVal;
        }

        _depthCopyProps(conf, destVal, srcVal);
      }
    }
  }

  return dest;
}

function _depthCopyPropsIfNotExists(dest, srcData) {
  if (dest && srcData) {
    for (var key in srcData) {
      var destVal = dest[key];
      var destValType = type(destVal);

      if ('undefined' != destValType && 'null' != destValType && isAtomicType(destValType)) {
        //如果目标属性不为null并且是原子属性，则跳过
        continue;
      }

      var srcVal = srcData[key];
      var srcValType = type(srcVal);

      if (isAtomicType(srcValType)) {
        if (srcValType === 'undefined' || 'null' === srcValType) {
          //源属性为null,不处理
          continue;
        } else {
          dest[key] = srcVal;
        }
      } else {
        if (destValType !== srcValType) {
          destVal = srcValType === 'array' ? [] : {};
          dest[key] = destVal;
        }

        _depthCopyPropsIfNotExists(destVal, srcVal);
      }
    }
  }

  return dest;
}
/**
 * 深度复制属性
 * @param dest -目标对象
 * @param srcList -需要复制的对象
 * @returns
 */


function depthCopyProps(dest) {
  for (var _len = arguments.length, srcList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    srcList[_key - 1] = arguments[_key];
  }

  return depthCopyPropsWithConf.apply(void 0, [DEFAULT_COPY_CONF, dest].concat(srcList));
}
/**
 * 为目标对象设置默认值
 * @param dest -目标对象
 * @param srcList -默认值
 * @returns
 */


function setDefaultValues(dest) {
  for (var _len2 = arguments.length, srcList = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    srcList[_key2 - 1] = arguments[_key2];
  }

  if (dest && srcList && srcList.length > 0) {
    srcList.forEach(function (item) {
      _depthCopyPropsIfNotExists(dest, item);
    });
  }

  return dest;
}

var depthCopyPropsIf = setDefaultValues;

function depthCopyPropsWithConf(conf, dest) {
  for (var _len3 = arguments.length, srcList = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
    srcList[_key3 - 2] = arguments[_key3];
  }

  if (dest && srcList && srcList.length > 0) {
    for (var i = 0; i < srcList.length; i++) {
      var item = srcList[i];

      _depthCopyProps(conf, dest, item);
    }
  }

  return dest;
}
/**
 * 克隆
 * @param data -克隆的对象
 * @returns
 */


function clone(data) {
  var result;
  var dataType = type(data);

  if (dataType === 'array') {
    result = depthCopyPropsWithConf(DEFAULT_COPY_CONF, [], data);
  } else if (dataType === 'object') {
    result = depthCopyPropsWithConf(DEFAULT_COPY_CONF, {}, data);
  } else {
    result = data;
  }

  return result;
}
/**
 * 序列执行
 * @param fns -需要执行的函数
 * @param target -目标对象
 * @param args -参数
 * @param assert -断言
 * @returns
 */


function queueInvoke(_x, _x2, _x3, _x4) {
  return _queueInvoke.apply(this, arguments);
}

function _queueInvoke() {
  _queueInvoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fns, target, args, assert) {
    var len, result, i, item;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (fns) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return");

          case 2:
            if (!Array.isArray(fns)) {
              _context.next = 23;
              break;
            }

            len = fns.length;
            i = 0;

          case 5:
            if (!(i < len)) {
              _context.next = 20;
              break;
            }

            item = fns[i];
            _context.next = 9;
            return item.apply(target, args);

          case 9:
            result = _context.sent;
            _context.t0 = assert;

            if (!_context.t0) {
              _context.next = 15;
              break;
            }

            _context.next = 14;
            return assert(result);

          case 14:
            _context.t0 = !_context.sent;

          case 15:
            if (!_context.t0) {
              _context.next = 17;
              break;
            }

            return _context.abrupt("return", result);

          case 17:
            i++;
            _context.next = 5;
            break;

          case 20:
            return _context.abrupt("return", result);

          case 23:
            return _context.abrupt("return", fns.apply(target, args));

          case 24:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _queueInvoke.apply(this, arguments);
}

function invoke(fns, target, args) {
  if (!fns) {
    return;
  }

  var result;

  if (Array.isArray(fns)) {
    for (var i = 0; i < fns.length; i++) {
      var item = fns[i];
      result = item.apply(target, args);
    }
  } else {
    result = fns.apply(target, args);
  }

  return result;
}

var CLASS_INST_MAP = {};

function getClassDefaultInstance(clazz, factory) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "_";
  var clazzKey = clazz;
  var instMap = CLASS_INST_MAP[clazzKey];

  if (!instMap) {
    instMap = {};
    CLASS_INST_MAP[clazzKey] = instMap;
  }

  var inst = instMap[key];

  if (!inst) {
    inst = factory ? factory() : new clazz();
    instMap[key] = inst;
  }

  return inst;
}

function getClassDefaultValue(clazz, propertyKey, instFactory, instKey) {
  var inst = getClassDefaultInstance(clazz, instFactory, instKey);
  var result = inst[propertyKey];
  return result;
}

exports.CLASS_INST_MAP = CLASS_INST_MAP;
exports.clone = clone;
exports.depthCopyProps = depthCopyProps;
exports.depthCopyPropsIf = depthCopyPropsIf;
exports.depthCopyPropsWithConf = depthCopyPropsWithConf;
exports.getClassDefaultInstance = getClassDefaultInstance;
exports.getClassDefaultValue = getClassDefaultValue;
exports.invoke = invoke;
exports.isAtomic = isAtomic;
exports.isAtomicType = isAtomicType;
exports.isBoolean = isBoolean;
exports.isDate = isDate;
exports.isEmptyArray = isEmptyArray;
exports.isFunction = isFunction;
exports.isNull = isNull;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isString = isString;
exports.isUndefined = isUndefined;
exports.queueInvoke = queueInvoke;
exports.setDefaultValues = setDefaultValues;
exports.type = type;
