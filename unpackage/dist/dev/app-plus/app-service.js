var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then(
      (value) => promise.resolve(callback()).then(() => value),
      (reason) => promise.resolve(callback()).then(() => {
        throw reason;
      })
    );
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global2 = uni.requireGlobal();
  ArrayBuffer = global2.ArrayBuffer;
  Int8Array = global2.Int8Array;
  Uint8Array = global2.Uint8Array;
  Uint8ClampedArray = global2.Uint8ClampedArray;
  Int16Array = global2.Int16Array;
  Uint16Array = global2.Uint16Array;
  Int32Array = global2.Int32Array;
  Uint32Array = global2.Uint32Array;
  Float32Array = global2.Float32Array;
  Float64Array = global2.Float64Array;
  BigInt64Array = global2.BigInt64Array;
  BigUint64Array = global2.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(vue, shared) {
  "use strict";
  const UNI_SSR = "__uniSSR";
  const UNI_SSR_DATA = "data";
  const UNI_SSR_GLOBAL_DATA = "globalData";
  function getSSRDataType() {
    return vue.getCurrentInstance() ? UNI_SSR_DATA : UNI_SSR_GLOBAL_DATA;
  }
  function assertKey(key, shallow = false) {
    if (!key) {
      throw new Error(`${shallow ? "shallowSsrRef" : "ssrRef"}: You must provide a key.`);
    }
  }
  const ssrClientRef = (value, key, shallow = false) => {
    const valRef = shallow ? vue.shallowRef(value) : vue.ref(value);
    if (typeof window === "undefined") {
      return valRef;
    }
    const __uniSSR = window[UNI_SSR];
    if (!__uniSSR) {
      return valRef;
    }
    const type3 = getSSRDataType();
    assertKey(key, shallow);
    if (shared.hasOwn(__uniSSR[type3], key)) {
      valRef.value = __uniSSR[type3][key];
      if (type3 === UNI_SSR_DATA) {
        delete __uniSSR[type3][key];
      }
    }
    return valRef;
  };
  const ssrRef = (value, key) => {
    return ssrClientRef(value, key);
  };
  const shallowSsrRef = (value, key) => {
    return ssrClientRef(value, key, true);
  };
  function requireNativePlugin(name) {
    return weex.requireModule(name);
  }
  function formatAppLog(type3, filename, ...args) {
    if (uni.__log__) {
      uni.__log__(type3, filename, ...args);
    } else {
      console[type3].apply(console, [...args, filename]);
    }
  }
  function resolveEasycom(component2, easycom) {
    return typeof component2 === "string" ? easycom : component2;
  }
  const _export_sfc$1 = (sfc, props2) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props2) {
      target[key] = val;
    }
    return target;
  };
  const _sfc_main$3d = {
    data() {
      return {
        pageInfo: {
          page: 1,
          size: 10,
          type: "CIRCLE"
        },
        tabelData: []
      };
    },
    onLoad() {
      this.getPubList();
    },
    methods: {
      getPubList() {
        getApp().$openApi.motoCms.getPubArticleList(this.pageInfo).then((res) => {
          formatAppLog("log", "at pages/moto-cms/article-list.vue:52", res);
          if (res.data.code === 200) {
            this.tabelData = res.data.data.releaseList;
          }
        });
      },
      openEdit(id) {
        if (id) {
          uni.navigateTo({
            url: "/pages/moto-cms/article-editor?id=" + id
          });
        } else {
          uni.navigateTo({
            url: "/pages/moto-cms/article-editor?"
          });
        }
      }
    }
  };
  function _sfc_render$1b(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_button = vue.resolveComponent("el-button");
    const _component_el_table_column = vue.resolveComponent("el-table-column");
    const _component_el_table = vue.resolveComponent("el-table");
    return vue.openBlock(), vue.createElementBlock("view", { style: { "width": "100%" } }, [
      vue.createElementVNode("view", { class: "page-header moto-flex-row-between" }, [
        vue.createElementVNode("view", null, "文章列表"),
        vue.createVNode(_component_el_button, {
          type: "primary",
          onClick: _cache[0] || (_cache[0] = ($event) => $options.openEdit())
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode("新增")
          ]),
          _: 1
          /* STABLE */
        })
      ]),
      vue.createElementVNode("view", { style: { "height": "50px" } }),
      vue.createVNode(_component_el_table, {
        data: $data.tabelData,
        style: { "width": "100%" },
        "header-cell-style": { "text-align": "center" },
        "cell-style": { height: "100px" }
      }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_el_table_column, {
            type: "selection",
            width: "55"
          }),
          vue.createVNode(_component_el_table_column, {
            label: "封面",
            "min-width": "30%",
            align: "center"
          }, {
            default: vue.withCtx((scope) => [
              vue.createElementVNode("image", {
                mode: "aspectFill",
                class: "image-preview",
                src: scope.row.imageUrl
              }, null, 8, ["src"])
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_el_table_column, {
            label: "标题",
            "min-width": "30%",
            align: "center"
          }, {
            default: vue.withCtx((scope) => [
              vue.createTextVNode(
                vue.toDisplayString(scope.row.title),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_el_table_column, {
            property: "name",
            label: "内容",
            "min-width": "30%"
          }, {
            default: vue.withCtx((scope) => [
              vue.createTextVNode(
                vue.toDisplayString(scope.row.previewText),
                1
                /* TEXT */
              )
            ]),
            _: 1
            /* STABLE */
          }),
          vue.createVNode(_component_el_table_column, {
            property: "name",
            label: "操作",
            "min-width": "30%",
            align: "center"
          }, {
            default: vue.withCtx((scope) => [
              vue.createElementVNode("view", null, [
                vue.createVNode(_component_el_button, {
                  type: "primary",
                  onClick: ($event) => $options.openEdit(scope.row.id)
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("编辑")
                  ]),
                  _: 2
                  /* DYNAMIC */
                }, 1032, ["onClick"]),
                vue.createVNode(_component_el_button, { type: "danger" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("删除")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["data"])
    ]);
  }
  const PagesMotoCmsArticleList = /* @__PURE__ */ _export_sfc$1(_sfc_main$3d, [["render", _sfc_render$1b], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/pages/moto-cms/article-list.vue"]]);
  var toString$2 = Object.prototype.toString;
  function isArray$6(val) {
    return toString$2.call(val) === "[object Array]";
  }
  function isObject$4(val) {
    return val !== null && typeof val === "object";
  }
  function isDate$1(val) {
    return toString$2.call(val) === "[object Date]";
  }
  function isURLSearchParams(val) {
    return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
  }
  function forEach(obj, fn2) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray$6(obj)) {
      for (var i2 = 0, l2 = obj.length; i2 < l2; i2++) {
        fn2.call(null, obj[i2], i2, obj);
      }
    } else {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn2.call(null, obj[key], key, obj);
        }
      }
    }
  }
  function isPlainObject$1(obj) {
    return Object.prototype.toString.call(obj) === "[object Object]";
  }
  function deepMerge$1() {
    let result = {};
    function assignValue2(val, key) {
      if (typeof result[key] === "object" && typeof val === "object") {
        result[key] = deepMerge$1(result[key], val);
      } else if (typeof val === "object") {
        result[key] = deepMerge$1({}, val);
      } else {
        result[key] = val;
      }
    }
    for (let i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
      forEach(arguments[i2], assignValue2);
    }
    return result;
  }
  function isUndefined$2(val) {
    return typeof val === "undefined";
  }
  function encode$1(val) {
    return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  function buildURL(url, params, paramsSerializer) {
    if (!params) {
      return url;
    }
    var serializedParams;
    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];
      forEach(params, function serialize(val, key) {
        if (val === null || typeof val === "undefined") {
          return;
        }
        if (isArray$6(val)) {
          key = key + "[]";
        } else {
          val = [val];
        }
        forEach(val, function parseValue(v2) {
          if (isDate$1(v2)) {
            v2 = v2.toISOString();
          } else if (isObject$4(v2)) {
            v2 = JSON.stringify(v2);
          }
          parts.push(encode$1(key) + "=" + encode$1(v2));
        });
      });
      serializedParams = parts.join("&");
    }
    if (serializedParams) {
      var hashmarkIndex = url.indexOf("#");
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
  }
  function isAbsoluteURL(url) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  }
  function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }
  function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }
  function settle(resolve, reject, response) {
    const validateStatus = response.config.validateStatus;
    const status = response.statusCode;
    if (status && (!validateStatus || validateStatus(status))) {
      resolve(response);
    } else {
      reject(response);
    }
  }
  const mergeKeys$1 = (keys2, config2) => {
    let config = {};
    keys2.forEach((prop) => {
      if (!isUndefined$2(config2[prop])) {
        config[prop] = config2[prop];
      }
    });
    return config;
  };
  const adapter = (config) => {
    return new Promise((resolve, reject) => {
      let fullPath = buildURL(buildFullPath(config.baseURL, config.url), config.params, config.paramsSerializer);
      const _config = {
        url: fullPath,
        header: config.header,
        complete: (response) => {
          config.fullPath = fullPath;
          response.config = config;
          response.rawData = response.data;
          try {
            let jsonParseHandle = false;
            const forcedJSONParsingType = typeof config.forcedJSONParsing;
            if (forcedJSONParsingType === "boolean") {
              jsonParseHandle = config.forcedJSONParsing;
            } else if (forcedJSONParsingType === "object") {
              const includesMethod = config.forcedJSONParsing.include || [];
              jsonParseHandle = includesMethod.includes(config.method);
            }
            if (jsonParseHandle && typeof response.data === "string") {
              response.data = JSON.parse(response.data);
            }
          } catch (e) {
          }
          settle(resolve, reject, response);
        }
      };
      let requestTask;
      if (config.method === "UPLOAD") {
        delete _config.header["content-type"];
        delete _config.header["Content-Type"];
        let otherConfig = {
          filePath: config.filePath,
          name: config.name
        };
        const optionalKeys = [
          "files",
          "timeout",
          "formData"
        ];
        requestTask = uni.uploadFile({ ..._config, ...otherConfig, ...mergeKeys$1(optionalKeys, config) });
      } else if (config.method === "DOWNLOAD") {
        const optionalKeys = [
          "timeout"
        ];
        requestTask = uni.downloadFile({ ..._config, ...mergeKeys$1(optionalKeys, config) });
      } else {
        const optionalKeys = [
          "data",
          "method",
          "timeout",
          "dataType",
          "responseType",
          "sslVerify",
          "firstIpv4"
        ];
        requestTask = uni.request({ ..._config, ...mergeKeys$1(optionalKeys, config) });
      }
      if (config.getTask) {
        config.getTask(requestTask, config);
      }
    });
  };
  const dispatchRequest = (config) => {
    return adapter(config);
  };
  function InterceptorManager() {
    this.handlers = [];
  }
  InterceptorManager.prototype.use = function use(fulfilled, rejected) {
    this.handlers.push({
      fulfilled,
      rejected
    });
    return this.handlers.length - 1;
  };
  InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  };
  InterceptorManager.prototype.forEach = function forEach2(fn2) {
    this.handlers.forEach((h2) => {
      if (h2 !== null) {
        fn2(h2);
      }
    });
  };
  const mergeKeys = (keys2, globalsConfig, config2) => {
    let config = {};
    keys2.forEach((prop) => {
      if (!isUndefined$2(config2[prop])) {
        config[prop] = config2[prop];
      } else if (!isUndefined$2(globalsConfig[prop])) {
        config[prop] = globalsConfig[prop];
      }
    });
    return config;
  };
  const mergeConfig$1 = (globalsConfig, config2 = {}) => {
    const method = config2.method || globalsConfig.method || "GET";
    let config = {
      baseURL: config2.baseURL || globalsConfig.baseURL || "",
      method,
      url: config2.url || "",
      params: config2.params || {},
      custom: { ...globalsConfig.custom || {}, ...config2.custom || {} },
      header: deepMerge$1(globalsConfig.header || {}, config2.header || {})
    };
    const defaultToConfig2Keys = ["getTask", "validateStatus", "paramsSerializer", "forcedJSONParsing"];
    config = { ...config, ...mergeKeys(defaultToConfig2Keys, globalsConfig, config2) };
    if (method === "DOWNLOAD") {
      const downloadKeys = [
        "timeout"
      ];
      config = { ...config, ...mergeKeys(downloadKeys, globalsConfig, config2) };
    } else if (method === "UPLOAD") {
      delete config.header["content-type"];
      delete config.header["Content-Type"];
      const uploadKeys = [
        "files",
        "filePath",
        "name",
        "timeout",
        "formData"
      ];
      uploadKeys.forEach((prop) => {
        if (!isUndefined$2(config2[prop])) {
          config[prop] = config2[prop];
        }
      });
      if (isUndefined$2(config.timeout) && !isUndefined$2(globalsConfig.timeout)) {
        config["timeout"] = globalsConfig["timeout"];
      }
    } else {
      const defaultsKeys = [
        "data",
        "timeout",
        "dataType",
        "responseType",
        "sslVerify",
        "firstIpv4"
      ];
      config = { ...config, ...mergeKeys(defaultsKeys, globalsConfig, config2) };
    }
    return config;
  };
  const defaults$2 = {
    baseURL: "",
    header: {},
    method: "GET",
    dataType: "json",
    paramsSerializer: null,
    responseType: "text",
    custom: {},
    timeout: 6e4,
    sslVerify: true,
    firstIpv4: false,
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    // 是否尝试将响应数据json化
    forcedJSONParsing: true
  };
  var clone$1 = function() {
    function _instanceof(obj, type3) {
      return type3 != null && obj instanceof type3;
    }
    var nativeMap;
    try {
      nativeMap = Map;
    } catch (_2) {
      nativeMap = function() {
      };
    }
    var nativeSet;
    try {
      nativeSet = Set;
    } catch (_2) {
      nativeSet = function() {
      };
    }
    var nativePromise;
    try {
      nativePromise = Promise;
    } catch (_2) {
      nativePromise = function() {
      };
    }
    function clone2(parent2, circular, depth, prototype, includeNonEnumerable) {
      if (typeof circular === "object") {
        depth = circular.depth;
        prototype = circular.prototype;
        includeNonEnumerable = circular.includeNonEnumerable;
        circular = circular.circular;
      }
      var allParents = [];
      var allChildren = [];
      var useBuffer = typeof Buffer != "undefined";
      if (typeof circular == "undefined")
        circular = true;
      if (typeof depth == "undefined")
        depth = Infinity;
      function _clone(parent3, depth2) {
        if (parent3 === null)
          return null;
        if (depth2 === 0)
          return parent3;
        var child;
        var proto;
        if (typeof parent3 != "object") {
          return parent3;
        }
        if (_instanceof(parent3, nativeMap)) {
          child = new nativeMap();
        } else if (_instanceof(parent3, nativeSet)) {
          child = new nativeSet();
        } else if (_instanceof(parent3, nativePromise)) {
          child = new nativePromise(function(resolve, reject) {
            parent3.then(function(value) {
              resolve(_clone(value, depth2 - 1));
            }, function(err) {
              reject(_clone(err, depth2 - 1));
            });
          });
        } else if (clone2.__isArray(parent3)) {
          child = [];
        } else if (clone2.__isRegExp(parent3)) {
          child = new RegExp(parent3.source, __getRegExpFlags(parent3));
          if (parent3.lastIndex)
            child.lastIndex = parent3.lastIndex;
        } else if (clone2.__isDate(parent3)) {
          child = new Date(parent3.getTime());
        } else if (useBuffer && Buffer.isBuffer(parent3)) {
          if (Buffer.from) {
            child = Buffer.from(parent3);
          } else {
            child = new Buffer(parent3.length);
            parent3.copy(child);
          }
          return child;
        } else if (_instanceof(parent3, Error)) {
          child = Object.create(parent3);
        } else {
          if (typeof prototype == "undefined") {
            proto = Object.getPrototypeOf(parent3);
            child = Object.create(proto);
          } else {
            child = Object.create(prototype);
            proto = prototype;
          }
        }
        if (circular) {
          var index = allParents.indexOf(parent3);
          if (index != -1) {
            return allChildren[index];
          }
          allParents.push(parent3);
          allChildren.push(child);
        }
        if (_instanceof(parent3, nativeMap)) {
          parent3.forEach(function(value, key) {
            var keyChild = _clone(key, depth2 - 1);
            var valueChild = _clone(value, depth2 - 1);
            child.set(keyChild, valueChild);
          });
        }
        if (_instanceof(parent3, nativeSet)) {
          parent3.forEach(function(value) {
            var entryChild = _clone(value, depth2 - 1);
            child.add(entryChild);
          });
        }
        for (var i2 in parent3) {
          var attrs2 = Object.getOwnPropertyDescriptor(parent3, i2);
          if (attrs2) {
            child[i2] = _clone(parent3[i2], depth2 - 1);
          }
          try {
            var objProperty = Object.getOwnPropertyDescriptor(parent3, i2);
            if (objProperty.set === "undefined") {
              continue;
            }
            child[i2] = _clone(parent3[i2], depth2 - 1);
          } catch (e) {
            if (e instanceof TypeError) {
              continue;
            } else if (e instanceof ReferenceError) {
              continue;
            }
          }
        }
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(parent3);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            var symbol = symbols[i2];
            var descriptor = Object.getOwnPropertyDescriptor(parent3, symbol);
            if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
              continue;
            }
            child[symbol] = _clone(parent3[symbol], depth2 - 1);
            Object.defineProperty(child, symbol, descriptor);
          }
        }
        if (includeNonEnumerable) {
          var allPropertyNames = Object.getOwnPropertyNames(parent3);
          for (var i2 = 0; i2 < allPropertyNames.length; i2++) {
            var propertyName = allPropertyNames[i2];
            var descriptor = Object.getOwnPropertyDescriptor(parent3, propertyName);
            if (descriptor && descriptor.enumerable) {
              continue;
            }
            child[propertyName] = _clone(parent3[propertyName], depth2 - 1);
            Object.defineProperty(child, propertyName, descriptor);
          }
        }
        return child;
      }
      return _clone(parent2, depth);
    }
    clone2.clonePrototype = function clonePrototype(parent2) {
      if (parent2 === null)
        return null;
      var c2 = function() {
      };
      c2.prototype = parent2;
      return new c2();
    };
    function __objToStr(o2) {
      return Object.prototype.toString.call(o2);
    }
    clone2.__objToStr = __objToStr;
    function __isDate(o2) {
      return typeof o2 === "object" && __objToStr(o2) === "[object Date]";
    }
    clone2.__isDate = __isDate;
    function __isArray(o2) {
      return typeof o2 === "object" && __objToStr(o2) === "[object Array]";
    }
    clone2.__isArray = __isArray;
    function __isRegExp(o2) {
      return typeof o2 === "object" && __objToStr(o2) === "[object RegExp]";
    }
    clone2.__isRegExp = __isRegExp;
    function __getRegExpFlags(re2) {
      var flags = "";
      if (re2.global)
        flags += "g";
      if (re2.ignoreCase)
        flags += "i";
      if (re2.multiline)
        flags += "m";
      return flags;
    }
    clone2.__getRegExpFlags = __getRegExpFlags;
    return clone2;
  }();
  class Request {
    /**
     * @param {Object} arg - 全局配置
     * @param {String} arg.baseURL - 全局根路径
     * @param {Object} arg.header - 全局header
     * @param {String} arg.method = [GET|POST|PUT|DELETE|CONNECT|HEAD|OPTIONS|TRACE] - 全局默认请求方式
     * @param {String} arg.dataType = [json] - 全局默认的dataType
     * @param {String} arg.responseType = [text|arraybuffer] - 全局默认的responseType。支付宝小程序不支持
     * @param {Object} arg.custom - 全局默认的自定义参数
     * @param {Number} arg.timeout - 全局默认的超时时间，单位 ms。默认60000。H5(HBuilderX 2.9.9+)、APP(HBuilderX 2.9.9+)、微信小程序（2.10.0）、支付宝小程序
     * @param {Boolean} arg.sslVerify - 全局默认的是否验证 ssl 证书。默认true.仅App安卓端支持（HBuilderX 2.3.3+）
     * @param {Boolean} arg.withCredentials - 全局默认的跨域请求时是否携带凭证（cookies）。默认false。仅H5支持（HBuilderX 2.6.15+）
     * @param {Boolean} arg.firstIpv4 - 全DNS解析时优先使用ipv4。默认false。仅 App-Android 支持 (HBuilderX 2.8.0+)
     * @param {Function(statusCode):Boolean} arg.validateStatus - 全局默认的自定义验证器。默认statusCode >= 200 && statusCode < 300
     */
    constructor(arg = {}) {
      if (!isPlainObject$1(arg)) {
        arg = {};
        formatAppLog("warn", "at utils/luch-request/core/Request.js:37", "设置全局参数必须接收一个Object");
      }
      this.config = clone$1({ ...defaults$2, ...arg });
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    /**
     * @Function
     * @param {Request~setConfigCallback} f - 设置全局默认配置
     */
    setConfig(f2) {
      this.config = f2(this.config);
    }
    middleware(config) {
      config = mergeConfig$1(this.config, config);
      let chain = [dispatchRequest, void 0];
      let promise = Promise.resolve(config);
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }
      return promise;
    }
    /**
     * @Function
     * @param {Object} config - 请求配置项
     * @prop {String} options.url - 请求路径
     * @prop {Object} options.data - 请求参数
     * @prop {Object} [options.responseType = config.responseType] [text|arraybuffer] - 响应的数据类型
     * @prop {Object} [options.dataType = config.dataType] - 如果设为 json，会尝试对返回的数据做一次 JSON.parse
     * @prop {Object} [options.header = config.header] - 请求header
     * @prop {Object} [options.method = config.method] - 请求方法
     * @returns {Promise<unknown>}
     */
    request(config = {}) {
      return this.middleware(config);
    }
    get(url, options = {}) {
      return this.middleware({
        url,
        method: "GET",
        ...options
      });
    }
    post(url, data, options = {}) {
      return this.middleware({
        url,
        data,
        method: "POST",
        ...options
      });
    }
    put(url, data, options = {}) {
      return this.middleware({
        url,
        data,
        method: "PUT",
        ...options
      });
    }
    delete(url, data, options = {}) {
      return this.middleware({
        url,
        data,
        method: "DELETE",
        ...options
      });
    }
    options(url, data, options = {}) {
      return this.middleware({
        url,
        data,
        method: "OPTIONS",
        ...options
      });
    }
    upload(url, config = {}) {
      config.url = url;
      config.method = "UPLOAD";
      return this.middleware(config);
    }
    download(url, config = {}) {
      config.url = url;
      config.method = "DOWNLOAD";
      return this.middleware(config);
    }
    get version() {
      return "3.1.0";
    }
  }
  function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
  }
  function getTarget() {
    return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
  }
  const isProxyAvailable = typeof Proxy === "function";
  const HOOK_SETUP = "devtools-plugin:setup";
  const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";
  class ApiProxy {
    constructor(plugin, hook) {
      this.target = null;
      this.targetQueue = [];
      this.onQueue = [];
      this.plugin = plugin;
      this.hook = hook;
      const defaultSettings = {};
      if (plugin.settings) {
        for (const id in plugin.settings) {
          const item = plugin.settings[id];
          defaultSettings[id] = item.defaultValue;
        }
      }
      const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
      let currentSettings = { ...defaultSettings };
      try {
        const raw = localStorage.getItem(localSettingsSaveId);
        const data = JSON.parse(raw);
        Object.assign(currentSettings, data);
      } catch (e) {
      }
      this.fallbacks = {
        getSettings() {
          return currentSettings;
        },
        setSettings(value) {
          try {
            localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
          } catch (e) {
          }
          currentSettings = value;
        }
      };
      hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
      this.proxiedOn = new Proxy({}, {
        get: (_target, prop) => {
          if (this.target) {
            return this.target.on[prop];
          } else {
            return (...args) => {
              this.onQueue.push({
                method: prop,
                args
              });
            };
          }
        }
      });
      this.proxiedTarget = new Proxy({}, {
        get: (_target, prop) => {
          if (this.target) {
            return this.target[prop];
          } else if (prop === "on") {
            return this.proxiedOn;
          } else if (Object.keys(this.fallbacks).includes(prop)) {
            return (...args) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: () => {
                }
              });
              return this.fallbacks[prop](...args);
            };
          } else {
            return (...args) => {
              return new Promise((resolve) => {
                this.targetQueue.push({
                  method: prop,
                  args,
                  resolve
                });
              });
            };
          }
        }
      });
    }
    async setRealTarget(target) {
      this.target = target;
      for (const item of this.onQueue) {
        this.target.on[item.method](...item.args);
      }
      for (const item of this.targetQueue) {
        item.resolve(await this.target[item.method](...item.args));
      }
    }
  }
  function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const target = getTarget();
    const hook = getDevtoolsGlobalHook();
    const enableProxy = isProxyAvailable && pluginDescriptor.enableEarlyProxy;
    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
      hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
    } else {
      const proxy = enableProxy ? new ApiProxy(pluginDescriptor, hook) : null;
      const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
      list.push({
        pluginDescriptor,
        setupFn,
        proxy
      });
      if (proxy)
        setupFn(proxy.proxiedTarget);
    }
  }
  /*!
   * vuex v4.1.0
   * (c) 2022 Evan You
   * @license MIT
   */
  var storeKey = "store";
  function forEachValue(obj, fn2) {
    Object.keys(obj).forEach(function(key) {
      return fn2(obj[key], key);
    });
  }
  function isObject$3(obj) {
    return obj !== null && typeof obj === "object";
  }
  function isPromise(val) {
    return val && typeof val.then === "function";
  }
  function assert(condition, msg) {
    if (!condition) {
      throw new Error("[vuex] " + msg);
    }
  }
  function partial(fn2, arg) {
    return function() {
      return fn2(arg);
    };
  }
  function genericSubscribe(fn2, subs, options) {
    if (subs.indexOf(fn2) < 0) {
      options && options.prepend ? subs.unshift(fn2) : subs.push(fn2);
    }
    return function() {
      var i2 = subs.indexOf(fn2);
      if (i2 > -1) {
        subs.splice(i2, 1);
      }
    };
  }
  function resetStore(store2, hot) {
    store2._actions = /* @__PURE__ */ Object.create(null);
    store2._mutations = /* @__PURE__ */ Object.create(null);
    store2._wrappedGetters = /* @__PURE__ */ Object.create(null);
    store2._modulesNamespaceMap = /* @__PURE__ */ Object.create(null);
    var state2 = store2.state;
    installModule(store2, state2, [], store2._modules.root, true);
    resetStoreState(store2, state2, hot);
  }
  function resetStoreState(store2, state2, hot) {
    var oldState = store2._state;
    var oldScope = store2._scope;
    store2.getters = {};
    store2._makeLocalGettersCache = /* @__PURE__ */ Object.create(null);
    var wrappedGetters = store2._wrappedGetters;
    var computedObj = {};
    var computedCache = {};
    var scope = vue.effectScope(true);
    scope.run(function() {
      forEachValue(wrappedGetters, function(fn2, key) {
        computedObj[key] = partial(fn2, store2);
        computedCache[key] = vue.computed(function() {
          return computedObj[key]();
        });
        Object.defineProperty(store2.getters, key, {
          get: function() {
            return computedCache[key].value;
          },
          enumerable: true
          // for local getters
        });
      });
    });
    store2._state = vue.reactive({
      data: state2
    });
    store2._scope = scope;
    if (store2.strict) {
      enableStrictMode(store2);
    }
    if (oldState) {
      if (hot) {
        store2._withCommit(function() {
          oldState.data = null;
        });
      }
    }
    if (oldScope) {
      oldScope.stop();
    }
  }
  function installModule(store2, rootState, path, module2, hot) {
    var isRoot = !path.length;
    var namespace = store2._modules.getNamespace(path);
    if (module2.namespaced) {
      if (store2._modulesNamespaceMap[namespace] && true) {
        console.error("[vuex] duplicate namespace " + namespace + " for the namespaced module " + path.join("/"));
      }
      store2._modulesNamespaceMap[namespace] = module2;
    }
    if (!isRoot && !hot) {
      var parentState = getNestedState(rootState, path.slice(0, -1));
      var moduleName = path[path.length - 1];
      store2._withCommit(function() {
        {
          if (moduleName in parentState) {
            console.warn(
              '[vuex] state field "' + moduleName + '" was overridden by a module with the same name at "' + path.join(".") + '"'
            );
          }
        }
        parentState[moduleName] = module2.state;
      });
    }
    var local = module2.context = makeLocalContext(store2, namespace, path);
    module2.forEachMutation(function(mutation, key) {
      var namespacedType = namespace + key;
      registerMutation(store2, namespacedType, mutation, local);
    });
    module2.forEachAction(function(action, key) {
      var type3 = action.root ? key : namespace + key;
      var handler = action.handler || action;
      registerAction(store2, type3, handler, local);
    });
    module2.forEachGetter(function(getter, key) {
      var namespacedType = namespace + key;
      registerGetter(store2, namespacedType, getter, local);
    });
    module2.forEachChild(function(child, key) {
      installModule(store2, rootState, path.concat(key), child, hot);
    });
  }
  function makeLocalContext(store2, namespace, path) {
    var noNamespace = namespace === "";
    var local = {
      dispatch: noNamespace ? store2.dispatch : function(_type, _payload, _options) {
        var args = unifyObjectStyle(_type, _payload, _options);
        var payload = args.payload;
        var options = args.options;
        var type3 = args.type;
        if (!options || !options.root) {
          type3 = namespace + type3;
          if (!store2._actions[type3]) {
            console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type3);
            return;
          }
        }
        return store2.dispatch(type3, payload);
      },
      commit: noNamespace ? store2.commit : function(_type, _payload, _options) {
        var args = unifyObjectStyle(_type, _payload, _options);
        var payload = args.payload;
        var options = args.options;
        var type3 = args.type;
        if (!options || !options.root) {
          type3 = namespace + type3;
          if (!store2._mutations[type3]) {
            console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type3);
            return;
          }
        }
        store2.commit(type3, payload, options);
      }
    };
    Object.defineProperties(local, {
      getters: {
        get: noNamespace ? function() {
          return store2.getters;
        } : function() {
          return makeLocalGetters(store2, namespace);
        }
      },
      state: {
        get: function() {
          return getNestedState(store2.state, path);
        }
      }
    });
    return local;
  }
  function makeLocalGetters(store2, namespace) {
    if (!store2._makeLocalGettersCache[namespace]) {
      var gettersProxy = {};
      var splitPos = namespace.length;
      Object.keys(store2.getters).forEach(function(type3) {
        if (type3.slice(0, splitPos) !== namespace) {
          return;
        }
        var localType = type3.slice(splitPos);
        Object.defineProperty(gettersProxy, localType, {
          get: function() {
            return store2.getters[type3];
          },
          enumerable: true
        });
      });
      store2._makeLocalGettersCache[namespace] = gettersProxy;
    }
    return store2._makeLocalGettersCache[namespace];
  }
  function registerMutation(store2, type3, handler, local) {
    var entry = store2._mutations[type3] || (store2._mutations[type3] = []);
    entry.push(function wrappedMutationHandler(payload) {
      handler.call(store2, local.state, payload);
    });
  }
  function registerAction(store2, type3, handler, local) {
    var entry = store2._actions[type3] || (store2._actions[type3] = []);
    entry.push(function wrappedActionHandler(payload) {
      var res = handler.call(store2, {
        dispatch: local.dispatch,
        commit: local.commit,
        getters: local.getters,
        state: local.state,
        rootGetters: store2.getters,
        rootState: store2.state
      }, payload);
      if (!isPromise(res)) {
        res = Promise.resolve(res);
      }
      if (store2._devtoolHook) {
        return res.catch(function(err) {
          store2._devtoolHook.emit("vuex:error", err);
          throw err;
        });
      } else {
        return res;
      }
    });
  }
  function registerGetter(store2, type3, rawGetter, local) {
    if (store2._wrappedGetters[type3]) {
      {
        console.error("[vuex] duplicate getter key: " + type3);
      }
      return;
    }
    store2._wrappedGetters[type3] = function wrappedGetter(store22) {
      return rawGetter(
        local.state,
        // local state
        local.getters,
        // local getters
        store22.state,
        // root state
        store22.getters
        // root getters
      );
    };
  }
  function enableStrictMode(store2) {
    vue.watch(function() {
      return store2._state.data;
    }, function() {
      {
        assert(store2._committing, "do not mutate vuex store state outside mutation handlers.");
      }
    }, { deep: true, flush: "sync" });
  }
  function getNestedState(state2, path) {
    return path.reduce(function(state22, key) {
      return state22[key];
    }, state2);
  }
  function unifyObjectStyle(type3, payload, options) {
    if (isObject$3(type3) && type3.type) {
      options = payload;
      payload = type3;
      type3 = type3.type;
    }
    {
      assert(typeof type3 === "string", "expects string as the type, but found " + typeof type3 + ".");
    }
    return { type: type3, payload, options };
  }
  var LABEL_VUEX_BINDINGS = "vuex bindings";
  var MUTATIONS_LAYER_ID = "vuex:mutations";
  var ACTIONS_LAYER_ID = "vuex:actions";
  var INSPECTOR_ID = "vuex";
  var actionId = 0;
  function addDevtools(app, store2) {
    setupDevtoolsPlugin(
      {
        id: "org.vuejs.vuex",
        app,
        label: "Vuex",
        homepage: "https://next.vuex.vuejs.org/",
        logo: "https://vuejs.org/images/icons/favicon-96x96.png",
        packageName: "vuex",
        componentStateTypes: [LABEL_VUEX_BINDINGS]
      },
      function(api) {
        api.addTimelineLayer({
          id: MUTATIONS_LAYER_ID,
          label: "Vuex Mutations",
          color: COLOR_LIME_500
        });
        api.addTimelineLayer({
          id: ACTIONS_LAYER_ID,
          label: "Vuex Actions",
          color: COLOR_LIME_500
        });
        api.addInspector({
          id: INSPECTOR_ID,
          label: "Vuex",
          icon: "storage",
          treeFilterPlaceholder: "Filter stores..."
        });
        api.on.getInspectorTree(function(payload) {
          if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
            if (payload.filter) {
              var nodes = [];
              flattenStoreForInspectorTree(nodes, store2._modules.root, payload.filter, "");
              payload.rootNodes = nodes;
            } else {
              payload.rootNodes = [
                formatStoreForInspectorTree(store2._modules.root, "")
              ];
            }
          }
        });
        api.on.getInspectorState(function(payload) {
          if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
            var modulePath = payload.nodeId;
            makeLocalGetters(store2, modulePath);
            payload.state = formatStoreForInspectorState(
              getStoreModule(store2._modules, modulePath),
              modulePath === "root" ? store2.getters : store2._makeLocalGettersCache,
              modulePath
            );
          }
        });
        api.on.editInspectorState(function(payload) {
          if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
            var modulePath = payload.nodeId;
            var path = payload.path;
            if (modulePath !== "root") {
              path = modulePath.split("/").filter(Boolean).concat(path);
            }
            store2._withCommit(function() {
              payload.set(store2._state.data, path, payload.state.value);
            });
          }
        });
        store2.subscribe(function(mutation, state2) {
          var data = {};
          if (mutation.payload) {
            data.payload = mutation.payload;
          }
          data.state = state2;
          api.notifyComponentUpdate();
          api.sendInspectorTree(INSPECTOR_ID);
          api.sendInspectorState(INSPECTOR_ID);
          api.addTimelineEvent({
            layerId: MUTATIONS_LAYER_ID,
            event: {
              time: Date.now(),
              title: mutation.type,
              data
            }
          });
        });
        store2.subscribeAction({
          before: function(action, state2) {
            var data = {};
            if (action.payload) {
              data.payload = action.payload;
            }
            action._id = actionId++;
            action._time = Date.now();
            data.state = state2;
            api.addTimelineEvent({
              layerId: ACTIONS_LAYER_ID,
              event: {
                time: action._time,
                title: action.type,
                groupId: action._id,
                subtitle: "start",
                data
              }
            });
          },
          after: function(action, state2) {
            var data = {};
            var duration = Date.now() - action._time;
            data.duration = {
              _custom: {
                type: "duration",
                display: duration + "ms",
                tooltip: "Action duration",
                value: duration
              }
            };
            if (action.payload) {
              data.payload = action.payload;
            }
            data.state = state2;
            api.addTimelineEvent({
              layerId: ACTIONS_LAYER_ID,
              event: {
                time: Date.now(),
                title: action.type,
                groupId: action._id,
                subtitle: "end",
                data
              }
            });
          }
        });
      }
    );
  }
  var COLOR_LIME_500 = 8702998;
  var COLOR_DARK = 6710886;
  var COLOR_WHITE = 16777215;
  var TAG_NAMESPACED = {
    label: "namespaced",
    textColor: COLOR_WHITE,
    backgroundColor: COLOR_DARK
  };
  function extractNameFromPath(path) {
    return path && path !== "root" ? path.split("/").slice(-2, -1)[0] : "Root";
  }
  function formatStoreForInspectorTree(module2, path) {
    return {
      id: path || "root",
      // all modules end with a `/`, we want the last segment only
      // cart/ -> cart
      // nested/cart/ -> cart
      label: extractNameFromPath(path),
      tags: module2.namespaced ? [TAG_NAMESPACED] : [],
      children: Object.keys(module2._children).map(
        function(moduleName) {
          return formatStoreForInspectorTree(
            module2._children[moduleName],
            path + moduleName + "/"
          );
        }
      )
    };
  }
  function flattenStoreForInspectorTree(result, module2, filter, path) {
    if (path.includes(filter)) {
      result.push({
        id: path || "root",
        label: path.endsWith("/") ? path.slice(0, path.length - 1) : path || "Root",
        tags: module2.namespaced ? [TAG_NAMESPACED] : []
      });
    }
    Object.keys(module2._children).forEach(function(moduleName) {
      flattenStoreForInspectorTree(result, module2._children[moduleName], filter, path + moduleName + "/");
    });
  }
  function formatStoreForInspectorState(module2, getters, path) {
    getters = path === "root" ? getters : getters[path];
    var gettersKeys = Object.keys(getters);
    var storeState = {
      state: Object.keys(module2.state).map(function(key) {
        return {
          key,
          editable: true,
          value: module2.state[key]
        };
      })
    };
    if (gettersKeys.length) {
      var tree = transformPathsToObjectTree(getters);
      storeState.getters = Object.keys(tree).map(function(key) {
        return {
          key: key.endsWith("/") ? extractNameFromPath(key) : key,
          editable: false,
          value: canThrow(function() {
            return tree[key];
          })
        };
      });
    }
    return storeState;
  }
  function transformPathsToObjectTree(getters) {
    var result = {};
    Object.keys(getters).forEach(function(key) {
      var path = key.split("/");
      if (path.length > 1) {
        var target = result;
        var leafKey = path.pop();
        path.forEach(function(p2) {
          if (!target[p2]) {
            target[p2] = {
              _custom: {
                value: {},
                display: p2,
                tooltip: "Module",
                abstract: true
              }
            };
          }
          target = target[p2]._custom.value;
        });
        target[leafKey] = canThrow(function() {
          return getters[key];
        });
      } else {
        result[key] = canThrow(function() {
          return getters[key];
        });
      }
    });
    return result;
  }
  function getStoreModule(moduleMap, path) {
    var names2 = path.split("/").filter(function(n2) {
      return n2;
    });
    return names2.reduce(
      function(module2, moduleName, i2) {
        var child = module2[moduleName];
        if (!child) {
          throw new Error('Missing module "' + moduleName + '" for path "' + path + '".');
        }
        return i2 === names2.length - 1 ? child : child._children;
      },
      path === "root" ? moduleMap : moduleMap.root._children
    );
  }
  function canThrow(cb) {
    try {
      return cb();
    } catch (e) {
      return e;
    }
  }
  var Module = function Module2(rawModule, runtime) {
    this.runtime = runtime;
    this._children = /* @__PURE__ */ Object.create(null);
    this._rawModule = rawModule;
    var rawState = rawModule.state;
    this.state = (typeof rawState === "function" ? rawState() : rawState) || {};
  };
  var prototypeAccessors$1 = { namespaced: { configurable: true } };
  prototypeAccessors$1.namespaced.get = function() {
    return !!this._rawModule.namespaced;
  };
  Module.prototype.addChild = function addChild(key, module2) {
    this._children[key] = module2;
  };
  Module.prototype.removeChild = function removeChild(key) {
    delete this._children[key];
  };
  Module.prototype.getChild = function getChild(key) {
    return this._children[key];
  };
  Module.prototype.hasChild = function hasChild(key) {
    return key in this._children;
  };
  Module.prototype.update = function update(rawModule) {
    this._rawModule.namespaced = rawModule.namespaced;
    if (rawModule.actions) {
      this._rawModule.actions = rawModule.actions;
    }
    if (rawModule.mutations) {
      this._rawModule.mutations = rawModule.mutations;
    }
    if (rawModule.getters) {
      this._rawModule.getters = rawModule.getters;
    }
  };
  Module.prototype.forEachChild = function forEachChild(fn2) {
    forEachValue(this._children, fn2);
  };
  Module.prototype.forEachGetter = function forEachGetter(fn2) {
    if (this._rawModule.getters) {
      forEachValue(this._rawModule.getters, fn2);
    }
  };
  Module.prototype.forEachAction = function forEachAction(fn2) {
    if (this._rawModule.actions) {
      forEachValue(this._rawModule.actions, fn2);
    }
  };
  Module.prototype.forEachMutation = function forEachMutation(fn2) {
    if (this._rawModule.mutations) {
      forEachValue(this._rawModule.mutations, fn2);
    }
  };
  Object.defineProperties(Module.prototype, prototypeAccessors$1);
  var ModuleCollection = function ModuleCollection2(rawRootModule) {
    this.register([], rawRootModule, false);
  };
  ModuleCollection.prototype.get = function get2(path) {
    return path.reduce(function(module2, key) {
      return module2.getChild(key);
    }, this.root);
  };
  ModuleCollection.prototype.getNamespace = function getNamespace(path) {
    var module2 = this.root;
    return path.reduce(function(namespace, key) {
      module2 = module2.getChild(key);
      return namespace + (module2.namespaced ? key + "/" : "");
    }, "");
  };
  ModuleCollection.prototype.update = function update$1(rawRootModule) {
    update2([], this.root, rawRootModule);
  };
  ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
    var this$1$1 = this;
    if (runtime === void 0)
      runtime = true;
    {
      assertRawModule(path, rawModule);
    }
    var newModule = new Module(rawModule, runtime);
    if (path.length === 0) {
      this.root = newModule;
    } else {
      var parent2 = this.get(path.slice(0, -1));
      parent2.addChild(path[path.length - 1], newModule);
    }
    if (rawModule.modules) {
      forEachValue(rawModule.modules, function(rawChildModule, key) {
        this$1$1.register(path.concat(key), rawChildModule, runtime);
      });
    }
  };
  ModuleCollection.prototype.unregister = function unregister(path) {
    var parent2 = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    var child = parent2.getChild(key);
    if (!child) {
      {
        console.warn(
          "[vuex] trying to unregister module '" + key + "', which is not registered"
        );
      }
      return;
    }
    if (!child.runtime) {
      return;
    }
    parent2.removeChild(key);
  };
  ModuleCollection.prototype.isRegistered = function isRegistered(path) {
    var parent2 = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    if (parent2) {
      return parent2.hasChild(key);
    }
    return false;
  };
  function update2(path, targetModule, newModule) {
    {
      assertRawModule(path, newModule);
    }
    targetModule.update(newModule);
    if (newModule.modules) {
      for (var key in newModule.modules) {
        if (!targetModule.getChild(key)) {
          {
            console.warn(
              "[vuex] trying to add a new module '" + key + "' on hot reloading, manual reload is needed"
            );
          }
          return;
        }
        update2(
          path.concat(key),
          targetModule.getChild(key),
          newModule.modules[key]
        );
      }
    }
  }
  var functionAssert = {
    assert: function(value) {
      return typeof value === "function";
    },
    expected: "function"
  };
  var objectAssert = {
    assert: function(value) {
      return typeof value === "function" || typeof value === "object" && typeof value.handler === "function";
    },
    expected: 'function or object with "handler" function'
  };
  var assertTypes = {
    getters: functionAssert,
    mutations: functionAssert,
    actions: objectAssert
  };
  function assertRawModule(path, rawModule) {
    Object.keys(assertTypes).forEach(function(key) {
      if (!rawModule[key]) {
        return;
      }
      var assertOptions = assertTypes[key];
      forEachValue(rawModule[key], function(value, type3) {
        assert(
          assertOptions.assert(value),
          makeAssertionMessage(path, key, type3, value, assertOptions.expected)
        );
      });
    });
  }
  function makeAssertionMessage(path, key, type3, value, expected) {
    var buf = key + " should be " + expected + ' but "' + key + "." + type3 + '"';
    if (path.length > 0) {
      buf += ' in module "' + path.join(".") + '"';
    }
    buf += " is " + JSON.stringify(value) + ".";
    return buf;
  }
  function createStore$1(options) {
    return new Store$1(options);
  }
  var Store$1 = function Store2(options) {
    var this$1$1 = this;
    if (options === void 0)
      options = {};
    {
      assert(typeof Promise !== "undefined", "vuex requires a Promise polyfill in this browser.");
      assert(this instanceof Store2, "store must be called with the new operator.");
    }
    var plugins = options.plugins;
    if (plugins === void 0)
      plugins = [];
    var strict = options.strict;
    if (strict === void 0)
      strict = false;
    var devtools = options.devtools;
    this._committing = false;
    this._actions = /* @__PURE__ */ Object.create(null);
    this._actionSubscribers = [];
    this._mutations = /* @__PURE__ */ Object.create(null);
    this._wrappedGetters = /* @__PURE__ */ Object.create(null);
    this._modules = new ModuleCollection(options);
    this._modulesNamespaceMap = /* @__PURE__ */ Object.create(null);
    this._subscribers = [];
    this._makeLocalGettersCache = /* @__PURE__ */ Object.create(null);
    this._scope = null;
    this._devtools = devtools;
    var store2 = this;
    var ref2 = this;
    var dispatch2 = ref2.dispatch;
    var commit2 = ref2.commit;
    this.dispatch = function boundDispatch(type3, payload) {
      return dispatch2.call(store2, type3, payload);
    };
    this.commit = function boundCommit(type3, payload, options2) {
      return commit2.call(store2, type3, payload, options2);
    };
    this.strict = strict;
    var state2 = this._modules.root.state;
    installModule(this, state2, [], this._modules.root);
    resetStoreState(this, state2);
    plugins.forEach(function(plugin) {
      return plugin(this$1$1);
    });
  };
  var prototypeAccessors = { state: { configurable: true } };
  Store$1.prototype.install = function install(app, injectKey) {
    app.provide(injectKey || storeKey, this);
    app.config.globalProperties.$store = this;
    var useDevtools = this._devtools !== void 0 ? this._devtools : true;
    if (useDevtools) {
      addDevtools(app, this);
    }
  };
  prototypeAccessors.state.get = function() {
    return this._state.data;
  };
  prototypeAccessors.state.set = function(v2) {
    {
      assert(false, "use store.replaceState() to explicit replace store state.");
    }
  };
  Store$1.prototype.commit = function commit(_type, _payload, _options) {
    var this$1$1 = this;
    var ref2 = unifyObjectStyle(_type, _payload, _options);
    var type3 = ref2.type;
    var payload = ref2.payload;
    var options = ref2.options;
    var mutation = { type: type3, payload };
    var entry = this._mutations[type3];
    if (!entry) {
      {
        console.error("[vuex] unknown mutation type: " + type3);
      }
      return;
    }
    this._withCommit(function() {
      entry.forEach(function commitIterator(handler) {
        handler(payload);
      });
    });
    this._subscribers.slice().forEach(function(sub) {
      return sub(mutation, this$1$1.state);
    });
    if (options && options.silent) {
      console.warn(
        "[vuex] mutation type: " + type3 + ". Silent option has been removed. Use the filter functionality in the vue-devtools"
      );
    }
  };
  Store$1.prototype.dispatch = function dispatch(_type, _payload) {
    var this$1$1 = this;
    var ref2 = unifyObjectStyle(_type, _payload);
    var type3 = ref2.type;
    var payload = ref2.payload;
    var action = { type: type3, payload };
    var entry = this._actions[type3];
    if (!entry) {
      {
        console.error("[vuex] unknown action type: " + type3);
      }
      return;
    }
    try {
      this._actionSubscribers.slice().filter(function(sub) {
        return sub.before;
      }).forEach(function(sub) {
        return sub.before(action, this$1$1.state);
      });
    } catch (e) {
      {
        console.warn("[vuex] error in before action subscribers: ");
        console.error(e);
      }
    }
    var result = entry.length > 1 ? Promise.all(entry.map(function(handler) {
      return handler(payload);
    })) : entry[0](payload);
    return new Promise(function(resolve, reject) {
      result.then(function(res) {
        try {
          this$1$1._actionSubscribers.filter(function(sub) {
            return sub.after;
          }).forEach(function(sub) {
            return sub.after(action, this$1$1.state);
          });
        } catch (e) {
          {
            console.warn("[vuex] error in after action subscribers: ");
            console.error(e);
          }
        }
        resolve(res);
      }, function(error) {
        try {
          this$1$1._actionSubscribers.filter(function(sub) {
            return sub.error;
          }).forEach(function(sub) {
            return sub.error(action, this$1$1.state, error);
          });
        } catch (e) {
          {
            console.warn("[vuex] error in error action subscribers: ");
            console.error(e);
          }
        }
        reject(error);
      });
    });
  };
  Store$1.prototype.subscribe = function subscribe(fn2, options) {
    return genericSubscribe(fn2, this._subscribers, options);
  };
  Store$1.prototype.subscribeAction = function subscribeAction(fn2, options) {
    var subs = typeof fn2 === "function" ? { before: fn2 } : fn2;
    return genericSubscribe(subs, this._actionSubscribers, options);
  };
  Store$1.prototype.watch = function watch$1(getter, cb, options) {
    var this$1$1 = this;
    {
      assert(typeof getter === "function", "store.watch only accepts a function.");
    }
    return vue.watch(function() {
      return getter(this$1$1.state, this$1$1.getters);
    }, cb, Object.assign({}, options));
  };
  Store$1.prototype.replaceState = function replaceState(state2) {
    var this$1$1 = this;
    this._withCommit(function() {
      this$1$1._state.data = state2;
    });
  };
  Store$1.prototype.registerModule = function registerModule(path, rawModule, options) {
    if (options === void 0)
      options = {};
    if (typeof path === "string") {
      path = [path];
    }
    {
      assert(Array.isArray(path), "module path must be a string or an Array.");
      assert(path.length > 0, "cannot register the root module by using registerModule.");
    }
    this._modules.register(path, rawModule);
    installModule(this, this.state, path, this._modules.get(path), options.preserveState);
    resetStoreState(this, this.state);
  };
  Store$1.prototype.unregisterModule = function unregisterModule(path) {
    var this$1$1 = this;
    if (typeof path === "string") {
      path = [path];
    }
    {
      assert(Array.isArray(path), "module path must be a string or an Array.");
    }
    this._modules.unregister(path);
    this._withCommit(function() {
      var parentState = getNestedState(this$1$1.state, path.slice(0, -1));
      delete parentState[path[path.length - 1]];
    });
    resetStore(this);
  };
  Store$1.prototype.hasModule = function hasModule(path) {
    if (typeof path === "string") {
      path = [path];
    }
    {
      assert(Array.isArray(path), "module path must be a string or an Array.");
    }
    return this._modules.isRegistered(path);
  };
  Store$1.prototype.hotUpdate = function hotUpdate(newOptions) {
    this._modules.update(newOptions);
    resetStore(this, true);
  };
  Store$1.prototype._withCommit = function _withCommit(fn2) {
    var committing = this._committing;
    this._committing = true;
    fn2();
    this._committing = committing;
  };
  Object.defineProperties(Store$1.prototype, prototypeAccessors);
  var mapMutations = normalizeNamespace(function(namespace, mutations2) {
    var res = {};
    if (!isValidMap(mutations2)) {
      console.error("[vuex] mapMutations: mapper parameter must be either an Array or an Object");
    }
    normalizeMap(mutations2).forEach(function(ref2) {
      var key = ref2.key;
      var val = ref2.val;
      res[key] = function mappedMutation() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var commit2 = this.$store.commit;
        if (namespace) {
          var module2 = getModuleByNamespace(this.$store, "mapMutations", namespace);
          if (!module2) {
            return;
          }
          commit2 = module2.context.commit;
        }
        return typeof val === "function" ? val.apply(this, [commit2].concat(args)) : commit2.apply(this.$store, [val].concat(args));
      };
    });
    return res;
  });
  function normalizeMap(map2) {
    if (!isValidMap(map2)) {
      return [];
    }
    return Array.isArray(map2) ? map2.map(function(key) {
      return { key, val: key };
    }) : Object.keys(map2).map(function(key) {
      return { key, val: map2[key] };
    });
  }
  function isValidMap(map2) {
    return Array.isArray(map2) || isObject$3(map2);
  }
  function normalizeNamespace(fn2) {
    return function(namespace, map2) {
      if (typeof namespace !== "string") {
        map2 = namespace;
        namespace = "";
      } else if (namespace.charAt(namespace.length - 1) !== "/") {
        namespace += "/";
      }
      return fn2(namespace, map2);
    };
  }
  function getModuleByNamespace(store2, helper, namespace) {
    var module2 = store2._modulesNamespaceMap[namespace];
    if (!module2) {
      console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
    }
    return module2;
  }
  const state = {
    userInfo: uni.getStorageSync("userInfo")
  };
  const mutations = {
    setUserInfo(state2, userInfo) {
      state2.userInfo = userInfo;
      uni.setStorageSync("userInfo", userInfo);
      uni.setStorageSync("moto-pc-token", userInfo.token);
    }
  };
  const store = createStore$1({
    state,
    mutations
  });
  const http$4 = new Request();
  const host = "/devHost";
  let requestConfig = {
    baseURL: host,
    header: {
      // token: uni.getStorageSync('token') !== undefined ? uni.getStorageSync('token') : ''
    },
    method: "GET",
    dataType: "json",
    // 注：如果局部custom与全局custom有同名属性，则后面的属性会覆盖前面的属性，相当于Object.assign(全局，局部)
    custom: {},
    // 全局自定义参数默认值
    timeout: 6e4,
    sslVerify: true,
    firstIpv4: false
    // DNS解析时优先使用ipv4 仅 App-Android 支持 (HBuilderX 2.8.0+)
    // 局部优先级高于全局，返回当前请求的task,options。请勿在此处修改options。非必填
    // getTask: (task, options) => {
    // 相当于设置了请求超时时间500ms
    //   setTimeout(() => {
    //     task.abort()
    //   }, 500)
    // },
    // 全局自定义验证器。参数为statusCode 且必存在，不用判断空情况。
    // validateStatus: (statusCode) => { // statusCode 必存在。此处示例为全局默认配置
    //     return statusCode >= 200 && statusCode < 300
    // }
  };
  http$4.config = requestConfig;
  http$4.config.header.token = "ZSYd47ddXcuY/rCY2YT0cg==";
  http$4.interceptors.response.use((response) => {
    if (response.data.code === 402) {
      uni.showToast({
        title: response.data.message,
        icon: "none"
      });
    } else if (response.data.code === 406)
      ;
    else if (response.data.code === 407) {
      uni.showToast({
        title: "该账号已注销，暂时无法登录",
        icon: "none"
      });
    } else if (response.data.code === 408) {
      formatAppLog("log", "at api/http.js:74", "用户被封");
      getApp().$openApi.logout();
      uni.showModal({
        title: "提示",
        content: "由于违反用户协议，您已被封禁，如有疑问请联系客服",
        showCancel: false,
        success: (res) => {
          if (res.confirm)
            ;
        }
      });
    } else if (response.data.code !== 200 && true)
      ;
    return response;
  }, (response) => {
    formatAppLog("log", "at api/http.js:96", response);
    return Promise.reject(response);
  });
  const request = {
    http: http$4
  };
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x2) {
    return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
  }
  function getAugmentedNamespace(n2) {
    if (n2.__esModule)
      return n2;
    var f2 = n2.default;
    if (typeof f2 == "function") {
      var a2 = function a3() {
        if (this instanceof a3) {
          return Reflect.construct(f2, arguments, this.constructor);
        }
        return f2.apply(this, arguments);
      };
      a2.prototype = f2.prototype;
    } else
      a2 = {};
    Object.defineProperty(a2, "__esModule", { value: true });
    Object.keys(n2).forEach(function(k) {
      var d2 = Object.getOwnPropertyDescriptor(n2, k);
      Object.defineProperty(a2, k, d2.get ? d2 : {
        enumerable: true,
        get: function() {
          return n2[k];
        }
      });
    });
    return a2;
  }
  var conversion = { exports: {} };
  (function(module2, exports2) {
    !function(t2, e) {
      module2.exports = e();
    }(commonjsGlobal, function() {
      return function(t2) {
        var e = {};
        function n2(r2) {
          if (e[r2])
            return e[r2].exports;
          var o2 = e[r2] = { i: r2, l: false, exports: {} };
          return t2[r2].call(o2.exports, o2, o2.exports, n2), o2.l = true, o2.exports;
        }
        return n2.m = t2, n2.c = e, n2.d = function(t3, e2, r2) {
          n2.o(t3, e2) || Object.defineProperty(t3, e2, { enumerable: true, get: r2 });
        }, n2.r = function(t3) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t3, "__esModule", { value: true });
        }, n2.t = function(t3, e2) {
          if (1 & e2 && (t3 = n2(t3)), 8 & e2)
            return t3;
          if (4 & e2 && "object" == typeof t3 && t3 && t3.__esModule)
            return t3;
          var r2 = /* @__PURE__ */ Object.create(null);
          if (n2.r(r2), Object.defineProperty(r2, "default", { enumerable: true, value: t3 }), 2 & e2 && "string" != typeof t3)
            for (var o2 in t3)
              n2.d(r2, o2, (function(e3) {
                return t3[e3];
              }).bind(null, o2));
          return r2;
        }, n2.n = function(t3) {
          var e2 = t3 && t3.__esModule ? function() {
            return t3.default;
          } : function() {
            return t3;
          };
          return n2.d(e2, "a", e2), e2;
        }, n2.o = function(t3, e2) {
          return Object.prototype.hasOwnProperty.call(t3, e2);
        }, n2.p = "", n2(n2.s = 0);
      }([function(t2, e, n2) {
        var r2;
        function o2(t3) {
          return ["image/png", "image/jpeg", "image/gif"].some((e2) => e2 === t3);
        }
        n2.r(e), n2.d(e, "canvastoDataURL", function() {
          return a2;
        }), n2.d(e, "canvastoFile", function() {
          return c2;
        }), n2.d(e, "dataURLtoFile", function() {
          return s2;
        }), n2.d(e, "dataURLtoImage", function() {
          return l2;
        }), n2.d(e, "downloadFile", function() {
          return d2;
        }), n2.d(e, "filetoDataURL", function() {
          return f2;
        }), n2.d(e, "imagetoCanvas", function() {
          return g2;
        }), n2.d(e, "urltoBlob", function() {
          return w2;
        }), n2.d(e, "urltoImage", function() {
          return m2;
        }), n2.d(e, "compress", function() {
          return p2;
        }), n2.d(e, "compressAccurately", function() {
          return b2;
        }), n2.d(e, "EImageType", function() {
          return r2;
        }), function(t3) {
          t3.PNG = "image/png", t3.JPEG = "image/jpeg", t3.GIF = "image/gif";
        }(r2 || (r2 = {}));
        var i2 = function(t3, e2, n3, r3) {
          return new (n3 || (n3 = Promise))(function(o3, i3) {
            function a3(t4) {
              try {
                u3(r3.next(t4));
              } catch (t5) {
                i3(t5);
              }
            }
            function c3(t4) {
              try {
                u3(r3.throw(t4));
              } catch (t5) {
                i3(t5);
              }
            }
            function u3(t4) {
              var e3;
              t4.done ? o3(t4.value) : (e3 = t4.value, e3 instanceof n3 ? e3 : new n3(function(t5) {
                t5(e3);
              })).then(a3, c3);
            }
            u3((r3 = r3.apply(t3, e2 || [])).next());
          });
        };
        function a2(t3, e2 = 0.92, n3 = r2.JPEG) {
          return i2(this, void 0, void 0, function* () {
            return o2(n3) || (n3 = r2.JPEG), t3.toDataURL(n3, e2);
          });
        }
        function c2(t3, e2 = 0.92, n3 = r2.JPEG) {
          return new Promise((r3) => t3.toBlob((t4) => r3(t4), n3, e2));
        }
        var u2 = function(t3, e2, n3, r3) {
          return new (n3 || (n3 = Promise))(function(o3, i3) {
            function a3(t4) {
              try {
                u3(r3.next(t4));
              } catch (t5) {
                i3(t5);
              }
            }
            function c3(t4) {
              try {
                u3(r3.throw(t4));
              } catch (t5) {
                i3(t5);
              }
            }
            function u3(t4) {
              var e3;
              t4.done ? o3(t4.value) : (e3 = t4.value, e3 instanceof n3 ? e3 : new n3(function(t5) {
                t5(e3);
              })).then(a3, c3);
            }
            u3((r3 = r3.apply(t3, e2 || [])).next());
          });
        };
        function s2(t3, e2) {
          return u2(this, void 0, void 0, function* () {
            const n3 = t3.split(",");
            let r3 = n3[0].match(/:(.*?);/)[1];
            const i3 = atob(n3[1]);
            let a3 = i3.length;
            const c3 = new Uint8Array(a3);
            for (; a3--; )
              c3[a3] = i3.charCodeAt(a3);
            return o2(e2) && (r3 = e2), new Blob([c3], { type: r3 });
          });
        }
        function l2(t3) {
          return new Promise((e2, n3) => {
            const r3 = new Image();
            r3.onload = () => e2(r3), r3.onerror = () => n3(new Error("dataURLtoImage(): dataURL is illegal")), r3.src = t3;
          });
        }
        function d2(t3, e2) {
          const n3 = document.createElement("a");
          n3.href = window.URL.createObjectURL(t3), n3.download = e2 || Date.now().toString(36), document.body.appendChild(n3);
          const r3 = document.createEvent("MouseEvents");
          r3.initEvent("click", false, false), n3.dispatchEvent(r3), document.body.removeChild(n3);
        }
        function f2(t3) {
          return new Promise((e2) => {
            const n3 = new FileReader();
            n3.onloadend = (t4) => e2(t4.target.result), n3.readAsDataURL(t3);
          });
        }
        var h2 = function(t3, e2, n3, r3) {
          return new (n3 || (n3 = Promise))(function(o3, i3) {
            function a3(t4) {
              try {
                u3(r3.next(t4));
              } catch (t5) {
                i3(t5);
              }
            }
            function c3(t4) {
              try {
                u3(r3.throw(t4));
              } catch (t5) {
                i3(t5);
              }
            }
            function u3(t4) {
              var e3;
              t4.done ? o3(t4.value) : (e3 = t4.value, e3 instanceof n3 ? e3 : new n3(function(t5) {
                t5(e3);
              })).then(a3, c3);
            }
            u3((r3 = r3.apply(t3, e2 || [])).next());
          });
        };
        function g2(t3, e2 = {}) {
          return h2(this, void 0, void 0, function* () {
            const n3 = Object.assign({}, e2), r3 = document.createElement("canvas"), o3 = r3.getContext("2d");
            let i3, a3;
            for (const t4 in n3)
              Object.prototype.hasOwnProperty.call(n3, t4) && (n3[t4] = Number(n3[t4]));
            if (n3.scale) {
              const e3 = n3.scale > 0 && n3.scale < 10 ? n3.scale : 1;
              a3 = t3.width * e3, i3 = t3.height * e3;
            } else
              a3 = n3.width || n3.height * t3.width / t3.height || t3.width, i3 = n3.height || n3.width * t3.height / t3.width || t3.height;
            switch ([5, 6, 7, 8].some((t4) => t4 === n3.orientation) ? (r3.height = a3, r3.width = i3) : (r3.height = i3, r3.width = a3), n3.orientation) {
              case 3:
                o3.rotate(180 * Math.PI / 180), o3.drawImage(t3, -r3.width, -r3.height, r3.width, r3.height);
                break;
              case 6:
                o3.rotate(90 * Math.PI / 180), o3.drawImage(t3, 0, -r3.width, r3.height, r3.width);
                break;
              case 8:
                o3.rotate(270 * Math.PI / 180), o3.drawImage(t3, -r3.height, 0, r3.height, r3.width);
                break;
              case 2:
                o3.translate(r3.width, 0), o3.scale(-1, 1), o3.drawImage(t3, 0, 0, r3.width, r3.height);
                break;
              case 4:
                o3.translate(r3.width, 0), o3.scale(-1, 1), o3.rotate(180 * Math.PI / 180), o3.drawImage(t3, -r3.width, -r3.height, r3.width, r3.height);
                break;
              case 5:
                o3.translate(r3.width, 0), o3.scale(-1, 1), o3.rotate(90 * Math.PI / 180), o3.drawImage(t3, 0, -r3.width, r3.height, r3.width);
                break;
              case 7:
                o3.translate(r3.width, 0), o3.scale(-1, 1), o3.rotate(270 * Math.PI / 180), o3.drawImage(t3, -r3.height, 0, r3.height, r3.width);
                break;
              default:
                o3.drawImage(t3, 0, 0, r3.width, r3.height);
            }
            return r3;
          });
        }
        function w2(t3) {
          return fetch(t3).then((t4) => t4.blob());
        }
        function m2(t3) {
          return new Promise((e2, n3) => {
            const r3 = new Image();
            r3.onload = () => e2(r3), r3.onerror = () => n3(new Error("urltoImage(): Image failed to load, please check the image URL")), r3.src = t3;
          });
        }
        var y2 = function(t3, e2, n3, r3) {
          return new (n3 || (n3 = Promise))(function(o3, i3) {
            function a3(t4) {
              try {
                u3(r3.next(t4));
              } catch (t5) {
                i3(t5);
              }
            }
            function c3(t4) {
              try {
                u3(r3.throw(t4));
              } catch (t5) {
                i3(t5);
              }
            }
            function u3(t4) {
              var e3;
              t4.done ? o3(t4.value) : (e3 = t4.value, e3 instanceof n3 ? e3 : new n3(function(t5) {
                t5(e3);
              })).then(a3, c3);
            }
            u3((r3 = r3.apply(t3, e2 || [])).next());
          });
        };
        function p2(t3, e2 = {}) {
          return y2(this, void 0, void 0, function* () {
            if (!(t3 instanceof Blob))
              throw new Error("compress(): First arg must be a Blob object or a File object.");
            if ("object" != typeof e2 && (e2 = Object.assign({ quality: e2 })), e2.quality = Number(e2.quality), Number.isNaN(e2.quality))
              return t3;
            const n3 = yield f2(t3);
            let i3 = n3.split(",")[0].match(/:(.*?);/)[1], c3 = r2.JPEG;
            o2(e2.type) && (c3 = e2.type, i3 = e2.type);
            const u3 = yield l2(n3), d3 = yield g2(u3, Object.assign({}, e2)), h3 = yield a2(d3, e2.quality, c3), w3 = yield s2(h3, i3);
            return w3.size > t3.size ? t3 : w3;
          });
        }
        function b2(t3, e2 = {}) {
          return y2(this, void 0, void 0, function* () {
            if (!(t3 instanceof Blob))
              throw new Error("compressAccurately(): First arg must be a Blob object or a File object.");
            if ("object" != typeof e2 && (e2 = Object.assign({ size: e2 })), e2.size = Number(e2.size), Number.isNaN(e2.size))
              return t3;
            if (1024 * e2.size > t3.size)
              return t3;
            e2.accuracy = Number(e2.accuracy), (!e2.accuracy || e2.accuracy < 0.8 || e2.accuracy > 0.99) && (e2.accuracy = 0.95);
            const n3 = e2.size * (2 - e2.accuracy) * 1024, i3 = 1024 * e2.size, c3 = e2.size * e2.accuracy * 1024, u3 = yield f2(t3);
            let d3 = u3.split(",")[0].match(/:(.*?);/)[1], h3 = r2.JPEG;
            o2(e2.type) && (h3 = e2.type, d3 = e2.type);
            const w3 = yield l2(u3), m3 = yield g2(w3, Object.assign({}, e2));
            let y3, p3 = 0.5;
            const b3 = [null, null];
            for (let t4 = 1; t4 <= 7; t4++) {
              y3 = yield a2(m3, p3, h3);
              const e3 = 0.75 * y3.length;
              if (7 === t4) {
                (n3 < e3 || c3 > e3) && (y3 = [y3, ...b3].filter((t5) => t5).sort((t5, e4) => Math.abs(0.75 * t5.length - i3) - Math.abs(0.75 * e4.length - i3))[0]);
                break;
              }
              if (n3 < e3)
                b3[1] = y3, p3 -= Math.pow(0.5, t4 + 1);
              else {
                if (!(c3 > e3))
                  break;
                b3[0] = y3, p3 += Math.pow(0.5, t4 + 1);
              }
            }
            const v2 = yield s2(y3, d3);
            return v2.size > t3.size ? t3 : v2;
          });
        }
      }]);
    });
  })(conversion);
  const pages = [
    {
      path: "pages/moto-cms/article-list",
      style: {
        navigationBarTitleText: ""
      }
    },
    {
      path: "pages/moto-cms/article-editor",
      style: {
        topWindow: false,
        leftWindow: false,
        navigationBarTitleText: "文章编辑"
      }
    },
    {
      path: "pages/login/login",
      style: {
        topWindow: false,
        leftWindow: false,
        navigationBarTitleText: ""
      }
    }
  ];
  const topWindow = {
    path: "windows/topWindow",
    style: {
      height: "60px"
    },
    matchMedia: {
      minWidth: 0
    }
  };
  const leftWindow = {
    path: "windows/leftWindow",
    style: {
      width: "240px"
    }
  };
  const globalStyle = {
    navigationBarTextStyle: "black",
    navigationBarTitleText: "uni-app",
    navigationStyle: "custom",
    navigationBarBackgroundColor: "#F8F8F8",
    backgroundColor: "#F8F8F8"
  };
  const PAGE_DATA = {
    pages,
    topWindow,
    leftWindow,
    globalStyle
  };
  var define_process_env_UNI_SECURE_NETWORK_CONFIG_default = [];
  function t$2(e2) {
    return e2 && e2.__esModule && Object.prototype.hasOwnProperty.call(e2, "default") ? e2.default : e2;
  }
  function n(e2, t2, n2) {
    return e2(n2 = { path: t2, exports: {}, require: function(e3, t3) {
      return function() {
        throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
      }(null == t3 && n2.path);
    } }, n2.exports), n2.exports;
  }
  var s$1 = n(function(e2, t2) {
    var n2;
    e2.exports = (n2 = n2 || function(e3, t3) {
      var n3 = Object.create || /* @__PURE__ */ function() {
        function e4() {
        }
        return function(t4) {
          var n4;
          return e4.prototype = t4, n4 = new e4(), e4.prototype = null, n4;
        };
      }(), s2 = {}, r2 = s2.lib = {}, i2 = r2.Base = { extend: function(e4) {
        var t4 = n3(this);
        return e4 && t4.mixIn(e4), t4.hasOwnProperty("init") && this.init !== t4.init || (t4.init = function() {
          t4.$super.init.apply(this, arguments);
        }), t4.init.prototype = t4, t4.$super = this, t4;
      }, create: function() {
        var e4 = this.extend();
        return e4.init.apply(e4, arguments), e4;
      }, init: function() {
      }, mixIn: function(e4) {
        for (var t4 in e4)
          e4.hasOwnProperty(t4) && (this[t4] = e4[t4]);
        e4.hasOwnProperty("toString") && (this.toString = e4.toString);
      }, clone: function() {
        return this.init.prototype.extend(this);
      } }, o2 = r2.WordArray = i2.extend({ init: function(e4, n4) {
        e4 = this.words = e4 || [], this.sigBytes = n4 != t3 ? n4 : 4 * e4.length;
      }, toString: function(e4) {
        return (e4 || c2).stringify(this);
      }, concat: function(e4) {
        var t4 = this.words, n4 = e4.words, s3 = this.sigBytes, r3 = e4.sigBytes;
        if (this.clamp(), s3 % 4)
          for (var i3 = 0; i3 < r3; i3++) {
            var o3 = n4[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255;
            t4[s3 + i3 >>> 2] |= o3 << 24 - (s3 + i3) % 4 * 8;
          }
        else
          for (i3 = 0; i3 < r3; i3 += 4)
            t4[s3 + i3 >>> 2] = n4[i3 >>> 2];
        return this.sigBytes += r3, this;
      }, clamp: function() {
        var t4 = this.words, n4 = this.sigBytes;
        t4[n4 >>> 2] &= 4294967295 << 32 - n4 % 4 * 8, t4.length = e3.ceil(n4 / 4);
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4.words = this.words.slice(0), e4;
      }, random: function(t4) {
        for (var n4, s3 = [], r3 = function(t5) {
          t5 = t5;
          var n5 = 987654321, s4 = 4294967295;
          return function() {
            var r4 = ((n5 = 36969 * (65535 & n5) + (n5 >> 16) & s4) << 16) + (t5 = 18e3 * (65535 & t5) + (t5 >> 16) & s4) & s4;
            return r4 /= 4294967296, (r4 += 0.5) * (e3.random() > 0.5 ? 1 : -1);
          };
        }, i3 = 0; i3 < t4; i3 += 4) {
          var a3 = r3(4294967296 * (n4 || e3.random()));
          n4 = 987654071 * a3(), s3.push(4294967296 * a3() | 0);
        }
        return new o2.init(s3, t4);
      } }), a2 = s2.enc = {}, c2 = a2.Hex = { stringify: function(e4) {
        for (var t4 = e4.words, n4 = e4.sigBytes, s3 = [], r3 = 0; r3 < n4; r3++) {
          var i3 = t4[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255;
          s3.push((i3 >>> 4).toString(16)), s3.push((15 & i3).toString(16));
        }
        return s3.join("");
      }, parse: function(e4) {
        for (var t4 = e4.length, n4 = [], s3 = 0; s3 < t4; s3 += 2)
          n4[s3 >>> 3] |= parseInt(e4.substr(s3, 2), 16) << 24 - s3 % 8 * 4;
        return new o2.init(n4, t4 / 2);
      } }, u2 = a2.Latin1 = { stringify: function(e4) {
        for (var t4 = e4.words, n4 = e4.sigBytes, s3 = [], r3 = 0; r3 < n4; r3++) {
          var i3 = t4[r3 >>> 2] >>> 24 - r3 % 4 * 8 & 255;
          s3.push(String.fromCharCode(i3));
        }
        return s3.join("");
      }, parse: function(e4) {
        for (var t4 = e4.length, n4 = [], s3 = 0; s3 < t4; s3++)
          n4[s3 >>> 2] |= (255 & e4.charCodeAt(s3)) << 24 - s3 % 4 * 8;
        return new o2.init(n4, t4);
      } }, h2 = a2.Utf8 = { stringify: function(e4) {
        try {
          return decodeURIComponent(escape(u2.stringify(e4)));
        } catch (e5) {
          throw new Error("Malformed UTF-8 data");
        }
      }, parse: function(e4) {
        return u2.parse(unescape(encodeURIComponent(e4)));
      } }, l2 = r2.BufferedBlockAlgorithm = i2.extend({ reset: function() {
        this._data = new o2.init(), this._nDataBytes = 0;
      }, _append: function(e4) {
        "string" == typeof e4 && (e4 = h2.parse(e4)), this._data.concat(e4), this._nDataBytes += e4.sigBytes;
      }, _process: function(t4) {
        var n4 = this._data, s3 = n4.words, r3 = n4.sigBytes, i3 = this.blockSize, a3 = r3 / (4 * i3), c3 = (a3 = t4 ? e3.ceil(a3) : e3.max((0 | a3) - this._minBufferSize, 0)) * i3, u3 = e3.min(4 * c3, r3);
        if (c3) {
          for (var h3 = 0; h3 < c3; h3 += i3)
            this._doProcessBlock(s3, h3);
          var l3 = s3.splice(0, c3);
          n4.sigBytes -= u3;
        }
        return new o2.init(l3, u3);
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4._data = this._data.clone(), e4;
      }, _minBufferSize: 0 });
      r2.Hasher = l2.extend({ cfg: i2.extend(), init: function(e4) {
        this.cfg = this.cfg.extend(e4), this.reset();
      }, reset: function() {
        l2.reset.call(this), this._doReset();
      }, update: function(e4) {
        return this._append(e4), this._process(), this;
      }, finalize: function(e4) {
        return e4 && this._append(e4), this._doFinalize();
      }, blockSize: 16, _createHelper: function(e4) {
        return function(t4, n4) {
          return new e4.init(n4).finalize(t4);
        };
      }, _createHmacHelper: function(e4) {
        return function(t4, n4) {
          return new d2.HMAC.init(e4, n4).finalize(t4);
        };
      } });
      var d2 = s2.algo = {};
      return s2;
    }(Math), n2);
  }), r = s$1, i = (n(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r, function(e3) {
      var t3 = n2, s2 = t3.lib, r2 = s2.WordArray, i2 = s2.Hasher, o2 = t3.algo, a2 = [];
      !function() {
        for (var t4 = 0; t4 < 64; t4++)
          a2[t4] = 4294967296 * e3.abs(e3.sin(t4 + 1)) | 0;
      }();
      var c2 = o2.MD5 = i2.extend({ _doReset: function() {
        this._hash = new r2.init([1732584193, 4023233417, 2562383102, 271733878]);
      }, _doProcessBlock: function(e4, t4) {
        for (var n3 = 0; n3 < 16; n3++) {
          var s3 = t4 + n3, r3 = e4[s3];
          e4[s3] = 16711935 & (r3 << 8 | r3 >>> 24) | 4278255360 & (r3 << 24 | r3 >>> 8);
        }
        var i3 = this._hash.words, o3 = e4[t4 + 0], c3 = e4[t4 + 1], p2 = e4[t4 + 2], f2 = e4[t4 + 3], g2 = e4[t4 + 4], m2 = e4[t4 + 5], y2 = e4[t4 + 6], _2 = e4[t4 + 7], w2 = e4[t4 + 8], v2 = e4[t4 + 9], I2 = e4[t4 + 10], S2 = e4[t4 + 11], b2 = e4[t4 + 12], k2 = e4[t4 + 13], A2 = e4[t4 + 14], C2 = e4[t4 + 15], P2 = i3[0], T2 = i3[1], x2 = i3[2], O2 = i3[3];
        P2 = u2(P2, T2, x2, O2, o3, 7, a2[0]), O2 = u2(O2, P2, T2, x2, c3, 12, a2[1]), x2 = u2(x2, O2, P2, T2, p2, 17, a2[2]), T2 = u2(T2, x2, O2, P2, f2, 22, a2[3]), P2 = u2(P2, T2, x2, O2, g2, 7, a2[4]), O2 = u2(O2, P2, T2, x2, m2, 12, a2[5]), x2 = u2(x2, O2, P2, T2, y2, 17, a2[6]), T2 = u2(T2, x2, O2, P2, _2, 22, a2[7]), P2 = u2(P2, T2, x2, O2, w2, 7, a2[8]), O2 = u2(O2, P2, T2, x2, v2, 12, a2[9]), x2 = u2(x2, O2, P2, T2, I2, 17, a2[10]), T2 = u2(T2, x2, O2, P2, S2, 22, a2[11]), P2 = u2(P2, T2, x2, O2, b2, 7, a2[12]), O2 = u2(O2, P2, T2, x2, k2, 12, a2[13]), x2 = u2(x2, O2, P2, T2, A2, 17, a2[14]), P2 = h2(P2, T2 = u2(T2, x2, O2, P2, C2, 22, a2[15]), x2, O2, c3, 5, a2[16]), O2 = h2(O2, P2, T2, x2, y2, 9, a2[17]), x2 = h2(x2, O2, P2, T2, S2, 14, a2[18]), T2 = h2(T2, x2, O2, P2, o3, 20, a2[19]), P2 = h2(P2, T2, x2, O2, m2, 5, a2[20]), O2 = h2(O2, P2, T2, x2, I2, 9, a2[21]), x2 = h2(x2, O2, P2, T2, C2, 14, a2[22]), T2 = h2(T2, x2, O2, P2, g2, 20, a2[23]), P2 = h2(P2, T2, x2, O2, v2, 5, a2[24]), O2 = h2(O2, P2, T2, x2, A2, 9, a2[25]), x2 = h2(x2, O2, P2, T2, f2, 14, a2[26]), T2 = h2(T2, x2, O2, P2, w2, 20, a2[27]), P2 = h2(P2, T2, x2, O2, k2, 5, a2[28]), O2 = h2(O2, P2, T2, x2, p2, 9, a2[29]), x2 = h2(x2, O2, P2, T2, _2, 14, a2[30]), P2 = l2(P2, T2 = h2(T2, x2, O2, P2, b2, 20, a2[31]), x2, O2, m2, 4, a2[32]), O2 = l2(O2, P2, T2, x2, w2, 11, a2[33]), x2 = l2(x2, O2, P2, T2, S2, 16, a2[34]), T2 = l2(T2, x2, O2, P2, A2, 23, a2[35]), P2 = l2(P2, T2, x2, O2, c3, 4, a2[36]), O2 = l2(O2, P2, T2, x2, g2, 11, a2[37]), x2 = l2(x2, O2, P2, T2, _2, 16, a2[38]), T2 = l2(T2, x2, O2, P2, I2, 23, a2[39]), P2 = l2(P2, T2, x2, O2, k2, 4, a2[40]), O2 = l2(O2, P2, T2, x2, o3, 11, a2[41]), x2 = l2(x2, O2, P2, T2, f2, 16, a2[42]), T2 = l2(T2, x2, O2, P2, y2, 23, a2[43]), P2 = l2(P2, T2, x2, O2, v2, 4, a2[44]), O2 = l2(O2, P2, T2, x2, b2, 11, a2[45]), x2 = l2(x2, O2, P2, T2, C2, 16, a2[46]), P2 = d2(P2, T2 = l2(T2, x2, O2, P2, p2, 23, a2[47]), x2, O2, o3, 6, a2[48]), O2 = d2(O2, P2, T2, x2, _2, 10, a2[49]), x2 = d2(x2, O2, P2, T2, A2, 15, a2[50]), T2 = d2(T2, x2, O2, P2, m2, 21, a2[51]), P2 = d2(P2, T2, x2, O2, b2, 6, a2[52]), O2 = d2(O2, P2, T2, x2, f2, 10, a2[53]), x2 = d2(x2, O2, P2, T2, I2, 15, a2[54]), T2 = d2(T2, x2, O2, P2, c3, 21, a2[55]), P2 = d2(P2, T2, x2, O2, w2, 6, a2[56]), O2 = d2(O2, P2, T2, x2, C2, 10, a2[57]), x2 = d2(x2, O2, P2, T2, y2, 15, a2[58]), T2 = d2(T2, x2, O2, P2, k2, 21, a2[59]), P2 = d2(P2, T2, x2, O2, g2, 6, a2[60]), O2 = d2(O2, P2, T2, x2, S2, 10, a2[61]), x2 = d2(x2, O2, P2, T2, p2, 15, a2[62]), T2 = d2(T2, x2, O2, P2, v2, 21, a2[63]), i3[0] = i3[0] + P2 | 0, i3[1] = i3[1] + T2 | 0, i3[2] = i3[2] + x2 | 0, i3[3] = i3[3] + O2 | 0;
      }, _doFinalize: function() {
        var t4 = this._data, n3 = t4.words, s3 = 8 * this._nDataBytes, r3 = 8 * t4.sigBytes;
        n3[r3 >>> 5] |= 128 << 24 - r3 % 32;
        var i3 = e3.floor(s3 / 4294967296), o3 = s3;
        n3[15 + (r3 + 64 >>> 9 << 4)] = 16711935 & (i3 << 8 | i3 >>> 24) | 4278255360 & (i3 << 24 | i3 >>> 8), n3[14 + (r3 + 64 >>> 9 << 4)] = 16711935 & (o3 << 8 | o3 >>> 24) | 4278255360 & (o3 << 24 | o3 >>> 8), t4.sigBytes = 4 * (n3.length + 1), this._process();
        for (var a3 = this._hash, c3 = a3.words, u3 = 0; u3 < 4; u3++) {
          var h3 = c3[u3];
          c3[u3] = 16711935 & (h3 << 8 | h3 >>> 24) | 4278255360 & (h3 << 24 | h3 >>> 8);
        }
        return a3;
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4._hash = this._hash.clone(), e4;
      } });
      function u2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (t4 & n3 | ~t4 & s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function h2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (t4 & s3 | n3 & ~s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function l2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (t4 ^ n3 ^ s3) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      function d2(e4, t4, n3, s3, r3, i3, o3) {
        var a3 = e4 + (n3 ^ (t4 | ~s3)) + r3 + o3;
        return (a3 << i3 | a3 >>> 32 - i3) + t4;
      }
      t3.MD5 = i2._createHelper(c2), t3.HmacMD5 = i2._createHmacHelper(c2);
    }(Math), n2.MD5);
  }), n(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r, void function() {
      var e3 = n2, t3 = e3.lib.Base, s2 = e3.enc.Utf8;
      e3.algo.HMAC = t3.extend({ init: function(e4, t4) {
        e4 = this._hasher = new e4.init(), "string" == typeof t4 && (t4 = s2.parse(t4));
        var n3 = e4.blockSize, r2 = 4 * n3;
        t4.sigBytes > r2 && (t4 = e4.finalize(t4)), t4.clamp();
        for (var i2 = this._oKey = t4.clone(), o2 = this._iKey = t4.clone(), a2 = i2.words, c2 = o2.words, u2 = 0; u2 < n3; u2++)
          a2[u2] ^= 1549556828, c2[u2] ^= 909522486;
        i2.sigBytes = o2.sigBytes = r2, this.reset();
      }, reset: function() {
        var e4 = this._hasher;
        e4.reset(), e4.update(this._iKey);
      }, update: function(e4) {
        return this._hasher.update(e4), this;
      }, finalize: function(e4) {
        var t4 = this._hasher, n3 = t4.finalize(e4);
        return t4.reset(), t4.finalize(this._oKey.clone().concat(n3));
      } });
    }());
  }), n(function(e2, t2) {
    e2.exports = r.HmacMD5;
  })), o$1 = n(function(e2, t2) {
    e2.exports = r.enc.Utf8;
  }), a$1 = n(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r, function() {
      var e3 = n2, t3 = e3.lib.WordArray;
      function s2(e4, n3, s3) {
        for (var r2 = [], i2 = 0, o2 = 0; o2 < n3; o2++)
          if (o2 % 4) {
            var a2 = s3[e4.charCodeAt(o2 - 1)] << o2 % 4 * 2, c2 = s3[e4.charCodeAt(o2)] >>> 6 - o2 % 4 * 2;
            r2[i2 >>> 2] |= (a2 | c2) << 24 - i2 % 4 * 8, i2++;
          }
        return t3.create(r2, i2);
      }
      e3.enc.Base64 = { stringify: function(e4) {
        var t4 = e4.words, n3 = e4.sigBytes, s3 = this._map;
        e4.clamp();
        for (var r2 = [], i2 = 0; i2 < n3; i2 += 3)
          for (var o2 = (t4[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255) << 16 | (t4[i2 + 1 >>> 2] >>> 24 - (i2 + 1) % 4 * 8 & 255) << 8 | t4[i2 + 2 >>> 2] >>> 24 - (i2 + 2) % 4 * 8 & 255, a2 = 0; a2 < 4 && i2 + 0.75 * a2 < n3; a2++)
            r2.push(s3.charAt(o2 >>> 6 * (3 - a2) & 63));
        var c2 = s3.charAt(64);
        if (c2)
          for (; r2.length % 4; )
            r2.push(c2);
        return r2.join("");
      }, parse: function(e4) {
        var t4 = e4.length, n3 = this._map, r2 = this._reverseMap;
        if (!r2) {
          r2 = this._reverseMap = [];
          for (var i2 = 0; i2 < n3.length; i2++)
            r2[n3.charCodeAt(i2)] = i2;
        }
        var o2 = n3.charAt(64);
        if (o2) {
          var a2 = e4.indexOf(o2);
          -1 !== a2 && (t4 = a2);
        }
        return s2(e4, t4, r2);
      }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
    }(), n2.enc.Base64);
  });
  const c$1 = "FUNCTION", u$1 = "OBJECT", h$1 = "CLIENT_DB", l$1 = "pending", d$1 = "fulfilled", p$1 = "rejected";
  function f$1(e2) {
    return Object.prototype.toString.call(e2).slice(8, -1).toLowerCase();
  }
  function g(e2) {
    return "object" === f$1(e2);
  }
  function m$1(e2) {
    return "function" == typeof e2;
  }
  function y(e2) {
    return function() {
      try {
        return e2.apply(e2, arguments);
      } catch (e3) {
        console.error(e3);
      }
    };
  }
  const _$1 = "REJECTED", w$1 = "NOT_PENDING";
  let v$1 = class v {
    constructor({ createPromise: e2, retryRule: t2 = _$1 } = {}) {
      this.createPromise = e2, this.status = null, this.promise = null, this.retryRule = t2;
    }
    get needRetry() {
      if (!this.status)
        return true;
      switch (this.retryRule) {
        case _$1:
          return this.status === p$1;
        case w$1:
          return this.status !== l$1;
      }
    }
    exec() {
      return this.needRetry ? (this.status = l$1, this.promise = this.createPromise().then((e2) => (this.status = d$1, Promise.resolve(e2)), (e2) => (this.status = p$1, Promise.reject(e2))), this.promise) : this.promise;
    }
  };
  function I$2(e2) {
    return e2 && "string" == typeof e2 ? JSON.parse(e2) : e2;
  }
  const S$1 = true, b$1 = "app", A$1 = I$2(define_process_env_UNI_SECURE_NETWORK_CONFIG_default), C$1 = b$1, P$2 = I$2('{\n    "address": [\n        "127.0.0.1",\n        "192.168.31.70"\n    ],\n    "debugPort": 9000,\n    "initialLaunchType": "local",\n    "servePort": 7001,\n    "skipFiles": [\n        "<node_internals>/**",\n        "/Applications/HBuilderX.app/Contents/HBuilderX/plugins/unicloud/**/*.js"\n    ]\n}\n'), T$1 = I$2('[{"provider":"aliyun","spaceName":"ssr-test","spaceId":"mp-26b24a65-877e-46aa-a2ca-356559e087b0","clientSecret":"QlLGmTjENJ5HBUf2D0S9NQ==","endpoint":"https://api.next.bspapp.com"}]') || [];
  let O$1 = "";
  try {
    O$1 = "__UNI__D50B9B2";
  } catch (e2) {
  }
  let E$2 = {};
  function L(e2, t2 = {}) {
    var n2, s2;
    return n2 = E$2, s2 = e2, Object.prototype.hasOwnProperty.call(n2, s2) || (E$2[e2] = t2), E$2[e2];
  }
  E$2 = uni._globalUniCloudObj ? uni._globalUniCloudObj : uni._globalUniCloudObj = {};
  const R$1 = ["invoke", "success", "fail", "complete"], U$2 = L("_globalUniCloudInterceptor");
  function N$2(e2, t2) {
    U$2[e2] || (U$2[e2] = {}), g(t2) && Object.keys(t2).forEach((n2) => {
      R$1.indexOf(n2) > -1 && function(e3, t3, n3) {
        let s2 = U$2[e3][t3];
        s2 || (s2 = U$2[e3][t3] = []), -1 === s2.indexOf(n3) && m$1(n3) && s2.push(n3);
      }(e2, n2, t2[n2]);
    });
  }
  function D$1(e2, t2) {
    U$2[e2] || (U$2[e2] = {}), g(t2) ? Object.keys(t2).forEach((n2) => {
      R$1.indexOf(n2) > -1 && function(e3, t3, n3) {
        const s2 = U$2[e3][t3];
        if (!s2)
          return;
        const r2 = s2.indexOf(n3);
        r2 > -1 && s2.splice(r2, 1);
      }(e2, n2, t2[n2]);
    }) : delete U$2[e2];
  }
  function M$1(e2, t2) {
    return e2 && 0 !== e2.length ? e2.reduce((e3, n2) => e3.then(() => n2(t2)), Promise.resolve()) : Promise.resolve();
  }
  function q$1(e2, t2) {
    return U$2[e2] && U$2[e2][t2] || [];
  }
  function F$1(e2) {
    N$2("callObject", e2);
  }
  const K$1 = L("_globalUniCloudListener"), j = "response", $ = "needLogin", B$1 = "refreshToken", W$1 = "clientdb", H$1 = "cloudfunction", z$1 = "cloudobject";
  function J$1(e2) {
    return K$1[e2] || (K$1[e2] = []), K$1[e2];
  }
  function V(e2, t2) {
    const n2 = J$1(e2);
    n2.includes(t2) || n2.push(t2);
  }
  function G$1(e2, t2) {
    const n2 = J$1(e2), s2 = n2.indexOf(t2);
    -1 !== s2 && n2.splice(s2, 1);
  }
  function Y$1(e2, t2) {
    const n2 = J$1(e2);
    for (let e3 = 0; e3 < n2.length; e3++) {
      (0, n2[e3])(t2);
    }
  }
  let Q$1, X$2 = false;
  function Z$1() {
    return Q$1 || (Q$1 = new Promise((e2) => {
      X$2 && e2(), function t2() {
        if ("function" == typeof getCurrentPages) {
          const t3 = getCurrentPages();
          t3 && t3[0] && (X$2 = true, e2());
        }
        X$2 || setTimeout(() => {
          t2();
        }, 30);
      }();
    }), Q$1);
  }
  function ee$1(e2) {
    const t2 = {};
    for (const n2 in e2) {
      const s2 = e2[n2];
      m$1(s2) && (t2[n2] = y(s2));
    }
    return t2;
  }
  let te$1 = class te extends Error {
    constructor(e2) {
      super(e2.message), this.errMsg = e2.message || e2.errMsg || "unknown system error", this.code = this.errCode = e2.code || e2.errCode || "SYSTEM_ERROR", this.errSubject = this.subject = e2.subject || e2.errSubject, this.cause = e2.cause, this.requestId = e2.requestId;
    }
    toJson(e2 = 0) {
      if (!(e2 >= 10))
        return e2++, { errCode: this.errCode, errMsg: this.errMsg, errSubject: this.errSubject, cause: this.cause && this.cause.toJson ? this.cause.toJson(e2) : this.cause };
    }
  };
  var ne$1 = { request: (e2) => uni.request(e2), uploadFile: (e2) => uni.uploadFile(e2), setStorageSync: (e2, t2) => uni.setStorageSync(e2, t2), getStorageSync: (e2) => uni.getStorageSync(e2), removeStorageSync: (e2) => uni.removeStorageSync(e2), clearStorageSync: () => uni.clearStorageSync(), connectSocket: (e2) => uni.connectSocket(e2) };
  function se$1(e2) {
    return e2 && se$1(e2.__v_raw) || e2;
  }
  function re() {
    return { token: ne$1.getStorageSync("uni_id_token") || ne$1.getStorageSync("uniIdToken"), tokenExpired: ne$1.getStorageSync("uni_id_token_expired") };
  }
  function ie({ token: e2, tokenExpired: t2 } = {}) {
    e2 && ne$1.setStorageSync("uni_id_token", e2), t2 && ne$1.setStorageSync("uni_id_token_expired", t2);
  }
  let oe, ae;
  function ce$1() {
    return oe || (oe = uni.getSystemInfoSync()), oe;
  }
  function ue() {
    let e2, t2;
    try {
      if (uni.getLaunchOptionsSync) {
        if (uni.getLaunchOptionsSync.toString().indexOf("not yet implemented") > -1)
          return;
        const { scene: n2, channel: s2 } = uni.getLaunchOptionsSync();
        e2 = s2, t2 = n2;
      }
    } catch (e3) {
    }
    return { channel: e2, scene: t2 };
  }
  let he = {};
  function le() {
    const e2 = uni.getLocale && uni.getLocale() || "en";
    if (ae)
      return { ...he, ...ae, locale: e2, LOCALE: e2 };
    const t2 = ce$1(), { deviceId: n2, osName: s2, uniPlatform: r2, appId: i2 } = t2, o2 = ["appId", "appLanguage", "appName", "appVersion", "appVersionCode", "appWgtVersion", "browserName", "browserVersion", "deviceBrand", "deviceId", "deviceModel", "deviceType", "osName", "osVersion", "romName", "romVersion", "ua", "hostName", "hostVersion", "uniPlatform", "uniRuntimeVersion", "uniRuntimeVersionCode", "uniCompilerVersion", "uniCompilerVersionCode"];
    for (const e3 in t2)
      Object.hasOwnProperty.call(t2, e3) && -1 === o2.indexOf(e3) && delete t2[e3];
    return ae = { PLATFORM: r2, OS: s2, APPID: i2, DEVICEID: n2, ...ue(), ...t2 }, { ...he, ...ae, locale: e2, LOCALE: e2 };
  }
  var de = { sign: function(e2, t2) {
    let n2 = "";
    return Object.keys(e2).sort().forEach(function(t3) {
      e2[t3] && (n2 = n2 + "&" + t3 + "=" + e2[t3]);
    }), n2 = n2.slice(1), i(n2, t2).toString();
  }, wrappedRequest: function(e2, t2) {
    return new Promise((n2, s2) => {
      t2(Object.assign(e2, { complete(e3) {
        e3 || (e3 = {});
        const t3 = e3.data && e3.data.header && e3.data.header["x-serverless-request-id"] || e3.header && e3.header["request-id"];
        if (!e3.statusCode || e3.statusCode >= 400) {
          const n3 = e3.data && e3.data.error && e3.data.error.code || "SYS_ERR", r3 = e3.data && e3.data.error && e3.data.error.message || e3.errMsg || "request:fail";
          return s2(new te$1({ code: n3, message: r3, requestId: t3 }));
        }
        const r2 = e3.data;
        if (r2.error)
          return s2(new te$1({ code: r2.error.code, message: r2.error.message, requestId: t3 }));
        r2.result = r2.data, r2.requestId = t3, delete r2.data, n2(r2);
      } }));
    });
  }, toBase64: function(e2) {
    return a$1.stringify(o$1.parse(e2));
  } };
  var pe = class {
    constructor(e2) {
      ["spaceId", "clientSecret"].forEach((t2) => {
        if (!Object.prototype.hasOwnProperty.call(e2, t2))
          throw new Error(`${t2} required`);
      }), this.config = Object.assign({}, { endpoint: 0 === e2.spaceId.indexOf("mp-") ? "https://api.next.bspapp.com" : "https://api.bspapp.com" }, e2), this.config.provider = "aliyun", this.config.requestUrl = this.config.endpoint + "/client", this.config.envType = this.config.envType || "public", this.config.accessTokenKey = "access_token_" + this.config.spaceId, this.adapter = ne$1, this._getAccessTokenPromiseHub = new v$1({ createPromise: () => this.requestAuth(this.setupRequest({ method: "serverless.auth.user.anonymousAuthorize", params: "{}" }, "auth")).then((e3) => {
        if (!e3.result || !e3.result.accessToken)
          throw new te$1({ code: "AUTH_FAILED", message: "获取accessToken失败" });
        this.setAccessToken(e3.result.accessToken);
      }), retryRule: w$1 });
    }
    get hasAccessToken() {
      return !!this.accessToken;
    }
    setAccessToken(e2) {
      this.accessToken = e2;
    }
    requestWrapped(e2) {
      return de.wrappedRequest(e2, this.adapter.request);
    }
    requestAuth(e2) {
      return this.requestWrapped(e2);
    }
    request(e2, t2) {
      return Promise.resolve().then(() => this.hasAccessToken ? t2 ? this.requestWrapped(e2) : this.requestWrapped(e2).catch((t3) => new Promise((e3, n2) => {
        !t3 || "GATEWAY_INVALID_TOKEN" !== t3.code && "InvalidParameter.InvalidToken" !== t3.code ? n2(t3) : e3();
      }).then(() => this.getAccessToken()).then(() => {
        const t4 = this.rebuildRequest(e2);
        return this.request(t4, true);
      })) : this.getAccessToken().then(() => {
        const t3 = this.rebuildRequest(e2);
        return this.request(t3, true);
      }));
    }
    rebuildRequest(e2) {
      const t2 = Object.assign({}, e2);
      return t2.data.token = this.accessToken, t2.header["x-basement-token"] = this.accessToken, t2.header["x-serverless-sign"] = de.sign(t2.data, this.config.clientSecret), t2;
    }
    setupRequest(e2, t2) {
      const n2 = Object.assign({}, e2, { spaceId: this.config.spaceId, timestamp: Date.now() }), s2 = { "Content-Type": "application/json" };
      return "auth" !== t2 && (n2.token = this.accessToken, s2["x-basement-token"] = this.accessToken), s2["x-serverless-sign"] = de.sign(n2, this.config.clientSecret), { url: this.config.requestUrl, method: "POST", data: n2, dataType: "json", header: s2 };
    }
    getAccessToken() {
      return this._getAccessTokenPromiseHub.exec();
    }
    async authorize() {
      await this.getAccessToken();
    }
    callFunction(e2) {
      const t2 = { method: "serverless.function.runtime.invoke", params: JSON.stringify({ functionTarget: e2.name, functionArgs: e2.data || {} }) };
      return this.request(this.setupRequest(t2));
    }
    getOSSUploadOptionsFromPath(e2) {
      const t2 = { method: "serverless.file.resource.generateProximalSign", params: JSON.stringify(e2) };
      return this.request(this.setupRequest(t2));
    }
    uploadFileToOSS({ url: e2, formData: t2, name: n2, filePath: s2, fileType: r2, onUploadProgress: i2 }) {
      return new Promise((o2, a2) => {
        const c2 = this.adapter.uploadFile({ url: e2, formData: t2, name: n2, filePath: s2, fileType: r2, header: { "X-OSS-server-side-encrpytion": "AES256" }, success(e3) {
          e3 && e3.statusCode < 400 ? o2(e3) : a2(new te$1({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
        }, fail(e3) {
          a2(new te$1({ code: e3.code || "UPLOAD_FAILED", message: e3.message || e3.errMsg || "文件上传失败" }));
        } });
        "function" == typeof i2 && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((e3) => {
          i2({ loaded: e3.totalBytesSent, total: e3.totalBytesExpectedToSend });
        });
      });
    }
    reportOSSUpload(e2) {
      const t2 = { method: "serverless.file.resource.report", params: JSON.stringify(e2) };
      return this.request(this.setupRequest(t2));
    }
    async uploadFile({ filePath: e2, cloudPath: t2, fileType: n2 = "image", cloudPathAsRealPath: s2 = false, onUploadProgress: r2, config: i2 }) {
      if ("string" !== f$1(t2))
        throw new te$1({ code: "INVALID_PARAM", message: "cloudPath必须为字符串类型" });
      if (!(t2 = t2.trim()))
        throw new te$1({ code: "INVALID_PARAM", message: "cloudPath不可为空" });
      if (/:\/\//.test(t2))
        throw new te$1({ code: "INVALID_PARAM", message: "cloudPath不合法" });
      const o2 = i2 && i2.envType || this.config.envType;
      if (s2 && ("/" !== t2[0] && (t2 = "/" + t2), t2.indexOf("\\") > -1))
        throw new te$1({ code: "INVALID_PARAM", message: "使用cloudPath作为路径时，cloudPath不可包含“\\”" });
      const a2 = (await this.getOSSUploadOptionsFromPath({ env: o2, filename: s2 ? t2.split("/").pop() : t2, fileId: s2 ? t2 : void 0 })).result, c2 = "https://" + a2.cdnDomain + "/" + a2.ossPath, { securityToken: u2, accessKeyId: h2, signature: l2, host: d2, ossPath: p2, id: g2, policy: m2, ossCallbackUrl: y2 } = a2, _2 = { "Cache-Control": "max-age=2592000", "Content-Disposition": "attachment", OSSAccessKeyId: h2, Signature: l2, host: d2, id: g2, key: p2, policy: m2, success_action_status: 200 };
      if (u2 && (_2["x-oss-security-token"] = u2), y2) {
        const e3 = JSON.stringify({ callbackUrl: y2, callbackBody: JSON.stringify({ fileId: g2, spaceId: this.config.spaceId }), callbackBodyType: "application/json" });
        _2.callback = de.toBase64(e3);
      }
      const w2 = { url: "https://" + a2.host, formData: _2, fileName: "file", name: "file", filePath: e2, fileType: n2 };
      if (await this.uploadFileToOSS(Object.assign({}, w2, { onUploadProgress: r2 })), y2)
        return { success: true, filePath: e2, fileID: c2 };
      if ((await this.reportOSSUpload({ id: g2 })).success)
        return { success: true, filePath: e2, fileID: c2 };
      throw new te$1({ code: "UPLOAD_FAILED", message: "文件上传失败" });
    }
    getTempFileURL({ fileList: e2 } = {}) {
      return new Promise((t2, n2) => {
        Array.isArray(e2) && 0 !== e2.length || n2(new te$1({ code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" })), t2({ fileList: e2.map((e3) => ({ fileID: e3, tempFileURL: e3 })) });
      });
    }
    async getFileInfo({ fileList: e2 } = {}) {
      if (!Array.isArray(e2) || 0 === e2.length)
        throw new te$1({ code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" });
      const t2 = { method: "serverless.file.resource.info", params: JSON.stringify({ id: e2.map((e3) => e3.split("?")[0]).join(",") }) };
      return { fileList: (await this.request(this.setupRequest(t2))).result };
    }
  };
  var fe$1 = { init(e2) {
    const t2 = new pe(e2), n2 = { signInAnonymously: function() {
      return t2.authorize();
    }, getLoginState: function() {
      return Promise.resolve(false);
    } };
    return t2.auth = function() {
      return n2;
    }, t2.customAuth = t2.auth, t2;
  } };
  const ge$1 = "undefined" != typeof location && "http:" === location.protocol ? "http:" : "https:";
  var me$1;
  !function(e2) {
    e2.local = "local", e2.none = "none", e2.session = "session";
  }(me$1 || (me$1 = {}));
  var ye$1 = function() {
  }, _e = n(function(e2, t2) {
    var n2;
    e2.exports = (n2 = r, function(e3) {
      var t3 = n2, s2 = t3.lib, r2 = s2.WordArray, i2 = s2.Hasher, o2 = t3.algo, a2 = [], c2 = [];
      !function() {
        function t4(t5) {
          for (var n4 = e3.sqrt(t5), s4 = 2; s4 <= n4; s4++)
            if (!(t5 % s4))
              return false;
          return true;
        }
        function n3(e4) {
          return 4294967296 * (e4 - (0 | e4)) | 0;
        }
        for (var s3 = 2, r3 = 0; r3 < 64; )
          t4(s3) && (r3 < 8 && (a2[r3] = n3(e3.pow(s3, 0.5))), c2[r3] = n3(e3.pow(s3, 1 / 3)), r3++), s3++;
      }();
      var u2 = [], h2 = o2.SHA256 = i2.extend({ _doReset: function() {
        this._hash = new r2.init(a2.slice(0));
      }, _doProcessBlock: function(e4, t4) {
        for (var n3 = this._hash.words, s3 = n3[0], r3 = n3[1], i3 = n3[2], o3 = n3[3], a3 = n3[4], h3 = n3[5], l2 = n3[6], d2 = n3[7], p2 = 0; p2 < 64; p2++) {
          if (p2 < 16)
            u2[p2] = 0 | e4[t4 + p2];
          else {
            var f2 = u2[p2 - 15], g2 = (f2 << 25 | f2 >>> 7) ^ (f2 << 14 | f2 >>> 18) ^ f2 >>> 3, m2 = u2[p2 - 2], y2 = (m2 << 15 | m2 >>> 17) ^ (m2 << 13 | m2 >>> 19) ^ m2 >>> 10;
            u2[p2] = g2 + u2[p2 - 7] + y2 + u2[p2 - 16];
          }
          var _2 = s3 & r3 ^ s3 & i3 ^ r3 & i3, w2 = (s3 << 30 | s3 >>> 2) ^ (s3 << 19 | s3 >>> 13) ^ (s3 << 10 | s3 >>> 22), v2 = d2 + ((a3 << 26 | a3 >>> 6) ^ (a3 << 21 | a3 >>> 11) ^ (a3 << 7 | a3 >>> 25)) + (a3 & h3 ^ ~a3 & l2) + c2[p2] + u2[p2];
          d2 = l2, l2 = h3, h3 = a3, a3 = o3 + v2 | 0, o3 = i3, i3 = r3, r3 = s3, s3 = v2 + (w2 + _2) | 0;
        }
        n3[0] = n3[0] + s3 | 0, n3[1] = n3[1] + r3 | 0, n3[2] = n3[2] + i3 | 0, n3[3] = n3[3] + o3 | 0, n3[4] = n3[4] + a3 | 0, n3[5] = n3[5] + h3 | 0, n3[6] = n3[6] + l2 | 0, n3[7] = n3[7] + d2 | 0;
      }, _doFinalize: function() {
        var t4 = this._data, n3 = t4.words, s3 = 8 * this._nDataBytes, r3 = 8 * t4.sigBytes;
        return n3[r3 >>> 5] |= 128 << 24 - r3 % 32, n3[14 + (r3 + 64 >>> 9 << 4)] = e3.floor(s3 / 4294967296), n3[15 + (r3 + 64 >>> 9 << 4)] = s3, t4.sigBytes = 4 * n3.length, this._process(), this._hash;
      }, clone: function() {
        var e4 = i2.clone.call(this);
        return e4._hash = this._hash.clone(), e4;
      } });
      t3.SHA256 = i2._createHelper(h2), t3.HmacSHA256 = i2._createHmacHelper(h2);
    }(Math), n2.SHA256);
  }), we$1 = _e, ve$1 = n(function(e2, t2) {
    e2.exports = r.HmacSHA256;
  });
  const Ie = () => {
    let e2;
    if (!Promise) {
      e2 = () => {
      }, e2.promise = {};
      const t3 = () => {
        throw new te$1({ message: 'Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.' });
      };
      return Object.defineProperty(e2.promise, "then", { get: t3 }), Object.defineProperty(e2.promise, "catch", { get: t3 }), e2;
    }
    const t2 = new Promise((t3, n2) => {
      e2 = (e3, s2) => e3 ? n2(e3) : t3(s2);
    });
    return e2.promise = t2, e2;
  };
  function Se$1(e2) {
    return void 0 === e2;
  }
  function be$1(e2) {
    return "[object Null]" === Object.prototype.toString.call(e2);
  }
  var ke$1;
  function Ae$1(e2) {
    const t2 = (n2 = e2, "[object Array]" === Object.prototype.toString.call(n2) ? e2 : [e2]);
    var n2;
    for (const e3 of t2) {
      const { isMatch: t3, genAdapter: n3, runtime: s2 } = e3;
      if (t3())
        return { adapter: n3(), runtime: s2 };
    }
  }
  !function(e2) {
    e2.WEB = "web", e2.WX_MP = "wx_mp";
  }(ke$1 || (ke$1 = {}));
  const Ce = { adapter: null, runtime: void 0 }, Pe$1 = ["anonymousUuidKey"];
  let Te$1 = class Te extends ye$1 {
    constructor() {
      super(), Ce.adapter.root.tcbObject || (Ce.adapter.root.tcbObject = {});
    }
    setItem(e2, t2) {
      Ce.adapter.root.tcbObject[e2] = t2;
    }
    getItem(e2) {
      return Ce.adapter.root.tcbObject[e2];
    }
    removeItem(e2) {
      delete Ce.adapter.root.tcbObject[e2];
    }
    clear() {
      delete Ce.adapter.root.tcbObject;
    }
  };
  function xe(e2, t2) {
    switch (e2) {
      case "local":
        return t2.localStorage || new Te$1();
      case "none":
        return new Te$1();
      default:
        return t2.sessionStorage || new Te$1();
    }
  }
  class Oe {
    constructor(e2) {
      if (!this._storage) {
        this._persistence = Ce.adapter.primaryStorage || e2.persistence, this._storage = xe(this._persistence, Ce.adapter);
        const t2 = `access_token_${e2.env}`, n2 = `access_token_expire_${e2.env}`, s2 = `refresh_token_${e2.env}`, r2 = `anonymous_uuid_${e2.env}`, i2 = `login_type_${e2.env}`, o2 = `user_info_${e2.env}`;
        this.keys = { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2, anonymousUuidKey: r2, loginTypeKey: i2, userInfoKey: o2 };
      }
    }
    updatePersistence(e2) {
      if (e2 === this._persistence)
        return;
      const t2 = "local" === this._persistence;
      this._persistence = e2;
      const n2 = xe(e2, Ce.adapter);
      for (const e3 in this.keys) {
        const s2 = this.keys[e3];
        if (t2 && Pe$1.includes(e3))
          continue;
        const r2 = this._storage.getItem(s2);
        Se$1(r2) || be$1(r2) || (n2.setItem(s2, r2), this._storage.removeItem(s2));
      }
      this._storage = n2;
    }
    setStore(e2, t2, n2) {
      if (!this._storage)
        return;
      const s2 = { version: n2 || "localCachev1", content: t2 }, r2 = JSON.stringify(s2);
      try {
        this._storage.setItem(e2, r2);
      } catch (e3) {
        throw e3;
      }
    }
    getStore(e2, t2) {
      try {
        if (!this._storage)
          return;
      } catch (e3) {
        return "";
      }
      t2 = t2 || "localCachev1";
      const n2 = this._storage.getItem(e2);
      if (!n2)
        return "";
      if (n2.indexOf(t2) >= 0) {
        return JSON.parse(n2).content;
      }
      return "";
    }
    removeStore(e2) {
      this._storage.removeItem(e2);
    }
  }
  const Ee$1 = {}, Le$1 = {};
  function Re$1(e2) {
    return Ee$1[e2];
  }
  class Ue {
    constructor(e2, t2) {
      this.data = t2 || null, this.name = e2;
    }
  }
  class Ne extends Ue {
    constructor(e2, t2) {
      super("error", { error: e2, data: t2 }), this.error = e2;
    }
  }
  const De$1 = new class {
    constructor() {
      this._listeners = {};
    }
    on(e2, t2) {
      return function(e3, t3, n2) {
        n2[e3] = n2[e3] || [], n2[e3].push(t3);
      }(e2, t2, this._listeners), this;
    }
    off(e2, t2) {
      return function(e3, t3, n2) {
        if (n2 && n2[e3]) {
          const s2 = n2[e3].indexOf(t3);
          -1 !== s2 && n2[e3].splice(s2, 1);
        }
      }(e2, t2, this._listeners), this;
    }
    fire(e2, t2) {
      if (e2 instanceof Ne)
        return console.error(e2.error), this;
      const n2 = "string" == typeof e2 ? new Ue(e2, t2 || {}) : e2;
      const s2 = n2.name;
      if (this._listens(s2)) {
        n2.target = this;
        const e3 = this._listeners[s2] ? [...this._listeners[s2]] : [];
        for (const t3 of e3)
          t3.call(this, n2);
      }
      return this;
    }
    _listens(e2) {
      return this._listeners[e2] && this._listeners[e2].length > 0;
    }
  }();
  function Me$1(e2, t2) {
    De$1.on(e2, t2);
  }
  function qe(e2, t2 = {}) {
    De$1.fire(e2, t2);
  }
  function Fe(e2, t2) {
    De$1.off(e2, t2);
  }
  const Ke$1 = "loginStateChanged", je$1 = "loginStateExpire", $e = "loginTypeChanged", Be$1 = "anonymousConverted", We$1 = "refreshAccessToken";
  var He$1;
  !function(e2) {
    e2.ANONYMOUS = "ANONYMOUS", e2.WECHAT = "WECHAT", e2.WECHAT_PUBLIC = "WECHAT-PUBLIC", e2.WECHAT_OPEN = "WECHAT-OPEN", e2.CUSTOM = "CUSTOM", e2.EMAIL = "EMAIL", e2.USERNAME = "USERNAME", e2.NULL = "NULL";
  }(He$1 || (He$1 = {}));
  const ze = ["auth.getJwt", "auth.logout", "auth.signInWithTicket", "auth.signInAnonymously", "auth.signIn", "auth.fetchAccessTokenWithRefreshToken", "auth.signUpWithEmailAndPassword", "auth.activateEndUserMail", "auth.sendPasswordResetEmail", "auth.resetPasswordWithToken", "auth.isUsernameRegistered"], Je$1 = { "X-SDK-Version": "1.3.5" };
  function Ve(e2, t2, n2) {
    const s2 = e2[t2];
    e2[t2] = function(t3) {
      const r2 = {}, i2 = {};
      n2.forEach((n3) => {
        const { data: s3, headers: o3 } = n3.call(e2, t3);
        Object.assign(r2, s3), Object.assign(i2, o3);
      });
      const o2 = t3.data;
      return o2 && (() => {
        var e3;
        if (e3 = o2, "[object FormData]" !== Object.prototype.toString.call(e3))
          t3.data = { ...o2, ...r2 };
        else
          for (const e4 in r2)
            o2.append(e4, r2[e4]);
      })(), t3.headers = { ...t3.headers || {}, ...i2 }, s2.call(e2, t3);
    };
  }
  function Ge$1() {
    const e2 = Math.random().toString(16).slice(2);
    return { data: { seqId: e2 }, headers: { ...Je$1, "x-seqid": e2 } };
  }
  let Ye$1 = class Ye {
    constructor(e2 = {}) {
      var t2;
      this.config = e2, this._reqClass = new Ce.adapter.reqClass({ timeout: this.config.timeout, timeoutMsg: `请求在${this.config.timeout / 1e3}s内未完成，已中断`, restrictedMethods: ["post"] }), this._cache = Re$1(this.config.env), this._localCache = (t2 = this.config.env, Le$1[t2]), Ve(this._reqClass, "post", [Ge$1]), Ve(this._reqClass, "upload", [Ge$1]), Ve(this._reqClass, "download", [Ge$1]);
    }
    async post(e2) {
      return await this._reqClass.post(e2);
    }
    async upload(e2) {
      return await this._reqClass.upload(e2);
    }
    async download(e2) {
      return await this._reqClass.download(e2);
    }
    async refreshAccessToken() {
      let e2, t2;
      this._refreshAccessTokenPromise || (this._refreshAccessTokenPromise = this._refreshAccessToken());
      try {
        e2 = await this._refreshAccessTokenPromise;
      } catch (e3) {
        t2 = e3;
      }
      if (this._refreshAccessTokenPromise = null, this._shouldRefreshAccessTokenHook = null, t2)
        throw t2;
      return e2;
    }
    async _refreshAccessToken() {
      const { accessTokenKey: e2, accessTokenExpireKey: t2, refreshTokenKey: n2, loginTypeKey: s2, anonymousUuidKey: r2 } = this._cache.keys;
      this._cache.removeStore(e2), this._cache.removeStore(t2);
      let i2 = this._cache.getStore(n2);
      if (!i2)
        throw new te$1({ message: "未登录CloudBase" });
      const o2 = { refresh_token: i2 }, a2 = await this.request("auth.fetchAccessTokenWithRefreshToken", o2);
      if (a2.data.code) {
        const { code: e3 } = a2.data;
        if ("SIGN_PARAM_INVALID" === e3 || "REFRESH_TOKEN_EXPIRED" === e3 || "INVALID_REFRESH_TOKEN" === e3) {
          if (this._cache.getStore(s2) === He$1.ANONYMOUS && "INVALID_REFRESH_TOKEN" === e3) {
            const e4 = this._cache.getStore(r2), t3 = this._cache.getStore(n2), s3 = await this.send("auth.signInAnonymously", { anonymous_uuid: e4, refresh_token: t3 });
            return this.setRefreshToken(s3.refresh_token), this._refreshAccessToken();
          }
          qe(je$1), this._cache.removeStore(n2);
        }
        throw new te$1({ code: a2.data.code, message: `刷新access token失败：${a2.data.code}` });
      }
      if (a2.data.access_token)
        return qe(We$1), this._cache.setStore(e2, a2.data.access_token), this._cache.setStore(t2, a2.data.access_token_expire + Date.now()), { accessToken: a2.data.access_token, accessTokenExpire: a2.data.access_token_expire };
      a2.data.refresh_token && (this._cache.removeStore(n2), this._cache.setStore(n2, a2.data.refresh_token), this._refreshAccessToken());
    }
    async getAccessToken() {
      const { accessTokenKey: e2, accessTokenExpireKey: t2, refreshTokenKey: n2 } = this._cache.keys;
      if (!this._cache.getStore(n2))
        throw new te$1({ message: "refresh token不存在，登录状态异常" });
      let s2 = this._cache.getStore(e2), r2 = this._cache.getStore(t2), i2 = true;
      return this._shouldRefreshAccessTokenHook && !await this._shouldRefreshAccessTokenHook(s2, r2) && (i2 = false), (!s2 || !r2 || r2 < Date.now()) && i2 ? this.refreshAccessToken() : { accessToken: s2, accessTokenExpire: r2 };
    }
    async request(e2, t2, n2) {
      const s2 = `x-tcb-trace_${this.config.env}`;
      let r2 = "application/x-www-form-urlencoded";
      const i2 = { action: e2, env: this.config.env, dataVersion: "2019-08-16", ...t2 };
      if (-1 === ze.indexOf(e2)) {
        const { refreshTokenKey: e3 } = this._cache.keys;
        this._cache.getStore(e3) && (i2.access_token = (await this.getAccessToken()).accessToken);
      }
      let o2;
      if ("storage.uploadFile" === e2) {
        o2 = new FormData();
        for (let e3 in o2)
          o2.hasOwnProperty(e3) && void 0 !== o2[e3] && o2.append(e3, i2[e3]);
        r2 = "multipart/form-data";
      } else {
        r2 = "application/json", o2 = {};
        for (let e3 in i2)
          void 0 !== i2[e3] && (o2[e3] = i2[e3]);
      }
      let a2 = { headers: { "content-type": r2 } };
      n2 && n2.onUploadProgress && (a2.onUploadProgress = n2.onUploadProgress);
      const c2 = this._localCache.getStore(s2);
      c2 && (a2.headers["X-TCB-Trace"] = c2);
      const { parse: u2, inQuery: h2, search: l2 } = t2;
      let d2 = { env: this.config.env };
      u2 && (d2.parse = true), h2 && (d2 = { ...h2, ...d2 });
      let p2 = function(e3, t3, n3 = {}) {
        const s3 = /\?/.test(t3);
        let r3 = "";
        for (let e4 in n3)
          "" === r3 ? !s3 && (t3 += "?") : r3 += "&", r3 += `${e4}=${encodeURIComponent(n3[e4])}`;
        return /^http(s)?\:\/\//.test(t3 += r3) ? t3 : `${e3}${t3}`;
      }(ge$1, "//tcb-api.tencentcloudapi.com/web", d2);
      l2 && (p2 += l2);
      const f2 = await this.post({ url: p2, data: o2, ...a2 }), g2 = f2.header && f2.header["x-tcb-trace"];
      if (g2 && this._localCache.setStore(s2, g2), 200 !== Number(f2.status) && 200 !== Number(f2.statusCode) || !f2.data)
        throw new te$1({ code: "NETWORK_ERROR", message: "network request error" });
      return f2;
    }
    async send(e2, t2 = {}) {
      const n2 = await this.request(e2, t2, { onUploadProgress: t2.onUploadProgress });
      if ("ACCESS_TOKEN_EXPIRED" === n2.data.code && -1 === ze.indexOf(e2)) {
        await this.refreshAccessToken();
        const n3 = await this.request(e2, t2, { onUploadProgress: t2.onUploadProgress });
        if (n3.data.code)
          throw new te$1({ code: n3.data.code, message: n3.data.message });
        return n3.data;
      }
      if (n2.data.code)
        throw new te$1({ code: n2.data.code, message: n2.data.message });
      return n2.data;
    }
    setRefreshToken(e2) {
      const { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.removeStore(n2), this._cache.setStore(s2, e2);
    }
  };
  const Qe$1 = {};
  function Xe$1(e2) {
    return Qe$1[e2];
  }
  let Ze$1 = class Ze {
    constructor(e2) {
      this.config = e2, this._cache = Re$1(e2.env), this._request = Xe$1(e2.env);
    }
    setRefreshToken(e2) {
      const { accessTokenKey: t2, accessTokenExpireKey: n2, refreshTokenKey: s2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.removeStore(n2), this._cache.setStore(s2, e2);
    }
    setAccessToken(e2, t2) {
      const { accessTokenKey: n2, accessTokenExpireKey: s2 } = this._cache.keys;
      this._cache.setStore(n2, e2), this._cache.setStore(s2, t2);
    }
    async refreshUserInfo() {
      const { data: e2 } = await this._request.send("auth.getUserInfo", {});
      return this.setLocalUserInfo(e2), e2;
    }
    setLocalUserInfo(e2) {
      const { userInfoKey: t2 } = this._cache.keys;
      this._cache.setStore(t2, e2);
    }
  };
  let et$1 = class et {
    constructor(e2) {
      if (!e2)
        throw new te$1({ code: "PARAM_ERROR", message: "envId is not defined" });
      this._envId = e2, this._cache = Re$1(this._envId), this._request = Xe$1(this._envId), this.setUserInfo();
    }
    linkWithTicket(e2) {
      if ("string" != typeof e2)
        throw new te$1({ code: "PARAM_ERROR", message: "ticket must be string" });
      return this._request.send("auth.linkWithTicket", { ticket: e2 });
    }
    linkWithRedirect(e2) {
      e2.signInWithRedirect();
    }
    updatePassword(e2, t2) {
      return this._request.send("auth.updatePassword", { oldPassword: t2, newPassword: e2 });
    }
    updateEmail(e2) {
      return this._request.send("auth.updateEmail", { newEmail: e2 });
    }
    updateUsername(e2) {
      if ("string" != typeof e2)
        throw new te$1({ code: "PARAM_ERROR", message: "username must be a string" });
      return this._request.send("auth.updateUsername", { username: e2 });
    }
    async getLinkedUidList() {
      const { data: e2 } = await this._request.send("auth.getLinkedUidList", {});
      let t2 = false;
      const { users: n2 } = e2;
      return n2.forEach((e3) => {
        e3.wxOpenId && e3.wxPublicId && (t2 = true);
      }), { users: n2, hasPrimaryUid: t2 };
    }
    setPrimaryUid(e2) {
      return this._request.send("auth.setPrimaryUid", { uid: e2 });
    }
    unlink(e2) {
      return this._request.send("auth.unlink", { platform: e2 });
    }
    async update(e2) {
      const { nickName: t2, gender: n2, avatarUrl: s2, province: r2, country: i2, city: o2 } = e2, { data: a2 } = await this._request.send("auth.updateUserInfo", { nickName: t2, gender: n2, avatarUrl: s2, province: r2, country: i2, city: o2 });
      this.setLocalUserInfo(a2);
    }
    async refresh() {
      const { data: e2 } = await this._request.send("auth.getUserInfo", {});
      return this.setLocalUserInfo(e2), e2;
    }
    setUserInfo() {
      const { userInfoKey: e2 } = this._cache.keys, t2 = this._cache.getStore(e2);
      ["uid", "loginType", "openid", "wxOpenId", "wxPublicId", "unionId", "qqMiniOpenId", "email", "hasPassword", "customUserId", "nickName", "gender", "avatarUrl"].forEach((e3) => {
        this[e3] = t2[e3];
      }), this.location = { country: t2.country, province: t2.province, city: t2.city };
    }
    setLocalUserInfo(e2) {
      const { userInfoKey: t2 } = this._cache.keys;
      this._cache.setStore(t2, e2), this.setUserInfo();
    }
  };
  let tt$1 = class tt {
    constructor(e2) {
      if (!e2)
        throw new te$1({ code: "PARAM_ERROR", message: "envId is not defined" });
      this._cache = Re$1(e2);
      const { refreshTokenKey: t2, accessTokenKey: n2, accessTokenExpireKey: s2 } = this._cache.keys, r2 = this._cache.getStore(t2), i2 = this._cache.getStore(n2), o2 = this._cache.getStore(s2);
      this.credential = { refreshToken: r2, accessToken: i2, accessTokenExpire: o2 }, this.user = new et$1(e2);
    }
    get isAnonymousAuth() {
      return this.loginType === He$1.ANONYMOUS;
    }
    get isCustomAuth() {
      return this.loginType === He$1.CUSTOM;
    }
    get isWeixinAuth() {
      return this.loginType === He$1.WECHAT || this.loginType === He$1.WECHAT_OPEN || this.loginType === He$1.WECHAT_PUBLIC;
    }
    get loginType() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    }
  };
  let nt$1 = class nt extends Ze$1 {
    async signIn() {
      this._cache.updatePersistence("local");
      const { anonymousUuidKey: e2, refreshTokenKey: t2 } = this._cache.keys, n2 = this._cache.getStore(e2) || void 0, s2 = this._cache.getStore(t2) || void 0, r2 = await this._request.send("auth.signInAnonymously", { anonymous_uuid: n2, refresh_token: s2 });
      if (r2.uuid && r2.refresh_token) {
        this._setAnonymousUUID(r2.uuid), this.setRefreshToken(r2.refresh_token), await this._request.refreshAccessToken(), qe(Ke$1), qe($e, { env: this.config.env, loginType: He$1.ANONYMOUS, persistence: "local" });
        const e3 = new tt$1(this.config.env);
        return await e3.user.refresh(), e3;
      }
      throw new te$1({ message: "匿名登录失败" });
    }
    async linkAndRetrieveDataWithTicket(e2) {
      const { anonymousUuidKey: t2, refreshTokenKey: n2 } = this._cache.keys, s2 = this._cache.getStore(t2), r2 = this._cache.getStore(n2), i2 = await this._request.send("auth.linkAndRetrieveDataWithTicket", { anonymous_uuid: s2, refresh_token: r2, ticket: e2 });
      if (i2.refresh_token)
        return this._clearAnonymousUUID(), this.setRefreshToken(i2.refresh_token), await this._request.refreshAccessToken(), qe(Be$1, { env: this.config.env }), qe($e, { loginType: He$1.CUSTOM, persistence: "local" }), { credential: { refreshToken: i2.refresh_token } };
      throw new te$1({ message: "匿名转化失败" });
    }
    _setAnonymousUUID(e2) {
      const { anonymousUuidKey: t2, loginTypeKey: n2 } = this._cache.keys;
      this._cache.removeStore(t2), this._cache.setStore(t2, e2), this._cache.setStore(n2, He$1.ANONYMOUS);
    }
    _clearAnonymousUUID() {
      this._cache.removeStore(this._cache.keys.anonymousUuidKey);
    }
  };
  let st$1 = class st extends Ze$1 {
    async signIn(e2) {
      if ("string" != typeof e2)
        throw new te$1({ code: "PARAM_ERROR", message: "ticket must be a string" });
      const { refreshTokenKey: t2 } = this._cache.keys, n2 = await this._request.send("auth.signInWithTicket", { ticket: e2, refresh_token: this._cache.getStore(t2) || "" });
      if (n2.refresh_token)
        return this.setRefreshToken(n2.refresh_token), await this._request.refreshAccessToken(), qe(Ke$1), qe($e, { env: this.config.env, loginType: He$1.CUSTOM, persistence: this.config.persistence }), await this.refreshUserInfo(), new tt$1(this.config.env);
      throw new te$1({ message: "自定义登录失败" });
    }
  };
  let rt$1 = class rt extends Ze$1 {
    async signIn(e2, t2) {
      if ("string" != typeof e2)
        throw new te$1({ code: "PARAM_ERROR", message: "email must be a string" });
      const { refreshTokenKey: n2 } = this._cache.keys, s2 = await this._request.send("auth.signIn", { loginType: "EMAIL", email: e2, password: t2, refresh_token: this._cache.getStore(n2) || "" }), { refresh_token: r2, access_token: i2, access_token_expire: o2 } = s2;
      if (r2)
        return this.setRefreshToken(r2), i2 && o2 ? this.setAccessToken(i2, o2) : await this._request.refreshAccessToken(), await this.refreshUserInfo(), qe(Ke$1), qe($e, { env: this.config.env, loginType: He$1.EMAIL, persistence: this.config.persistence }), new tt$1(this.config.env);
      throw s2.code ? new te$1({ code: s2.code, message: `邮箱登录失败: ${s2.message}` }) : new te$1({ message: "邮箱登录失败" });
    }
    async activate(e2) {
      return this._request.send("auth.activateEndUserMail", { token: e2 });
    }
    async resetPasswordWithToken(e2, t2) {
      return this._request.send("auth.resetPasswordWithToken", { token: e2, newPassword: t2 });
    }
  };
  let it$1 = class it extends Ze$1 {
    async signIn(e2, t2) {
      if ("string" != typeof e2)
        throw new te$1({ code: "PARAM_ERROR", message: "username must be a string" });
      "string" != typeof t2 && (t2 = "", console.warn("password is empty"));
      const { refreshTokenKey: n2 } = this._cache.keys, s2 = await this._request.send("auth.signIn", { loginType: He$1.USERNAME, username: e2, password: t2, refresh_token: this._cache.getStore(n2) || "" }), { refresh_token: r2, access_token_expire: i2, access_token: o2 } = s2;
      if (r2)
        return this.setRefreshToken(r2), o2 && i2 ? this.setAccessToken(o2, i2) : await this._request.refreshAccessToken(), await this.refreshUserInfo(), qe(Ke$1), qe($e, { env: this.config.env, loginType: He$1.USERNAME, persistence: this.config.persistence }), new tt$1(this.config.env);
      throw s2.code ? new te$1({ code: s2.code, message: `用户名密码登录失败: ${s2.message}` }) : new te$1({ message: "用户名密码登录失败" });
    }
  };
  let ot$1 = class ot {
    constructor(e2) {
      this.config = e2, this._cache = Re$1(e2.env), this._request = Xe$1(e2.env), this._onAnonymousConverted = this._onAnonymousConverted.bind(this), this._onLoginTypeChanged = this._onLoginTypeChanged.bind(this), Me$1($e, this._onLoginTypeChanged);
    }
    get currentUser() {
      const e2 = this.hasLoginState();
      return e2 && e2.user || null;
    }
    get loginType() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    }
    anonymousAuthProvider() {
      return new nt$1(this.config);
    }
    customAuthProvider() {
      return new st$1(this.config);
    }
    emailAuthProvider() {
      return new rt$1(this.config);
    }
    usernameAuthProvider() {
      return new it$1(this.config);
    }
    async signInAnonymously() {
      return new nt$1(this.config).signIn();
    }
    async signInWithEmailAndPassword(e2, t2) {
      return new rt$1(this.config).signIn(e2, t2);
    }
    signInWithUsernameAndPassword(e2, t2) {
      return new it$1(this.config).signIn(e2, t2);
    }
    async linkAndRetrieveDataWithTicket(e2) {
      this._anonymousAuthProvider || (this._anonymousAuthProvider = new nt$1(this.config)), Me$1(Be$1, this._onAnonymousConverted);
      return await this._anonymousAuthProvider.linkAndRetrieveDataWithTicket(e2);
    }
    async signOut() {
      if (this.loginType === He$1.ANONYMOUS)
        throw new te$1({ message: "匿名用户不支持登出操作" });
      const { refreshTokenKey: e2, accessTokenKey: t2, accessTokenExpireKey: n2 } = this._cache.keys, s2 = this._cache.getStore(e2);
      if (!s2)
        return;
      const r2 = await this._request.send("auth.logout", { refresh_token: s2 });
      return this._cache.removeStore(e2), this._cache.removeStore(t2), this._cache.removeStore(n2), qe(Ke$1), qe($e, { env: this.config.env, loginType: He$1.NULL, persistence: this.config.persistence }), r2;
    }
    async signUpWithEmailAndPassword(e2, t2) {
      return this._request.send("auth.signUpWithEmailAndPassword", { email: e2, password: t2 });
    }
    async sendPasswordResetEmail(e2) {
      return this._request.send("auth.sendPasswordResetEmail", { email: e2 });
    }
    onLoginStateChanged(e2) {
      Me$1(Ke$1, () => {
        const t3 = this.hasLoginState();
        e2.call(this, t3);
      });
      const t2 = this.hasLoginState();
      e2.call(this, t2);
    }
    onLoginStateExpired(e2) {
      Me$1(je$1, e2.bind(this));
    }
    onAccessTokenRefreshed(e2) {
      Me$1(We$1, e2.bind(this));
    }
    onAnonymousConverted(e2) {
      Me$1(Be$1, e2.bind(this));
    }
    onLoginTypeChanged(e2) {
      Me$1($e, () => {
        const t2 = this.hasLoginState();
        e2.call(this, t2);
      });
    }
    async getAccessToken() {
      return { accessToken: (await this._request.getAccessToken()).accessToken, env: this.config.env };
    }
    hasLoginState() {
      const { refreshTokenKey: e2 } = this._cache.keys;
      return this._cache.getStore(e2) ? new tt$1(this.config.env) : null;
    }
    async isUsernameRegistered(e2) {
      if ("string" != typeof e2)
        throw new te$1({ code: "PARAM_ERROR", message: "username must be a string" });
      const { data: t2 } = await this._request.send("auth.isUsernameRegistered", { username: e2 });
      return t2 && t2.isRegistered;
    }
    getLoginState() {
      return Promise.resolve(this.hasLoginState());
    }
    async signInWithTicket(e2) {
      return new st$1(this.config).signIn(e2);
    }
    shouldRefreshAccessToken(e2) {
      this._request._shouldRefreshAccessTokenHook = e2.bind(this);
    }
    getUserInfo() {
      return this._request.send("auth.getUserInfo", {}).then((e2) => e2.code ? e2 : { ...e2.data, requestId: e2.seqId });
    }
    getAuthHeader() {
      const { refreshTokenKey: e2, accessTokenKey: t2 } = this._cache.keys, n2 = this._cache.getStore(e2);
      return { "x-cloudbase-credentials": this._cache.getStore(t2) + "/@@/" + n2 };
    }
    _onAnonymousConverted(e2) {
      const { env: t2 } = e2.data;
      t2 === this.config.env && this._cache.updatePersistence(this.config.persistence);
    }
    _onLoginTypeChanged(e2) {
      const { loginType: t2, persistence: n2, env: s2 } = e2.data;
      s2 === this.config.env && (this._cache.updatePersistence(n2), this._cache.setStore(this._cache.keys.loginTypeKey, t2));
    }
  };
  const at$1 = function(e2, t2) {
    t2 = t2 || Ie();
    const n2 = Xe$1(this.config.env), { cloudPath: s2, filePath: r2, onUploadProgress: i2, fileType: o2 = "image" } = e2;
    return n2.send("storage.getUploadMetadata", { path: s2 }).then((e3) => {
      const { data: { url: a2, authorization: c2, token: u2, fileId: h2, cosFileId: l2 }, requestId: d2 } = e3, p2 = { key: s2, signature: c2, "x-cos-meta-fileid": l2, success_action_status: "201", "x-cos-security-token": u2 };
      n2.upload({ url: a2, data: p2, file: r2, name: s2, fileType: o2, onUploadProgress: i2 }).then((e4) => {
        201 === e4.statusCode ? t2(null, { fileID: h2, requestId: d2 }) : t2(new te$1({ code: "STORAGE_REQUEST_FAIL", message: `STORAGE_REQUEST_FAIL: ${e4.data}` }));
      }).catch((e4) => {
        t2(e4);
      });
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, ct$1 = function(e2, t2) {
    t2 = t2 || Ie();
    const n2 = Xe$1(this.config.env), { cloudPath: s2 } = e2;
    return n2.send("storage.getUploadMetadata", { path: s2 }).then((e3) => {
      t2(null, e3);
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, ut$1 = function({ fileList: e2 }, t2) {
    if (t2 = t2 || Ie(), !e2 || !Array.isArray(e2))
      return { code: "INVALID_PARAM", message: "fileList必须是非空的数组" };
    for (let t3 of e2)
      if (!t3 || "string" != typeof t3)
        return { code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" };
    const n2 = { fileid_list: e2 };
    return Xe$1(this.config.env).send("storage.batchDeleteFile", n2).then((e3) => {
      e3.code ? t2(null, e3) : t2(null, { fileList: e3.data.delete_list, requestId: e3.requestId });
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, ht$1 = function({ fileList: e2 }, t2) {
    t2 = t2 || Ie(), e2 && Array.isArray(e2) || t2(null, { code: "INVALID_PARAM", message: "fileList必须是非空的数组" });
    let n2 = [];
    for (let s3 of e2)
      "object" == typeof s3 ? (s3.hasOwnProperty("fileID") && s3.hasOwnProperty("maxAge") || t2(null, { code: "INVALID_PARAM", message: "fileList的元素必须是包含fileID和maxAge的对象" }), n2.push({ fileid: s3.fileID, max_age: s3.maxAge })) : "string" == typeof s3 ? n2.push({ fileid: s3 }) : t2(null, { code: "INVALID_PARAM", message: "fileList的元素必须是字符串" });
    const s2 = { file_list: n2 };
    return Xe$1(this.config.env).send("storage.batchGetDownloadUrl", s2).then((e3) => {
      e3.code ? t2(null, e3) : t2(null, { fileList: e3.data.download_list, requestId: e3.requestId });
    }).catch((e3) => {
      t2(e3);
    }), t2.promise;
  }, lt$1 = async function({ fileID: e2 }, t2) {
    const n2 = (await ht$1.call(this, { fileList: [{ fileID: e2, maxAge: 600 }] })).fileList[0];
    if ("SUCCESS" !== n2.code)
      return t2 ? t2(n2) : new Promise((e3) => {
        e3(n2);
      });
    const s2 = Xe$1(this.config.env);
    let r2 = n2.download_url;
    if (r2 = encodeURI(r2), !t2)
      return s2.download({ url: r2 });
    t2(await s2.download({ url: r2 }));
  }, dt$1 = function({ name: e2, data: t2, query: n2, parse: s2, search: r2 }, i2) {
    const o2 = i2 || Ie();
    let a2;
    try {
      a2 = t2 ? JSON.stringify(t2) : "";
    } catch (e3) {
      return Promise.reject(e3);
    }
    if (!e2)
      return Promise.reject(new te$1({ code: "PARAM_ERROR", message: "函数名不能为空" }));
    const c2 = { inQuery: n2, parse: s2, search: r2, function_name: e2, request_data: a2 };
    return Xe$1(this.config.env).send("functions.invokeFunction", c2).then((e3) => {
      if (e3.code)
        o2(null, e3);
      else {
        let t3 = e3.data.response_data;
        if (s2)
          o2(null, { result: t3, requestId: e3.requestId });
        else
          try {
            t3 = JSON.parse(e3.data.response_data), o2(null, { result: t3, requestId: e3.requestId });
          } catch (e4) {
            o2(new te$1({ message: "response data must be json" }));
          }
      }
      return o2.promise;
    }).catch((e3) => {
      o2(e3);
    }), o2.promise;
  }, pt$1 = { timeout: 15e3, persistence: "session" }, ft$1 = {};
  let gt$1 = class gt2 {
    constructor(e2) {
      this.config = e2 || this.config, this.authObj = void 0;
    }
    init(e2) {
      switch (Ce.adapter || (this.requestClient = new Ce.adapter.reqClass({ timeout: e2.timeout || 5e3, timeoutMsg: `请求在${(e2.timeout || 5e3) / 1e3}s内未完成，已中断` })), this.config = { ...pt$1, ...e2 }, true) {
        case this.config.timeout > 6e5:
          console.warn("timeout大于可配置上限[10分钟]，已重置为上限数值"), this.config.timeout = 6e5;
          break;
        case this.config.timeout < 100:
          console.warn("timeout小于可配置下限[100ms]，已重置为下限数值"), this.config.timeout = 100;
      }
      return new gt2(this.config);
    }
    auth({ persistence: e2 } = {}) {
      if (this.authObj)
        return this.authObj;
      const t2 = e2 || Ce.adapter.primaryStorage || pt$1.persistence;
      var n2;
      return t2 !== this.config.persistence && (this.config.persistence = t2), function(e3) {
        const { env: t3 } = e3;
        Ee$1[t3] = new Oe(e3), Le$1[t3] = new Oe({ ...e3, persistence: "local" });
      }(this.config), n2 = this.config, Qe$1[n2.env] = new Ye$1(n2), this.authObj = new ot$1(this.config), this.authObj;
    }
    on(e2, t2) {
      return Me$1.apply(this, [e2, t2]);
    }
    off(e2, t2) {
      return Fe.apply(this, [e2, t2]);
    }
    callFunction(e2, t2) {
      return dt$1.apply(this, [e2, t2]);
    }
    deleteFile(e2, t2) {
      return ut$1.apply(this, [e2, t2]);
    }
    getTempFileURL(e2, t2) {
      return ht$1.apply(this, [e2, t2]);
    }
    downloadFile(e2, t2) {
      return lt$1.apply(this, [e2, t2]);
    }
    uploadFile(e2, t2) {
      return at$1.apply(this, [e2, t2]);
    }
    getUploadMetadata(e2, t2) {
      return ct$1.apply(this, [e2, t2]);
    }
    registerExtension(e2) {
      ft$1[e2.name] = e2;
    }
    async invokeExtension(e2, t2) {
      const n2 = ft$1[e2];
      if (!n2)
        throw new te$1({ message: `扩展${e2} 必须先注册` });
      return await n2.invoke(t2, this);
    }
    useAdapters(e2) {
      const { adapter: t2, runtime: n2 } = Ae$1(e2) || {};
      t2 && (Ce.adapter = t2), n2 && (Ce.runtime = n2);
    }
  };
  var mt$1 = new gt$1();
  function yt$1(e2, t2, n2) {
    void 0 === n2 && (n2 = {});
    var s2 = /\?/.test(t2), r2 = "";
    for (var i2 in n2)
      "" === r2 ? !s2 && (t2 += "?") : r2 += "&", r2 += i2 + "=" + encodeURIComponent(n2[i2]);
    return /^http(s)?:\/\//.test(t2 += r2) ? t2 : "" + e2 + t2;
  }
  let _t$1 = class _t {
    post(e2) {
      const { url: t2, data: n2, headers: s2 } = e2;
      return new Promise((e3, r2) => {
        ne$1.request({ url: yt$1("https:", t2), data: n2, method: "POST", header: s2, success(t3) {
          e3(t3);
        }, fail(e4) {
          r2(e4);
        } });
      });
    }
    upload(e2) {
      return new Promise((t2, n2) => {
        const { url: s2, file: r2, data: i2, headers: o2, fileType: a2 } = e2, c2 = ne$1.uploadFile({ url: yt$1("https:", s2), name: "file", formData: Object.assign({}, i2), filePath: r2, fileType: a2, header: o2, success(e3) {
          const n3 = { statusCode: e3.statusCode, data: e3.data || {} };
          200 === e3.statusCode && i2.success_action_status && (n3.statusCode = parseInt(i2.success_action_status, 10)), t2(n3);
        }, fail(e3) {
          n2(new Error(e3.errMsg || "uploadFile:fail"));
        } });
        "function" == typeof e2.onUploadProgress && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((t3) => {
          e2.onUploadProgress({ loaded: t3.totalBytesSent, total: t3.totalBytesExpectedToSend });
        });
      });
    }
  };
  const wt$1 = { setItem(e2, t2) {
    ne$1.setStorageSync(e2, t2);
  }, getItem: (e2) => ne$1.getStorageSync(e2), removeItem(e2) {
    ne$1.removeStorageSync(e2);
  }, clear() {
    ne$1.clearStorageSync();
  } };
  var vt$1 = { genAdapter: function() {
    return { root: {}, reqClass: _t$1, localStorage: wt$1, primaryStorage: "local" };
  }, isMatch: function() {
    return true;
  }, runtime: "uni_app" };
  mt$1.useAdapters(vt$1);
  const It$1 = mt$1, St$1 = It$1.init;
  It$1.init = function(e2) {
    e2.env = e2.spaceId;
    const t2 = St$1.call(this, e2);
    t2.config.provider = "tencent", t2.config.spaceId = e2.spaceId;
    const n2 = t2.auth;
    return t2.auth = function(e3) {
      const t3 = n2.call(this, e3);
      return ["linkAndRetrieveDataWithTicket", "signInAnonymously", "signOut", "getAccessToken", "getLoginState", "signInWithTicket", "getUserInfo"].forEach((e4) => {
        var n3;
        t3[e4] = (n3 = t3[e4], function(e5) {
          e5 = e5 || {};
          const { success: t4, fail: s2, complete: r2 } = ee$1(e5);
          if (!(t4 || s2 || r2))
            return n3.call(this, e5);
          n3.call(this, e5).then((e6) => {
            t4 && t4(e6), r2 && r2(e6);
          }, (e6) => {
            s2 && s2(e6), r2 && r2(e6);
          });
        }).bind(t3);
      }), t3;
    }, t2.customAuth = t2.auth, t2;
  };
  var bt$1 = It$1;
  var kt = class extends pe {
    getAccessToken() {
      return new Promise((e2, t2) => {
        const n2 = "Anonymous_Access_token";
        this.setAccessToken(n2), e2(n2);
      });
    }
    setupRequest(e2, t2) {
      const n2 = Object.assign({}, e2, { spaceId: this.config.spaceId, timestamp: Date.now() }), s2 = { "Content-Type": "application/json" };
      "auth" !== t2 && (n2.token = this.accessToken, s2["x-basement-token"] = this.accessToken), s2["x-serverless-sign"] = de.sign(n2, this.config.clientSecret);
      const r2 = le();
      s2["x-client-info"] = encodeURIComponent(JSON.stringify(r2));
      const { token: i2 } = re();
      return s2["x-client-token"] = i2, { url: this.config.requestUrl, method: "POST", data: n2, dataType: "json", header: JSON.parse(JSON.stringify(s2)) };
    }
    uploadFileToOSS({ url: e2, formData: t2, name: n2, filePath: s2, fileType: r2, onUploadProgress: i2 }) {
      return new Promise((o2, a2) => {
        const c2 = this.adapter.uploadFile({ url: e2, formData: t2, name: n2, filePath: s2, fileType: r2, success(e3) {
          e3 && e3.statusCode < 400 ? o2(e3) : a2(new te$1({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
        }, fail(e3) {
          a2(new te$1({ code: e3.code || "UPLOAD_FAILED", message: e3.message || e3.errMsg || "文件上传失败" }));
        } });
        "function" == typeof i2 && c2 && "function" == typeof c2.onProgressUpdate && c2.onProgressUpdate((e3) => {
          i2({ loaded: e3.totalBytesSent, total: e3.totalBytesExpectedToSend });
        });
      });
    }
    uploadFile({ filePath: e2, cloudPath: t2, fileType: n2 = "image", onUploadProgress: s2 }) {
      if (!t2)
        throw new te$1({ code: "CLOUDPATH_REQUIRED", message: "cloudPath不可为空" });
      let r2;
      return this.getOSSUploadOptionsFromPath({ cloudPath: t2 }).then((t3) => {
        const { url: i2, formData: o2, name: a2 } = t3.result;
        r2 = t3.result.fileUrl;
        const c2 = { url: i2, formData: o2, name: a2, filePath: e2, fileType: n2 };
        return this.uploadFileToOSS(Object.assign({}, c2, { onUploadProgress: s2 }));
      }).then(() => this.reportOSSUpload({ cloudPath: t2 })).then((t3) => new Promise((n3, s3) => {
        t3.success ? n3({ success: true, filePath: e2, fileID: r2 }) : s3(new te$1({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
      }));
    }
    deleteFile({ fileList: e2 }) {
      const t2 = { method: "serverless.file.resource.delete", params: JSON.stringify({ fileList: e2 }) };
      return this.request(this.setupRequest(t2)).then((e3) => {
        if (e3.success)
          return e3.result;
        throw new te$1({ code: "DELETE_FILE_FAILED", message: "删除文件失败" });
      });
    }
    getTempFileURL({ fileList: e2, maxAge: t2 } = {}) {
      if (!Array.isArray(e2) || 0 === e2.length)
        throw new te$1({ code: "INVALID_PARAM", message: "fileList的元素必须是非空的字符串" });
      const n2 = { method: "serverless.file.resource.getTempFileURL", params: JSON.stringify({ fileList: e2, maxAge: t2 }) };
      return this.request(this.setupRequest(n2)).then((e3) => {
        if (e3.success)
          return { fileList: e3.result.fileList.map((e4) => ({ fileID: e4.fileID, tempFileURL: e4.tempFileURL })) };
        throw new te$1({ code: "GET_TEMP_FILE_URL_FAILED", message: "获取临时文件链接失败" });
      });
    }
  };
  var At = { init(e2) {
    const t2 = new kt(e2), n2 = { signInAnonymously: function() {
      return t2.authorize();
    }, getLoginState: function() {
      return Promise.resolve(false);
    } };
    return t2.auth = function() {
      return n2;
    }, t2.customAuth = t2.auth, t2;
  } }, Ct$1 = n(function(e2, t2) {
    e2.exports = r.enc.Hex;
  });
  function Pt() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e2) {
      var t2 = 16 * Math.random() | 0;
      return ("x" === e2 ? t2 : 3 & t2 | 8).toString(16);
    });
  }
  function Tt$1(e2 = "", t2 = {}) {
    const { data: n2, functionName: s2, method: r2, headers: i2, signHeaderKeys: o2 = [], config: a2 } = t2, c2 = Date.now(), u2 = Pt(), h2 = Object.assign({}, i2, { "x-from-app-id": a2.spaceAppId, "x-from-env-id": a2.spaceId, "x-to-env-id": a2.spaceId, "x-from-instance-id": c2, "x-from-function-name": s2, "x-client-timestamp": c2, "x-alipay-source": "client", "x-request-id": u2, "x-alipay-callid": u2, "x-trace-id": u2 }), l2 = ["x-from-app-id", "x-from-env-id", "x-to-env-id", "x-from-instance-id", "x-from-function-name", "x-client-timestamp"].concat(o2), [d2 = "", p2 = ""] = e2.split("?") || [], f2 = function(e3) {
      const t3 = e3.signedHeaders.join(";"), n3 = e3.signedHeaders.map((t4) => `${t4.toLowerCase()}:${e3.headers[t4]}
`).join(""), s3 = we$1(e3.body).toString(Ct$1), r3 = `${e3.method.toUpperCase()}
${e3.path}
${e3.query}
${n3}
${t3}
${s3}
`, i3 = we$1(r3).toString(Ct$1), o3 = `HMAC-SHA256
${e3.timestamp}
${i3}
`, a3 = ve$1(o3, e3.secretKey).toString(Ct$1);
      return `HMAC-SHA256 Credential=${e3.secretId}, SignedHeaders=${t3}, Signature=${a3}`;
    }({ path: d2, query: p2, method: r2, headers: h2, timestamp: c2, body: JSON.stringify(n2), secretId: a2.accessKey, secretKey: a2.secretKey, signedHeaders: l2.sort() });
    return { url: `${a2.endpoint}${e2}`, headers: Object.assign({}, h2, { Authorization: f2 }) };
  }
  function xt$1({ url: e2, data: t2, method: n2 = "POST", headers: s2 = {} }) {
    return new Promise((r2, i2) => {
      ne$1.request({ url: e2, method: n2, data: "object" == typeof t2 ? JSON.stringify(t2) : t2, header: s2, dataType: "json", complete: (e3 = {}) => {
        const t3 = s2["x-trace-id"] || "";
        if (!e3.statusCode || e3.statusCode >= 400) {
          const { message: n3, errMsg: s3, trace_id: r3 } = e3.data || {};
          return i2(new te$1({ code: "SYS_ERR", message: n3 || s3 || "request:fail", requestId: r3 || t3 }));
        }
        r2({ status: e3.statusCode, data: e3.data, headers: e3.header, requestId: t3 });
      } });
    });
  }
  function Ot$1(e2, t2) {
    const { path: n2, data: s2, method: r2 = "GET" } = e2, { url: i2, headers: o2 } = Tt$1(n2, { functionName: "", data: s2, method: r2, headers: { "x-alipay-cloud-mode": "oss", "x-data-api-type": "oss", "x-expire-timestamp": Date.now() + 6e4 }, signHeaderKeys: ["x-data-api-type", "x-expire-timestamp"], config: t2 });
    return xt$1({ url: i2, data: s2, method: r2, headers: o2 }).then((e3) => {
      const t3 = e3.data || {};
      if (!t3.success)
        throw new te$1({ code: e3.errCode, message: e3.errMsg, requestId: e3.requestId });
      return t3.data || {};
    }).catch((e3) => {
      throw new te$1({ code: e3.errCode, message: e3.errMsg, requestId: e3.requestId });
    });
  }
  function Et(e2 = "") {
    const t2 = e2.trim().replace(/^cloud:\/\//, ""), n2 = t2.indexOf("/");
    if (n2 <= 0)
      throw new te$1({ code: "INVALID_PARAM", message: "fileID不合法" });
    const s2 = t2.substring(0, n2), r2 = t2.substring(n2 + 1);
    return s2 !== this.config.spaceId && console.warn("file ".concat(e2, " does not belong to env ").concat(this.config.spaceId)), r2;
  }
  function Lt(e2 = "") {
    return "cloud://".concat(this.config.spaceId, "/").concat(e2.replace(/^\/+/, ""));
  }
  let Rt$1 = class Rt {
    constructor(e2) {
      this.config = e2;
    }
    signedURL(e2, t2 = {}) {
      const n2 = `/ws/function/${e2}`, s2 = this.config.wsEndpoint.replace(/^ws(s)?:\/\//, ""), r2 = Object.assign({}, t2, { accessKeyId: this.config.accessKey, signatureNonce: Pt(), timestamp: "" + Date.now() }), i2 = [n2, ["accessKeyId", "authorization", "signatureNonce", "timestamp"].sort().map(function(e3) {
        return r2[e3] ? "".concat(e3, "=").concat(r2[e3]) : null;
      }).filter(Boolean).join("&"), `host:${s2}`].join("\n"), o2 = ["HMAC-SHA256", we$1(i2).toString(Ct$1)].join("\n"), a2 = ve$1(o2, this.config.secretKey).toString(Ct$1), c2 = Object.keys(r2).map((e3) => `${e3}=${encodeURIComponent(r2[e3])}`).join("&");
      return `${this.config.wsEndpoint}${n2}?${c2}&signature=${a2}`;
    }
  };
  var Ut$1 = class Ut {
    constructor(e2) {
      if (["spaceId", "spaceAppId", "accessKey", "secretKey"].forEach((t2) => {
        if (!Object.prototype.hasOwnProperty.call(e2, t2))
          throw new Error(`${t2} required`);
      }), e2.endpoint) {
        if ("string" != typeof e2.endpoint)
          throw new Error("endpoint must be string");
        if (!/^https:\/\//.test(e2.endpoint))
          throw new Error("endpoint must start with https://");
        e2.endpoint = e2.endpoint.replace(/\/$/, "");
      }
      this.config = Object.assign({}, e2, { endpoint: e2.endpoint || `https://${e2.spaceId}.api-hz.cloudbasefunction.cn`, wsEndpoint: e2.wsEndpoint || `wss://${e2.spaceId}.api-hz.cloudbasefunction.cn` }), this._websocket = new Rt$1(this.config);
    }
    callFunction(e2) {
      return function(e3, t2) {
        const { name: n2, data: s2, async: r2 = false } = e3, i2 = "POST", o2 = { "x-to-function-name": n2 };
        r2 && (o2["x-function-invoke-type"] = "async");
        const { url: a2, headers: c2 } = Tt$1("/functions/invokeFunction", { functionName: n2, data: s2, method: i2, headers: o2, signHeaderKeys: ["x-to-function-name"], config: t2 });
        return xt$1({ url: a2, data: s2, method: i2, headers: c2 }).then((e4) => {
          let t3 = 0;
          if (r2) {
            const n3 = e4.data || {};
            t3 = "200" === n3.errCode ? 0 : n3.errCode, e4.data = n3.data || {}, e4.errMsg = n3.errMsg;
          }
          if (0 !== t3)
            throw new te$1({ code: t3, message: e4.errMsg, requestId: e4.requestId });
          return { errCode: t3, success: 0 === t3, requestId: e4.requestId, result: e4.data };
        }).catch((e4) => {
          throw new te$1({ code: e4.errCode, message: e4.errMsg, requestId: e4.requestId });
        });
      }(e2, this.config);
    }
    uploadFileToOSS({ url: e2, filePath: t2, fileType: n2, formData: s2, onUploadProgress: r2 }) {
      return new Promise((i2, o2) => {
        const a2 = ne$1.uploadFile({ url: e2, filePath: t2, fileType: n2, formData: s2, name: "file", success(e3) {
          e3 && e3.statusCode < 400 ? i2(e3) : o2(new te$1({ code: "UPLOAD_FAILED", message: "文件上传失败" }));
        }, fail(e3) {
          o2(new te$1({ code: e3.code || "UPLOAD_FAILED", message: e3.message || e3.errMsg || "文件上传失败" }));
        } });
        "function" == typeof r2 && a2 && "function" == typeof a2.onProgressUpdate && a2.onProgressUpdate((e3) => {
          r2({ loaded: e3.totalBytesSent, total: e3.totalBytesExpectedToSend });
        });
      });
    }
    async uploadFile({ filePath: e2, cloudPath: t2 = "", fileType: n2 = "image", onUploadProgress: s2 }) {
      if ("string" !== f$1(t2))
        throw new te$1({ code: "INVALID_PARAM", message: "cloudPath必须为字符串类型" });
      if (!(t2 = t2.trim()))
        throw new te$1({ code: "INVALID_PARAM", message: "cloudPath不可为空" });
      if (/:\/\//.test(t2))
        throw new te$1({ code: "INVALID_PARAM", message: "cloudPath不合法" });
      const r2 = await Ot$1({ path: "/".concat(t2.replace(/^\//, ""), "?post_url") }, this.config), { file_id: i2, upload_url: o2, form_data: a2 } = r2, c2 = a2 && a2.reduce((e3, t3) => (e3[t3.key] = t3.value, e3), {});
      return this.uploadFileToOSS({ url: o2, filePath: e2, fileType: n2, formData: c2, onUploadProgress: s2 }).then(() => ({ fileID: i2 }));
    }
    async getTempFileURL({ fileList: e2 }) {
      return new Promise((t2, n2) => {
        (!e2 || e2.length < 0) && n2(new te$1({ errCode: "INVALID_PARAM", errMsg: "fileList不能为空数组" })), e2.length > 50 && n2(new te$1({ errCode: "INVALID_PARAM", errMsg: "fileList数组长度不能超过50" }));
        const s2 = [];
        for (const t3 of e2) {
          "string" !== f$1(t3) && n2(new te$1({ errCode: "INVALID_PARAM", errMsg: "fileList的元素必须是非空的字符串" }));
          const e3 = Et.call(this, t3);
          s2.push({ file_id: e3, expire: 600 });
        }
        Ot$1({ path: "/?download_url", data: { file_list: s2 }, method: "POST" }, this.config).then((e3) => {
          const { file_list: n3 = [] } = e3;
          t2({ fileList: n3.map((e4) => ({ fileID: Lt.call(this, e4.file_id), tempFileURL: e4.download_url })) });
        }).catch((e3) => n2(e3));
      });
    }
    async connectWebSocket(e2) {
      const { name: t2, query: n2 } = e2;
      return ne$1.connectSocket({ url: this._websocket.signedURL(t2, n2), complete: () => {
      } });
    }
  };
  var Nt$1 = { init: (e2) => {
    e2.provider = "alipay";
    const t2 = new Ut$1(e2);
    return t2.auth = function() {
      return { signInAnonymously: function() {
        return Promise.resolve();
      }, getLoginState: function() {
        return Promise.resolve(true);
      } };
    }, t2;
  } };
  function Dt({ data: e2 }) {
    let t2;
    t2 = le();
    const n2 = JSON.parse(JSON.stringify(e2 || {}));
    if (Object.assign(n2, { clientInfo: t2 }), !n2.uniIdToken) {
      const { token: e3 } = re();
      e3 && (n2.uniIdToken = e3);
    }
    return n2;
  }
  async function Mt$1({ name: e2, data: t2 } = {}) {
    await this.__dev__.initLocalNetwork();
    const { localAddress: n2, localPort: s2 } = this.__dev__, r2 = { aliyun: "aliyun", tencent: "tcb", alipay: "alipay" }[this.config.provider], i2 = this.config.spaceId, o2 = `http://${n2}:${s2}/system/check-function`, a2 = `http://${n2}:${s2}/cloudfunctions/${e2}`;
    return new Promise((t3, n3) => {
      ne$1.request({ method: "POST", url: o2, data: { name: e2, platform: C$1, provider: r2, spaceId: i2 }, timeout: 3e3, success(e3) {
        t3(e3);
      }, fail() {
        t3({ data: { code: "NETWORK_ERROR", message: "连接本地调试服务失败，请检查客户端是否和主机在同一局域网下，自动切换为已部署的云函数。" } });
      } });
    }).then(({ data: e3 } = {}) => {
      const { code: t3, message: n3 } = e3 || {};
      return { code: 0 === t3 ? 0 : t3 || "SYS_ERR", message: n3 || "SYS_ERR" };
    }).then(({ code: n3, message: s3 }) => {
      if (0 !== n3) {
        switch (n3) {
          case "MODULE_ENCRYPTED":
            console.error(`此云函数（${e2}）依赖加密公共模块不可本地调试，自动切换为云端已部署的云函数`);
            break;
          case "FUNCTION_ENCRYPTED":
            console.error(`此云函数（${e2}）已加密不可本地调试，自动切换为云端已部署的云函数`);
            break;
          case "ACTION_ENCRYPTED":
            console.error(s3 || "需要访问加密的uni-clientDB-action，自动切换为云端环境");
            break;
          case "NETWORK_ERROR":
            console.error(s3 || "连接本地调试服务失败，请检查客户端是否和主机在同一局域网下");
            break;
          case "SWITCH_TO_CLOUD":
            break;
          default: {
            const e3 = `检测本地调试服务出现错误：${s3}，请检查网络环境或重启客户端再试`;
            throw console.error(e3), new Error(e3);
          }
        }
        return this._callCloudFunction({ name: e2, data: t2 });
      }
      return new Promise((e3, n4) => {
        const s4 = Dt.call(this, { data: t2 });
        ne$1.request({ method: "POST", url: a2, data: { provider: r2, platform: C$1, param: s4 }, success: ({ statusCode: t3, data: s5 } = {}) => !t3 || t3 >= 400 ? n4(new te$1({ code: s5.code || "SYS_ERR", message: s5.message || "request:fail" })) : e3({ result: s5 }), fail(e4) {
          n4(new te$1({ code: e4.code || e4.errCode || "SYS_ERR", message: e4.message || e4.errMsg || "request:fail" }));
        } });
      });
    });
  }
  const qt$1 = [{ rule: /fc_function_not_found|FUNCTION_NOT_FOUND/, content: "，云函数[{functionName}]在云端不存在，请检查此云函数名称是否正确以及该云函数是否已上传到服务空间", mode: "append" }];
  var Ft$1 = /[\\^$.*+?()[\]{}|]/g, Kt$1 = RegExp(Ft$1.source);
  function jt(e2, t2, n2) {
    return e2.replace(new RegExp((s2 = t2) && Kt$1.test(s2) ? s2.replace(Ft$1, "\\$&") : s2, "g"), n2);
    var s2;
  }
  const Bt$1 = "request", Wt$1 = "response", Ht$1 = "both";
  const Tn = { code: 2e4, message: "System error" }, xn = { code: 20101, message: "Invalid client" };
  function Ln(e2) {
    const { errSubject: t2, subject: n2, errCode: s2, errMsg: r2, code: i2, message: o2, cause: a2 } = e2 || {};
    return new te$1({ subject: t2 || n2 || "uni-secure-network", code: s2 || i2 || Tn.code, message: r2 || o2, cause: a2 });
  }
  let Un;
  function Fn({ secretType: e2 } = {}) {
    return e2 === Bt$1 || e2 === Wt$1 || e2 === Ht$1;
  }
  function Kn({ name: e2, data: t2 = {} } = {}) {
    return "DCloud-clientDB" === e2 && "encryption" === t2.redirectTo && "getAppClientKey" === t2.action;
  }
  function jn({ provider: e2, spaceId: t2, functionName: n2 } = {}) {
    const { appId: s2, uniPlatform: r2, osName: i2 } = ce$1();
    let o2 = r2;
    "app" === r2 && (o2 = i2);
    const a2 = function({ provider: e3, spaceId: t3 } = {}) {
      const n3 = A$1;
      if (!n3)
        return {};
      e3 = /* @__PURE__ */ function(e4) {
        return "tencent" === e4 ? "tcb" : e4;
      }(e3);
      const s3 = n3.find((n4) => n4.provider === e3 && n4.spaceId === t3);
      return s3 && s3.config;
    }({ provider: e2, spaceId: t2 });
    if (!a2 || !a2.accessControl || !a2.accessControl.enable)
      return false;
    const c2 = a2.accessControl.function || {}, u2 = Object.keys(c2);
    if (0 === u2.length)
      return true;
    const h2 = function(e3, t3) {
      let n3, s3, r3;
      for (let i3 = 0; i3 < e3.length; i3++) {
        const o3 = e3[i3];
        o3 !== t3 ? "*" !== o3 ? o3.split(",").map((e4) => e4.trim()).indexOf(t3) > -1 && (s3 = o3) : r3 = o3 : n3 = o3;
      }
      return n3 || s3 || r3;
    }(u2, n2);
    if (!h2)
      return false;
    if ((c2[h2] || []).find((e3 = {}) => e3.appId === s2 && (e3.platform || "").toLowerCase() === o2.toLowerCase()))
      return true;
    throw console.error(`此应用[appId: ${s2}, platform: ${o2}]不在云端配置的允许访问的应用列表内，参考：https://uniapp.dcloud.net.cn/uniCloud/secure-network.html#verify-client`), Ln(xn);
  }
  function $n({ functionName: e2, result: t2, logPvd: n2 }) {
    if (this.__dev__.debugLog && t2 && t2.requestId) {
      const s2 = JSON.stringify({ spaceId: this.config.spaceId, functionName: e2, requestId: t2.requestId });
      console.log(`[${n2}-request]${s2}[/${n2}-request]`);
    }
  }
  function Bn(e2) {
    const t2 = e2.callFunction, n2 = function(n3) {
      const s2 = n3.name;
      n3.data = Dt.call(e2, { data: n3.data });
      const r2 = { aliyun: "aliyun", tencent: "tcb", tcb: "tcb", alipay: "alipay" }[this.config.provider], i2 = Fn(n3), o2 = Kn(n3), a2 = i2 || o2;
      return t2.call(this, n3).then((e3) => (e3.errCode = 0, !a2 && $n.call(this, { functionName: s2, result: e3, logPvd: r2 }), Promise.resolve(e3)), (e3) => (!a2 && $n.call(this, { functionName: s2, result: e3, logPvd: r2 }), e3 && e3.message && (e3.message = function({ message: e4 = "", extraInfo: t3 = {}, formatter: n4 = [] } = {}) {
        for (let s3 = 0; s3 < n4.length; s3++) {
          const { rule: r3, content: i3, mode: o3 } = n4[s3], a3 = e4.match(r3);
          if (!a3)
            continue;
          let c2 = i3;
          for (let e5 = 1; e5 < a3.length; e5++)
            c2 = jt(c2, `{$${e5}}`, a3[e5]);
          for (const e5 in t3)
            c2 = jt(c2, `{${e5}}`, t3[e5]);
          return "replace" === o3 ? c2 : e4 + c2;
        }
        return e4;
      }({ message: `[${n3.name}]: ${e3.message}`, formatter: qt$1, extraInfo: { functionName: s2 } })), Promise.reject(e3)));
    };
    e2.callFunction = function(t3) {
      const { provider: s2, spaceId: r2 } = e2.config, i2 = t3.name;
      let o2, a2;
      if (t3.data = t3.data || {}, e2.__dev__.debugInfo && !e2.__dev__.debugInfo.forceRemote && T$1 ? (e2._callCloudFunction || (e2._callCloudFunction = n2, e2._callLocalFunction = Mt$1), o2 = Mt$1) : o2 = n2, o2 = o2.bind(e2), Kn(t3))
        a2 = n2.call(e2, t3);
      else if (Fn(t3)) {
        a2 = new Un({ secretType: t3.secretType, uniCloudIns: e2 }).wrapEncryptDataCallFunction(n2.bind(e2))(t3);
      } else if (jn({ provider: s2, spaceId: r2, functionName: i2 })) {
        a2 = new Un({ secretType: t3.secretType, uniCloudIns: e2 }).wrapVerifyClientCallFunction(n2.bind(e2))(t3);
      } else
        a2 = o2(t3);
      return Object.defineProperty(a2, "result", { get: () => (console.warn("当前返回结果为Promise类型，不可直接访问其result属性，详情请参考：https://uniapp.dcloud.net.cn/uniCloud/faq?id=promise"), {}) }), a2.then((e3) => ("undefined" != typeof UTSJSONObject && (e3.result = new UTSJSONObject(e3.result)), e3));
    };
  }
  Un = class {
    constructor() {
      throw Ln({ message: `Platform ${C$1} is not enabled, please check whether secure network module is enabled in your manifest.json` });
    }
  };
  const Wn = Symbol("CLIENT_DB_INTERNAL");
  function Hn(e2, t2) {
    return e2.then = "DoNotReturnProxyWithAFunctionNamedThen", e2._internalType = Wn, e2.inspect = null, e2.__v_raw = void 0, new Proxy(e2, { get(e3, n2, s2) {
      if ("_uniClient" === n2)
        return null;
      if ("symbol" == typeof n2)
        return e3[n2];
      if (n2 in e3 || "string" != typeof n2) {
        const t3 = e3[n2];
        return "function" == typeof t3 ? t3.bind(e3) : t3;
      }
      return t2.get(e3, n2, s2);
    } });
  }
  function zn(e2) {
    return { on: (t2, n2) => {
      e2[t2] = e2[t2] || [], e2[t2].indexOf(n2) > -1 || e2[t2].push(n2);
    }, off: (t2, n2) => {
      e2[t2] = e2[t2] || [];
      const s2 = e2[t2].indexOf(n2);
      -1 !== s2 && e2[t2].splice(s2, 1);
    } };
  }
  const Jn = ["db.Geo", "db.command", "command.aggregate"];
  function Vn(e2, t2) {
    return Jn.indexOf(`${e2}.${t2}`) > -1;
  }
  function Gn(e2) {
    switch (f$1(e2 = se$1(e2))) {
      case "array":
        return e2.map((e3) => Gn(e3));
      case "object":
        return e2._internalType === Wn || Object.keys(e2).forEach((t2) => {
          e2[t2] = Gn(e2[t2]);
        }), e2;
      case "regexp":
        return { $regexp: { source: e2.source, flags: e2.flags } };
      case "date":
        return { $date: e2.toISOString() };
      default:
        return e2;
    }
  }
  function Yn(e2) {
    return e2 && e2.content && e2.content.$method;
  }
  class Qn {
    constructor(e2, t2, n2) {
      this.content = e2, this.prevStage = t2 || null, this.udb = null, this._database = n2;
    }
    toJSON() {
      let e2 = this;
      const t2 = [e2.content];
      for (; e2.prevStage; )
        e2 = e2.prevStage, t2.push(e2.content);
      return { $db: t2.reverse().map((e3) => ({ $method: e3.$method, $param: Gn(e3.$param) })) };
    }
    toString() {
      return JSON.stringify(this.toJSON());
    }
    getAction() {
      const e2 = this.toJSON().$db.find((e3) => "action" === e3.$method);
      return e2 && e2.$param && e2.$param[0];
    }
    getCommand() {
      return { $db: this.toJSON().$db.filter((e2) => "action" !== e2.$method) };
    }
    get isAggregate() {
      let e2 = this;
      for (; e2; ) {
        const t2 = Yn(e2), n2 = Yn(e2.prevStage);
        if ("aggregate" === t2 && "collection" === n2 || "pipeline" === t2)
          return true;
        e2 = e2.prevStage;
      }
      return false;
    }
    get isCommand() {
      let e2 = this;
      for (; e2; ) {
        if ("command" === Yn(e2))
          return true;
        e2 = e2.prevStage;
      }
      return false;
    }
    get isAggregateCommand() {
      let e2 = this;
      for (; e2; ) {
        const t2 = Yn(e2), n2 = Yn(e2.prevStage);
        if ("aggregate" === t2 && "command" === n2)
          return true;
        e2 = e2.prevStage;
      }
      return false;
    }
    getNextStageFn(e2) {
      const t2 = this;
      return function() {
        return Xn({ $method: e2, $param: Gn(Array.from(arguments)) }, t2, t2._database);
      };
    }
    get count() {
      return this.isAggregate ? this.getNextStageFn("count") : function() {
        return this._send("count", Array.from(arguments));
      };
    }
    get remove() {
      return this.isCommand ? this.getNextStageFn("remove") : function() {
        return this._send("remove", Array.from(arguments));
      };
    }
    get() {
      return this._send("get", Array.from(arguments));
    }
    get add() {
      return this.isCommand ? this.getNextStageFn("add") : function() {
        return this._send("add", Array.from(arguments));
      };
    }
    update() {
      return this._send("update", Array.from(arguments));
    }
    end() {
      return this._send("end", Array.from(arguments));
    }
    get set() {
      return this.isCommand ? this.getNextStageFn("set") : function() {
        throw new Error("JQL禁止使用set方法");
      };
    }
    _send(e2, t2) {
      const n2 = this.getAction(), s2 = this.getCommand();
      if (s2.$db.push({ $method: e2, $param: Gn(t2) }), S$1) {
        const e3 = s2.$db.find((e4) => "collection" === e4.$method), t3 = e3 && e3.$param;
        t3 && 1 === t3.length && "string" == typeof e3.$param[0] && e3.$param[0].indexOf(",") > -1 && console.warn("检测到使用JQL语法联表查询时，未使用getTemp先过滤主表数据，在主表数据量大的情况下可能会查询缓慢。\n- 如何优化请参考此文档：https://uniapp.dcloud.net.cn/uniCloud/jql?id=lookup-with-temp \n- 如果主表数据量很小请忽略此信息，项目发行时不会出现此提示。");
      }
      return this._database._callCloudFunction({ action: n2, command: s2 });
    }
  }
  function Xn(e2, t2, n2) {
    return Hn(new Qn(e2, t2, n2), { get(e3, t3) {
      let s2 = "db";
      return e3 && e3.content && (s2 = e3.content.$method), Vn(s2, t3) ? Xn({ $method: t3 }, e3, n2) : function() {
        return Xn({ $method: t3, $param: Gn(Array.from(arguments)) }, e3, n2);
      };
    } });
  }
  function Zn({ path: e2, method: t2 }) {
    return class {
      constructor() {
        this.param = Array.from(arguments);
      }
      toJSON() {
        return { $newDb: [...e2.map((e3) => ({ $method: e3 })), { $method: t2, $param: this.param }] };
      }
      toString() {
        return JSON.stringify(this.toJSON());
      }
    };
  }
  function es$3(e2, t2 = {}) {
    return Hn(new e2(t2), { get: (e3, t3) => Vn("db", t3) ? Xn({ $method: t3 }, null, e3) : function() {
      return Xn({ $method: t3, $param: Gn(Array.from(arguments)) }, null, e3);
    } });
  }
  class ts extends class {
    constructor({ uniClient: e2 = {}, isJQL: t2 = false } = {}) {
      this._uniClient = e2, this._authCallBacks = {}, this._dbCallBacks = {}, e2._isDefault && (this._dbCallBacks = L("_globalUniCloudDatabaseCallback")), t2 || (this.auth = zn(this._authCallBacks)), this._isJQL = t2, Object.assign(this, zn(this._dbCallBacks)), this.env = Hn({}, { get: (e3, t3) => ({ $env: t3 }) }), this.Geo = Hn({}, { get: (e3, t3) => Zn({ path: ["Geo"], method: t3 }) }), this.serverDate = Zn({ path: [], method: "serverDate" }), this.RegExp = Zn({ path: [], method: "RegExp" });
    }
    getCloudEnv(e2) {
      if ("string" != typeof e2 || !e2.trim())
        throw new Error("getCloudEnv参数错误");
      return { $env: e2.replace("$cloudEnv_", "") };
    }
    _callback(e2, t2) {
      const n2 = this._dbCallBacks;
      n2[e2] && n2[e2].forEach((e3) => {
        e3(...t2);
      });
    }
    _callbackAuth(e2, t2) {
      const n2 = this._authCallBacks;
      n2[e2] && n2[e2].forEach((e3) => {
        e3(...t2);
      });
    }
    multiSend() {
      const e2 = Array.from(arguments), t2 = e2.map((e3) => {
        const t3 = e3.getAction(), n2 = e3.getCommand();
        if ("getTemp" !== n2.$db[n2.$db.length - 1].$method)
          throw new Error("multiSend只支持子命令内使用getTemp");
        return { action: t3, command: n2 };
      });
      return this._callCloudFunction({ multiCommand: t2, queryList: e2 });
    }
  } {
    _parseResult(e2) {
      return this._isJQL ? e2.result : e2;
    }
    _callCloudFunction({ action: e2, command: t2, multiCommand: n2, queryList: s2 }) {
      function r2(e3, t3) {
        if (n2 && s2)
          for (let n3 = 0; n3 < s2.length; n3++) {
            const r3 = s2[n3];
            r3.udb && "function" == typeof r3.udb.setResult && (t3 ? r3.udb.setResult(t3) : r3.udb.setResult(e3.result.dataList[n3]));
          }
      }
      const i2 = this, o2 = this._isJQL ? "databaseForJQL" : "database";
      function a2(e3) {
        return i2._callback("error", [e3]), M$1(q$1(o2, "fail"), e3).then(() => M$1(q$1(o2, "complete"), e3)).then(() => (r2(null, e3), Y$1(j, { type: W$1, content: e3 }), Promise.reject(e3)));
      }
      const c2 = M$1(q$1(o2, "invoke")), u2 = this._uniClient;
      return c2.then(() => u2.callFunction({ name: "DCloud-clientDB", type: h$1, data: { action: e2, command: t2, multiCommand: n2 } })).then((e3) => {
        const { code: t3, message: n3, token: s3, tokenExpired: c3, systemInfo: u3 = [] } = e3.result;
        if (u3)
          for (let e4 = 0; e4 < u3.length; e4++) {
            const { level: t4, message: n4, detail: s4 } = u3[e4], r3 = console["warn" === t4 ? "error" : t4] || console.log;
            let i3 = "[System Info]" + n4;
            s4 && (i3 = `${i3}
详细信息：${s4}`), r3(i3);
          }
        if (t3) {
          return a2(new te$1({ code: t3, message: n3, requestId: e3.requestId }));
        }
        e3.result.errCode = e3.result.errCode || e3.result.code, e3.result.errMsg = e3.result.errMsg || e3.result.message, s3 && c3 && (ie({ token: s3, tokenExpired: c3 }), this._callbackAuth("refreshToken", [{ token: s3, tokenExpired: c3 }]), this._callback("refreshToken", [{ token: s3, tokenExpired: c3 }]), Y$1(B$1, { token: s3, tokenExpired: c3 }));
        const h2 = [{ prop: "affectedDocs", tips: "affectedDocs不再推荐使用，请使用inserted/deleted/updated/data.length替代" }, { prop: "code", tips: "code不再推荐使用，请使用errCode替代" }, { prop: "message", tips: "message不再推荐使用，请使用errMsg替代" }];
        for (let t4 = 0; t4 < h2.length; t4++) {
          const { prop: n4, tips: s4 } = h2[t4];
          if (n4 in e3.result) {
            const t5 = e3.result[n4];
            Object.defineProperty(e3.result, n4, { get: () => (console.warn(s4), t5) });
          }
        }
        return function(e4) {
          return M$1(q$1(o2, "success"), e4).then(() => M$1(q$1(o2, "complete"), e4)).then(() => {
            r2(e4, null);
            const t4 = i2._parseResult(e4);
            return Y$1(j, { type: W$1, content: t4 }), Promise.resolve(t4);
          });
        }(e3);
      }, (e3) => {
        /fc_function_not_found|FUNCTION_NOT_FOUND/g.test(e3.message) && console.warn("clientDB未初始化，请在web控制台保存一次schema以开启clientDB");
        return a2(new te$1({ code: e3.code || "SYSTEM_ERROR", message: e3.message, requestId: e3.requestId }));
      });
    }
  }
  const ns = "token无效，跳转登录页面", ss = "token过期，跳转登录页面", rs = { TOKEN_INVALID_TOKEN_EXPIRED: ss, TOKEN_INVALID_INVALID_CLIENTID: ns, TOKEN_INVALID: ns, TOKEN_INVALID_WRONG_TOKEN: ns, TOKEN_INVALID_ANONYMOUS_USER: ns }, is = { "uni-id-token-expired": ss, "uni-id-check-token-failed": ns, "uni-id-token-not-exist": ns, "uni-id-check-device-feature-failed": ns };
  function os(e2, t2) {
    let n2 = "";
    return n2 = e2 ? `${e2}/${t2}` : t2, n2.replace(/^\//, "");
  }
  function as(e2 = [], t2 = "") {
    const n2 = [], s2 = [];
    return e2.forEach((e3) => {
      true === e3.needLogin ? n2.push(os(t2, e3.path)) : false === e3.needLogin && s2.push(os(t2, e3.path));
    }), { needLoginPage: n2, notNeedLoginPage: s2 };
  }
  function cs(e2) {
    return e2.split("?")[0].replace(/^\//, "");
  }
  function us() {
    return function(e2) {
      let t2 = e2 && e2.$page && e2.$page.fullPath || "";
      return t2 ? ("/" !== t2.charAt(0) && (t2 = "/" + t2), t2) : t2;
    }(function() {
      const e2 = getCurrentPages();
      return e2[e2.length - 1];
    }());
  }
  function hs() {
    return cs(us());
  }
  function ls(e2 = "", t2 = {}) {
    if (!e2)
      return false;
    if (!(t2 && t2.list && t2.list.length))
      return false;
    const n2 = t2.list, s2 = cs(e2);
    return n2.some((e3) => e3.pagePath === s2);
  }
  const ds = !!PAGE_DATA.uniIdRouter;
  const { loginPage: ps, routerNeedLogin: fs, resToLogin: gs, needLoginPage: ms, notNeedLoginPage: ys, loginPageInTabBar: _s } = function({ pages: t2 = [], subPackages: n2 = [], uniIdRouter: s2 = {}, tabBar: r2 = {} } = PAGE_DATA) {
    const { loginPage: i2, needLogin: o2 = [], resToLogin: a2 = true } = s2, { needLoginPage: c2, notNeedLoginPage: u2 } = as(t2), { needLoginPage: h2, notNeedLoginPage: l2 } = function(e2 = []) {
      const t3 = [], n3 = [];
      return e2.forEach((e3) => {
        const { root: s3, pages: r3 = [] } = e3, { needLoginPage: i3, notNeedLoginPage: o3 } = as(r3, s3);
        t3.push(...i3), n3.push(...o3);
      }), { needLoginPage: t3, notNeedLoginPage: n3 };
    }(n2);
    return { loginPage: i2, routerNeedLogin: o2, resToLogin: a2, needLoginPage: [...c2, ...h2], notNeedLoginPage: [...u2, ...l2], loginPageInTabBar: ls(i2, r2) };
  }();
  if (ms.indexOf(ps) > -1)
    throw new Error(`Login page [${ps}] should not be "needLogin", please check your pages.json`);
  function ws(e2) {
    const t2 = hs();
    if ("/" === e2.charAt(0))
      return e2;
    const [n2, s2] = e2.split("?"), r2 = n2.replace(/^\//, "").split("/"), i2 = t2.split("/");
    i2.pop();
    for (let e3 = 0; e3 < r2.length; e3++) {
      const t3 = r2[e3];
      ".." === t3 ? i2.pop() : "." !== t3 && i2.push(t3);
    }
    return "" === i2[0] && i2.shift(), "/" + i2.join("/") + (s2 ? "?" + s2 : "");
  }
  function vs(e2) {
    const t2 = cs(ws(e2));
    return !(ys.indexOf(t2) > -1) && (ms.indexOf(t2) > -1 || fs.some((t3) => function(e3, t4) {
      return new RegExp(t4).test(e3);
    }(e2, t3)));
  }
  function Is({ redirect: e2 }) {
    const t2 = cs(e2), n2 = cs(ps);
    return hs() !== n2 && t2 !== n2;
  }
  function Ss({ api: e2, redirect: t2 } = {}) {
    if (!t2 || !Is({ redirect: t2 }))
      return;
    const n2 = function(e3, t3) {
      return "/" !== e3.charAt(0) && (e3 = "/" + e3), t3 ? e3.indexOf("?") > -1 ? e3 + `&uniIdRedirectUrl=${encodeURIComponent(t3)}` : e3 + `?uniIdRedirectUrl=${encodeURIComponent(t3)}` : e3;
    }(ps, t2);
    _s ? "navigateTo" !== e2 && "redirectTo" !== e2 || (e2 = "switchTab") : "switchTab" === e2 && (e2 = "navigateTo");
    const s2 = { navigateTo: uni.navigateTo, redirectTo: uni.redirectTo, switchTab: uni.switchTab, reLaunch: uni.reLaunch };
    setTimeout(() => {
      s2[e2]({ url: n2 });
    }, 0);
  }
  function bs$2({ url: e2 } = {}) {
    const t2 = { abortLoginPageJump: false, autoToLoginPage: false }, n2 = function() {
      const { token: e3, tokenExpired: t3 } = re();
      let n3;
      if (e3) {
        if (t3 < Date.now()) {
          const e4 = "uni-id-token-expired";
          n3 = { errCode: e4, errMsg: is[e4] };
        }
      } else {
        const e4 = "uni-id-check-token-failed";
        n3 = { errCode: e4, errMsg: is[e4] };
      }
      return n3;
    }();
    if (vs(e2) && n2) {
      n2.uniIdRedirectUrl = e2;
      if (J$1($).length > 0)
        return setTimeout(() => {
          Y$1($, n2);
        }, 0), t2.abortLoginPageJump = true, t2;
      t2.autoToLoginPage = true;
    }
    return t2;
  }
  function ks() {
    !function() {
      const e3 = us(), { abortLoginPageJump: t2, autoToLoginPage: n2 } = bs$2({ url: e3 });
      t2 || n2 && Ss({ api: "redirectTo", redirect: e3 });
    }();
    const e2 = ["navigateTo", "redirectTo", "reLaunch", "switchTab"];
    for (let t2 = 0; t2 < e2.length; t2++) {
      const n2 = e2[t2];
      uni.addInterceptor(n2, { invoke(e3) {
        const { abortLoginPageJump: t3, autoToLoginPage: s2 } = bs$2({ url: e3.url });
        return t3 ? e3 : s2 ? (Ss({ api: n2, redirect: ws(e3.url) }), false) : e3;
      } });
    }
  }
  function As() {
    this.onResponse((e2) => {
      const { type: t2, content: n2 } = e2;
      let s2 = false;
      switch (t2) {
        case "cloudobject":
          s2 = function(e3) {
            if ("object" != typeof e3)
              return false;
            const { errCode: t3 } = e3 || {};
            return t3 in is;
          }(n2);
          break;
        case "clientdb":
          s2 = function(e3) {
            if ("object" != typeof e3)
              return false;
            const { errCode: t3 } = e3 || {};
            return t3 in rs;
          }(n2);
      }
      s2 && function(e3 = {}) {
        const t3 = J$1($);
        Z$1().then(() => {
          const n3 = us();
          if (n3 && Is({ redirect: n3 }))
            return t3.length > 0 ? Y$1($, Object.assign({ uniIdRedirectUrl: n3 }, e3)) : void (ps && Ss({ api: "navigateTo", redirect: n3 }));
        });
      }(n2);
    });
  }
  function Cs(e2) {
    !function(e3) {
      e3.onResponse = function(e4) {
        V(j, e4);
      }, e3.offResponse = function(e4) {
        G$1(j, e4);
      };
    }(e2), function(e3) {
      e3.onNeedLogin = function(e4) {
        V($, e4);
      }, e3.offNeedLogin = function(e4) {
        G$1($, e4);
      }, ds && (L("_globalUniCloudStatus").needLoginInit || (L("_globalUniCloudStatus").needLoginInit = true, Z$1().then(() => {
        ks.call(e3);
      }), gs && As.call(e3)));
    }(e2), function(e3) {
      e3.onRefreshToken = function(e4) {
        V(B$1, e4);
      }, e3.offRefreshToken = function(e4) {
        G$1(B$1, e4);
      };
    }(e2);
  }
  let Ps;
  const Ts = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", xs = /^(?:[A-Za-z\d+/]{4})*?(?:[A-Za-z\d+/]{2}(?:==)?|[A-Za-z\d+/]{3}=?)?$/;
  function Os() {
    const e2 = re().token || "", t2 = e2.split(".");
    if (!e2 || 3 !== t2.length)
      return { uid: null, role: [], permission: [], tokenExpired: 0 };
    let n2;
    try {
      n2 = JSON.parse((s2 = t2[1], decodeURIComponent(Ps(s2).split("").map(function(e3) {
        return "%" + ("00" + e3.charCodeAt(0).toString(16)).slice(-2);
      }).join(""))));
    } catch (e3) {
      throw new Error("获取当前用户信息出错，详细错误信息为：" + e3.message);
    }
    var s2;
    return n2.tokenExpired = 1e3 * n2.exp, delete n2.exp, delete n2.iat, n2;
  }
  Ps = "function" != typeof atob ? function(e2) {
    if (e2 = String(e2).replace(/[\t\n\f\r ]+/g, ""), !xs.test(e2))
      throw new Error("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");
    var t2;
    e2 += "==".slice(2 - (3 & e2.length));
    for (var n2, s2, r2 = "", i2 = 0; i2 < e2.length; )
      t2 = Ts.indexOf(e2.charAt(i2++)) << 18 | Ts.indexOf(e2.charAt(i2++)) << 12 | (n2 = Ts.indexOf(e2.charAt(i2++))) << 6 | (s2 = Ts.indexOf(e2.charAt(i2++))), r2 += 64 === n2 ? String.fromCharCode(t2 >> 16 & 255) : 64 === s2 ? String.fromCharCode(t2 >> 16 & 255, t2 >> 8 & 255) : String.fromCharCode(t2 >> 16 & 255, t2 >> 8 & 255, 255 & t2);
    return r2;
  } : atob;
  var Es = n(function(e2, t2) {
    Object.defineProperty(t2, "__esModule", { value: true });
    const n2 = "chooseAndUploadFile:ok", s2 = "chooseAndUploadFile:fail";
    function r2(e3, t3) {
      return e3.tempFiles.forEach((e4, n3) => {
        e4.name || (e4.name = e4.path.substring(e4.path.lastIndexOf("/") + 1)), t3 && (e4.fileType = t3), e4.cloudPath = Date.now() + "_" + n3 + e4.name.substring(e4.name.lastIndexOf("."));
      }), e3.tempFilePaths || (e3.tempFilePaths = e3.tempFiles.map((e4) => e4.path)), e3;
    }
    function i2(e3, t3, { onChooseFile: s3, onUploadProgress: r3 }) {
      return t3.then((e4) => {
        if (s3) {
          const t4 = s3(e4);
          if (void 0 !== t4)
            return Promise.resolve(t4).then((t5) => void 0 === t5 ? e4 : t5);
        }
        return e4;
      }).then((t4) => false === t4 ? { errMsg: n2, tempFilePaths: [], tempFiles: [] } : function(e4, t5, s4 = 5, r4) {
        (t5 = Object.assign({}, t5)).errMsg = n2;
        const i3 = t5.tempFiles, o2 = i3.length;
        let a2 = 0;
        return new Promise((n3) => {
          for (; a2 < s4; )
            c2();
          function c2() {
            const s5 = a2++;
            if (s5 >= o2)
              return void (!i3.find((e5) => !e5.url && !e5.errMsg) && n3(t5));
            const u2 = i3[s5];
            e4.uploadFile({ provider: u2.provider, filePath: u2.path, cloudPath: u2.cloudPath, fileType: u2.fileType, cloudPathAsRealPath: u2.cloudPathAsRealPath, onUploadProgress(e5) {
              e5.index = s5, e5.tempFile = u2, e5.tempFilePath = u2.path, r4 && r4(e5);
            } }).then((e5) => {
              u2.url = e5.fileID, s5 < o2 && c2();
            }).catch((e5) => {
              u2.errMsg = e5.errMsg || e5.message, s5 < o2 && c2();
            });
          }
        });
      }(e3, t4, 5, r3));
    }
    t2.initChooseAndUploadFile = function(e3) {
      return function(t3 = { type: "all" }) {
        return "image" === t3.type ? i2(e3, function(e4) {
          const { count: t4, sizeType: n3, sourceType: i3 = ["album", "camera"], extension: o2 } = e4;
          return new Promise((e5, a2) => {
            uni.chooseImage({ count: t4, sizeType: n3, sourceType: i3, extension: o2, success(t5) {
              e5(r2(t5, "image"));
            }, fail(e6) {
              a2({ errMsg: e6.errMsg.replace("chooseImage:fail", s2) });
            } });
          });
        }(t3), t3) : "video" === t3.type ? i2(e3, function(e4) {
          const { camera: t4, compressed: n3, maxDuration: i3, sourceType: o2 = ["album", "camera"], extension: a2 } = e4;
          return new Promise((e5, c2) => {
            uni.chooseVideo({ camera: t4, compressed: n3, maxDuration: i3, sourceType: o2, extension: a2, success(t5) {
              const { tempFilePath: n4, duration: s3, size: i4, height: o3, width: a3 } = t5;
              e5(r2({ errMsg: "chooseVideo:ok", tempFilePaths: [n4], tempFiles: [{ name: t5.tempFile && t5.tempFile.name || "", path: n4, size: i4, type: t5.tempFile && t5.tempFile.type || "", width: a3, height: o3, duration: s3, fileType: "video", cloudPath: "" }] }, "video"));
            }, fail(e6) {
              c2({ errMsg: e6.errMsg.replace("chooseVideo:fail", s2) });
            } });
          });
        }(t3), t3) : i2(e3, function(e4) {
          const { count: t4, extension: n3 } = e4;
          return new Promise((e5, i3) => {
            let o2 = uni.chooseFile;
            if ("undefined" != typeof wx && "function" == typeof wx.chooseMessageFile && (o2 = wx.chooseMessageFile), "function" != typeof o2)
              return i3({ errMsg: s2 + " 请指定 type 类型，该平台仅支持选择 image 或 video。" });
            o2({ type: "all", count: t4, extension: n3, success(t5) {
              e5(r2(t5));
            }, fail(e6) {
              i3({ errMsg: e6.errMsg.replace("chooseFile:fail", s2) });
            } });
          });
        }(t3), t3);
      };
    };
  }), Ls = t$2(Es);
  const Rs = "manual";
  function Us(e2) {
    return { props: { localdata: { type: Array, default: () => [] }, options: { type: [Object, Array], default: () => ({}) }, spaceInfo: { type: Object, default: () => ({}) }, collection: { type: [String, Array], default: "" }, action: { type: String, default: "" }, field: { type: String, default: "" }, orderby: { type: String, default: "" }, where: { type: [String, Object], default: "" }, pageData: { type: String, default: "add" }, pageCurrent: { type: Number, default: 1 }, pageSize: { type: Number, default: 20 }, getcount: { type: [Boolean, String], default: false }, gettree: { type: [Boolean, String], default: false }, gettreepath: { type: [Boolean, String], default: false }, startwith: { type: String, default: "" }, limitlevel: { type: Number, default: 10 }, groupby: { type: String, default: "" }, groupField: { type: String, default: "" }, distinct: { type: [Boolean, String], default: false }, foreignKey: { type: String, default: "" }, loadtime: { type: String, default: "auto" }, manual: { type: Boolean, default: false } }, data: () => ({ mixinDatacomLoading: false, mixinDatacomHasMore: false, mixinDatacomResData: [], mixinDatacomErrorMessage: "", mixinDatacomPage: {}, mixinDatacomError: null }), created() {
      this.mixinDatacomPage = { current: this.pageCurrent, size: this.pageSize, count: 0 }, this.$watch(() => {
        var e3 = [];
        return ["pageCurrent", "pageSize", "localdata", "collection", "action", "field", "orderby", "where", "getont", "getcount", "gettree", "groupby", "groupField", "distinct"].forEach((t2) => {
          e3.push(this[t2]);
        }), e3;
      }, (e3, t2) => {
        if (this.loadtime === Rs)
          return;
        let n2 = false;
        const s2 = [];
        for (let r2 = 2; r2 < e3.length; r2++)
          e3[r2] !== t2[r2] && (s2.push(e3[r2]), n2 = true);
        e3[0] !== t2[0] && (this.mixinDatacomPage.current = this.pageCurrent), this.mixinDatacomPage.size = this.pageSize, this.onMixinDatacomPropsChange(n2, s2);
      });
    }, methods: { onMixinDatacomPropsChange(e3, t2) {
    }, mixinDatacomEasyGet({ getone: e3 = false, success: t2, fail: n2 } = {}) {
      this.mixinDatacomLoading || (this.mixinDatacomLoading = true, this.mixinDatacomErrorMessage = "", this.mixinDatacomError = null, this.mixinDatacomGet().then((n3) => {
        this.mixinDatacomLoading = false;
        const { data: s2, count: r2 } = n3.result;
        this.getcount && (this.mixinDatacomPage.count = r2), this.mixinDatacomHasMore = s2.length < this.pageSize;
        const i2 = e3 ? s2.length ? s2[0] : void 0 : s2;
        this.mixinDatacomResData = i2, t2 && t2(i2);
      }).catch((e4) => {
        this.mixinDatacomLoading = false, this.mixinDatacomErrorMessage = e4, this.mixinDatacomError = e4, n2 && n2(e4);
      }));
    }, mixinDatacomGet(t2 = {}) {
      let n2;
      t2 = t2 || {}, n2 = "undefined" != typeof __uniX && __uniX ? e2.databaseForJQL(this.spaceInfo) : e2.database(this.spaceInfo);
      const s2 = t2.action || this.action;
      s2 && (n2 = n2.action(s2));
      const r2 = t2.collection || this.collection;
      n2 = Array.isArray(r2) ? n2.collection(...r2) : n2.collection(r2);
      const i2 = t2.where || this.where;
      i2 && Object.keys(i2).length && (n2 = n2.where(i2));
      const o2 = t2.field || this.field;
      o2 && (n2 = n2.field(o2));
      const a2 = t2.foreignKey || this.foreignKey;
      a2 && (n2 = n2.foreignKey(a2));
      const c2 = t2.groupby || this.groupby;
      c2 && (n2 = n2.groupBy(c2));
      const u2 = t2.groupField || this.groupField;
      u2 && (n2 = n2.groupField(u2));
      true === (void 0 !== t2.distinct ? t2.distinct : this.distinct) && (n2 = n2.distinct());
      const h2 = t2.orderby || this.orderby;
      h2 && (n2 = n2.orderBy(h2));
      const l2 = void 0 !== t2.pageCurrent ? t2.pageCurrent : this.mixinDatacomPage.current, d2 = void 0 !== t2.pageSize ? t2.pageSize : this.mixinDatacomPage.size, p2 = void 0 !== t2.getcount ? t2.getcount : this.getcount, f2 = void 0 !== t2.gettree ? t2.gettree : this.gettree, g2 = void 0 !== t2.gettreepath ? t2.gettreepath : this.gettreepath, m2 = { getCount: p2 }, y2 = { limitLevel: void 0 !== t2.limitlevel ? t2.limitlevel : this.limitlevel, startWith: void 0 !== t2.startwith ? t2.startwith : this.startwith };
      return f2 && (m2.getTree = y2), g2 && (m2.getTreePath = y2), n2 = n2.skip(d2 * (l2 - 1)).limit(d2).get(m2), n2;
    } } };
  }
  function Ns(e2) {
    return function(t2, n2 = {}) {
      n2 = function(e3, t3 = {}) {
        return e3.customUI = t3.customUI || e3.customUI, e3.parseSystemError = t3.parseSystemError || e3.parseSystemError, Object.assign(e3.loadingOptions, t3.loadingOptions), Object.assign(e3.errorOptions, t3.errorOptions), "object" == typeof t3.secretMethods && (e3.secretMethods = t3.secretMethods), e3;
      }({ customUI: false, loadingOptions: { title: "加载中...", mask: true }, errorOptions: { type: "modal", retry: false } }, n2);
      const { customUI: s2, loadingOptions: r2, errorOptions: i2, parseSystemError: o2 } = n2, a2 = !s2;
      return new Proxy({}, { get(s3, c2) {
        switch (c2) {
          case "toString":
            return "[object UniCloudObject]";
          case "toJSON":
            return {};
        }
        return function({ fn: e3, interceptorName: t3, getCallbackArgs: n3 } = {}) {
          return async function(...s4) {
            const r3 = n3 ? n3({ params: s4 }) : {};
            let i3, o3;
            try {
              return await M$1(q$1(t3, "invoke"), { ...r3 }), i3 = await e3(...s4), await M$1(q$1(t3, "success"), { ...r3, result: i3 }), i3;
            } catch (e4) {
              throw o3 = e4, await M$1(q$1(t3, "fail"), { ...r3, error: o3 }), o3;
            } finally {
              await M$1(q$1(t3, "complete"), o3 ? { ...r3, error: o3 } : { ...r3, result: i3 });
            }
          };
        }({ fn: async function s4(...h2) {
          let l2;
          a2 && uni.showLoading({ title: r2.title, mask: r2.mask });
          const d2 = { name: t2, type: u$1, data: { method: c2, params: h2 } };
          "object" == typeof n2.secretMethods && function(e3, t3) {
            const n3 = t3.data.method, s5 = e3.secretMethods || {}, r3 = s5[n3] || s5["*"];
            r3 && (t3.secretType = r3);
          }(n2, d2);
          let p2 = false;
          try {
            l2 = await e2.callFunction(d2);
          } catch (e3) {
            p2 = true, l2 = { result: new te$1(e3) };
          }
          const { errSubject: f2, errCode: g2, errMsg: m2, newToken: y2 } = l2.result || {};
          if (a2 && uni.hideLoading(), y2 && y2.token && y2.tokenExpired && (ie(y2), Y$1(B$1, { ...y2 })), g2) {
            let e3 = m2;
            if (p2 && o2) {
              e3 = (await o2({ objectName: t2, methodName: c2, params: h2, errSubject: f2, errCode: g2, errMsg: m2 })).errMsg || m2;
            }
            if (a2)
              if ("toast" === i2.type)
                uni.showToast({ title: e3, icon: "none" });
              else {
                if ("modal" !== i2.type)
                  throw new Error(`Invalid errorOptions.type: ${i2.type}`);
                {
                  const { confirm: t3 } = await async function({ title: e4, content: t4, showCancel: n4, cancelText: s5, confirmText: r3 } = {}) {
                    return new Promise((i3, o3) => {
                      uni.showModal({ title: e4, content: t4, showCancel: n4, cancelText: s5, confirmText: r3, success(e5) {
                        i3(e5);
                      }, fail() {
                        i3({ confirm: false, cancel: true });
                      } });
                    });
                  }({ title: "提示", content: e3, showCancel: i2.retry, cancelText: "取消", confirmText: i2.retry ? "重试" : "确定" });
                  if (i2.retry && t3)
                    return s4(...h2);
                }
              }
            const n3 = new te$1({ subject: f2, code: g2, message: m2, requestId: l2.requestId });
            throw n3.detail = l2.result, Y$1(j, { type: z$1, content: n3 }), n3;
          }
          return Y$1(j, { type: z$1, content: l2.result }), l2.result;
        }, interceptorName: "callObject", getCallbackArgs: function({ params: e3 } = {}) {
          return { objectName: t2, methodName: c2, params: e3 };
        } });
      } });
    };
  }
  function Ds(e2) {
    return L("_globalUniCloudSecureNetworkCache__{spaceId}".replace("{spaceId}", e2.config.spaceId));
  }
  async function Ms({ openid: e2, callLoginByWeixin: t2 = false } = {}) {
    Ds(this);
    throw new Error(`[SecureNetwork] API \`initSecureNetworkByWeixin\` is not supported on platform \`${C$1}\``);
  }
  async function qs$1(e2) {
    const t2 = Ds(this);
    return t2.initPromise || (t2.initPromise = Ms.call(this, e2).then((e3) => e3).catch((e3) => {
      throw delete t2.initPromise, e3;
    })), t2.initPromise;
  }
  function Fs(e2) {
    return function({ openid: t2, callLoginByWeixin: n2 = false } = {}) {
      return qs$1.call(e2, { openid: t2, callLoginByWeixin: n2 });
    };
  }
  function Ks(e2) {
    !function(e3) {
      he = e3;
    }(e2);
  }
  function js(e2) {
    const t2 = { getSystemInfo: uni.getSystemInfo, getPushClientId: uni.getPushClientId };
    return function(n2) {
      return new Promise((s2, r2) => {
        t2[e2]({ ...n2, success(e3) {
          s2(e3);
        }, fail(e3) {
          r2(e3);
        } });
      });
    };
  }
  class $s extends class {
    constructor() {
      this._callback = {};
    }
    addListener(e2, t2) {
      this._callback[e2] || (this._callback[e2] = []), this._callback[e2].push(t2);
    }
    on(e2, t2) {
      return this.addListener(e2, t2);
    }
    removeListener(e2, t2) {
      if (!t2)
        throw new Error('The "listener" argument must be of type function. Received undefined');
      const n2 = this._callback[e2];
      if (!n2)
        return;
      const s2 = function(e3, t3) {
        for (let n3 = e3.length - 1; n3 >= 0; n3--)
          if (e3[n3] === t3)
            return n3;
        return -1;
      }(n2, t2);
      n2.splice(s2, 1);
    }
    off(e2, t2) {
      return this.removeListener(e2, t2);
    }
    removeAllListener(e2) {
      delete this._callback[e2];
    }
    emit(e2, ...t2) {
      const n2 = this._callback[e2];
      if (n2)
        for (let e3 = 0; e3 < n2.length; e3++)
          n2[e3](...t2);
    }
  } {
    constructor() {
      super(), this._uniPushMessageCallback = this._receivePushMessage.bind(this), this._currentMessageId = -1, this._payloadQueue = [];
    }
    init() {
      return Promise.all([js("getSystemInfo")(), js("getPushClientId")()]).then(([{ appId: e2 } = {}, { cid: t2 } = {}] = []) => {
        if (!e2)
          throw new Error("Invalid appId, please check the manifest.json file");
        if (!t2)
          throw new Error("Invalid push client id");
        this._appId = e2, this._pushClientId = t2, this._seqId = Date.now() + "-" + Math.floor(9e5 * Math.random() + 1e5), this.emit("open"), this._initMessageListener();
      }, (e2) => {
        throw this.emit("error", e2), this.close(), e2;
      });
    }
    async open() {
      return this.init();
    }
    _isUniCloudSSE(e2) {
      if ("receive" !== e2.type)
        return false;
      const t2 = e2 && e2.data && e2.data.payload;
      return !(!t2 || "UNI_CLOUD_SSE" !== t2.channel || t2.seqId !== this._seqId);
    }
    _receivePushMessage(e2) {
      if (!this._isUniCloudSSE(e2))
        return;
      const t2 = e2 && e2.data && e2.data.payload, { action: n2, messageId: s2, message: r2 } = t2;
      this._payloadQueue.push({ action: n2, messageId: s2, message: r2 }), this._consumMessage();
    }
    _consumMessage() {
      for (; ; ) {
        const e2 = this._payloadQueue.find((e3) => e3.messageId === this._currentMessageId + 1);
        if (!e2)
          break;
        this._currentMessageId++, this._parseMessagePayload(e2);
      }
    }
    _parseMessagePayload(e2) {
      const { action: t2, messageId: n2, message: s2 } = e2;
      "end" === t2 ? this._end({ messageId: n2, message: s2 }) : "message" === t2 && this._appendMessage({ messageId: n2, message: s2 });
    }
    _appendMessage({ messageId: e2, message: t2 } = {}) {
      this.emit("message", t2);
    }
    _end({ messageId: e2, message: t2 } = {}) {
      this.emit("end", t2), this.close();
    }
    _initMessageListener() {
      uni.onPushMessage(this._uniPushMessageCallback);
    }
    _destroy() {
      uni.offPushMessage(this._uniPushMessageCallback);
    }
    toJSON() {
      return { appId: this._appId, pushClientId: this._pushClientId, seqId: this._seqId };
    }
    close() {
      this._destroy(), this.emit("close");
    }
  }
  async function Bs(e2, t2) {
    const n2 = `http://${e2}:${t2}/system/ping`;
    try {
      const e3 = await (s2 = { url: n2, timeout: 500 }, new Promise((e4, t3) => {
        ne$1.request({ ...s2, success(t4) {
          e4(t4);
        }, fail(e5) {
          t3(e5);
        } });
      }));
      return !(!e3.data || 0 !== e3.data.code);
    } catch (e3) {
      return false;
    }
    var s2;
  }
  async function Ws(e2) {
    {
      const { osName: e3, osVersion: t3 } = ce$1();
      "ios" === e3 && function(e4) {
        if (!e4 || "string" != typeof e4)
          return 0;
        const t4 = e4.match(/^(\d+)./);
        return t4 && t4[1] ? parseInt(t4[1]) : 0;
      }(t3) >= 14 && console.warn("iOS 14及以上版本连接uniCloud本地调试服务需要允许客户端查找并连接到本地网络上的设备（仅开发期间需要，发行后不需要）");
    }
    const t2 = e2.__dev__;
    if (!t2.debugInfo)
      return;
    const { address: n2, servePort: s2 } = t2.debugInfo, { address: r2 } = await async function(e3, t3) {
      let n3;
      for (let s3 = 0; s3 < e3.length; s3++) {
        const r3 = e3[s3];
        if (await Bs(r3, t3)) {
          n3 = r3;
          break;
        }
      }
      return { address: n3, port: t3 };
    }(n2, s2);
    if (r2)
      return t2.localAddress = r2, void (t2.localPort = s2);
    const i2 = console["error"];
    let o2 = "";
    if ("remote" === t2.debugInfo.initialLaunchType ? (t2.debugInfo.forceRemote = true, o2 = "当前客户端和HBuilderX不在同一局域网下（或其他网络原因无法连接HBuilderX），uniCloud本地调试服务不对当前客户端生效。\n- 如果不使用uniCloud本地调试服务，请直接忽略此信息。\n- 如需使用uniCloud本地调试服务，请将客户端与主机连接到同一局域网下并重新运行到客户端。") : o2 = "无法连接uniCloud本地调试服务，请检查当前客户端是否与主机在同一局域网下。\n- 如需使用uniCloud本地调试服务，请将客户端与主机连接到同一局域网下并重新运行到客户端。", o2 += "\n- 如果在HBuilderX开启的状态下切换过网络环境，请重启HBuilderX后再试\n- 检查系统防火墙是否拦截了HBuilderX自带的nodejs\n- 检查是否错误的使用拦截器修改uni.request方法的参数", 0 === C$1.indexOf("mp-") && (o2 += "\n- 小程序中如何使用uniCloud，请参考：https://uniapp.dcloud.net.cn/uniCloud/publish.html#useinmp"), !t2.debugInfo.forceRemote)
      throw new Error(o2);
    i2(o2);
  }
  function Hs(e2) {
    e2._initPromiseHub || (e2._initPromiseHub = new v$1({ createPromise: function() {
      let t2 = Promise.resolve();
      var n2;
      n2 = 1, t2 = new Promise((e3) => {
        setTimeout(() => {
          e3();
        }, n2);
      });
      const s2 = e2.auth();
      return t2.then(() => s2.getLoginState()).then((e3) => e3 ? Promise.resolve() : s2.signInAnonymously());
    } }));
  }
  const zs = { tcb: bt$1, tencent: bt$1, aliyun: fe$1, private: At, alipay: Nt$1 };
  let Js = new class {
    init(e2) {
      let t2 = {};
      const n2 = zs[e2.provider];
      if (!n2)
        throw new Error("未提供正确的provider参数");
      t2 = n2.init(e2), function(e3) {
        const t3 = {};
        e3.__dev__ = t3, t3.debugLog = "app" === C$1;
        const n3 = P$2;
        n3 && !n3.code && (t3.debugInfo = n3);
        const s2 = new v$1({ createPromise: function() {
          return Ws(e3);
        } });
        t3.initLocalNetwork = function() {
          return s2.exec();
        };
      }(t2), Hs(t2), Bn(t2), function(e3) {
        const t3 = e3.uploadFile;
        e3.uploadFile = function(e4) {
          return t3.call(this, e4);
        };
      }(t2), function(e3) {
        e3.database = function(t3) {
          if (t3 && Object.keys(t3).length > 0)
            return e3.init(t3).database();
          if (this._database)
            return this._database;
          const n3 = es$3(ts, { uniClient: e3 });
          return this._database = n3, n3;
        }, e3.databaseForJQL = function(t3) {
          if (t3 && Object.keys(t3).length > 0)
            return e3.init(t3).databaseForJQL();
          if (this._databaseForJQL)
            return this._databaseForJQL;
          const n3 = es$3(ts, { uniClient: e3, isJQL: true });
          return this._databaseForJQL = n3, n3;
        };
      }(t2), function(e3) {
        e3.getCurrentUserInfo = Os, e3.chooseAndUploadFile = Ls.initChooseAndUploadFile(e3), Object.assign(e3, { get mixinDatacom() {
          return Us(e3);
        } }), e3.SSEChannel = $s, e3.initSecureNetworkByWeixin = Fs(e3), e3.setCustomClientInfo = Ks, e3.importObject = Ns(e3);
      }(t2);
      return ["callFunction", "uploadFile", "deleteFile", "getTempFileURL", "downloadFile", "chooseAndUploadFile"].forEach((e3) => {
        if (!t2[e3])
          return;
        const n3 = t2[e3];
        t2[e3] = function() {
          return n3.apply(t2, Array.from(arguments));
        }, t2[e3] = (/* @__PURE__ */ function(e4, t3) {
          return function(n4) {
            let s2 = false;
            if ("callFunction" === t3) {
              const e5 = n4 && n4.type || c$1;
              s2 = e5 !== c$1;
            }
            const r2 = "callFunction" === t3 && !s2, i2 = this._initPromiseHub.exec();
            n4 = n4 || {};
            const { success: o2, fail: a2, complete: u2 } = ee$1(n4), h2 = i2.then(() => s2 ? Promise.resolve() : M$1(q$1(t3, "invoke"), n4)).then(() => e4.call(this, n4)).then((e5) => s2 ? Promise.resolve(e5) : M$1(q$1(t3, "success"), e5).then(() => M$1(q$1(t3, "complete"), e5)).then(() => (r2 && Y$1(j, { type: H$1, content: e5 }), Promise.resolve(e5))), (e5) => s2 ? Promise.reject(e5) : M$1(q$1(t3, "fail"), e5).then(() => M$1(q$1(t3, "complete"), e5)).then(() => (Y$1(j, { type: H$1, content: e5 }), Promise.reject(e5))));
            if (!(o2 || a2 || u2))
              return h2;
            h2.then((e5) => {
              o2 && o2(e5), u2 && u2(e5), r2 && Y$1(j, { type: H$1, content: e5 });
            }, (e5) => {
              a2 && a2(e5), u2 && u2(e5), r2 && Y$1(j, { type: H$1, content: e5 });
            });
          };
        }(t2[e3], e3)).bind(t2);
      }), t2.init = this.init, t2;
    }
  }();
  (() => {
    const e2 = T$1;
    let t2 = {};
    if (e2 && 1 === e2.length)
      t2 = e2[0], Js = Js.init(t2), Js._isDefault = true;
    else {
      const t3 = ["auth", "callFunction", "uploadFile", "deleteFile", "getTempFileURL", "downloadFile", "database", "getCurrentUSerInfo", "importObject"];
      let n2;
      n2 = e2 && e2.length > 0 ? "应用有多个服务空间，请通过uniCloud.init方法指定要使用的服务空间" : "应用未关联服务空间，请在uniCloud目录右键关联服务空间", t3.forEach((e3) => {
        Js[e3] = function() {
          return console.error(n2), Promise.reject(new te$1({ code: "SYS_ERR", message: n2 }));
        };
      });
    }
    Object.assign(Js, { get mixinDatacom() {
      return Us(Js);
    } }), Cs(Js), Js.addInterceptor = N$2, Js.removeInterceptor = D$1, Js.interceptObject = F$1;
  })();
  var Vs = Js;
  function parseEditorImage(blocks = []) {
    const images = [];
    if (!Array.isArray(blocks)) {
      blocks = [blocks];
    }
    for (const block of blocks) {
      const { insert = {}, attributes: attributes2 = {} } = block;
      const { "data-custom": custom = "" } = attributes2;
      let parseCustom = custom.split("&").reduce((obj, item) => {
        const [key, value] = item.split("=");
        obj[key] = value;
        return obj;
      }, {});
      images.push({
        src: insert.image,
        source: parseCustom.source
      });
    }
    return images;
  }
  async function parseImageUrl(images = [], type3 = "media") {
    if (type3 === "editor") {
      images = parseEditorImage(images).map((item) => item.source);
    } else {
      if (!Array.isArray(images)) {
        images = [images];
      }
    }
    if (!images)
      return null;
    const tcbFiles = images.filter((item) => item.startsWith("cloud://"));
    if (tcbFiles.length) {
      const res = await Vs.getTempFileURL({
        fileList: tcbFiles
      });
      return images.map((image) => {
        const file = res.fileList.find((item) => item.fileID === image);
        return {
          src: (file == null ? void 0 : file.tempFileURL) ?? image,
          source: image
        };
      });
    } else {
      return images.map((image) => ({
        src: image,
        source: image
      }));
    }
  }
  const hadeFontMap = {
    1: 32,
    2: 24,
    3: 18,
    4: 16,
    5: 13,
    6: 12
  };
  function translateOutputContent(list) {
    formatAppLog("log", "at uni_modules/uni-cms/common/translate-content.js:14", list);
    let contentList = [];
    let itemIndex = 0;
    list.forEach((item, index) => {
      var _a2, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k;
      list[index - 1];
      const nextItem = list[index + 1];
      if (typeof item.insert !== "object") {
        let styleStr = "";
        let head = "";
        let isOrderList = false;
        let isNormalList = false;
        let fontSizeNumber = 17;
        for (let key in item.attributes) {
          const value = item.attributes[key];
          if (key === "fontSize") {
            styleStr += `font-size: ${value};`;
            fontSizeNumber = value.slice(0, 2);
          } else if (key === "bold") {
            styleStr += `font-weight: bold;`;
          } else if (key === "italic") {
            styleStr += `font-style:italic;`;
          } else if (key === "strike") {
            styleStr += `text-decoration: line-through;`;
          } else if (key === "underline") {
            styleStr += `text-decoration: underline;`;
          } else if (key === "letterSpacing") {
            styleStr += `letter-spacing: ${value};`;
          } else if (key === "background") {
            styleStr += `background-color: ${value};`;
          } else if (key === "color") {
            styleStr += `color: ${value};`;
          }
        }
        if (index <= list.length - 2) {
          if (nextItem.insert === "\n") {
            if ((_a2 = nextItem.attributes) == null ? void 0 : _a2.header) {
              (_b = nextItem.attributes) == null ? void 0 : _b.header;
              head = "h" + nextItem.attributes.header;
              fontSizeNumber = hadeFontMap[(_c = nextItem.attributes) == null ? void 0 : _c.header];
            }
            if ((_d = nextItem.attributes) == null ? void 0 : _d.align) {
              styleStr += `textAlign: ${nextItem.attributes.align}`;
            }
            if ((_e2 = nextItem.attributes) == null ? void 0 : _e2.list) {
              if (((_f = nextItem.attributes) == null ? void 0 : _f.list) === "ordered") {
                isOrderList = true;
              } else if (((_g = nextItem.attributes) == null ? void 0 : _g.list) === "bullet") {
                isNormalList = true;
              }
              styleStr += "marign-bottom: 20px;";
            }
            if ((_h = nextItem.attributes) == null ? void 0 : _h.marginLeft) {
              styleStr += `margin-left: ${nextItem.attributes.marginLeft};`;
            }
            if ((_i = nextItem.attributes) == null ? void 0 : _i.marginRight) {
              styleStr += `margin-right: ${nextItem.attributes.marginRight};`;
            }
            if ((_j = nextItem.attributes) == null ? void 0 : _j.textIndent) {
              styleStr += `text-indent: ${nextItem.attributes.textIndent};`;
            }
            if ((_k = nextItem.attributes) == null ? void 0 : _k.lineHeight) {
              styleStr += `line-height: ${nextItem.attributes.lineHeight * fontSizeNumber};`;
            }
          }
        }
        if (item.insert.startsWith("\n")) {
          itemIndex++;
        }
        contentList.push({
          style: styleStr,
          head,
          isNormalList,
          isOrderList,
          itemIndex,
          contextClass: 1,
          context: item.insert
        });
      } else {
        if (item.insert.image) {
          contentList.push({
            imageDescribe: item.attributes["image-describe"],
            itemIndex,
            contextClass: 2,
            context: item.insert.image
          });
        }
      }
    });
    formatAppLog("log", "at uni_modules/uni-cms/common/translate-content.js:103", contentList);
    return contentList;
  }
  const fontData = [
    {
      "font_class": "arrow-down",
      "unicode": ""
    },
    {
      "font_class": "arrow-left",
      "unicode": ""
    },
    {
      "font_class": "arrow-right",
      "unicode": ""
    },
    {
      "font_class": "arrow-up",
      "unicode": ""
    },
    {
      "font_class": "auth",
      "unicode": ""
    },
    {
      "font_class": "auth-filled",
      "unicode": ""
    },
    {
      "font_class": "back",
      "unicode": ""
    },
    {
      "font_class": "bars",
      "unicode": ""
    },
    {
      "font_class": "calendar",
      "unicode": ""
    },
    {
      "font_class": "calendar-filled",
      "unicode": ""
    },
    {
      "font_class": "camera",
      "unicode": ""
    },
    {
      "font_class": "camera-filled",
      "unicode": ""
    },
    {
      "font_class": "cart",
      "unicode": ""
    },
    {
      "font_class": "cart-filled",
      "unicode": ""
    },
    {
      "font_class": "chat",
      "unicode": ""
    },
    {
      "font_class": "chat-filled",
      "unicode": ""
    },
    {
      "font_class": "chatboxes",
      "unicode": ""
    },
    {
      "font_class": "chatboxes-filled",
      "unicode": ""
    },
    {
      "font_class": "chatbubble",
      "unicode": ""
    },
    {
      "font_class": "chatbubble-filled",
      "unicode": ""
    },
    {
      "font_class": "checkbox",
      "unicode": ""
    },
    {
      "font_class": "checkbox-filled",
      "unicode": ""
    },
    {
      "font_class": "checkmarkempty",
      "unicode": ""
    },
    {
      "font_class": "circle",
      "unicode": ""
    },
    {
      "font_class": "circle-filled",
      "unicode": ""
    },
    {
      "font_class": "clear",
      "unicode": ""
    },
    {
      "font_class": "close",
      "unicode": ""
    },
    {
      "font_class": "closeempty",
      "unicode": ""
    },
    {
      "font_class": "cloud-download",
      "unicode": ""
    },
    {
      "font_class": "cloud-download-filled",
      "unicode": ""
    },
    {
      "font_class": "cloud-upload",
      "unicode": ""
    },
    {
      "font_class": "cloud-upload-filled",
      "unicode": ""
    },
    {
      "font_class": "color",
      "unicode": ""
    },
    {
      "font_class": "color-filled",
      "unicode": ""
    },
    {
      "font_class": "compose",
      "unicode": ""
    },
    {
      "font_class": "contact",
      "unicode": ""
    },
    {
      "font_class": "contact-filled",
      "unicode": ""
    },
    {
      "font_class": "down",
      "unicode": ""
    },
    {
      "font_class": "bottom",
      "unicode": ""
    },
    {
      "font_class": "download",
      "unicode": ""
    },
    {
      "font_class": "download-filled",
      "unicode": ""
    },
    {
      "font_class": "email",
      "unicode": ""
    },
    {
      "font_class": "email-filled",
      "unicode": ""
    },
    {
      "font_class": "eye",
      "unicode": ""
    },
    {
      "font_class": "eye-filled",
      "unicode": ""
    },
    {
      "font_class": "eye-slash",
      "unicode": ""
    },
    {
      "font_class": "eye-slash-filled",
      "unicode": ""
    },
    {
      "font_class": "fire",
      "unicode": ""
    },
    {
      "font_class": "fire-filled",
      "unicode": ""
    },
    {
      "font_class": "flag",
      "unicode": ""
    },
    {
      "font_class": "flag-filled",
      "unicode": ""
    },
    {
      "font_class": "folder-add",
      "unicode": ""
    },
    {
      "font_class": "folder-add-filled",
      "unicode": ""
    },
    {
      "font_class": "font",
      "unicode": ""
    },
    {
      "font_class": "forward",
      "unicode": ""
    },
    {
      "font_class": "gear",
      "unicode": ""
    },
    {
      "font_class": "gear-filled",
      "unicode": ""
    },
    {
      "font_class": "gift",
      "unicode": ""
    },
    {
      "font_class": "gift-filled",
      "unicode": ""
    },
    {
      "font_class": "hand-down",
      "unicode": ""
    },
    {
      "font_class": "hand-down-filled",
      "unicode": ""
    },
    {
      "font_class": "hand-up",
      "unicode": ""
    },
    {
      "font_class": "hand-up-filled",
      "unicode": ""
    },
    {
      "font_class": "headphones",
      "unicode": ""
    },
    {
      "font_class": "heart",
      "unicode": ""
    },
    {
      "font_class": "heart-filled",
      "unicode": ""
    },
    {
      "font_class": "help",
      "unicode": ""
    },
    {
      "font_class": "help-filled",
      "unicode": ""
    },
    {
      "font_class": "home",
      "unicode": ""
    },
    {
      "font_class": "home-filled",
      "unicode": ""
    },
    {
      "font_class": "image",
      "unicode": ""
    },
    {
      "font_class": "image-filled",
      "unicode": ""
    },
    {
      "font_class": "images",
      "unicode": ""
    },
    {
      "font_class": "images-filled",
      "unicode": ""
    },
    {
      "font_class": "info",
      "unicode": ""
    },
    {
      "font_class": "info-filled",
      "unicode": ""
    },
    {
      "font_class": "left",
      "unicode": ""
    },
    {
      "font_class": "link",
      "unicode": ""
    },
    {
      "font_class": "list",
      "unicode": ""
    },
    {
      "font_class": "location",
      "unicode": ""
    },
    {
      "font_class": "location-filled",
      "unicode": ""
    },
    {
      "font_class": "locked",
      "unicode": ""
    },
    {
      "font_class": "locked-filled",
      "unicode": ""
    },
    {
      "font_class": "loop",
      "unicode": ""
    },
    {
      "font_class": "mail-open",
      "unicode": ""
    },
    {
      "font_class": "mail-open-filled",
      "unicode": ""
    },
    {
      "font_class": "map",
      "unicode": ""
    },
    {
      "font_class": "map-filled",
      "unicode": ""
    },
    {
      "font_class": "map-pin",
      "unicode": ""
    },
    {
      "font_class": "map-pin-ellipse",
      "unicode": ""
    },
    {
      "font_class": "medal",
      "unicode": ""
    },
    {
      "font_class": "medal-filled",
      "unicode": ""
    },
    {
      "font_class": "mic",
      "unicode": ""
    },
    {
      "font_class": "mic-filled",
      "unicode": ""
    },
    {
      "font_class": "micoff",
      "unicode": ""
    },
    {
      "font_class": "micoff-filled",
      "unicode": ""
    },
    {
      "font_class": "minus",
      "unicode": ""
    },
    {
      "font_class": "minus-filled",
      "unicode": ""
    },
    {
      "font_class": "more",
      "unicode": ""
    },
    {
      "font_class": "more-filled",
      "unicode": ""
    },
    {
      "font_class": "navigate",
      "unicode": ""
    },
    {
      "font_class": "navigate-filled",
      "unicode": ""
    },
    {
      "font_class": "notification",
      "unicode": ""
    },
    {
      "font_class": "notification-filled",
      "unicode": ""
    },
    {
      "font_class": "paperclip",
      "unicode": ""
    },
    {
      "font_class": "paperplane",
      "unicode": ""
    },
    {
      "font_class": "paperplane-filled",
      "unicode": ""
    },
    {
      "font_class": "person",
      "unicode": ""
    },
    {
      "font_class": "person-filled",
      "unicode": ""
    },
    {
      "font_class": "personadd",
      "unicode": ""
    },
    {
      "font_class": "personadd-filled",
      "unicode": ""
    },
    {
      "font_class": "personadd-filled-copy",
      "unicode": ""
    },
    {
      "font_class": "phone",
      "unicode": ""
    },
    {
      "font_class": "phone-filled",
      "unicode": ""
    },
    {
      "font_class": "plus",
      "unicode": ""
    },
    {
      "font_class": "plus-filled",
      "unicode": ""
    },
    {
      "font_class": "plusempty",
      "unicode": ""
    },
    {
      "font_class": "pulldown",
      "unicode": ""
    },
    {
      "font_class": "pyq",
      "unicode": ""
    },
    {
      "font_class": "qq",
      "unicode": ""
    },
    {
      "font_class": "redo",
      "unicode": ""
    },
    {
      "font_class": "redo-filled",
      "unicode": ""
    },
    {
      "font_class": "refresh",
      "unicode": ""
    },
    {
      "font_class": "refresh-filled",
      "unicode": ""
    },
    {
      "font_class": "refreshempty",
      "unicode": ""
    },
    {
      "font_class": "reload",
      "unicode": ""
    },
    {
      "font_class": "right",
      "unicode": ""
    },
    {
      "font_class": "scan",
      "unicode": ""
    },
    {
      "font_class": "search",
      "unicode": ""
    },
    {
      "font_class": "settings",
      "unicode": ""
    },
    {
      "font_class": "settings-filled",
      "unicode": ""
    },
    {
      "font_class": "shop",
      "unicode": ""
    },
    {
      "font_class": "shop-filled",
      "unicode": ""
    },
    {
      "font_class": "smallcircle",
      "unicode": ""
    },
    {
      "font_class": "smallcircle-filled",
      "unicode": ""
    },
    {
      "font_class": "sound",
      "unicode": ""
    },
    {
      "font_class": "sound-filled",
      "unicode": ""
    },
    {
      "font_class": "spinner-cycle",
      "unicode": ""
    },
    {
      "font_class": "staff",
      "unicode": ""
    },
    {
      "font_class": "staff-filled",
      "unicode": ""
    },
    {
      "font_class": "star",
      "unicode": ""
    },
    {
      "font_class": "star-filled",
      "unicode": ""
    },
    {
      "font_class": "starhalf",
      "unicode": ""
    },
    {
      "font_class": "trash",
      "unicode": ""
    },
    {
      "font_class": "trash-filled",
      "unicode": ""
    },
    {
      "font_class": "tune",
      "unicode": ""
    },
    {
      "font_class": "tune-filled",
      "unicode": ""
    },
    {
      "font_class": "undo",
      "unicode": ""
    },
    {
      "font_class": "undo-filled",
      "unicode": ""
    },
    {
      "font_class": "up",
      "unicode": ""
    },
    {
      "font_class": "top",
      "unicode": ""
    },
    {
      "font_class": "upload",
      "unicode": ""
    },
    {
      "font_class": "upload-filled",
      "unicode": ""
    },
    {
      "font_class": "videocam",
      "unicode": ""
    },
    {
      "font_class": "videocam-filled",
      "unicode": ""
    },
    {
      "font_class": "vip",
      "unicode": ""
    },
    {
      "font_class": "vip-filled",
      "unicode": ""
    },
    {
      "font_class": "wallet",
      "unicode": ""
    },
    {
      "font_class": "wallet-filled",
      "unicode": ""
    },
    {
      "font_class": "weibo",
      "unicode": ""
    },
    {
      "font_class": "weixin",
      "unicode": ""
    }
  ];
  const getVal = (val) => {
    const reg = /^[0-9]*$/g;
    return typeof val === "number" || reg.test(val) ? val + "px" : val;
  };
  const _sfc_main$3c = {
    name: "UniIcons",
    emits: ["click"],
    props: {
      type: {
        type: String,
        default: ""
      },
      color: {
        type: String,
        default: "#333333"
      },
      size: {
        type: [Number, String],
        default: 16
      },
      customPrefix: {
        type: String,
        default: ""
      },
      fontFamily: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        icons: fontData
      };
    },
    computed: {
      unicode() {
        let code = this.icons.find((v2) => v2.font_class === this.type);
        if (code) {
          return code.unicode;
        }
        return "";
      },
      iconSize() {
        return getVal(this.size);
      },
      styleObj() {
        if (this.fontFamily !== "") {
          return `color: ${this.color}; font-size: ${this.iconSize}; font-family: ${this.fontFamily};`;
        }
        return `color: ${this.color}; font-size: ${this.iconSize};`;
      }
    },
    methods: {
      _onClick() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$1a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "text",
      {
        style: vue.normalizeStyle($options.styleObj),
        class: vue.normalizeClass(["uni-icons", ["uniui-" + $props.type, $props.customPrefix, $props.customPrefix ? $props.type : ""]]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options._onClick && $options._onClick(...args))
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0 = /* @__PURE__ */ _export_sfc$1(_sfc_main$3c, [["render", _sfc_render$1a], ["__scopeId", "data-v-d31e1c47"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-icons/components/uni-icons/uni-icons.vue"]]);
  class MPAnimation {
    constructor(options, _this) {
      this.options = options;
      this.animation = uni.createAnimation({
        ...options
      });
      this.currentStepAnimates = {};
      this.next = 0;
      this.$ = _this;
    }
    _nvuePushAnimates(type3, args) {
      let aniObj = this.currentStepAnimates[this.next];
      let styles = {};
      if (!aniObj) {
        styles = {
          styles: {},
          config: {}
        };
      } else {
        styles = aniObj;
      }
      if (animateTypes1.includes(type3)) {
        if (!styles.styles.transform) {
          styles.styles.transform = "";
        }
        let unit2 = "";
        if (type3 === "rotate") {
          unit2 = "deg";
        }
        styles.styles.transform += `${type3}(${args + unit2}) `;
      } else {
        styles.styles[type3] = `${args}`;
      }
      this.currentStepAnimates[this.next] = styles;
    }
    _animateRun(styles = {}, config = {}) {
      let ref2 = this.$.$refs["ani"].ref;
      if (!ref2)
        return;
      return new Promise((resolve, reject) => {
        nvueAnimation.transition(ref2, {
          styles,
          ...config
        }, (res) => {
          resolve();
        });
      });
    }
    _nvueNextAnimate(animates, step = 0, fn2) {
      let obj = animates[step];
      if (obj) {
        let {
          styles,
          config
        } = obj;
        this._animateRun(styles, config).then(() => {
          step += 1;
          this._nvueNextAnimate(animates, step, fn2);
        });
      } else {
        this.currentStepAnimates = {};
        typeof fn2 === "function" && fn2();
        this.isEnd = true;
      }
    }
    step(config = {}) {
      this.animation.step(config);
      return this;
    }
    run(fn2) {
      this.$.animationData = this.animation.export();
      this.$.timer = setTimeout(() => {
        typeof fn2 === "function" && fn2();
      }, this.$.durationTime);
    }
  }
  const animateTypes1 = [
    "matrix",
    "matrix3d",
    "rotate",
    "rotate3d",
    "rotateX",
    "rotateY",
    "rotateZ",
    "scale",
    "scale3d",
    "scaleX",
    "scaleY",
    "scaleZ",
    "skew",
    "skewX",
    "skewY",
    "translate",
    "translate3d",
    "translateX",
    "translateY",
    "translateZ"
  ];
  const animateTypes2 = ["opacity", "backgroundColor"];
  const animateTypes3 = ["width", "height", "left", "right", "top", "bottom"];
  animateTypes1.concat(animateTypes2, animateTypes3).forEach((type3) => {
    MPAnimation.prototype[type3] = function(...args) {
      this.animation[type3](...args);
      return this;
    };
  });
  function createAnimation(option, _this) {
    if (!_this)
      return;
    clearTimeout(_this.timer);
    return new MPAnimation(option, _this);
  }
  const _sfc_main$3b = {
    name: "uniTransition",
    emits: ["click", "change"],
    props: {
      show: {
        type: Boolean,
        default: false
      },
      modeClass: {
        type: [Array, String],
        default() {
          return "fade";
        }
      },
      duration: {
        type: Number,
        default: 300
      },
      styles: {
        type: Object,
        default() {
          return {};
        }
      },
      customClass: {
        type: String,
        default: ""
      },
      onceRender: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        isShow: false,
        transform: "",
        opacity: 1,
        animationData: {},
        durationTime: 300,
        config: {}
      };
    },
    watch: {
      show: {
        handler(newVal) {
          if (newVal) {
            this.open();
          } else {
            if (this.isShow) {
              this.close();
            }
          }
        },
        immediate: true
      }
    },
    computed: {
      // 生成样式数据
      stylesObject() {
        let styles = {
          ...this.styles,
          "transition-duration": this.duration / 1e3 + "s"
        };
        let transform = "";
        for (let i2 in styles) {
          let line = this.toLine(i2);
          transform += line + ":" + styles[i2] + ";";
        }
        return transform;
      },
      // 初始化动画条件
      transformStyles() {
        return "transform:" + this.transform + ";opacity:" + this.opacity + ";" + this.stylesObject;
      }
    },
    created() {
      this.config = {
        duration: this.duration,
        timingFunction: "ease",
        transformOrigin: "50% 50%",
        delay: 0
      };
      this.durationTime = this.duration;
    },
    methods: {
      /**
       *  ref 触发 初始化动画
       */
      init(obj = {}) {
        if (obj.duration) {
          this.durationTime = obj.duration;
        }
        this.animation = createAnimation(Object.assign(this.config, obj), this);
      },
      /**
       * 点击组件触发回调
       */
      onClick() {
        this.$emit("click", {
          detail: this.isShow
        });
      },
      /**
       * ref 触发 动画分组
       * @param {Object} obj
       */
      step(obj, config = {}) {
        if (!this.animation)
          return;
        for (let i2 in obj) {
          try {
            if (typeof obj[i2] === "object") {
              this.animation[i2](...obj[i2]);
            } else {
              this.animation[i2](obj[i2]);
            }
          } catch (e) {
            formatAppLog("error", "at uni_modules/uni-transition/components/uni-transition/uni-transition.vue:148", `方法 ${i2} 不存在`);
          }
        }
        this.animation.step(config);
        return this;
      },
      /**
       *  ref 触发 执行动画
       */
      run(fn2) {
        if (!this.animation)
          return;
        this.animation.run(fn2);
      },
      // 开始过度动画
      open() {
        clearTimeout(this.timer);
        this.transform = "";
        this.isShow = true;
        let { opacity, transform } = this.styleInit(false);
        if (typeof opacity !== "undefined") {
          this.opacity = opacity;
        }
        this.transform = transform;
        this.$nextTick(() => {
          this.timer = setTimeout(() => {
            this.animation = createAnimation(this.config, this);
            this.tranfromInit(false).step();
            this.animation.run();
            this.$emit("change", {
              detail: this.isShow
            });
          }, 20);
        });
      },
      // 关闭过度动画
      close(type3) {
        if (!this.animation)
          return;
        this.tranfromInit(true).step().run(() => {
          this.isShow = false;
          this.animationData = null;
          this.animation = null;
          let { opacity, transform } = this.styleInit(false);
          this.opacity = opacity || 1;
          this.transform = transform;
          this.$emit("change", {
            detail: this.isShow
          });
        });
      },
      // 处理动画开始前的默认样式
      styleInit(type3) {
        let styles = {
          transform: ""
        };
        let buildStyle = (type4, mode) => {
          if (mode === "fade") {
            styles.opacity = this.animationType(type4)[mode];
          } else {
            styles.transform += this.animationType(type4)[mode] + " ";
          }
        };
        if (typeof this.modeClass === "string") {
          buildStyle(type3, this.modeClass);
        } else {
          this.modeClass.forEach((mode) => {
            buildStyle(type3, mode);
          });
        }
        return styles;
      },
      // 处理内置组合动画
      tranfromInit(type3) {
        let buildTranfrom = (type4, mode) => {
          let aniNum = null;
          if (mode === "fade") {
            aniNum = type4 ? 0 : 1;
          } else {
            aniNum = type4 ? "-100%" : "0";
            if (mode === "zoom-in") {
              aniNum = type4 ? 0.8 : 1;
            }
            if (mode === "zoom-out") {
              aniNum = type4 ? 1.2 : 1;
            }
            if (mode === "slide-right") {
              aniNum = type4 ? "100%" : "0";
            }
            if (mode === "slide-bottom") {
              aniNum = type4 ? "100%" : "0";
            }
          }
          this.animation[this.animationMode()[mode]](aniNum);
        };
        if (typeof this.modeClass === "string") {
          buildTranfrom(type3, this.modeClass);
        } else {
          this.modeClass.forEach((mode) => {
            buildTranfrom(type3, mode);
          });
        }
        return this.animation;
      },
      animationType(type3) {
        return {
          fade: type3 ? 0 : 1,
          "slide-top": `translateY(${type3 ? "0" : "-100%"})`,
          "slide-right": `translateX(${type3 ? "0" : "100%"})`,
          "slide-bottom": `translateY(${type3 ? "0" : "100%"})`,
          "slide-left": `translateX(${type3 ? "0" : "-100%"})`,
          "zoom-in": `scaleX(${type3 ? 1 : 0.8}) scaleY(${type3 ? 1 : 0.8})`,
          "zoom-out": `scaleX(${type3 ? 1 : 1.2}) scaleY(${type3 ? 1 : 1.2})`
        };
      },
      // 内置动画类型与实际动画对应字典
      animationMode() {
        return {
          fade: "opacity",
          "slide-top": "translateY",
          "slide-right": "translateX",
          "slide-bottom": "translateY",
          "slide-left": "translateX",
          "zoom-in": "scale",
          "zoom-out": "scale"
        };
      },
      // 驼峰转中横线
      toLine(name) {
        return name.replace(/([A-Z])/g, "-$1").toLowerCase();
      }
    }
  };
  function _sfc_render$19(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.withDirectives((vue.openBlock(), vue.createElementBlock("view", {
      ref: "ani",
      animation: $data.animationData,
      class: vue.normalizeClass($props.customClass),
      style: vue.normalizeStyle($options.transformStyles),
      onClick: _cache[0] || (_cache[0] = (...args) => $options.onClick && $options.onClick(...args))
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 14, ["animation"])), [
      [vue.vShow, $data.isShow]
    ]);
  }
  const __easycom_1$2 = /* @__PURE__ */ _export_sfc$1(_sfc_main$3b, [["render", _sfc_render$19], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-transition/components/uni-transition/uni-transition.vue"]]);
  function obj2strClass(obj) {
    let classess = "";
    for (let key in obj) {
      const val = obj[key];
      if (val) {
        classess += `${key} `;
      }
    }
    return classess;
  }
  function obj2strStyle(obj) {
    let style = "";
    for (let key in obj) {
      const val = obj[key];
      style += `${key}:${val};`;
    }
    return style;
  }
  const _sfc_main$3a = {
    name: "uni-easyinput",
    emits: [
      "click",
      "iconClick",
      "update:modelValue",
      "input",
      "focus",
      "blur",
      "confirm",
      "clear",
      "eyes",
      "change",
      "keyboardheightchange"
    ],
    model: {
      prop: "modelValue",
      event: "update:modelValue"
    },
    options: {
      virtualHost: true
    },
    inject: {
      form: {
        from: "uniForm",
        default: null
      },
      formItem: {
        from: "uniFormItem",
        default: null
      }
    },
    props: {
      name: String,
      value: [Number, String],
      modelValue: [Number, String],
      type: {
        type: String,
        default: "text"
      },
      clearable: {
        type: Boolean,
        default: true
      },
      autoHeight: {
        type: Boolean,
        default: false
      },
      placeholder: {
        type: String,
        default: " "
      },
      placeholderStyle: String,
      focus: {
        type: Boolean,
        default: false
      },
      disabled: {
        type: Boolean,
        default: false
      },
      maxlength: {
        type: [Number, String],
        default: 140
      },
      confirmType: {
        type: String,
        default: "done"
      },
      clearSize: {
        type: [Number, String],
        default: 24
      },
      inputBorder: {
        type: Boolean,
        default: true
      },
      prefixIcon: {
        type: String,
        default: ""
      },
      suffixIcon: {
        type: String,
        default: ""
      },
      trim: {
        type: [Boolean, String],
        default: false
      },
      cursorSpacing: {
        type: Number,
        default: 0
      },
      passwordIcon: {
        type: Boolean,
        default: true
      },
      adjustPosition: {
        type: Boolean,
        default: true
      },
      primaryColor: {
        type: String,
        default: "#2979ff"
      },
      styles: {
        type: Object,
        default() {
          return {
            color: "#333",
            backgroundColor: "#fff",
            disableColor: "#F7F6F6",
            borderColor: "#e5e5e5"
          };
        }
      },
      errorMessage: {
        type: [String, Boolean],
        default: ""
      }
    },
    data() {
      return {
        focused: false,
        val: "",
        showMsg: "",
        border: false,
        isFirstBorder: false,
        showClearIcon: false,
        showPassword: false,
        focusShow: false,
        localMsg: "",
        isEnter: false
        // 用于判断当前是否是使用回车操作
      };
    },
    computed: {
      // 输入框内是否有值
      isVal() {
        const val = this.val;
        if (val || val === 0) {
          return true;
        }
        return false;
      },
      msg() {
        return this.localMsg || this.errorMessage;
      },
      // 因为uniapp的input组件的maxlength组件必须要数值，这里转为数值，用户可以传入字符串数值
      inputMaxlength() {
        return Number(this.maxlength);
      },
      // 处理外层样式的style
      boxStyle() {
        return `color:${this.inputBorder && this.msg ? "#e43d33" : this.styles.color};`;
      },
      // input 内容的类和样式处理
      inputContentClass() {
        return obj2strClass({
          "is-input-border": this.inputBorder,
          "is-input-error-border": this.inputBorder && this.msg,
          "is-textarea": this.type === "textarea",
          "is-disabled": this.disabled,
          "is-focused": this.focusShow
        });
      },
      inputContentStyle() {
        const focusColor = this.focusShow ? this.primaryColor : this.styles.borderColor;
        const borderColor = this.inputBorder && this.msg ? "#dd524d" : focusColor;
        return obj2strStyle({
          "border-color": borderColor || "#e5e5e5",
          "background-color": this.disabled ? this.styles.disableColor : this.styles.backgroundColor
        });
      },
      // input右侧样式
      inputStyle() {
        const paddingRight = this.type === "password" || this.clearable || this.prefixIcon ? "" : "10px";
        return obj2strStyle({
          "padding-right": paddingRight,
          "padding-left": this.prefixIcon ? "" : "10px"
        });
      }
    },
    watch: {
      value(newVal) {
        if (newVal === null) {
          this.val = "";
          return;
        }
        this.val = newVal;
      },
      modelValue(newVal) {
        if (newVal === null) {
          this.val = "";
          return;
        }
        this.val = newVal;
      },
      focus(newVal) {
        this.$nextTick(() => {
          this.focused = this.focus;
          this.focusShow = this.focus;
        });
      }
    },
    created() {
      this.init();
      if (this.form && this.formItem) {
        this.$watch("formItem.errMsg", (newVal) => {
          this.localMsg = newVal;
        });
      }
    },
    mounted() {
      this.$nextTick(() => {
        this.focused = this.focus;
        this.focusShow = this.focus;
      });
    },
    methods: {
      /**
       * 初始化变量值
       */
      init() {
        if (this.value || this.value === 0) {
          this.val = this.value;
        } else if (this.modelValue || this.modelValue === 0 || this.modelValue === "") {
          this.val = this.modelValue;
        } else {
          this.val = "";
        }
      },
      /**
       * 点击图标时触发
       * @param {Object} type
       */
      onClickIcon(type3) {
        this.$emit("iconClick", type3);
      },
      /**
       * 显示隐藏内容，密码框时生效
       */
      onEyes() {
        this.showPassword = !this.showPassword;
        this.$emit("eyes", this.showPassword);
      },
      /**
       * 输入时触发
       * @param {Object} event
       */
      onInput(event) {
        let value = event.detail.value;
        if (this.trim) {
          if (typeof this.trim === "boolean" && this.trim) {
            value = this.trimStr(value);
          }
          if (typeof this.trim === "string") {
            value = this.trimStr(value, this.trim);
          }
        }
        if (this.errMsg)
          this.errMsg = "";
        this.val = value;
        this.$emit("input", value);
        this.$emit("update:modelValue", value);
      },
      /**
       * 外部调用方法
       * 获取焦点时触发
       * @param {Object} event
       */
      onFocus() {
        this.$nextTick(() => {
          this.focused = true;
        });
        this.$emit("focus", null);
      },
      _Focus(event) {
        this.focusShow = true;
        this.$emit("focus", event);
      },
      /**
       * 外部调用方法
       * 失去焦点时触发
       * @param {Object} event
       */
      onBlur() {
        this.focused = false;
        this.$emit("blur", null);
      },
      _Blur(event) {
        event.detail.value;
        this.focusShow = false;
        this.$emit("blur", event);
        if (this.isEnter === false) {
          this.$emit("change", this.val);
        }
        if (this.form && this.formItem) {
          const { validateTrigger } = this.form;
          if (validateTrigger === "blur") {
            this.formItem.onFieldChange();
          }
        }
      },
      /**
       * 按下键盘的发送键
       * @param {Object} e
       */
      onConfirm(e) {
        this.$emit("confirm", this.val);
        this.isEnter = true;
        this.$emit("change", this.val);
        this.$nextTick(() => {
          this.isEnter = false;
        });
      },
      /**
       * 清理内容
       * @param {Object} event
       */
      onClear(event) {
        this.val = "";
        this.$emit("input", "");
        this.$emit("update:modelValue", "");
        this.$emit("clear");
      },
      /**
       * 键盘高度发生变化的时候触发此事件
       * 兼容性：微信小程序2.7.0+、App 3.1.0+
       * @param {Object} event
       */
      onkeyboardheightchange(event) {
        this.$emit("keyboardheightchange", event);
      },
      /**
       * 去除空格
       */
      trimStr(str, pos = "both") {
        if (pos === "both") {
          return str.trim();
        } else if (pos === "left") {
          return str.trimLeft();
        } else if (pos === "right") {
          return str.trimRight();
        } else if (pos === "start") {
          return str.trimStart();
        } else if (pos === "end") {
          return str.trimEnd();
        } else if (pos === "all") {
          return str.replace(/\s+/g, "");
        } else if (pos === "none") {
          return str;
        }
        return str;
      }
    }
  };
  function _sfc_render$18(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uni-easyinput", { "uni-easyinput-error": $options.msg }]),
        style: vue.normalizeStyle($options.boxStyle)
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["uni-easyinput__content", $options.inputContentClass]),
            style: vue.normalizeStyle($options.inputContentStyle)
          },
          [
            $props.prefixIcon ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
              key: 0,
              class: "content-clear-icon",
              type: $props.prefixIcon,
              color: "#c0c4cc",
              onClick: _cache[0] || (_cache[0] = ($event) => $options.onClickIcon("prefix")),
              size: "22"
            }, null, 8, ["type"])) : vue.createCommentVNode("v-if", true),
            vue.renderSlot(_ctx.$slots, "left", {}, void 0, true),
            $props.type === "textarea" ? (vue.openBlock(), vue.createElementBlock("textarea", {
              key: 1,
              class: vue.normalizeClass(["uni-easyinput__content-textarea", { "input-padding": $props.inputBorder }]),
              name: $props.name,
              value: $data.val,
              placeholder: $props.placeholder,
              placeholderStyle: $props.placeholderStyle,
              disabled: $props.disabled,
              "placeholder-class": "uni-easyinput__placeholder-class",
              maxlength: $options.inputMaxlength,
              focus: $data.focused,
              autoHeight: $props.autoHeight,
              "cursor-spacing": $props.cursorSpacing,
              "adjust-position": $props.adjustPosition,
              onInput: _cache[1] || (_cache[1] = (...args) => $options.onInput && $options.onInput(...args)),
              onBlur: _cache[2] || (_cache[2] = (...args) => $options._Blur && $options._Blur(...args)),
              onFocus: _cache[3] || (_cache[3] = (...args) => $options._Focus && $options._Focus(...args)),
              onConfirm: _cache[4] || (_cache[4] = (...args) => $options.onConfirm && $options.onConfirm(...args)),
              onKeyboardheightchange: _cache[5] || (_cache[5] = (...args) => $options.onkeyboardheightchange && $options.onkeyboardheightchange(...args))
            }, null, 42, ["name", "value", "placeholder", "placeholderStyle", "disabled", "maxlength", "focus", "autoHeight", "cursor-spacing", "adjust-position"])) : (vue.openBlock(), vue.createElementBlock("input", {
              key: 2,
              type: $props.type === "password" ? "text" : $props.type,
              class: "uni-easyinput__content-input",
              style: vue.normalizeStyle($options.inputStyle),
              name: $props.name,
              value: $data.val,
              password: !$data.showPassword && $props.type === "password",
              placeholder: $props.placeholder,
              placeholderStyle: $props.placeholderStyle,
              "placeholder-class": "uni-easyinput__placeholder-class",
              disabled: $props.disabled,
              maxlength: $options.inputMaxlength,
              focus: $data.focused,
              confirmType: $props.confirmType,
              "cursor-spacing": $props.cursorSpacing,
              "adjust-position": $props.adjustPosition,
              onFocus: _cache[6] || (_cache[6] = (...args) => $options._Focus && $options._Focus(...args)),
              onBlur: _cache[7] || (_cache[7] = (...args) => $options._Blur && $options._Blur(...args)),
              onInput: _cache[8] || (_cache[8] = (...args) => $options.onInput && $options.onInput(...args)),
              onConfirm: _cache[9] || (_cache[9] = (...args) => $options.onConfirm && $options.onConfirm(...args)),
              onKeyboardheightchange: _cache[10] || (_cache[10] = (...args) => $options.onkeyboardheightchange && $options.onkeyboardheightchange(...args))
            }, null, 44, ["type", "name", "value", "password", "placeholder", "placeholderStyle", "disabled", "maxlength", "focus", "confirmType", "cursor-spacing", "adjust-position"])),
            $props.type === "password" && $props.passwordIcon ? (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 3 },
              [
                vue.createCommentVNode(" 开启密码时显示小眼睛 "),
                $options.isVal ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
                  key: 0,
                  class: vue.normalizeClass(["content-clear-icon", { "is-textarea-icon": $props.type === "textarea" }]),
                  type: $data.showPassword ? "eye-slash-filled" : "eye-filled",
                  size: 22,
                  color: $data.focusShow ? $props.primaryColor : "#c0c4cc",
                  onClick: $options.onEyes
                }, null, 8, ["class", "type", "color", "onClick"])) : vue.createCommentVNode("v-if", true)
              ],
              64
              /* STABLE_FRAGMENT */
            )) : vue.createCommentVNode("v-if", true),
            $props.suffixIcon ? (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 4 },
              [
                $props.suffixIcon ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
                  key: 0,
                  class: "content-clear-icon",
                  type: $props.suffixIcon,
                  color: "#c0c4cc",
                  onClick: _cache[11] || (_cache[11] = ($event) => $options.onClickIcon("suffix")),
                  size: "22"
                }, null, 8, ["type"])) : vue.createCommentVNode("v-if", true)
              ],
              64
              /* STABLE_FRAGMENT */
            )) : (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 5 },
              [
                $props.clearable && $options.isVal && !$props.disabled && $props.type !== "textarea" ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
                  key: 0,
                  class: vue.normalizeClass(["content-clear-icon", { "is-textarea-icon": $props.type === "textarea" }]),
                  type: "clear",
                  size: $props.clearSize,
                  color: $options.msg ? "#dd524d" : $data.focusShow ? $props.primaryColor : "#c0c4cc",
                  onClick: $options.onClear
                }, null, 8, ["class", "size", "color", "onClick"])) : vue.createCommentVNode("v-if", true)
              ],
              64
              /* STABLE_FRAGMENT */
            )),
            vue.renderSlot(_ctx.$slots, "right", {}, void 0, true)
          ],
          6
          /* CLASS, STYLE */
        )
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_2 = /* @__PURE__ */ _export_sfc$1(_sfc_main$3a, [["render", _sfc_render$18], ["__scopeId", "data-v-09fd5285"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-easyinput/components/uni-easyinput/uni-easyinput.vue"]]);
  const _sfc_main$39 = {
    name: "uniFormsItem",
    options: {
      virtualHost: true
    },
    provide() {
      return {
        uniFormItem: this
      };
    },
    inject: {
      form: {
        from: "uniForm",
        default: null
      }
    },
    props: {
      // 表单校验规则
      rules: {
        type: Array,
        default() {
          return null;
        }
      },
      // 表单域的属性名，在使用校验规则时必填
      name: {
        type: [String, Array],
        default: ""
      },
      required: {
        type: Boolean,
        default: false
      },
      label: {
        type: String,
        default: ""
      },
      // label的宽度
      labelWidth: {
        type: [String, Number],
        default: ""
      },
      // label 居中方式，默认 left 取值 left/center/right
      labelAlign: {
        type: String,
        default: ""
      },
      // 强制显示错误信息
      errorMessage: {
        type: [String, Boolean],
        default: ""
      },
      // 1.4.0 弃用，统一使用 form 的校验时机
      // validateTrigger: {
      // 	type: String,
      // 	default: ''
      // },
      // 1.4.0 弃用，统一使用 form 的label 位置
      // labelPosition: {
      // 	type: String,
      // 	default: ''
      // },
      // 1.4.0 以下属性已经废弃，请使用  #label 插槽代替
      leftIcon: String,
      iconColor: {
        type: String,
        default: "#606266"
      }
    },
    data() {
      return {
        errMsg: "",
        userRules: null,
        localLabelAlign: "left",
        localLabelWidth: "70px",
        localLabelPos: "left",
        border: false,
        isFirstBorder: false
      };
    },
    computed: {
      // 处理错误信息
      msg() {
        return this.errorMessage || this.errMsg;
      }
    },
    watch: {
      // 规则发生变化通知子组件更新
      "form.formRules"(val) {
        this.init();
      },
      "form.labelWidth"(val) {
        this.localLabelWidth = this._labelWidthUnit(val);
      },
      "form.labelPosition"(val) {
        this.localLabelPos = this._labelPosition();
      },
      "form.labelAlign"(val) {
      }
    },
    created() {
      this.init(true);
      if (this.name && this.form) {
        this.$watch(
          () => {
            const val = this.form._getDataValue(this.name, this.form.localData);
            return val;
          },
          (value, oldVal) => {
            const isEqual2 = this.form._isEqual(value, oldVal);
            if (!isEqual2) {
              const val = this.itemSetValue(value);
              this.onFieldChange(val, false);
            }
          },
          {
            immediate: false
          }
        );
      }
    },
    unmounted() {
      this.__isUnmounted = true;
      this.unInit();
    },
    methods: {
      /**
       * 外部调用方法
       * 设置规则 ，主要用于小程序自定义检验规则
       * @param {Array} rules 规则源数据
       */
      setRules(rules2 = null) {
        this.userRules = rules2;
        this.init(false);
      },
      // 兼容老版本表单组件
      setValue() {
      },
      /**
       * 外部调用方法
       * 校验数据
       * @param {any} value 需要校验的数据
       * @param {boolean} 是否立即校验
       * @return {Array|null} 校验内容
       */
      async onFieldChange(value, formtrigger = true) {
        const {
          formData,
          localData,
          errShowType,
          validateCheck,
          validateTrigger,
          _isRequiredField,
          _realName
        } = this.form;
        const name = _realName(this.name);
        if (!value) {
          value = this.form.formData[name];
        }
        const ruleLen = this.itemRules.rules && this.itemRules.rules.length;
        if (!this.validator || !ruleLen || ruleLen === 0)
          return;
        const isRequiredField2 = _isRequiredField(this.itemRules.rules || []);
        let result = null;
        if (validateTrigger === "bind" || formtrigger) {
          result = await this.validator.validateUpdate(
            {
              [name]: value
            },
            formData
          );
          if (!isRequiredField2 && (value === void 0 || value === "")) {
            result = null;
          }
          if (result && result.errorMessage) {
            if (errShowType === "undertext") {
              this.errMsg = !result ? "" : result.errorMessage;
            }
            if (errShowType === "toast") {
              uni.showToast({
                title: result.errorMessage || "校验错误",
                icon: "none"
              });
            }
            if (errShowType === "modal") {
              uni.showModal({
                title: "提示",
                content: result.errorMessage || "校验错误"
              });
            }
          } else {
            this.errMsg = "";
          }
          validateCheck(result ? result : null);
        } else {
          this.errMsg = "";
        }
        return result ? result : null;
      },
      /**
       * 初始组件数据
       */
      init(type3 = false) {
        const {
          validator,
          formRules,
          childrens,
          formData,
          localData,
          _realName,
          labelWidth,
          _getDataValue,
          _setDataValue
        } = this.form || {};
        this.localLabelAlign = this._justifyContent();
        this.localLabelWidth = this._labelWidthUnit(labelWidth);
        this.localLabelPos = this._labelPosition();
        this.form && type3 && childrens.push(this);
        if (!validator || !formRules)
          return;
        if (!this.form.isFirstBorder) {
          this.form.isFirstBorder = true;
          this.isFirstBorder = true;
        }
        if (this.group) {
          if (!this.group.isFirstBorder) {
            this.group.isFirstBorder = true;
            this.isFirstBorder = true;
          }
        }
        this.border = this.form.border;
        const name = _realName(this.name);
        const itemRule = this.userRules || this.rules;
        if (typeof formRules === "object" && itemRule) {
          formRules[name] = {
            rules: itemRule
          };
          validator.updateSchema(formRules);
        }
        const itemRules = formRules[name] || {};
        this.itemRules = itemRules;
        this.validator = validator;
        this.itemSetValue(_getDataValue(this.name, localData));
      },
      unInit() {
        if (this.form) {
          const {
            childrens,
            formData,
            _realName
          } = this.form;
          childrens.forEach((item, index) => {
            if (item === this) {
              this.form.childrens.splice(index, 1);
              delete formData[_realName(item.name)];
            }
          });
        }
      },
      // 设置item 的值
      itemSetValue(value) {
        const name = this.form._realName(this.name);
        const rules2 = this.itemRules.rules || [];
        const val = this.form._getValue(name, value, rules2);
        this.form._setDataValue(name, this.form.formData, val);
        return val;
      },
      /**
       * 移除该表单项的校验结果
       */
      clearValidate() {
        this.errMsg = "";
      },
      // 是否显示星号
      _isRequired() {
        return this.required;
      },
      // 处理对齐方式
      _justifyContent() {
        if (this.form) {
          const {
            labelAlign
          } = this.form;
          let labelAli = this.labelAlign ? this.labelAlign : labelAlign;
          if (labelAli === "left")
            return "flex-start";
          if (labelAli === "center")
            return "center";
          if (labelAli === "right")
            return "flex-end";
        }
        return "flex-start";
      },
      // 处理 label宽度单位 ,继承父元素的值
      _labelWidthUnit(labelWidth) {
        return this.num2px(this.labelWidth ? this.labelWidth : labelWidth || (this.label ? 70 : "auto"));
      },
      // 处理 label 位置
      _labelPosition() {
        if (this.form)
          return this.form.labelPosition || "left";
        return "left";
      },
      /**
       * 触发时机
       * @param {Object} rule 当前规则内时机
       * @param {Object} itemRlue 当前组件时机
       * @param {Object} parentRule 父组件时机
       */
      isTrigger(rule, itemRlue, parentRule) {
        if (rule === "submit" || !rule) {
          if (rule === void 0) {
            if (itemRlue !== "bind") {
              if (!itemRlue) {
                return parentRule === "" ? "bind" : "submit";
              }
              return "submit";
            }
            return "bind";
          }
          return "submit";
        }
        return "bind";
      },
      num2px(num) {
        if (typeof num === "number") {
          return `${num}px`;
        }
        return num;
      }
    }
  };
  function _sfc_render$17(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uni-forms-item", ["is-direction-" + $data.localLabelPos, $data.border ? "uni-forms-item--border" : "", $data.border && $data.isFirstBorder ? "is-first-border" : ""]])
      },
      [
        vue.renderSlot(_ctx.$slots, "label", {}, () => [
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["uni-forms-item__label", { "no-label": !$props.label && !$props.required }]),
              style: vue.normalizeStyle({ width: $data.localLabelWidth, justifyContent: $data.localLabelAlign })
            },
            [
              $props.required ? (vue.openBlock(), vue.createElementBlock("text", {
                key: 0,
                class: "is-required"
              }, "*")) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode(
                "text",
                null,
                vue.toDisplayString($props.label),
                1
                /* TEXT */
              )
            ],
            6
            /* CLASS, STYLE */
          )
        ], true),
        vue.createElementVNode("view", { class: "uni-forms-item__content" }, [
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass(["uni-forms-item__error", { "msg--active": $options.msg }])
            },
            [
              vue.createElementVNode(
                "text",
                null,
                vue.toDisplayString($options.msg),
                1
                /* TEXT */
              )
            ],
            2
            /* CLASS */
          )
        ])
      ],
      2
      /* CLASS */
    );
  }
  const __easycom_3 = /* @__PURE__ */ _export_sfc$1(_sfc_main$39, [["render", _sfc_render$17], ["__scopeId", "data-v-462874dd"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-forms/components/uni-forms-item/uni-forms-item.vue"]]);
  var pattern = {
    email: /^\S+?@\S+?\.\S+?$/,
    idcard: /^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/,
    url: new RegExp(
      "^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$",
      "i"
    )
  };
  const FORMAT_MAPPING = {
    "int": "integer",
    "bool": "boolean",
    "double": "number",
    "long": "number",
    "password": "string"
    // "fileurls": 'array'
  };
  function formatMessage(args, resources = "") {
    var defaultMessage = ["label"];
    defaultMessage.forEach((item) => {
      if (args[item] === void 0) {
        args[item] = "";
      }
    });
    let str = resources;
    for (let key in args) {
      let reg = new RegExp("{" + key + "}");
      str = str.replace(reg, args[key]);
    }
    return str;
  }
  function isEmptyValue$1(value, type3) {
    if (value === void 0 || value === null) {
      return true;
    }
    if (typeof value === "string" && !value) {
      return true;
    }
    if (Array.isArray(value) && !value.length) {
      return true;
    }
    if (type3 === "object" && !Object.keys(value).length) {
      return true;
    }
    return false;
  }
  const types$1 = {
    integer(value) {
      return types$1.number(value) && parseInt(value, 10) === value;
    },
    string(value) {
      return typeof value === "string";
    },
    number(value) {
      if (isNaN(value)) {
        return false;
      }
      return typeof value === "number";
    },
    "boolean": function(value) {
      return typeof value === "boolean";
    },
    "float": function(value) {
      return types$1.number(value) && !types$1.integer(value);
    },
    array(value) {
      return Array.isArray(value);
    },
    object(value) {
      return typeof value === "object" && !types$1.array(value);
    },
    date(value) {
      return value instanceof Date;
    },
    timestamp(value) {
      if (!this.integer(value) || Math.abs(value).toString().length > 16) {
        return false;
      }
      return true;
    },
    file(value) {
      return typeof value.url === "string";
    },
    email(value) {
      return typeof value === "string" && !!value.match(pattern.email) && value.length < 255;
    },
    url(value) {
      return typeof value === "string" && !!value.match(pattern.url);
    },
    pattern(reg, value) {
      try {
        return new RegExp(reg).test(value);
      } catch (e) {
        return false;
      }
    },
    method(value) {
      return typeof value === "function";
    },
    idcard(value) {
      return typeof value === "string" && !!value.match(pattern.idcard);
    },
    "url-https"(value) {
      return this.url(value) && value.startsWith("https://");
    },
    "url-scheme"(value) {
      return value.startsWith("://");
    },
    "url-web"(value) {
      return false;
    }
  };
  class RuleValidator {
    constructor(message2) {
      this._message = message2;
    }
    async validateRule(fieldKey, fieldValue, value, data, allData) {
      var result = null;
      let rules2 = fieldValue.rules;
      let hasRequired = rules2.findIndex((item) => {
        return item.required;
      });
      if (hasRequired < 0) {
        if (value === null || value === void 0) {
          return result;
        }
        if (typeof value === "string" && !value.length) {
          return result;
        }
      }
      var message2 = this._message;
      if (rules2 === void 0) {
        return message2["default"];
      }
      for (var i2 = 0; i2 < rules2.length; i2++) {
        let rule = rules2[i2];
        let vt2 = this._getValidateType(rule);
        Object.assign(rule, {
          label: fieldValue.label || `["${fieldKey}"]`
        });
        if (RuleValidatorHelper[vt2]) {
          result = RuleValidatorHelper[vt2](rule, value, message2);
          if (result != null) {
            break;
          }
        }
        if (rule.validateExpr) {
          let now2 = Date.now();
          let resultExpr = rule.validateExpr(value, allData, now2);
          if (resultExpr === false) {
            result = this._getMessage(rule, rule.errorMessage || this._message["default"]);
            break;
          }
        }
        if (rule.validateFunction) {
          result = await this.validateFunction(rule, value, data, allData, vt2);
          if (result !== null) {
            break;
          }
        }
      }
      if (result !== null) {
        result = message2.TAG + result;
      }
      return result;
    }
    async validateFunction(rule, value, data, allData, vt2) {
      let result = null;
      try {
        let callbackMessage = null;
        const res = await rule.validateFunction(rule, value, allData || data, (message2) => {
          callbackMessage = message2;
        });
        if (callbackMessage || typeof res === "string" && res || res === false) {
          result = this._getMessage(rule, callbackMessage || res, vt2);
        }
      } catch (e) {
        result = this._getMessage(rule, e.message, vt2);
      }
      return result;
    }
    _getMessage(rule, message2, vt2) {
      return formatMessage(rule, message2 || rule.errorMessage || this._message[vt2] || message2["default"]);
    }
    _getValidateType(rule) {
      var result = "";
      if (rule.required) {
        result = "required";
      } else if (rule.format) {
        result = "format";
      } else if (rule.arrayType) {
        result = "arrayTypeFormat";
      } else if (rule.range) {
        result = "range";
      } else if (rule.maximum !== void 0 || rule.minimum !== void 0) {
        result = "rangeNumber";
      } else if (rule.maxLength !== void 0 || rule.minLength !== void 0) {
        result = "rangeLength";
      } else if (rule.pattern) {
        result = "pattern";
      } else if (rule.validateFunction) {
        result = "validateFunction";
      }
      return result;
    }
  }
  const RuleValidatorHelper = {
    required(rule, value, message2) {
      if (rule.required && isEmptyValue$1(value, rule.format || typeof value)) {
        return formatMessage(rule, rule.errorMessage || message2.required);
      }
      return null;
    },
    range(rule, value, message2) {
      const {
        range: range2,
        errorMessage
      } = rule;
      let list = new Array(range2.length);
      for (let i2 = 0; i2 < range2.length; i2++) {
        const item = range2[i2];
        if (types$1.object(item) && item.value !== void 0) {
          list[i2] = item.value;
        } else {
          list[i2] = item;
        }
      }
      let result = false;
      if (Array.isArray(value)) {
        result = new Set(value.concat(list)).size === list.length;
      } else {
        if (list.indexOf(value) > -1) {
          result = true;
        }
      }
      if (!result) {
        return formatMessage(rule, errorMessage || message2["enum"]);
      }
      return null;
    },
    rangeNumber(rule, value, message2) {
      if (!types$1.number(value)) {
        return formatMessage(rule, rule.errorMessage || message2.pattern.mismatch);
      }
      let {
        minimum,
        maximum,
        exclusiveMinimum,
        exclusiveMaximum
      } = rule;
      let min2 = exclusiveMinimum ? value <= minimum : value < minimum;
      let max2 = exclusiveMaximum ? value >= maximum : value > maximum;
      if (minimum !== void 0 && min2) {
        return formatMessage(rule, rule.errorMessage || message2["number"][exclusiveMinimum ? "exclusiveMinimum" : "minimum"]);
      } else if (maximum !== void 0 && max2) {
        return formatMessage(rule, rule.errorMessage || message2["number"][exclusiveMaximum ? "exclusiveMaximum" : "maximum"]);
      } else if (minimum !== void 0 && maximum !== void 0 && (min2 || max2)) {
        return formatMessage(rule, rule.errorMessage || message2["number"].range);
      }
      return null;
    },
    rangeLength(rule, value, message2) {
      if (!types$1.string(value) && !types$1.array(value)) {
        return formatMessage(rule, rule.errorMessage || message2.pattern.mismatch);
      }
      let min2 = rule.minLength;
      let max2 = rule.maxLength;
      let val = value.length;
      if (min2 !== void 0 && val < min2) {
        return formatMessage(rule, rule.errorMessage || message2["length"].minLength);
      } else if (max2 !== void 0 && val > max2) {
        return formatMessage(rule, rule.errorMessage || message2["length"].maxLength);
      } else if (min2 !== void 0 && max2 !== void 0 && (val < min2 || val > max2)) {
        return formatMessage(rule, rule.errorMessage || message2["length"].range);
      }
      return null;
    },
    pattern(rule, value, message2) {
      if (!types$1["pattern"](rule.pattern, value)) {
        return formatMessage(rule, rule.errorMessage || message2.pattern.mismatch);
      }
      return null;
    },
    format(rule, value, message2) {
      var customTypes = Object.keys(types$1);
      var format2 = FORMAT_MAPPING[rule.format] ? FORMAT_MAPPING[rule.format] : rule.format || rule.arrayType;
      if (customTypes.indexOf(format2) > -1) {
        if (!types$1[format2](value)) {
          return formatMessage(rule, rule.errorMessage || message2.typeError);
        }
      }
      return null;
    },
    arrayTypeFormat(rule, value, message2) {
      if (!Array.isArray(value)) {
        return formatMessage(rule, rule.errorMessage || message2.typeError);
      }
      for (let i2 = 0; i2 < value.length; i2++) {
        const element = value[i2];
        let formatResult = this.format(rule, element, message2);
        if (formatResult !== null) {
          return formatResult;
        }
      }
      return null;
    }
  };
  class SchemaValidator extends RuleValidator {
    constructor(schema, options) {
      super(SchemaValidator.message);
      this._schema = schema;
      this._options = options || null;
    }
    updateSchema(schema) {
      this._schema = schema;
    }
    async validate(data, allData) {
      let result = this._checkFieldInSchema(data);
      if (!result) {
        result = await this.invokeValidate(data, false, allData);
      }
      return result.length ? result[0] : null;
    }
    async validateAll(data, allData) {
      let result = this._checkFieldInSchema(data);
      if (!result) {
        result = await this.invokeValidate(data, true, allData);
      }
      return result;
    }
    async validateUpdate(data, allData) {
      let result = this._checkFieldInSchema(data);
      if (!result) {
        result = await this.invokeValidateUpdate(data, false, allData);
      }
      return result.length ? result[0] : null;
    }
    async invokeValidate(data, all, allData) {
      let result = [];
      let schema = this._schema;
      for (let key in schema) {
        let value = schema[key];
        let errorMessage = await this.validateRule(key, value, data[key], data, allData);
        if (errorMessage != null) {
          result.push({
            key,
            errorMessage
          });
          if (!all)
            break;
        }
      }
      return result;
    }
    async invokeValidateUpdate(data, all, allData) {
      let result = [];
      for (let key in data) {
        let errorMessage = await this.validateRule(key, this._schema[key], data[key], data, allData);
        if (errorMessage != null) {
          result.push({
            key,
            errorMessage
          });
          if (!all)
            break;
        }
      }
      return result;
    }
    _checkFieldInSchema(data) {
      var keys2 = Object.keys(data);
      var keys22 = Object.keys(this._schema);
      if (new Set(keys2.concat(keys22)).size === keys22.length) {
        return "";
      }
      var noExistFields = keys2.filter((key) => {
        return keys22.indexOf(key) < 0;
      });
      var errorMessage = formatMessage({
        field: JSON.stringify(noExistFields)
      }, SchemaValidator.message.TAG + SchemaValidator.message["defaultInvalid"]);
      return [{
        key: "invalid",
        errorMessage
      }];
    }
  }
  function Message() {
    return {
      TAG: "",
      default: "验证错误",
      defaultInvalid: "提交的字段{field}在数据库中并不存在",
      validateFunction: "验证无效",
      required: "{label}必填",
      "enum": "{label}超出范围",
      timestamp: "{label}格式无效",
      whitespace: "{label}不能为空",
      typeError: "{label}类型无效",
      date: {
        format: "{label}日期{value}格式无效",
        parse: "{label}日期无法解析,{value}无效",
        invalid: "{label}日期{value}无效"
      },
      length: {
        minLength: "{label}长度不能少于{minLength}",
        maxLength: "{label}长度不能超过{maxLength}",
        range: "{label}必须介于{minLength}和{maxLength}之间"
      },
      number: {
        minimum: "{label}不能小于{minimum}",
        maximum: "{label}不能大于{maximum}",
        exclusiveMinimum: "{label}不能小于等于{minimum}",
        exclusiveMaximum: "{label}不能大于等于{maximum}",
        range: "{label}必须介于{minimum}and{maximum}之间"
      },
      pattern: {
        mismatch: "{label}格式不匹配"
      }
    };
  }
  SchemaValidator.message = new Message();
  const deepCopy = (val) => {
    return JSON.parse(JSON.stringify(val));
  };
  const typeFilter = (format2) => {
    return format2 === "int" || format2 === "double" || format2 === "number" || format2 === "timestamp";
  };
  const getValue$2 = (key, value, rules2) => {
    const isRuleNumType = rules2.find((val) => val.format && typeFilter(val.format));
    const isRuleBoolType = rules2.find((val) => val.format && val.format === "boolean" || val.format === "bool");
    if (!!isRuleNumType) {
      if (!value && value !== 0) {
        value = null;
      } else {
        value = isNumber$3(Number(value)) ? Number(value) : value;
      }
    }
    if (!!isRuleBoolType) {
      value = isBoolean$2(value) ? value : false;
    }
    return value;
  };
  const setDataValue = (field, formdata, value) => {
    formdata[field] = value;
    return value || "";
  };
  const getDataValue = (field, data) => {
    return objGet(data, field);
  };
  const realName = (name, data = {}) => {
    const base_name = _basePath(name);
    if (typeof base_name === "object" && Array.isArray(base_name) && base_name.length > 1) {
      const realname = base_name.reduce((a2, b2) => a2 += `#${b2}`, "_formdata_");
      return realname;
    }
    return base_name[0] || name;
  };
  const isRealName = (name) => {
    const reg = /^_formdata_#*/;
    return reg.test(name);
  };
  const rawData = (object = {}, name) => {
    let newData = JSON.parse(JSON.stringify(object));
    let formData = {};
    for (let i2 in newData) {
      let path = name2arr(i2);
      objSet(formData, path, newData[i2]);
    }
    return formData;
  };
  const name2arr = (name) => {
    let field = name.replace("_formdata_#", "");
    field = field.split("#").map((v2) => isNumber$3(v2) ? Number(v2) : v2);
    return field;
  };
  const objSet = (object, path, value) => {
    if (typeof object !== "object")
      return object;
    _basePath(path).reduce((o2, k, i2, _2) => {
      if (i2 === _2.length - 1) {
        o2[k] = value;
        return null;
      } else if (k in o2) {
        return o2[k];
      } else {
        o2[k] = /^[0-9]{1,}$/.test(_2[i2 + 1]) ? [] : {};
        return o2[k];
      }
    }, object);
    return object;
  };
  function _basePath(path) {
    if (Array.isArray(path))
      return path;
    return path.replace(/\[/g, ".").replace(/\]/g, "").split(".");
  }
  const objGet = (object, path, defaultVal = "undefined") => {
    let newPath = _basePath(path);
    let val = newPath.reduce((o2, k) => {
      return (o2 || {})[k];
    }, object);
    return !val || val !== void 0 ? val : defaultVal;
  };
  const isNumber$3 = (num) => {
    return !isNaN(Number(num));
  };
  const isBoolean$2 = (bool) => {
    return typeof bool === "boolean";
  };
  const isRequiredField = (rules2) => {
    let isNoField = false;
    for (let i2 = 0; i2 < rules2.length; i2++) {
      const ruleData = rules2[i2];
      if (ruleData.required) {
        isNoField = true;
        break;
      }
    }
    return isNoField;
  };
  const isEqual$2 = (a2, b2) => {
    if (a2 === b2) {
      return a2 !== 0 || 1 / a2 === 1 / b2;
    }
    if (a2 == null || b2 == null) {
      return a2 === b2;
    }
    var classNameA = toString.call(a2), classNameB = toString.call(b2);
    if (classNameA !== classNameB) {
      return false;
    }
    switch (classNameA) {
      case "[object RegExp]":
      case "[object String]":
        return "" + a2 === "" + b2;
      case "[object Number]":
        if (+a2 !== +a2) {
          return +b2 !== +b2;
        }
        return +a2 === 0 ? 1 / +a2 === 1 / b2 : +a2 === +b2;
      case "[object Date]":
      case "[object Boolean]":
        return +a2 === +b2;
    }
    if (classNameA == "[object Object]") {
      var propsA = Object.getOwnPropertyNames(a2), propsB = Object.getOwnPropertyNames(b2);
      if (propsA.length != propsB.length) {
        return false;
      }
      for (var i2 = 0; i2 < propsA.length; i2++) {
        var propName = propsA[i2];
        if (a2[propName] !== b2[propName]) {
          return false;
        }
      }
      return true;
    }
    if (classNameA == "[object Array]") {
      if (a2.toString() == b2.toString()) {
        return true;
      }
      return false;
    }
  };
  const _sfc_main$38 = {
    name: "uniForms",
    emits: ["validate", "submit"],
    options: {
      virtualHost: true
    },
    props: {
      // 即将弃用
      value: {
        type: Object,
        default() {
          return null;
        }
      },
      // vue3 替换 value 属性
      modelValue: {
        type: Object,
        default() {
          return null;
        }
      },
      // 1.4.0 开始将不支持 v-model ，且废弃 value 和 modelValue
      model: {
        type: Object,
        default() {
          return null;
        }
      },
      // 表单校验规则
      rules: {
        type: Object,
        default() {
          return {};
        }
      },
      //校验错误信息提示方式 默认 undertext 取值 [undertext|toast|modal]
      errShowType: {
        type: String,
        default: "undertext"
      },
      // 校验触发器方式 默认 bind 取值 [bind|submit]
      validateTrigger: {
        type: String,
        default: "submit"
      },
      // label 位置，默认 left 取值  top/left
      labelPosition: {
        type: String,
        default: "left"
      },
      // label 宽度
      labelWidth: {
        type: [String, Number],
        default: ""
      },
      // label 居中方式，默认 left 取值 left/center/right
      labelAlign: {
        type: String,
        default: "left"
      },
      border: {
        type: Boolean,
        default: false
      }
    },
    provide() {
      return {
        uniForm: this
      };
    },
    data() {
      return {
        // 表单本地值的记录，不应该与传如的值进行关联
        formData: {},
        formRules: {}
      };
    },
    computed: {
      // 计算数据源变化的
      localData() {
        const localVal = this.model || this.modelValue || this.value;
        if (localVal) {
          return deepCopy(localVal);
        }
        return {};
      }
    },
    watch: {
      // 监听数据变化 ,暂时不使用，需要单独赋值
      // localData: {},
      // 监听规则变化
      rules: {
        handler: function(val, oldVal) {
          this.setRules(val);
        },
        deep: true,
        immediate: true
      }
    },
    created() {
      let getbinddata = getApp().$vm.$.appContext.config.globalProperties.binddata;
      if (!getbinddata) {
        getApp().$vm.$.appContext.config.globalProperties.binddata = function(name, value, formName) {
          if (formName) {
            this.$refs[formName].setValue(name, value);
          } else {
            let formVm;
            for (let i2 in this.$refs) {
              const vm = this.$refs[i2];
              if (vm && vm.$options && vm.$options.name === "uniForms") {
                formVm = vm;
                break;
              }
            }
            if (!formVm)
              return formatAppLog("error", "at uni_modules/uni-forms/components/uni-forms/uni-forms.vue:187", "当前 uni-froms 组件缺少 ref 属性");
            if (formVm.model)
              formVm.model[name] = value;
            if (formVm.modelValue)
              formVm.modelValue[name] = value;
            if (formVm.value)
              formVm.value[name] = value;
          }
        };
      }
      this.childrens = [];
      this.inputChildrens = [];
      this.setRules(this.rules);
    },
    methods: {
      /**
       * 外部调用方法
       * 设置规则 ，主要用于小程序自定义检验规则
       * @param {Array} rules 规则源数据
       */
      setRules(rules2) {
        this.formRules = Object.assign({}, this.formRules, rules2);
        this.validator = new SchemaValidator(rules2);
      },
      /**
       * 外部调用方法
       * 设置数据，用于设置表单数据，公开给用户使用 ， 不支持在动态表单中使用
       * @param {Object} key
       * @param {Object} value
       */
      setValue(key, value) {
        let example = this.childrens.find((child) => child.name === key);
        if (!example)
          return null;
        this.formData[key] = getValue$2(key, value, this.formRules[key] && this.formRules[key].rules || []);
        return example.onFieldChange(this.formData[key]);
      },
      /**
       * 外部调用方法
       * 手动提交校验表单
       * 对整个表单进行校验的方法，参数为一个回调函数。
       * @param {Array} keepitem 保留不参与校验的字段
       * @param {type} callback 方法回调
       */
      validate(keepitem, callback) {
        return this.checkAll(this.formData, keepitem, callback);
      },
      /**
       * 外部调用方法
       * 部分表单校验
       * @param {Array|String} props 需要校验的字段
       * @param {Function} 回调函数
       */
      validateField(props2 = [], callback) {
        props2 = [].concat(props2);
        let invalidFields = {};
        this.childrens.forEach((item) => {
          const name = realName(item.name);
          if (props2.indexOf(name) !== -1) {
            invalidFields = Object.assign({}, invalidFields, {
              [name]: this.formData[name]
            });
          }
        });
        return this.checkAll(invalidFields, [], callback);
      },
      /**
       * 外部调用方法
       * 移除表单项的校验结果。传入待移除的表单项的 prop 属性或者 prop 组成的数组，如不传则移除整个表单的校验结果
       * @param {Array|String} props 需要移除校验的字段 ，不填为所有
       */
      clearValidate(props2 = []) {
        props2 = [].concat(props2);
        this.childrens.forEach((item) => {
          if (props2.length === 0) {
            item.errMsg = "";
          } else {
            const name = realName(item.name);
            if (props2.indexOf(name) !== -1) {
              item.errMsg = "";
            }
          }
        });
      },
      /**
       * 外部调用方法 ，即将废弃
       * 手动提交校验表单
       * 对整个表单进行校验的方法，参数为一个回调函数。
       * @param {Array} keepitem 保留不参与校验的字段
       * @param {type} callback 方法回调
       */
      submit(keepitem, callback, type3) {
        for (let i2 in this.dataValue) {
          const itemData = this.childrens.find((v2) => v2.name === i2);
          if (itemData) {
            if (this.formData[i2] === void 0) {
              this.formData[i2] = this._getValue(i2, this.dataValue[i2]);
            }
          }
        }
        if (!type3) {
          formatAppLog("warn", "at uni_modules/uni-forms/components/uni-forms/uni-forms.vue:296", "submit 方法即将废弃，请使用validate方法代替！");
        }
        return this.checkAll(this.formData, keepitem, callback, "submit");
      },
      // 校验所有
      async checkAll(invalidFields, keepitem, callback, type3) {
        if (!this.validator)
          return;
        let childrens = [];
        for (let i2 in invalidFields) {
          const item = this.childrens.find((v2) => realName(v2.name) === i2);
          if (item) {
            childrens.push(item);
          }
        }
        if (!callback && typeof keepitem === "function") {
          callback = keepitem;
        }
        let promise;
        if (!callback && typeof callback !== "function" && Promise) {
          promise = new Promise((resolve, reject) => {
            callback = function(valid, invalidFields2) {
              !valid ? resolve(invalidFields2) : reject(valid);
            };
          });
        }
        let results = [];
        let tempFormData = JSON.parse(JSON.stringify(invalidFields));
        for (let i2 in childrens) {
          const child = childrens[i2];
          let name = realName(child.name);
          const result = await child.onFieldChange(tempFormData[name]);
          if (result) {
            results.push(result);
            if (this.errShowType === "toast" || this.errShowType === "modal")
              break;
          }
        }
        if (Array.isArray(results)) {
          if (results.length === 0)
            results = null;
        }
        if (Array.isArray(keepitem)) {
          keepitem.forEach((v2) => {
            let vName = realName(v2);
            let value = getDataValue(v2, this.localData);
            if (value !== void 0) {
              tempFormData[vName] = value;
            }
          });
        }
        if (type3 === "submit") {
          this.$emit("submit", {
            detail: {
              value: tempFormData,
              errors: results
            }
          });
        } else {
          this.$emit("validate", results);
        }
        let resetFormData = {};
        resetFormData = rawData(tempFormData, this.name);
        callback && typeof callback === "function" && callback(results, resetFormData);
        if (promise && callback) {
          return promise;
        } else {
          return null;
        }
      },
      /**
       * 返回validate事件
       * @param {Object} result
       */
      validateCheck(result) {
        this.$emit("validate", result);
      },
      _getValue: getValue$2,
      _isRequiredField: isRequiredField,
      _setDataValue: setDataValue,
      _getDataValue: getDataValue,
      _realName: realName,
      _isRealName: isRealName,
      _isEqual: isEqual$2
    }
  };
  function _sfc_render$16(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-forms" }, [
      vue.createElementVNode("form", null, [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ])
    ]);
  }
  const __easycom_4 = /* @__PURE__ */ _export_sfc$1(_sfc_main$38, [["render", _sfc_render$16], ["__scopeId", "data-v-9a1e3c32"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-forms/components/uni-forms/uni-forms.vue"]]);
  const _sfc_main$37 = {
    name: "uniPopup",
    components: {},
    emits: ["change", "maskClick"],
    props: {
      // 开启动画
      animation: {
        type: Boolean,
        default: true
      },
      // 弹出层类型，可选值，top: 顶部弹出层；bottom：底部弹出层；center：全屏弹出层
      // message: 消息提示 ; dialog : 对话框
      type: {
        type: String,
        default: "center"
      },
      // maskClick
      isMaskClick: {
        type: Boolean,
        default: null
      },
      // TODO 2 个版本后废弃属性 ，使用 isMaskClick
      maskClick: {
        type: Boolean,
        default: null
      },
      backgroundColor: {
        type: String,
        default: "none"
      },
      safeArea: {
        type: Boolean,
        default: true
      },
      maskBackgroundColor: {
        type: String,
        default: "rgba(0, 0, 0, 0.4)"
      },
      borderRadius: {
        type: String
      }
    },
    watch: {
      /**
       * 监听type类型
       */
      type: {
        handler: function(type3) {
          if (!this.config[type3])
            return;
          this[this.config[type3]](true);
        },
        immediate: true
      },
      isDesktop: {
        handler: function(newVal) {
          if (!this.config[newVal])
            return;
          this[this.config[this.type]](true);
        },
        immediate: true
      },
      /**
       * 监听遮罩是否可点击
       * @param {Object} val
       */
      maskClick: {
        handler: function(val) {
          this.mkclick = val;
        },
        immediate: true
      },
      isMaskClick: {
        handler: function(val) {
          this.mkclick = val;
        },
        immediate: true
      },
      // H5 下禁止底部滚动
      showPopup(show) {
      }
    },
    data() {
      return {
        duration: 300,
        ani: [],
        showPopup: false,
        showTrans: false,
        popupWidth: 0,
        popupHeight: 0,
        config: {
          top: "top",
          bottom: "bottom",
          center: "center",
          left: "left",
          right: "right",
          message: "top",
          dialog: "center",
          share: "bottom"
        },
        maskClass: {
          position: "fixed",
          bottom: 0,
          top: 0,
          left: 0,
          right: 0,
          backgroundColor: "rgba(0, 0, 0, 0.4)"
        },
        transClass: {
          backgroundColor: "transparent",
          borderRadius: this.borderRadius || "0",
          position: "fixed",
          left: 0,
          right: 0
        },
        maskShow: true,
        mkclick: true,
        popupstyle: "top"
      };
    },
    computed: {
      getStyles() {
        let res = { backgroundColor: this.bg };
        if (this.borderRadius || "0") {
          res = Object.assign(res, { borderRadius: this.borderRadius });
        }
        return res;
      },
      isDesktop() {
        return this.popupWidth >= 500 && this.popupHeight >= 500;
      },
      bg() {
        if (this.backgroundColor === "" || this.backgroundColor === "none") {
          return "transparent";
        }
        return this.backgroundColor;
      }
    },
    mounted() {
      const fixSize = () => {
        const {
          windowWidth,
          windowHeight,
          windowTop,
          safeArea,
          screenHeight,
          safeAreaInsets
        } = uni.getSystemInfoSync();
        this.popupWidth = windowWidth;
        this.popupHeight = windowHeight + (windowTop || 0);
        if (safeArea && this.safeArea) {
          this.safeAreaInsets = safeAreaInsets.bottom;
        } else {
          this.safeAreaInsets = 0;
        }
      };
      fixSize();
    },
    // TODO vue3
    unmounted() {
      this.setH5Visible();
    },
    activated() {
      this.setH5Visible(!this.showPopup);
    },
    deactivated() {
      this.setH5Visible(true);
    },
    created() {
      if (this.isMaskClick === null && this.maskClick === null) {
        this.mkclick = true;
      } else {
        this.mkclick = this.isMaskClick !== null ? this.isMaskClick : this.maskClick;
      }
      if (this.animation) {
        this.duration = 300;
      } else {
        this.duration = 0;
      }
      this.messageChild = null;
      this.clearPropagation = false;
      this.maskClass.backgroundColor = this.maskBackgroundColor;
    },
    methods: {
      setH5Visible(visible = true) {
      },
      /**
       * 公用方法，不显示遮罩层
       */
      closeMask() {
        this.maskShow = false;
      },
      /**
       * 公用方法，遮罩层禁止点击
       */
      disableMask() {
        this.mkclick = false;
      },
      // TODO nvue 取消冒泡
      clear(e) {
        e.stopPropagation();
        this.clearPropagation = true;
      },
      open(direction2) {
        if (this.showPopup) {
          return;
        }
        let innerType = ["top", "center", "bottom", "left", "right", "message", "dialog", "share"];
        if (!(direction2 && innerType.indexOf(direction2) !== -1)) {
          direction2 = this.type;
        }
        if (!this.config[direction2]) {
          formatAppLog("error", "at uni_modules/uni-popup/components/uni-popup/uni-popup.vue:310", "缺少类型：", direction2);
          return;
        }
        this[this.config[direction2]]();
        this.$emit("change", {
          show: true,
          type: direction2
        });
      },
      close(type3) {
        this.showTrans = false;
        this.$emit("change", {
          show: false,
          type: this.type
        });
        clearTimeout(this.timer);
        this.timer = setTimeout(() => {
          this.showPopup = false;
        }, 300);
      },
      // TODO 处理冒泡事件，头条的冒泡事件有问题 ，先这样兼容
      touchstart() {
        this.clearPropagation = false;
      },
      onTap() {
        if (this.clearPropagation) {
          this.clearPropagation = false;
          return;
        }
        this.$emit("maskClick");
        if (!this.mkclick)
          return;
        this.close();
      },
      /**
       * 顶部弹出样式处理
       */
      top(type3) {
        this.popupstyle = this.isDesktop ? "fixforpc-top" : "top";
        this.ani = ["slide-top"];
        this.transClass = {
          position: "fixed",
          left: 0,
          right: 0,
          backgroundColor: this.bg,
          borderRadius: this.borderRadius || "0"
        };
        if (type3)
          return;
        this.showPopup = true;
        this.showTrans = true;
        this.$nextTick(() => {
          this.showPoptrans();
          if (this.messageChild && this.type === "message") {
            this.messageChild.timerClose();
          }
        });
      },
      /**
       * 底部弹出样式处理
       */
      bottom(type3) {
        this.popupstyle = "bottom";
        this.ani = ["slide-bottom"];
        this.transClass = {
          position: "fixed",
          left: 0,
          right: 0,
          bottom: 0,
          paddingBottom: this.safeAreaInsets + "px",
          backgroundColor: this.bg,
          borderRadius: this.borderRadius || "0"
        };
        if (type3)
          return;
        this.showPoptrans();
      },
      /**
       * 中间弹出样式处理
       */
      center(type3) {
        this.popupstyle = "center";
        this.ani = ["zoom-out", "fade"];
        this.transClass = {
          position: "fixed",
          display: "flex",
          flexDirection: "column",
          bottom: 0,
          left: 0,
          right: 0,
          top: 0,
          justifyContent: "center",
          alignItems: "center",
          borderRadius: this.borderRadius || "0"
        };
        if (type3)
          return;
        this.showPoptrans();
      },
      left(type3) {
        this.popupstyle = "left";
        this.ani = ["slide-left"];
        this.transClass = {
          position: "fixed",
          left: 0,
          bottom: 0,
          top: 0,
          backgroundColor: this.bg,
          borderRadius: this.borderRadius || "0",
          display: "flex",
          flexDirection: "column"
        };
        if (type3)
          return;
        this.showPoptrans();
      },
      right(type3) {
        this.popupstyle = "right";
        this.ani = ["slide-right"];
        this.transClass = {
          position: "fixed",
          bottom: 0,
          right: 0,
          top: 0,
          backgroundColor: this.bg,
          borderRadius: this.borderRadius || "0",
          display: "flex",
          flexDirection: "column"
        };
        if (type3)
          return;
        this.showPoptrans();
      },
      showPoptrans() {
        this.$nextTick(() => {
          this.showPopup = true;
          this.showTrans = true;
        });
      }
    }
  };
  function _sfc_render$15(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_transition = resolveEasycom(vue.resolveDynamicComponent("uni-transition"), __easycom_1$2);
    return $data.showPopup ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass(["uni-popup", [$data.popupstyle, $options.isDesktop ? "fixforpc-z-index" : ""]])
      },
      [
        vue.createElementVNode(
          "view",
          {
            onTouchstart: _cache[1] || (_cache[1] = (...args) => $options.touchstart && $options.touchstart(...args))
          },
          [
            $data.maskShow ? (vue.openBlock(), vue.createBlock(_component_uni_transition, {
              key: "1",
              name: "mask",
              "mode-class": "fade",
              styles: $data.maskClass,
              duration: $data.duration,
              show: $data.showTrans,
              onClick: $options.onTap
            }, null, 8, ["styles", "duration", "show", "onClick"])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(_component_uni_transition, {
              key: "2",
              "mode-class": $data.ani,
              name: "content",
              styles: $data.transClass,
              duration: $data.duration,
              show: $data.showTrans,
              onClick: $options.onTap
            }, {
              default: vue.withCtx(() => [
                vue.createElementVNode(
                  "view",
                  {
                    class: vue.normalizeClass(["uni-popup__wrapper", [$data.popupstyle]]),
                    style: vue.normalizeStyle($options.getStyles),
                    onClick: _cache[0] || (_cache[0] = (...args) => $options.clear && $options.clear(...args))
                  },
                  [
                    vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                  ],
                  6
                  /* CLASS, STYLE */
                )
              ]),
              _: 3
              /* FORWARDED */
            }, 8, ["mode-class", "styles", "duration", "show", "onClick"])
          ],
          32
          /* NEED_HYDRATION */
        )
      ],
      2
      /* CLASS */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_5 = /* @__PURE__ */ _export_sfc$1(_sfc_main$37, [["render", _sfc_render$15], ["__scopeId", "data-v-4dd3c44b"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-popup/components/uni-popup/uni-popup.vue"]]);
  const _sfc_main$36 = {
    name: "media-info",
    props: {
      currentMedia: {
        type: Object,
        default: () => {
        }
      }
    },
    data() {
      return {
        mediaInfo: {
          height: 200
        }
      };
    },
    computed: {
      showMediaInfoPanel() {
        return this.currentMedia && this.currentMedia._id;
      },
      fileSize() {
        const size = this.currentMedia.size;
        if (!size)
          return "0.00 MB";
        if (size < 1024)
          return size + " B";
        if (size < 1024 * 1024)
          return (size / 1024).toFixed(2) + " KB";
        if (size < 1024 * 1024 * 1024)
          return (size / 1024 / 1024).toFixed(2) + " MB";
        return (size / 1024 / 1024 / 1024).toFixed(2) + " GB";
      },
      fileType() {
        if (this.currentMedia.fileType) {
          return this.currentMedia.fileType.toUpperCase();
        } else {
          return "-";
        }
      },
      resolution() {
        const res = {
          width: 0,
          height: 0
        };
        if (this.currentMedia.resolution) {
          res.width = this.currentMedia.resolution.width || 0;
          res.height = this.currentMedia.resolution.height || 0;
        }
        return res;
      },
      mediaDuration() {
        if (this.currentMedia.duration) {
          const duration = this.currentMedia.duration;
          const hours = Math.floor(duration / 3600);
          const minutes = Math.floor((duration - hours * 3600) / 60);
          const seconds = Math.floor(duration - hours * 3600 - minutes * 60);
          return `${hours}:${minutes}:${seconds}`;
        } else {
          return "-";
        }
      },
      createDate() {
        if (!this.currentMedia.createDate)
          return "-";
        const date = new Date(this.currentMedia.createDate);
        const year = date.getFullYear();
        const month = date.getMonth() + 1;
        const day = date.getDate();
        const hour = date.getHours();
        const minute = date.getMinutes();
        const second = date.getSeconds();
        return `${year}年${month}月${day}日 ${hour}:${minute}:${second}`;
      }
    },
    methods: {
      previewImage() {
        uni.previewImage({
          current: this.currentMedia.cover,
          urls: [this.currentMedia.cover]
        });
      },
      onFiledChange(field) {
        const db2 = Vs.database();
        db2.collection("uni-media-library").doc(this.currentMedia._id).update({
          [field]: this.currentMedia[field] || ""
        }).catch((err) => {
          formatAppLog("log", "at uni_modules/uni-media-library/components/media-info/index.vue:179", err);
          uni.showToast({
            title: "更新失败",
            icon: "none"
          });
        });
      }
    }
  };
  function _sfc_render$14(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_uni_easyinput = resolveEasycom(vue.resolveDynamicComponent("uni-easyinput"), __easycom_2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "media-info-wrap" }, [
      $options.showMediaInfoPanel ? (vue.openBlock(), vue.createElementBlock(
        vue.Fragment,
        { key: 0 },
        [
          $props.currentMedia.src ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "preview"
          }, [
            $props.currentMedia.type === "image" ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "image"
            }, [
              vue.createElementVNode("image", {
                class: "img",
                src: $props.currentMedia.thumb.detailCover || $props.currentMedia.cover,
                mode: "aspectFill"
              }, null, 8, ["src"])
            ])) : $props.currentMedia.type === "video" ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 1,
              class: "video"
            }, [
              vue.createElementVNode("video", {
                style: { "width": "100%", "height": "100%" },
                src: $props.currentMedia.src,
                poster: $props.currentMedia.thumb.detailCover
              }, null, 8, ["src", "poster"])
            ])) : vue.createCommentVNode("v-if", true),
            $props.currentMedia.type === "image" ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 2,
              class: "ops"
            }, [
              vue.createCommentVNode('          <view class="op">'),
              vue.createCommentVNode('            <uni-icons type="compose" size="16" color="#333"></uni-icons>'),
              vue.createCommentVNode("          </view>"),
              vue.createElementVNode("view", {
                class: "op",
                onClick: _cache[0] || (_cache[0] = (...args) => $options.previewImage && $options.previewImage(...args))
              }, [
                vue.createVNode(_component_uni_icons, {
                  type: "eye",
                  size: "16",
                  color: "#333"
                })
              ])
            ])) : vue.createCommentVNode("v-if", true)
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("view", { class: "info-item" }, [
            vue.createElementVNode("view", { class: "label" }, "URL"),
            /^cloud:\/\//.test($props.currentMedia._src) ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                class: "content"
              },
              vue.toDisplayString($props.currentMedia._src),
              1
              /* TEXT */
            )) : (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 1,
                class: "content"
              },
              vue.toDisplayString($props.currentMedia.src),
              1
              /* TEXT */
            ))
          ]),
          vue.createElementVNode("view", { class: "info-item" }, [
            vue.createElementVNode("view", { class: "label" }, "描述"),
            vue.createElementVNode("view", { class: "content" }, [
              vue.createVNode(_component_uni_easyinput, {
                placeholder: "描述; 用于媒体资源搜索",
                modelValue: $props.currentMedia.description,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $props.currentMedia.description = $event),
                onBlur: _cache[2] || (_cache[2] = ($event) => $options.onFiledChange("description")),
                onClear: _cache[3] || (_cache[3] = ($event) => $options.onFiledChange("description"))
              }, null, 8, ["modelValue"])
            ])
          ]),
          vue.createElementVNode("view", { class: "info-item" }, [
            vue.createElementVNode("view", { class: "label" }, "替代文字"),
            vue.createElementVNode("view", { class: "content" }, [
              vue.createVNode(_component_uni_easyinput, {
                placeholder: "替代文字，资源加载失败时展示",
                modelValue: $props.currentMedia.alt,
                "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $props.currentMedia.alt = $event),
                onBlur: _cache[5] || (_cache[5] = ($event) => $options.onFiledChange("alt")),
                onClear: _cache[6] || (_cache[6] = ($event) => $options.onFiledChange("alt"))
              }, null, 8, ["modelValue"])
            ])
          ]),
          vue.createElementVNode("view", { class: "title" }, "基本信息"),
          vue.createElementVNode("view", { class: "media-base-info" }, [
            vue.createElementVNode("view", { class: "info-item" }, [
              vue.createElementVNode("view", { class: "label" }, "原始文件名"),
              vue.createElementVNode(
                "view",
                { class: "content" },
                vue.toDisplayString($props.currentMedia.originalName || "-"),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "info-item" }, [
              vue.createElementVNode("view", { class: "label" }, "文件类型"),
              vue.createElementVNode(
                "view",
                { class: "content" },
                vue.toDisplayString($options.fileType),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "info-item" }, [
              vue.createElementVNode("view", { class: "label" }, "文件大小"),
              vue.createElementVNode(
                "view",
                { class: "content" },
                vue.toDisplayString($options.fileSize || "-"),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { class: "info-item" }, [
              vue.createElementVNode("view", { class: "label" }, "分辨率"),
              vue.createElementVNode(
                "view",
                { class: "content" },
                vue.toDisplayString($options.resolution.width) + "*" + vue.toDisplayString($options.resolution.height),
                1
                /* TEXT */
              )
            ]),
            $props.currentMedia.type === "video" ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "info-item"
            }, [
              vue.createElementVNode("view", { class: "label" }, "时长"),
              vue.createElementVNode(
                "view",
                { class: "content" },
                vue.toDisplayString($options.mediaDuration),
                1
                /* TEXT */
              )
            ])) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("view", { class: "info-item" }, [
              vue.createElementVNode("view", { class: "label" }, "上传者"),
              vue.createElementVNode(
                "view",
                { class: "content" },
                vue.toDisplayString($props.currentMedia.uploadUser && $props.currentMedia.uploadUser[0].nickname || "-"),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", {
              class: "info-item",
              style: { "width": "100%" }
            }, [
              vue.createElementVNode("view", { class: "label" }, "上传时间"),
              vue.createElementVNode(
                "view",
                { class: "content" },
                vue.toDisplayString($options.createDate),
                1
                /* TEXT */
              )
            ])
          ])
        ],
        64
        /* STABLE_FRAGMENT */
      )) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const MediaInfo = /* @__PURE__ */ _export_sfc$1(_sfc_main$36, [["render", _sfc_render$14], ["__scopeId", "data-v-cde65580"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-media-library/components/media-info/index.vue"]]);
  const _sfc_main$35 = {
    name: "media-filter",
    emits: ["onUploadMedia", "onSearch", "onCancelSelect", "onDeleteSelect"],
    props: {
      selectMediaItems: {
        type: Array,
        default: () => []
      }
    },
    computed: {
      isSelected() {
        return this.selectMediaItems.length > 0;
      },
      selectedCount() {
        return this.selectMediaItems.length;
      }
    },
    data() {
      return {
        mediaGroup: "",
        keyword: "",
        lastKeyword: ""
      };
    },
    methods: {
      search() {
        if (this.keyword === this.lastKeyword)
          return;
        this.$emit("onSearch", {
          mediaGroup: this.mediaGroup,
          keyword: this.keyword
        });
        this.lastKeyword = this.keyword;
      },
      deleteMedia() {
        if (this.selectedCount > 50) {
          uni.showToast({
            title: "每次最多删除50项媒体资源",
            icon: "none"
          });
          return;
        }
        uni.showModal({
          title: `删除${this.selectedCount}项媒体资源？`,
          content: "删除后该图片将无法在页面展示，请谨慎删除！",
          success: async (res) => {
            if (!res.confirm)
              return false;
            const uniMediaLibraryCo = Vs.importObject("uni-media-library-co", {
              loadingOptions: {
                title: "正在删除",
                mask: true
              }
            });
            const mediaIds = this.selectMediaItems.map((item) => item._id);
            await uniMediaLibraryCo.deleteMedia({
              mediaIds
            });
            this.$emit("onDeleteSelect", mediaIds);
          },
          fail: () => {
            uni.showToast({
              title: "删除失败",
              icon: "none"
            });
          }
        });
      }
    }
  };
  function _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_uni_easyinput = resolveEasycom(vue.resolveDynamicComponent("uni-easyinput"), __easycom_2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "media-filter-warp" }, [
      vue.createElementVNode("view", { class: "filter-options" }, [
        vue.createElementVNode("button", {
          type: "primary",
          size: "mini",
          onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("onUploadMedia"))
        }, [
          vue.createVNode(_component_uni_icons, {
            type: "cloud-upload",
            size: "14",
            color: "#fff"
          }),
          vue.createElementVNode("text", null, "上传")
        ]),
        vue.createElementVNode("div", { class: "split" }),
        vue.createCommentVNode("      <uni-data-select"),
        vue.createCommentVNode('          v-model="mediaGroup"'),
        vue.createCommentVNode('          class="group-select"'),
        vue.createCommentVNode('          @change="search"'),
        vue.createCommentVNode("      ></uni-data-select>"),
        vue.createVNode(_component_uni_easyinput, {
          modelValue: $data.keyword,
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.keyword = $event),
          class: "search-input",
          suffixIcon: "search",
          placeholder: "搜索所有媒体...",
          onIconClick: $options.search,
          onBlur: $options.search
        }, null, 8, ["modelValue", "onIconClick", "onBlur"])
      ]),
      vue.createElementVNode("view", { style: { "flex": "1" } }),
      $options.isSelected ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 0,
        class: "select-options"
      }, [
        vue.createElementVNode(
          "button",
          {
            type: "default",
            size: "mini",
            onClick: _cache[2] || (_cache[2] = ($event) => _ctx.$emit("onCancelSelect"))
          },
          "取消选中(" + vue.toDisplayString($options.selectedCount) + ")",
          1
          /* TEXT */
        ),
        vue.createElementVNode("button", {
          type: "warn",
          size: "mini",
          onClick: _cache[3] || (_cache[3] = (...args) => $options.deleteMedia && $options.deleteMedia(...args))
        }, "删除")
      ])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const MediaFilter = /* @__PURE__ */ _export_sfc$1(_sfc_main$35, [["render", _sfc_render$13], ["__scopeId", "data-v-2c0faeac"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-media-library/components/media-filter/index.vue"]]);
  const isObject$2 = (val) => val !== null && typeof val === "object";
  const defaultDelimiters = ["{", "}"];
  class BaseFormatter {
    constructor() {
      this._caches = /* @__PURE__ */ Object.create(null);
    }
    interpolate(message2, values, delimiters = defaultDelimiters) {
      if (!values) {
        return [message2];
      }
      let tokens = this._caches[message2];
      if (!tokens) {
        tokens = parse$2(message2, delimiters);
        this._caches[message2] = tokens;
      }
      return compile(tokens, values);
    }
  }
  const RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
  const RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;
  function parse$2(format2, [startDelimiter, endDelimiter]) {
    const tokens = [];
    let position = 0;
    let text = "";
    while (position < format2.length) {
      let char = format2[position++];
      if (char === startDelimiter) {
        if (text) {
          tokens.push({ type: "text", value: text });
        }
        text = "";
        let sub = "";
        char = format2[position++];
        while (char !== void 0 && char !== endDelimiter) {
          sub += char;
          char = format2[position++];
        }
        const isClosed = char === endDelimiter;
        const type3 = RE_TOKEN_LIST_VALUE.test(sub) ? "list" : isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ? "named" : "unknown";
        tokens.push({ value: sub, type: type3 });
      } else {
        text += char;
      }
    }
    text && tokens.push({ type: "text", value: text });
    return tokens;
  }
  function compile(tokens, values) {
    const compiled = [];
    let index = 0;
    const mode = Array.isArray(values) ? "list" : isObject$2(values) ? "named" : "unknown";
    if (mode === "unknown") {
      return compiled;
    }
    while (index < tokens.length) {
      const token = tokens[index];
      switch (token.type) {
        case "text":
          compiled.push(token.value);
          break;
        case "list":
          compiled.push(values[parseInt(token.value, 10)]);
          break;
        case "named":
          if (mode === "named") {
            compiled.push(values[token.value]);
          } else {
            {
              console.warn(`Type of token '${token.type}' and format of value '${mode}' don't match!`);
            }
          }
          break;
        case "unknown":
          {
            console.warn(`Detect 'unknown' type of token!`);
          }
          break;
      }
      index++;
    }
    return compiled;
  }
  const LOCALE_ZH_HANS = "zh-Hans";
  const LOCALE_ZH_HANT = "zh-Hant";
  const LOCALE_EN = "en";
  const LOCALE_FR = "fr";
  const LOCALE_ES = "es";
  const hasOwnProperty$d = Object.prototype.hasOwnProperty;
  const hasOwn$2 = (val, key) => hasOwnProperty$d.call(val, key);
  const defaultFormatter = new BaseFormatter();
  function include(str, parts) {
    return !!parts.find((part) => str.indexOf(part) !== -1);
  }
  function startsWith(str, parts) {
    return parts.find((part) => str.indexOf(part) === 0);
  }
  function normalizeLocale(locale, messages2) {
    if (!locale) {
      return;
    }
    locale = locale.trim().replace(/_/g, "-");
    if (messages2 && messages2[locale]) {
      return locale;
    }
    locale = locale.toLowerCase();
    if (locale === "chinese") {
      return LOCALE_ZH_HANS;
    }
    if (locale.indexOf("zh") === 0) {
      if (locale.indexOf("-hans") > -1) {
        return LOCALE_ZH_HANS;
      }
      if (locale.indexOf("-hant") > -1) {
        return LOCALE_ZH_HANT;
      }
      if (include(locale, ["-tw", "-hk", "-mo", "-cht"])) {
        return LOCALE_ZH_HANT;
      }
      return LOCALE_ZH_HANS;
    }
    let locales = [LOCALE_EN, LOCALE_FR, LOCALE_ES];
    if (messages2 && Object.keys(messages2).length > 0) {
      locales = Object.keys(messages2);
    }
    const lang = startsWith(locale, locales);
    if (lang) {
      return lang;
    }
  }
  class I18n {
    constructor({ locale, fallbackLocale, messages: messages2, watcher, formater: formater2 }) {
      this.locale = LOCALE_EN;
      this.fallbackLocale = LOCALE_EN;
      this.message = {};
      this.messages = {};
      this.watchers = [];
      if (fallbackLocale) {
        this.fallbackLocale = fallbackLocale;
      }
      this.formater = formater2 || defaultFormatter;
      this.messages = messages2 || {};
      this.setLocale(locale || LOCALE_EN);
      if (watcher) {
        this.watchLocale(watcher);
      }
    }
    setLocale(locale) {
      const oldLocale = this.locale;
      this.locale = normalizeLocale(locale, this.messages) || this.fallbackLocale;
      if (!this.messages[this.locale]) {
        this.messages[this.locale] = {};
      }
      this.message = this.messages[this.locale];
      if (oldLocale !== this.locale) {
        this.watchers.forEach((watcher) => {
          watcher(this.locale, oldLocale);
        });
      }
    }
    getLocale() {
      return this.locale;
    }
    watchLocale(fn2) {
      const index = this.watchers.push(fn2) - 1;
      return () => {
        this.watchers.splice(index, 1);
      };
    }
    add(locale, message2, override = true) {
      const curMessages = this.messages[locale];
      if (curMessages) {
        if (override) {
          Object.assign(curMessages, message2);
        } else {
          Object.keys(message2).forEach((key) => {
            if (!hasOwn$2(curMessages, key)) {
              curMessages[key] = message2[key];
            }
          });
        }
      } else {
        this.messages[locale] = message2;
      }
    }
    f(message2, values, delimiters) {
      return this.formater.interpolate(message2, values, delimiters).join("");
    }
    t(key, locale, values) {
      let message2 = this.message;
      if (typeof locale === "string") {
        locale = normalizeLocale(locale, this.messages);
        locale && (message2 = this.messages[locale]);
      } else {
        values = locale;
      }
      if (!hasOwn$2(message2, key)) {
        console.warn(`Cannot translate the value of keypath ${key}. Use the value of keypath as default.`);
        return key;
      }
      return this.formater.interpolate(message2[key], values).join("");
    }
  }
  function watchAppLocale(appVm, i18n) {
    if (appVm.$watchLocale) {
      appVm.$watchLocale((newLocale) => {
        i18n.setLocale(newLocale);
      });
    } else {
      appVm.$watch(() => appVm.$locale, (newLocale) => {
        i18n.setLocale(newLocale);
      });
    }
  }
  function getDefaultLocale() {
    if (typeof uni !== "undefined" && uni.getLocale) {
      return uni.getLocale();
    }
    if (typeof global !== "undefined" && global.getLocale) {
      return global.getLocale();
    }
    return LOCALE_EN;
  }
  function initVueI18n(locale, messages2 = {}, fallbackLocale, watcher) {
    if (typeof locale !== "string") {
      const options = [
        messages2,
        locale
      ];
      locale = options[0];
      messages2 = options[1];
    }
    if (typeof locale !== "string") {
      locale = getDefaultLocale();
    }
    if (typeof fallbackLocale !== "string") {
      fallbackLocale = typeof __uniConfig !== "undefined" && __uniConfig.fallbackLocale || LOCALE_EN;
    }
    const i18n = new I18n({
      locale,
      fallbackLocale,
      messages: messages2,
      watcher
    });
    let t2 = (key, values) => {
      if (typeof getApp !== "function") {
        t2 = function(key2, values2) {
          return i18n.t(key2, values2);
        };
      } else {
        let isWatchedAppLocale = false;
        t2 = function(key2, values2) {
          const appVm = getApp().$vm;
          if (appVm) {
            appVm.$locale;
            if (!isWatchedAppLocale) {
              isWatchedAppLocale = true;
              watchAppLocale(appVm, i18n);
            }
          }
          return i18n.t(key2, values2);
        };
      }
      return t2(key, values);
    };
    return {
      i18n,
      f(message2, values, delimiters) {
        return i18n.f(message2, values, delimiters);
      },
      t(key, values) {
        return t2(key, values);
      },
      add(locale2, message2, override = true) {
        return i18n.add(locale2, message2, override);
      },
      watch(fn2) {
        return i18n.watchLocale(fn2);
      },
      getLocale() {
        return i18n.getLocale();
      },
      setLocale(newLocale) {
        return i18n.setLocale(newLocale);
      }
    };
  }
  const en$1 = {
    "uniCloud.component.add.success": "Success",
    "uniCloud.component.update.success": "Success",
    "uniCloud.component.remove.showModal.title": "Tips",
    "uniCloud.component.remove.showModal.content": "是否删除该数据"
  };
  const es$2 = {
    "uniCloud.component.add.success": "新增成功",
    "uniCloud.component.update.success": "修改成功",
    "uniCloud.component.remove.showModal.title": "提示",
    "uniCloud.component.remove.showModal.content": "是否删除该数据"
  };
  const fr = {
    "uniCloud.component.add.success": "新增成功",
    "uniCloud.component.update.success": "修改成功",
    "uniCloud.component.remove.showModal.title": "提示",
    "uniCloud.component.remove.showModal.content": "是否删除该数据"
  };
  const zhHans = {
    "uniCloud.component.add.success": "新增成功",
    "uniCloud.component.update.success": "修改成功",
    "uniCloud.component.remove.showModal.title": "提示",
    "uniCloud.component.remove.showModal.content": "是否删除该数据"
  };
  const zhHant = {
    "uniCloud.component.add.success": "新增成功",
    "uniCloud.component.update.success": "修改成功",
    "uniCloud.component.remove.showModal.title": "提示",
    "uniCloud.component.remove.showModal.content": "是否刪除數據"
  };
  const messages$1 = {
    en: en$1,
    es: es$2,
    fr,
    "zh-Hans": zhHans,
    "zh-Hant": zhHant
  };
  const isArray$5 = Array.isArray;
  const { t: t$1 } = initVueI18n(messages$1);
  const events = {
    load: "load",
    error: "error"
  };
  const pageMode = {
    add: "add",
    replace: "replace"
  };
  const loadMode = {
    auto: "auto",
    onready: "onready",
    manual: "manual"
  };
  const attrs = [
    "pageCurrent",
    "pageSize",
    "collection",
    "action",
    "field",
    "getcount",
    "orderby",
    "where",
    "groupby",
    "groupField",
    "distinct"
  ];
  const _sfc_main$34 = {
    name: "UniClouddb",
    setup(props2) {
      const dataListRef = props2.ssrKey ? props2.getone ? shallowSsrRef(void 0, props2.ssrKey) : ssrRef([], props2.ssrKey) : props2.getone ? shallowSsrRef(void 0, "SNC0FF6AnOrJdtlrVS1w1g==") : ssrRef([], "yxuWH3IPe0ZDuJvZ41qVcw==");
      const instance = vue.getCurrentInstance();
      vue.onMounted(() => {
        if ((!dataListRef.value || dataListRef.value.length === 0) && !props2.manual && props2.loadtime === loadMode.auto) {
          instance.proxy.loadData();
        }
      });
      return { dataList: dataListRef };
    },
    // 服务端serverPrefetch生命周期，用于服务端加载数据，等将来全端支持Suspense时，可以采用 Suspense + async setup 来实现一版
    async serverPrefetch() {
      if (!this.manual && this.loadtime === loadMode.auto) {
        return this.loadData();
      }
    },
    props: {
      options: {
        type: [Object, Array],
        default() {
          return {};
        }
      },
      spaceInfo: {
        type: Object,
        default() {
          return {};
        }
      },
      collection: {
        type: [String, Array],
        default: ""
      },
      action: {
        type: String,
        default: ""
      },
      field: {
        type: String,
        default: ""
      },
      orderby: {
        type: String,
        default: ""
      },
      where: {
        type: [String, Object],
        default: ""
      },
      pageData: {
        type: String,
        default: "add"
      },
      pageCurrent: {
        type: Number,
        default: 1
      },
      pageSize: {
        type: Number,
        default: 20
      },
      getcount: {
        type: [Boolean, String],
        default: false
      },
      getone: {
        type: [Boolean, String],
        default: false
      },
      gettree: {
        type: [Boolean, String, Object],
        default: false
      },
      gettreepath: {
        type: [Boolean, String],
        default: false
      },
      startwith: {
        type: String,
        default: ""
      },
      limitlevel: {
        type: Number,
        default: 10
      },
      groupby: {
        type: String,
        default: ""
      },
      groupField: {
        type: String,
        default: ""
      },
      distinct: {
        type: [Boolean, String],
        default: false
      },
      pageIndistinct: {
        type: [Boolean, String],
        default: false
      },
      foreignKey: {
        type: String,
        default: ""
      },
      loadtime: {
        type: String,
        default: "auto"
      },
      manual: {
        type: Boolean,
        default: false
      },
      ssrKey: {
        type: [String, Number],
        default: ""
      }
    },
    data() {
      return {
        loading: false,
        hasMore: false,
        paginationInternal: {},
        errorMessage: ""
      };
    },
    computed: {
      collectionArgs() {
        return isArray$5(this.collection) ? this.collection : [this.collection];
      },
      isLookup() {
        return isArray$5(this.collection) && this.collection.length > 1 || typeof this.collection === "string" && this.collection.indexOf(",") > -1;
      },
      mainCollection() {
        if (typeof this.collection === "string") {
          return this.collection.split(",")[0];
        }
        const mainQuery = JSON.parse(JSON.stringify(this.collection[0]));
        return mainQuery.$db[0].$param[0];
      }
    },
    created() {
      this._isEnded = false;
      this.paginationInternal = {
        current: this.pageCurrent,
        size: this.pageSize,
        count: 0
      };
      this.$watch(() => {
        var al = [];
        attrs.forEach((key) => {
          al.push(this[key]);
        });
        return al;
      }, (newValue, oldValue) => {
        this.paginationInternal.size = this.pageSize;
        if (newValue[0] !== oldValue[0]) {
          this.paginationInternal.current = this.pageCurrent;
        }
        if (this.loadtime === loadMode.manual) {
          return;
        }
        let needReset = false;
        for (let i2 = 2; i2 < newValue.length; i2++) {
          if (newValue[i2] !== oldValue[i2]) {
            needReset = true;
            break;
          }
        }
        if (needReset) {
          this.clear();
          this.reset();
        }
        this._execLoadData();
      });
    },
    methods: {
      loadData(args1, args2) {
        let callback = null;
        let clear = false;
        if (typeof args1 === "object") {
          if (args1.clear) {
            if (this.pageData === pageMode.replace) {
              this.clear();
            } else {
              clear = args1.clear;
            }
            this.reset();
          }
          if (args1.current !== void 0) {
            this.paginationInternal.current = args1.current;
          }
          if (typeof args2 === "function") {
            callback = args2;
          }
        } else if (typeof args1 === "function") {
          callback = args1;
        }
        return this._execLoadData(callback, clear);
      },
      loadMore() {
        if (this._isEnded || this.loading) {
          return;
        }
        if (this.pageData === pageMode.add) {
          this.paginationInternal.current++;
        }
        this._execLoadData();
      },
      refresh() {
        this.clear();
        this._execLoadData();
      },
      clear() {
        this._isEnded = false;
        this.dataList = [];
      },
      reset() {
        this.paginationInternal.current = 1;
      },
      add(value, {
        action,
        showToast = true,
        toastTitle,
        success,
        fail,
        complete,
        needConfirm = true,
        needLoading = true,
        loadingTitle = ""
      } = {}) {
        if (needLoading) {
          uni.showLoading({
            title: loadingTitle
          });
        }
        let db2 = Vs.database(this.spaceInfo);
        if (action) {
          db2 = db2.action(action);
        }
        db2.collection(this.mainCollection).add(value).then((res) => {
          success && success(res);
          if (showToast) {
            uni.showToast({
              title: toastTitle || t$1("uniCloud.component.add.success")
            });
          }
        }).catch((err) => {
          fail && fail(err);
          if (needConfirm) {
            uni.showModal({
              content: err.message,
              showCancel: false
            });
          }
        }).finally(() => {
          if (needLoading) {
            uni.hideLoading();
          }
          complete && complete();
        });
      },
      remove(id, {
        action,
        success,
        fail,
        complete,
        confirmTitle,
        confirmContent,
        needConfirm = true,
        needLoading = true,
        loadingTitle = ""
      } = {}) {
        if (!id || !id.length) {
          return;
        }
        if (!needConfirm) {
          this._execRemove(id, action, success, fail, complete, needConfirm, needLoading, loadingTitle);
          return;
        }
        uni.showModal({
          title: confirmTitle || t$1("uniCloud.component.remove.showModal.title"),
          content: confirmContent || t$1("uniCloud.component.remove.showModal.content"),
          showCancel: true,
          success: (res) => {
            if (!res.confirm) {
              return;
            }
            this._execRemove(id, action, success, fail, complete, needConfirm, needLoading, loadingTitle);
          }
        });
      },
      update(id, value, {
        action,
        showToast = true,
        toastTitle,
        success,
        fail,
        complete,
        needConfirm = true,
        needLoading = true,
        loadingTitle = ""
      } = {}) {
        if (needLoading) {
          uni.showLoading({
            title: loadingTitle
          });
        }
        let db2 = Vs.database(this.spaceInfo);
        if (action) {
          db2 = db2.action(action);
        }
        return db2.collection(this.mainCollection).doc(id).update(value).then((res) => {
          success && success(res);
          if (showToast) {
            uni.showToast({
              title: toastTitle || t$1("uniCloud.component.update.success")
            });
          }
        }).catch((err) => {
          fail && fail(err);
          if (needConfirm) {
            uni.showModal({
              content: err.message,
              showCancel: false
            });
          }
        }).finally(() => {
          if (needLoading) {
            uni.hideLoading();
          }
          complete && complete();
        });
      },
      getTemp(isTemp = true) {
        let db2 = Vs.database(this.spaceInfo);
        if (this.action) {
          db2 = db2.action(this.action);
        }
        db2 = db2.collection(...this.collectionArgs);
        if (this.foreignKey) {
          db2 = db2.foreignKey(this.foreignKey);
        }
        if (!(!this.where || !Object.keys(this.where).length)) {
          db2 = db2.where(this.where);
        }
        if (this.field) {
          db2 = db2.field(this.field);
        }
        if (this.groupby) {
          db2 = db2.groupBy(this.groupby);
        }
        if (this.groupField) {
          db2 = db2.groupField(this.groupField);
        }
        if (this.distinct === true) {
          db2 = db2.distinct();
        }
        if (this.orderby) {
          db2 = db2.orderBy(this.orderby);
        }
        const {
          current,
          size
        } = this.paginationInternal;
        const getOptions = {};
        if (this.getcount) {
          getOptions.getCount = this.getcount;
        }
        const treeOptions = {
          limitLevel: this.limitlevel,
          startWith: this.startwith
        };
        if (this.gettree) {
          getOptions.getTree = treeOptions;
        }
        if (this.gettreepath) {
          getOptions.getTreePath = treeOptions;
        }
        db2 = db2.skip(size * (current - 1)).limit(size);
        if (isTemp) {
          db2 = db2.getTemp(getOptions);
          db2.udb = this;
        } else {
          db2 = db2.get(getOptions);
        }
        return db2;
      },
      setResult(result) {
        if (result.code === 0) {
          this._execLoadDataSuccess(result);
        } else {
          this._execLoadDataFail(new Error(result.message));
        }
      },
      _execLoadData(callback, clear) {
        if (this.loading) {
          return;
        }
        this.loading = true;
        this.errorMessage = "";
        return this._getExec().then((res) => {
          this.loading = false;
          this._execLoadDataSuccess(res.result, callback, clear);
        }).catch((err) => {
          this.loading = false;
          this._execLoadDataFail(err, callback);
        });
      },
      _execLoadDataSuccess(result, callback, clear) {
        const {
          data,
          count: count2
        } = result;
        this._isEnded = count2 !== void 0 ? this.paginationInternal.current * this.paginationInternal.size >= count2 : data.length < this.pageSize;
        this.hasMore = !this._isEnded;
        const data2 = this.getone ? data.length ? data[0] : void 0 : data;
        if (this.getcount) {
          this.paginationInternal.count = count2;
        }
        callback && callback(data2, this._isEnded, this.paginationInternal);
        this._dispatchEvent(events.load, data2);
        if (this.getone || this.pageData === pageMode.replace) {
          this.dataList = data2;
        } else {
          if (clear) {
            this.dataList = data2;
          } else {
            this.dataList.push(...data2);
          }
        }
      },
      _execLoadDataFail(err, callback) {
        this.errorMessage = err;
        callback && callback();
        this.$emit(events.error, err);
        {
          console.error(err);
        }
      },
      _getExec() {
        return this.getTemp(false);
      },
      _execRemove(id, action, success, fail, complete, needConfirm, needLoading, loadingTitle) {
        if (!this.collection || !id) {
          return;
        }
        const ids = isArray$5(id) ? id : [id];
        if (!ids.length) {
          return;
        }
        if (needLoading) {
          uni.showLoading({
            mask: true,
            title: loadingTitle
          });
        }
        const db2 = Vs.database(this.spaceInfo);
        const dbCmd = db2.command;
        let exec = db2;
        if (action) {
          exec = exec.action(action);
        }
        exec.collection(this.mainCollection).where({
          _id: dbCmd.in(ids)
        }).remove().then((res) => {
          success && success(res.result);
          if (this.pageData === pageMode.replace) {
            this.refresh();
          } else {
            this.removeData(ids);
          }
        }).catch((err) => {
          fail && fail(err);
          if (needConfirm) {
            uni.showModal({
              content: err.message,
              showCancel: false
            });
          }
        }).finally(() => {
          if (needLoading) {
            uni.hideLoading();
          }
          complete && complete();
        });
      },
      removeData(ids) {
        const il = ids.slice(0);
        const dl = this.dataList;
        for (let i2 = dl.length - 1; i2 >= 0; i2--) {
          const index = il.indexOf(dl[i2]._id);
          if (index >= 0) {
            dl.splice(i2, 1);
            il.splice(index, 1);
          }
        }
      },
      _dispatchEvent(type3, data) {
        if (this._changeDataFunction) {
          this._changeDataFunction(data, this._isEnded, this.paginationInternal);
        } else {
          this.$emit(type3, data, this._isEnded, this.paginationInternal);
        }
      }
    }
  };
  function _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.renderSlot(_ctx.$slots, "default", {
        options: $props.options,
        data: $setup.dataList,
        pagination: $data.paginationInternal,
        loading: $data.loading,
        hasMore: $data.hasMore,
        error: $data.errorMessage
      })
    ]);
  }
  const __easycom_1$1 = /* @__PURE__ */ _export_sfc$1(_sfc_main$34, [["render", _sfc_render$12], ["__file", "/Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli-vite/node_modules/@dcloudio/uni-components/lib/unicloud-db/unicloud-db.vue"]]);
  const db = Vs.database();
  const _sfc_main$33 = {
    name: "media-list",
    emits: ["onSelect", "onUploadMedia"],
    expose: ["cancelAllSelected", "deleteSelectedMedia", "chooseFiles", "mediaUploadProgress", "mediaUploadSuccess"],
    props: {
      mediaType: {
        type: String,
        default: () => "all"
      },
      mediaGroup: String,
      keyword: String,
      selectedCount: Number
    },
    data() {
      return {
        lastId: null,
        lastSelectedIndex: 0,
        remoteMediaList: [],
        localMediaList: [],
        shiftKey: false,
        isUploading: false,
        processing: true
      };
    },
    watch: {
      mediaGroup() {
        this.loadMediaList(true);
      },
      keyword() {
        this.loadMediaList(true);
      }
    },
    computed: {
      collection() {
        return [
          db.collection("uni-media-library").where(this.mediaListWhere || {}).getTemp(),
          db.collection("uni-id-users").field("_id, nickname").getTemp()
        ];
      },
      mediaList() {
        return this.localMediaList.concat(this.remoteMediaList);
      },
      mediaListWhere() {
        const cond = [];
        if (this.mediaType !== "all") {
          cond.push(`type=="${this.mediaType}"`);
        }
        if (this.mediaGroup) {
          cond.push(`group=="${this.mediaGroup}"`);
        }
        if (this.keyword) {
          cond.push(`${new RegExp(this.keyword, "i")}.test(description)`);
        }
        return cond.join("&");
      }
    },
    mounted() {
      this.loadMediaList();
    },
    destroyed() {
    },
    methods: {
      onKeyDown(e) {
        if (e.keyCode === 16) {
          this.shiftKey = true;
        }
      },
      onKeyUp(e) {
        if (e.keyCode === 16) {
          this.shiftKey = false;
        }
      },
      async onMediaListLoad(data) {
        var _a2;
        const tcbCloudFiles = [];
        data.forEach((item) => {
          item._src = item.src;
          item._cover = item.cover;
        });
        for (let i2 = 0; i2 < data.length; i2++) {
          const media = data[i2];
          if ((_a2 = media.src) == null ? void 0 : _a2.startsWith("cloud://")) {
            tcbCloudFiles.push({
              index: i2,
              src: media.src,
              cover: media.cover
            });
          }
        }
        if (tcbCloudFiles.length) {
          const res = await Vs.getTempFileURL({
            fileList: [].concat.call([], ...tcbCloudFiles.map((item) => [item.src, item.cover])).filter((item) => item)
          });
          res.fileList.forEach((item) => {
            const cloudFile = tcbCloudFiles.find((file) => file.src === item.fileID || file.cover === item.fileID);
            if (cloudFile) {
              if (cloudFile.src) {
                data[cloudFile.index].src = item.tempFileURL;
                for (const cropRule in data[cloudFile.index].thumb) {
                  data[cloudFile.index].thumb[cropRule] = data[cloudFile.index].thumb[cropRule].replace(cloudFile.src, item.tempFileURL);
                }
              }
              if (cloudFile.cover) {
                data[cloudFile.index].cover = item.tempFileURL;
                for (const cropRule in data[cloudFile.index].thumb) {
                  data[cloudFile.index].thumb[cropRule] = data[cloudFile.index].thumb[cropRule].replace(cloudFile.cover, item.tempFileURL);
                }
              }
            }
          });
        }
        this.remoteMediaList = this.remoteMediaList.concat(data);
        this.processing = false;
      },
      loadMediaList(reset = false) {
        if (reset) {
          this.localMediaList = [];
          this.cancelAllSelected();
        }
        this.processing = true;
        this.remoteMediaList = [];
        this.$nextTick(() => this.$refs.mediaUdb.loadData({
          clear: reset
        }));
      },
      loadMore() {
        this.$refs.mediaUdb.loadMore();
      },
      onSelect(index) {
        if (this.isUploading)
          return;
        let minIndex = index;
        let maxIndex = index;
        if (this.shiftKey) {
          minIndex = Math.min(this.lastSelectedIndex, index);
          maxIndex = Math.max(this.lastSelectedIndex, index);
        }
        const mediaItem = this.mediaList[index];
        if (this.selectedCount > 0 && !mediaItem.selected && !mediaItem.active) {
          const selectedMediaCount = this.mediaList.reduce((count2, item) => item.selected || item.active ? count2 + 1 : count2, 0);
          if (selectedMediaCount + (maxIndex - minIndex + 1) > this.selectedCount) {
            uni.showToast({
              title: `最多只能选择${this.selectedCount}个媒体文件`,
              icon: "none"
            });
            return;
          }
        }
        if (!mediaItem.selected) {
          for (let i2 = minIndex; i2 <= maxIndex; i2++) {
            this.$set(this.mediaList[i2], "active", !mediaItem.active);
          }
          for (const otherMediaItem of this.mediaList) {
            if (otherMediaItem.active && otherMediaItem._id !== mediaItem._id) {
              this.$set(otherMediaItem, "active", false);
              this.$set(otherMediaItem, "selected", true);
            }
          }
        } else {
          this.$set(this.mediaList[index], "selected", false);
        }
        this.lastSelectedIndex = index;
        this.$nextTick(() => {
          this.$emit("onSelect", this.mediaList.filter((item) => item.selected || item.active));
        });
      },
      cancelAllSelected() {
        if (this.isUploading)
          return;
        for (const mediaItem of this.mediaList) {
          if (mediaItem.active || mediaItem.selected) {
            this.$set(mediaItem, "active", false);
            this.$set(mediaItem, "selected", false);
          }
        }
        this.$nextTick(() => {
          this.$emit("onSelect", []);
        });
      },
      deleteSelectedMedia(mediaIds) {
        if (this.isUploading)
          return;
        for (const id of mediaIds) {
          const index = this.remoteMediaList.findIndex((item) => item._id === id);
          this.remoteMediaList.splice(index, 1);
        }
        this.$nextTick(() => {
          this.$emit("onSelect", []);
        });
      },
      chooseFiles(files = []) {
        if (this.isUploading)
          return;
        this.isUploading = true;
        this.localMediaList = files.map((file) => {
          return {
            ...file,
            isUploading: true,
            progress: 0,
            status: "waiting",
            tip: "等待上传"
          };
        });
      },
      mediaUploadProgress(progress) {
        const sum2 = progress.loaded / progress.total * 100;
        const mediaItemIndex = this.localMediaList.findIndex((item) => item.src === progress.tempFilePath);
        if (mediaItemIndex < 0)
          return;
        this.localMediaList[mediaItemIndex].progress = sum2 < 100 ? sum2 : 100;
        this.localMediaList[mediaItemIndex].status = "uploading";
        this.localMediaList[mediaItemIndex].tip = "正在上传";
      },
      async mediaUploadSuccess(files) {
        for (const file of files) {
          const mediaItemIndex = this.localMediaList.findIndex((item) => item.src === file.path);
          const mediaItem = this.localMediaList[mediaItemIndex];
          if (mediaItemIndex < 0)
            continue;
          const attrs2 = {
            cover: file.url
            // 媒体资源封面
          };
          if (mediaItem.type === "video") {
            await this.cropVideoCover(mediaItemIndex, file.url, attrs2);
          }
          await this.reportFunction(mediaItemIndex, file.url, attrs2);
          this.localMediaList[mediaItemIndex].src = file.url;
          this.localMediaList[mediaItemIndex].status = "success";
          this.localMediaList[mediaItemIndex].tip = "上传成功";
        }
        this.isUploading = false;
        this.loadMediaList(true);
      },
      async reportFunction(mediaIndex, url, attrs2 = {}) {
        const mediaItem = this.localMediaList[mediaIndex];
        if (!mediaItem)
          return;
        this.localMediaList[mediaIndex].tip = "正在添加至媒体库";
        const uniMediaLibraryCo = Vs.importObject("uni-media-library-co", {
          customUI: true
        });
        await uniMediaLibraryCo.report({
          src: url,
          type: mediaItem.type,
          originalName: mediaItem.name,
          fileType: mediaItem.fileType,
          size: mediaItem.size,
          resolution: {
            width: mediaItem.width || 0,
            height: mediaItem.height || 0
          },
          duration: mediaItem.duration || 0,
          uploadUser: Vs.getCurrentUserInfo().uid,
          ...attrs2
        });
      },
      async cropVideoCover(mediaIndex, url, attrs2) {
        const mediaItem = this.localMediaList[mediaIndex];
        const isTcbCloud = url.startsWith("cloud://");
        if (!mediaItem || isTcbCloud)
          return void 0;
        this.localMediaList[mediaIndex].tip = "正在截取视频封面";
        const ossProcessRule = "video/snapshot,t_0,f_jpg,w_0,h_0,m_fast";
        const cropUrl = `${url}?x-oss-process=${ossProcessRule}`;
        const image = await fetch(cropUrl);
        const imageBlob = await image.blob();
        const imageFile = new File([imageBlob], "image.jpg", { type: "image/jpeg" });
        const imageBlobUrl = await this.file2blob(imageFile);
        const uploadRes = await Vs.uploadFile({
          filePath: imageBlobUrl,
          cloudPath: `uni-media-library/video-cover-${Date.now() + Math.round(Math.random() * 1e4)}.jpg`,
          fileType: "image"
        });
        attrs2.cover = uploadRes.fileID;
      },
      file2blob(file) {
        let url;
        if (window.createObjectURL !== void 0) {
          url = window.createObjectURL(file);
        } else if (window.URL !== void 0) {
          url = window.URL.createObjectURL(file);
        } else if (window.webkitURL !== void 0) {
          url = window.webkitURL.createObjectURL(file);
        }
        return url;
      }
    }
  };
  function _sfc_render$11(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_unicloud_db = resolveEasycom(vue.resolveDynamicComponent("unicloud-db"), __easycom_1$1);
    return vue.openBlock(), vue.createElementBlock(
      "scroll-view",
      {
        class: "media-view",
        "scroll-y": "",
        onScrolltolower: _cache[1] || (_cache[1] = (...args) => $options.loadMore && $options.loadMore(...args))
      },
      [
        vue.createVNode(_component_unicloud_db, {
          ref: "mediaUdb",
          collection: $options.collection,
          orderby: "createDate desc",
          loadtime: "manual",
          "page-size": 50,
          onLoad: $options.onMediaListLoad
        }, {
          default: vue.withCtx(({ data, loading, error, pagination }) => [
            (loading || $data.processing) && pagination.current === 1 ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "loading"
            }, [
              vue.createVNode(_component_uni_icons, {
                class: "icon",
                type: "spinner-cycle",
                size: "30",
                color: "#000"
              })
            ])) : $options.mediaList.length ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 1,
              class: "items"
            }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($options.mediaList, (mediaItem, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: vue.normalizeClass(["media-item", { active: mediaItem.active, selected: mediaItem.selected }]),
                    onClick: ($event) => $options.onSelect(index),
                    key: mediaItem._id
                  }, [
                    mediaItem.type === "image" ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "image"
                    }, [
                      vue.createElementVNode("image", {
                        src: mediaItem.isUploading ? mediaItem.src : mediaItem.thumb.listCover,
                        mode: "aspectFill",
                        class: "img"
                      }, null, 8, ["src"])
                    ])) : vue.createCommentVNode("v-if", true),
                    mediaItem.type === "video" ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 1,
                      class: "image"
                    }, [
                      mediaItem.isUploading || /^cloud:\/\//.test(mediaItem._src) ? (vue.openBlock(), vue.createElementBlock("video", {
                        key: 0,
                        class: "v",
                        src: mediaItem.src,
                        controls: false,
                        "show-center-play-btn": false
                      }, null, 8, ["src"])) : (vue.openBlock(), vue.createElementBlock("image", {
                        key: 1,
                        src: mediaItem.thumb.listCover,
                        mode: "aspectFill",
                        class: "img"
                      }, null, 8, ["src"]))
                    ])) : vue.createCommentVNode("v-if", true),
                    mediaItem.isUploading ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 2,
                      class: "mask"
                    }, [
                      vue.createElementVNode("view", { class: "progress" }, [
                        vue.createElementVNode(
                          "view",
                          {
                            class: "inner",
                            style: vue.normalizeStyle({ width: mediaItem.progress + "%" })
                          },
                          null,
                          4
                          /* STYLE */
                        )
                      ]),
                      vue.createElementVNode(
                        "view",
                        { class: "tip" },
                        vue.toDisplayString(mediaItem.tip),
                        1
                        /* TEXT */
                      )
                    ])) : vue.createCommentVNode("v-if", true)
                  ], 10, ["onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])) : (vue.openBlock(), vue.createElementBlock("view", {
              key: 2,
              class: "media-library-isnull"
            }, [
              vue.createVNode(_component_uni_icons, {
                type: "images",
                size: "60",
                color: "#ccc"
              }),
              vue.createElementVNode("view", { class: "text" }, "媒体库资源为空，是否上传资源？"),
              vue.createElementVNode("button", {
                type: "primary",
                size: "mini",
                onClick: _cache[0] || (_cache[0] = ($event) => {
                  _ctx.$emit("onUploadMedia");
                })
              }, "上传媒体资源")
            ]))
          ]),
          _: 1
          /* STABLE */
        }, 8, ["collection", "onLoad"])
      ],
      32
      /* NEED_HYDRATION */
    );
  }
  const MediaList = /* @__PURE__ */ _export_sfc$1(_sfc_main$33, [["render", _sfc_render$11], ["__scopeId", "data-v-40caedb1"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-media-library/components/media-list/index.vue"]]);
  async function getImageInfo(tempFile, fileInfo) {
    return new Promise((resolve) => {
      uni.getImageInfo({
        src: fileInfo.src,
        success: (res) => {
          fileInfo.width = res.width;
          fileInfo.height = res.height;
        },
        complete: () => {
          resolve();
        }
      });
    });
  }
  async function getVideoInfo(tempFile, fileInfo) {
    return new Promise((resolve) => {
      fileInfo.duration = tempFile.duration;
      fileInfo.width = tempFile.width;
      fileInfo.height = tempFile.height;
      resolve();
    });
  }
  async function transformPreviewMediaList(tempFiles = []) {
    var _a2;
    const files = [];
    for (const tempFile of tempFiles) {
      const [mediaType = "", fileType] = ((_a2 = tempFile.type || tempFile.fileType) == null ? void 0 : _a2.split("/")) || [];
      const fileInfo = {
        src: tempFile.path,
        size: tempFile.size,
        type: mediaType,
        fileType,
        name: tempFile.name
      };
      if (mediaType === "image") {
        await getImageInfo(tempFile, fileInfo);
      } else if (mediaType === "video") {
        await getVideoInfo(tempFile, fileInfo);
      }
      files.push(fileInfo);
    }
    return files;
  }
  const imageExtname = [".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp"];
  const videoExtname = [".mp4", ".avi", ".mov", ".rmvb", ".rm", ".flv", ".3gp", ".wmv", ".mkv"];
  const extnameMap = {
    all: [...imageExtname, ...videoExtname],
    image: imageExtname,
    video: videoExtname
  };
  function cropImg(file) {
    return new Promise((resolve, reject) => {
      let ext;
      let filePathProcessed = file.path;
      uni.getImageInfo({
        src: file.path,
        success(info) {
          ext = info.type.toLowerCase();
          resolve({
            path: filePathProcessed,
            ext,
            fileType: file.fileType
          });
        },
        fail(err) {
          reject(new Error(err.errMsg || "未能获取图片类型"));
        }
      });
    });
  }
  const _sfc_main$32 = {
    name: "media-panel",
    props: {
      mediaType: String,
      selectedCount: Number
    },
    components: {
      MediaList,
      MediaFilter,
      MediaInfo
    },
    data() {
      return {
        currentMedia: null,
        selectedMediaItems: [],
        isExpend: false,
        filter: {
          mediaGroup: null,
          keyword: null
        }
      };
    },
    watch: {
      currentMedia(newVal) {
        if (!newVal) {
          this.isExpend = false;
        }
      }
    },
    methods: {
      onUploadMediaEvent() {
        Vs.chooseAndUploadFile({
          type: this.mediaType,
          extension: extnameMap[this.mediaType],
          sizeType: ["original"],
          compressed: false,
          onChooseFile: async (res) => {
            const processAll = [];
            const mediaList = await transformPreviewMediaList(res.tempFiles);
            for (let i2 = 0; i2 < res.tempFiles.length; i2++) {
              processAll.push(cropImg(res.tempFiles[i2]));
            }
            return Promise.all(processAll).then((fileList) => {
              let result = {
                tempFilePaths: []
              };
              result.tempFiles = fileList.map((fileItem, index) => {
                result.tempFilePaths.push(fileItem.path);
                return {
                  path: fileItem.path,
                  cloudPath: "uni-media-library/" + Date.now() + index + "." + fileItem.ext,
                  // 云端路径，这里随便生成了一个
                  fileType: fileItem.fileType
                };
              });
              this.$refs.mediaList.chooseFiles(mediaList);
              return result;
            });
          },
          onUploadProgress: (progress) => {
            this.$refs.mediaList.mediaUploadProgress(progress);
          },
          success: (res) => {
            this.$refs.mediaList.mediaUploadSuccess(res.tempFiles);
          },
          fail: (err) => {
            formatAppLog("log", "at uni_modules/uni-media-library/components/media-panel/index.vue:111", err);
          }
        });
      },
      onSearchEvent(filter) {
        this.filter = filter;
      },
      onSelectEvent(selectedMediaItems) {
        const currentMedia = selectedMediaItems.find((item) => item.active);
        this.selectedMediaItems = selectedMediaItems;
        this.currentMedia = currentMedia;
      },
      getSelectedMediaItems() {
        return this.selectedMediaItems;
      },
      expendMediaInfo() {
        this.isExpend = !this.isExpend;
      }
    }
  };
  function _sfc_render$10(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_media_filter = vue.resolveComponent("media-filter");
    const _component_media_list = vue.resolveComponent("media-list");
    const _component_media_info = vue.resolveComponent("media-info");
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    return vue.openBlock(), vue.createElementBlock("view", { class: "media-panel" }, [
      vue.createElementVNode("view", { class: "content" }, [
        vue.createVNode(_component_media_filter, {
          selectMediaItems: $data.selectedMediaItems,
          onOnSearch: $options.onSearchEvent,
          onOnUploadMedia: $options.onUploadMediaEvent,
          onOnCancelSelect: _cache[0] || (_cache[0] = () => _ctx.$refs.mediaList.cancelAllSelected()),
          onOnDeleteSelect: _cache[1] || (_cache[1] = (e) => _ctx.$refs.mediaList.deleteSelectedMedia(e))
        }, null, 8, ["selectMediaItems", "onOnSearch", "onOnUploadMedia"]),
        vue.createVNode(_component_media_list, {
          ref: "mediaList",
          "media-group": $data.filter.mediaGroup,
          "media-type": $props.mediaType,
          keyword: $data.filter.keyword,
          selectedCount: $props.selectedCount,
          onOnUploadMedia: $options.onUploadMediaEvent,
          onOnSelect: $options.onSelectEvent
        }, null, 8, ["media-group", "media-type", "keyword", "selectedCount", "onOnUploadMedia", "onOnSelect"])
      ]),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["media-info-view", { expend: $data.isExpend }])
        },
        [
          $data.currentMedia ? (vue.openBlock(), vue.createBlock(_component_media_info, {
            key: 0,
            "current-media": $data.currentMedia
          }, null, 8, ["current-media"])) : vue.createCommentVNode("v-if", true),
          $data.currentMedia ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "expend-btn",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.expendMediaInfo && $options.expendMediaInfo(...args))
          }, [
            vue.createVNode(_component_uni_icons, {
              type: $data.isExpend ? "right" : "left",
              size: "16",
              color: "#fff"
            }, null, 8, ["type"])
          ])) : vue.createCommentVNode("v-if", true)
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const MediaPanel = /* @__PURE__ */ _export_sfc$1(_sfc_main$32, [["render", _sfc_render$10], ["__scopeId", "data-v-47cff021"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-media-library/components/media-panel/index.vue"]]);
  const tabs = [{
    key: "all",
    label: "全部"
  }, {
    key: "image",
    label: "图片"
  }, {
    key: "video",
    label: "视频"
  }];
  const _sfc_main$31 = {
    name: "uni-media-library",
    emits: ["onInsert"],
    props: {
      // manager: 管理模式，picker: 选择模式
      mode: {
        type: String,
        default: () => "manager"
      },
      // 选择的媒体类型
      mediaTabs: {
        type: Array,
        default: () => []
      },
      // 选择的媒体数量
      selectedCount: {
        type: Number,
        default: () => 0
      }
    },
    components: {
      MediaPanel
    },
    data() {
      return {
        currentTab: ""
      };
    },
    computed: {
      tabs() {
        return this.mediaTabs.length > 0 ? tabs.filter((tab) => this.mediaTabs.includes(tab.key)) : tabs;
      }
    },
    created() {
      this.currentTab = this.tabs[0].key;
    },
    methods: {
      switchTab(tabKey) {
        this.currentTab = tabKey;
      },
      insertMedia() {
        const mediaPanel = this.$refs[this.currentTab];
        if (!mediaPanel)
          return;
        const selectedMediaItems = mediaPanel.getSelectedMediaItems();
        if (selectedMediaItems.length <= 0)
          return;
        const mediaList = selectedMediaItems.reduce((list, item) => {
          list.push({
            src: item._src,
            cover: item._cover,
            type: item.type,
            alt: item.alt,
            size: item.size,
            duration: item.duration
          });
          return list;
        }, []);
        this.$emit("onInsert", mediaList);
      }
    }
  };
  function _sfc_render$$(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_media_panel = vue.resolveComponent("media-panel");
    return vue.openBlock(), vue.createElementBlock("view", { class: "media-library-warp" }, [
      vue.createElementVNode("view", { class: "tabs" }, [
        vue.createElementVNode("view", { class: "tabs-nav" }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($options.tabs, (tab) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: vue.normalizeClass(["tab-label", { active: tab.key === $data.currentTab }]),
                key: tab.key,
                onClick: ($event) => $options.switchTab(tab.key)
              }, vue.toDisplayString(tab.label), 11, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ]),
        $props.mode === "picker" ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "external-options"
        }, [
          vue.createElementVNode("button", {
            type: "primary",
            size: "mini",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.insertMedia && $options.insertMedia(...args))
          }, "插入")
        ])) : vue.createCommentVNode("v-if", true)
      ]),
      $data.currentTab === "all" ? (vue.openBlock(), vue.createBlock(_component_media_panel, {
        key: "all",
        ref: "all",
        "media-type": "all",
        "selected-count": $props.selectedCount
      }, null, 8, ["selected-count"])) : vue.createCommentVNode("v-if", true),
      $data.currentTab === "image" ? (vue.openBlock(), vue.createBlock(_component_media_panel, {
        key: "image",
        ref: "image",
        "media-type": "image",
        "selected-count": $props.selectedCount
      }, null, 8, ["selected-count"])) : vue.createCommentVNode("v-if", true),
      $data.currentTab === "video" ? (vue.openBlock(), vue.createBlock(_component_media_panel, {
        key: "video",
        ref: "video",
        "media-type": "video",
        "selected-count": $props.selectedCount
      }, null, 8, ["selected-count"])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const __easycom_6 = /* @__PURE__ */ _export_sfc$1(_sfc_main$31, [["render", _sfc_render$$], ["__scopeId", "data-v-564a8063"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-media-library/components/uni-media-library/uni-media-library.vue"]]);
  const _sfc_main$30 = {
    name: "UniDrawer",
    components: {},
    emits: ["change"],
    props: {
      /**
       * 显示模式（左、右），只在初始化生效
       */
      mode: {
        type: String,
        default: ""
      },
      /**
       * 蒙层显示状态
       */
      mask: {
        type: Boolean,
        default: true
      },
      /**
       * 遮罩是否可点击关闭
       */
      maskClick: {
        type: Boolean,
        default: true
      },
      /**
       * 抽屉宽度
       */
      width: {
        type: Number,
        default: 220
      }
    },
    data() {
      return {
        visibleSync: false,
        showDrawer: false,
        rightMode: false,
        watchTimer: null,
        drawerWidth: 220
      };
    },
    created() {
      this.drawerWidth = this.width;
      this.rightMode = this.mode === "right";
    },
    methods: {
      clear() {
      },
      close(type3) {
        if (type3 === "mask" && !this.maskClick || !this.visibleSync)
          return;
        this._change("showDrawer", "visibleSync", false);
      },
      open() {
        if (this.visibleSync)
          return;
        this._change("visibleSync", "showDrawer", true);
      },
      _change(param1, param2, status) {
        this[param1] = status;
        if (this.watchTimer) {
          clearTimeout(this.watchTimer);
        }
        this.watchTimer = setTimeout(() => {
          this[param2] = status;
          this.$emit("change", status);
        }, status ? 50 : 300);
      }
    }
  };
  function _sfc_render$_(_ctx, _cache, $props, $setup, $data, $options) {
    return $data.visibleSync ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass([{ "uni-drawer--visible": $data.showDrawer }, "uni-drawer"]),
        onTouchmove: _cache[1] || (_cache[1] = vue.withModifiers((...args) => $options.clear && $options.clear(...args), ["stop", "prevent"]))
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["uni-drawer__mask", { "uni-drawer__mask--visible": $data.showDrawer && $props.mask }]),
            onClick: _cache[0] || (_cache[0] = ($event) => $options.close("mask"))
          },
          null,
          2
          /* CLASS */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["uni-drawer__content", { "uni-drawer--right": $data.rightMode, "uni-drawer--left": !$data.rightMode, "uni-drawer__content--visible": $data.showDrawer }]),
            style: vue.normalizeStyle({ width: $data.drawerWidth + "px" })
          },
          [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ],
          6
          /* CLASS, STYLE */
        )
      ],
      34
      /* CLASS, NEED_HYDRATION */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_7 = /* @__PURE__ */ _export_sfc$1(_sfc_main$30, [["render", _sfc_render$_], ["__scopeId", "data-v-f7c32d22"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-drawer/components/uni-drawer/uni-drawer.vue"]]);
  const _sfc_main$2$ = {
    name: "uni-tooltip",
    data() {
      return {};
    },
    methods: {},
    computed: {
      initPlacement() {
        let style = {};
        switch (this.placement) {
          case "left":
            style = {
              top: "50%",
              transform: "translateY(-50%)",
              right: "100%",
              "margin-right": "10rpx"
            };
            break;
          case "right":
            style = {
              top: "50%",
              transform: "translateY(-50%)",
              left: "100%",
              "margin-left": "10rpx"
            };
            break;
          case "top":
            style = {
              bottom: "100%",
              transform: "translateX(-50%)",
              left: "50%",
              "margin-bottom": "10rpx"
            };
            break;
          case "bottom":
            style = {
              top: "100%",
              transform: "translateX(-50%)",
              left: "50%",
              "margin-top": "10rpx"
            };
            break;
        }
        return style;
      }
    },
    props: {
      content: {
        type: String,
        default: ""
      },
      placement: {
        type: String,
        default: "bottom"
      }
    }
  };
  function _sfc_render$Z(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-tooltip" }, [
      vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
      $props.content || _ctx.$slots.content ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 0,
          class: "uni-tooltip-popup",
          style: vue.normalizeStyle($options.initPlacement)
        },
        [
          vue.renderSlot(_ctx.$slots, "content", {}, () => [
            vue.createTextVNode(
              vue.toDisplayString($props.content),
              1
              /* TEXT */
            )
          ], true)
        ],
        4
        /* STYLE */
      )) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const __easycom_1 = /* @__PURE__ */ _export_sfc$1(_sfc_main$2$, [["render", _sfc_render$Z], ["__scopeId", "data-v-5fb5c624"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-tooltip/components/uni-tooltip/uni-tooltip.vue"]]);
  const _sfc_main$2_ = {
    name: "toolbar-tool-base",
    emits: ["change"],
    props: {
      type: {
        type: String,
        default() {
          return "button";
        }
      },
      split: Boolean,
      disabled: Boolean,
      active: [Boolean, String, Number, Array],
      defaultVal: [Boolean, String, Number, Array],
      items: Array,
      popupStyle: String,
      tooltip: {
        type: Object,
        default() {
          return {
            key: "",
            content: ""
          };
        }
      }
    },
    data() {
      return {
        showPopup: false,
        slotData: {}
      };
    },
    computed: {
      popupItems() {
        if (!this.items)
          return [];
        const activeItems = this.items.filter((item) => item.active);
        if (activeItems.length) {
          return this.items;
        } else {
          return this.items.map((item) => {
            if (item.value === this.defaultVal) {
              item.active = true;
            }
            return item;
          });
        }
      }
    },
    mounted() {
      if (this.$refs.editorToolbarTool) {
        this.$refs.editorToolbarTool.$el && this.$refs.editorToolbarTool.$el.addEventListener("mousedown", this.mousedownPreventDefault, { passive: false });
      }
    },
    unmounted() {
      if (this.$refs.editorToolbarTool) {
        this.$refs.editorToolbarTool.$el && this.$refs.editorToolbarTool.$el.removeEventListener("mousedown", this.mousedownPreventDefault, { passive: false });
      }
    },
    methods: {
      mousedownPreventDefault(e) {
        e.preventDefault();
      },
      hide(e) {
        if (this.$refs.main && !this.$refs.main.$el.contains(e.target)) {
          this.showPopup = false;
        }
      },
      click(e) {
        const { type: type3 } = e.target.dataset;
        if (!this.disabled) {
          if (this.items && this.items.length || type3 === "drop") {
            this.dropdownClick();
          } else {
            this.buttonClick();
          }
        }
      },
      buttonClick() {
        this.$emit("change");
      },
      dropdownClick() {
        this.showPopup = !this.showPopup;
      },
      change(e) {
        this.slotData = e;
        this.$emit("change", e);
        this.showPopup = false;
      }
    }
  };
  function _sfc_render$Y(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_uni_tooltip = resolveEasycom(vue.resolveDynamicComponent("uni-tooltip"), __easycom_1);
    const _component_uni_transition = resolveEasycom(vue.resolveDynamicComponent("uni-transition"), __easycom_1$2);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "editor-toolbar-tool-box",
        ref: "main"
      },
      [
        vue.createVNode(
          _component_uni_tooltip,
          null,
          vue.createSlots({
            default: vue.withCtx(() => [
              vue.createElementVNode(
                "view",
                {
                  ref: "editorToolbarTool",
                  class: vue.normalizeClass(["editor-toolbar-tool", { disabled: $props.disabled, active: $props.active, [$props.type]: true, split: $props.split }]),
                  onClick: _cache[0] || (_cache[0] = (...args) => $options.click && $options.click(...args))
                },
                [
                  $props.type === "button" ? vue.renderSlot(_ctx.$slots, "default", { key: 0 }, void 0, true) : $props.type === "dropdown" ? (vue.openBlock(), vue.createElementBlock(
                    vue.Fragment,
                    { key: 1 },
                    [
                      $props.split ? (vue.openBlock(), vue.createElementBlock(
                        vue.Fragment,
                        { key: 0 },
                        [
                          vue.createElementVNode("view", { class: "main-icon" }, [
                            vue.renderSlot(_ctx.$slots, "default", { select: $data.slotData }, void 0, true)
                          ]),
                          vue.createElementVNode("view", {
                            class: "drop-icon",
                            "data-type": "drop"
                          }, [
                            vue.createVNode(_component_uni_icons, {
                              class: "down",
                              type: "bottom",
                              size: "15",
                              "data-type": "drop"
                            })
                          ])
                        ],
                        64
                        /* STABLE_FRAGMENT */
                      )) : (vue.openBlock(), vue.createElementBlock(
                        vue.Fragment,
                        { key: 1 },
                        [
                          vue.renderSlot(_ctx.$slots, "default", { select: $data.slotData }, void 0, true),
                          vue.createVNode(_component_uni_icons, {
                            class: "down",
                            type: "bottom",
                            size: "15"
                          })
                        ],
                        64
                        /* STABLE_FRAGMENT */
                      ))
                    ],
                    64
                    /* STABLE_FRAGMENT */
                  )) : vue.createCommentVNode("v-if", true)
                ],
                2
                /* CLASS */
              )
            ]),
            _: 2
            /* DYNAMIC */
          }, [
            $props.tooltip.content ? {
              name: "content",
              fn: vue.withCtx(() => [
                vue.createElementVNode("view", { class: "content" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "text" },
                    vue.toDisplayString($props.tooltip.content),
                    1
                    /* TEXT */
                  )
                ]),
                $props.tooltip.key ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "key"
                }, [
                  vue.createElementVNode(
                    "text",
                    null,
                    vue.toDisplayString($props.tooltip.key.join("+")),
                    1
                    /* TEXT */
                  )
                ])) : vue.createCommentVNode("v-if", true)
              ]),
              key: "0"
            } : void 0
          ]),
          1024
          /* DYNAMIC_SLOTS */
        ),
        vue.createVNode(_component_uni_transition, {
          class: "editor-toolbar-popup",
          "mode-class": ["fade"],
          style: vue.normalizeStyle($props.popupStyle),
          show: $data.showPopup
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "popup", { change: $options.change }, () => [
              vue.createElementVNode("view", { class: "editor-toolbar-popup-scroll" }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($options.popupItems, (item) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "editor-toolbar-popup-scroll-item",
                      key: item.text,
                      onClick: ($event) => $options.change(item)
                    }, [
                      item.icon ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
                        key: 0,
                        class: "icon",
                        style: vue.normalizeStyle(item.iconStyle),
                        "custom-prefix": "editor-icon",
                        type: item.icon,
                        size: "24px"
                      }, null, 8, ["style", "type"])) : vue.createCommentVNode("v-if", true),
                      vue.createElementVNode("view", { class: "text" }, [
                        vue.createElementVNode(
                          "text",
                          {
                            class: "val",
                            style: vue.normalizeStyle(item.style)
                          },
                          vue.toDisplayString(item.text),
                          5
                          /* TEXT, STYLE */
                        ),
                        $props.defaultVal && item.value === $props.defaultVal ? (vue.openBlock(), vue.createElementBlock("text", {
                          key: 0,
                          class: "default"
                        }, "默认值")) : vue.createCommentVNode("v-if", true)
                      ]),
                      item.active ? (vue.openBlock(), vue.createBlock(_component_uni_icons, {
                        key: 1,
                        type: "checkmarkempty",
                        class: "active",
                        size: "18",
                        color: "#666666"
                      })) : vue.createCommentVNode("v-if", true)
                    ], 8, ["onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])
            ], true)
          ]),
          _: 3
          /* FORWARDED */
        }, 8, ["style", "show"])
      ],
      512
      /* NEED_PATCH */
    );
  }
  const ToolbarTool = /* @__PURE__ */ _export_sfc$1(_sfc_main$2_, [["render", _sfc_render$Y], ["__scopeId", "data-v-103d7a03"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/base.vue"]]);
  const _sfc_main$2Z = {
    name: "color",
    emits: ["change"],
    props: {
      clearColor: String
    },
    data() {
      return {
        colors: [
          "#505050",
          "#666666",
          "#999999",
          "#CACACA",
          "#D8D8D8",
          "#E8E8E8",
          "#F2F2F2",
          "#F8F8F8",
          "#FFFFFF",
          "#F04142",
          "#EB28BD",
          "#8F2BFF",
          "#1A74FF",
          "#00ABAB",
          "#00AA54",
          "#70B500",
          "#FFBA12",
          "#FF7528",
          "#996D39",
          "#FFD1D1",
          "#FFBAEF",
          "#E0C4FF",
          "#C1E1F7",
          "#C7F2F2",
          "#C2EDD8",
          "#DEF7B5",
          "#FFEBBA",
          "#FFD8C2",
          "#F5D8B6",
          "#FF8585",
          "#FF87E3",
          "#C087FF",
          "#599AFF",
          "#5ED1D1",
          "#69CF9C",
          "#ACDE5B",
          "#FFD05E",
          "#FFA775",
          "#C79254",
          "#FF5E5E",
          "#F54CCD",
          "#AE66FF",
          "#3D89FF",
          "#39C4C4",
          "#3BBF7D",
          "#8ECC29",
          "#FFC740",
          "#FF8E4F",
          "#C0833B",
          "#B83232",
          "#B31E90",
          "#641EB3",
          "#1356BD",
          "#008585",
          "#008542",
          "#508200",
          "#CC950E",
          "#B3521C",
          "#815A2C",
          "#7A2122",
          "#75145E",
          "#4B1785",
          "#0E408C",
          "#005C5C",
          "#005E2F",
          "#314F00",
          "#856109",
          "#662F10",
          "#634119"
        ],
        customColor: "#000000"
      };
    },
    methods: {
      change(color) {
        this.$emit("change", {
          color: color === void 0 ? this.customColor : color
        });
      }
    }
  };
  function _sfc_render$X(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "color-panel" }, [
      vue.createElementVNode("view", { class: "colors" }, [
        vue.createElementVNode(
          "view",
          {
            style: vue.normalizeStyle({ background: $props.clearColor }),
            class: "color",
            onClick: _cache[0] || (_cache[0] = ($event) => $options.change(null))
          },
          [
            vue.createElementVNode("text", { class: "reset" })
          ],
          4
          /* STYLE */
        ),
        (vue.openBlock(true), vue.createElementBlock(
          vue.Fragment,
          null,
          vue.renderList($data.colors, (color) => {
            return vue.openBlock(), vue.createElementBlock("view", {
              style: vue.normalizeStyle({ background: color }),
              class: "color",
              onClick: ($event) => $options.change(color),
              key: color
            }, null, 12, ["onClick"]);
          }),
          128
          /* KEYED_FRAGMENT */
        ))
      ]),
      vue.createElementVNode("view", { class: "custom" }, [
        vue.createElementVNode(
          "view",
          {
            class: "color-preview",
            style: vue.normalizeStyle({ background: $data.customColor })
          },
          null,
          4
          /* STYLE */
        ),
        vue.withDirectives(vue.createElementVNode(
          "input",
          {
            placeholder: "color",
            class: "input",
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.customColor = $event)
          },
          null,
          512
          /* NEED_PATCH */
        ), [
          [vue.vModelText, $data.customColor]
        ]),
        vue.createElementVNode("button", {
          size: "mini",
          class: "btn",
          onClick: _cache[2] || (_cache[2] = ($event) => $options.change())
        }, "确定")
      ])
    ]);
  }
  const ColorPicker$1 = /* @__PURE__ */ _export_sfc$1(_sfc_main$2Z, [["render", _sfc_render$X], ["__scopeId", "data-v-e10530f2"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/color-picker.vue"]]);
  const _sfc_main$2Y = {
    name: "color",
    emits: ["change"],
    props: {
      active: [Boolean, String, Array],
      disabled: Boolean
    },
    data() {
      return {
        lastColor: void 0
      };
    },
    components: {
      ColorPicker: ColorPicker$1,
      ToolbarTool
    },
    methods: {
      change(e) {
        if (e && e.hasOwnProperty("color")) {
          this.lastColor = e.color;
        }
        this.$emit("change", {
          type: "color",
          value: e && e.color ? e.color : this.lastColor
        });
      }
    }
  };
  function _sfc_render$W(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_color_picker = vue.resolveComponent("color-picker");
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "dropdown",
      split: "",
      active: $props.active,
      disabled: $props.disabled,
      "popup-style": "width: 250px;",
      tooltip: { content: "文字颜色" },
      onChange: $options.change
    }, {
      popup: vue.withCtx(({ change }) => [
        vue.createVNode(_component_color_picker, {
          onChange: change,
          "clear-color": "#000000"
        }, null, 8, ["onChange"])
      ]),
      default: vue.withCtx(() => [
        vue.createElementVNode("view", { class: "icon-group" }, [
          vue.createVNode(_component_uni_icons, {
            "custom-prefix": "editor-icon",
            type: "icon-color",
            size: "20px"
          }),
          vue.createElementVNode(
            "span",
            {
              class: "active-color",
              style: vue.normalizeStyle({ background: $data.lastColor ? $data.lastColor : "#000000" })
            },
            null,
            4
            /* STYLE */
          )
        ])
      ]),
      _: 1
      /* STABLE */
    }, 8, ["active", "disabled", "onChange"]);
  }
  const ToolColor = /* @__PURE__ */ _export_sfc$1(_sfc_main$2Y, [["render", _sfc_render$W], ["__scopeId", "data-v-fe5bfd2b"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/color.vue"]]);
  const _sfc_main$2X = {
    name: "bold",
    emits: ["change"],
    props: {
      active: Boolean,
      disabled: Boolean
    },
    components: {
      ToolbarTool
    },
    methods: {
      change() {
        this.$emit("change", {
          type: "bold",
          value: void 0
        });
      }
    }
  };
  function _sfc_render$V(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "button",
      onChange: $options.change,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "加粗", key: ["Ctrl", "B"] }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-bold",
          size: "24px"
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "active", "disabled"]);
  }
  const ToolBold = /* @__PURE__ */ _export_sfc$1(_sfc_main$2X, [["render", _sfc_render$V], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/bold.vue"]]);
  const _sfc_main$2W = {
    name: "italic",
    emits: ["change"],
    props: {
      active: Boolean,
      disabled: Boolean
    },
    components: {
      ToolbarTool
    },
    methods: {
      change() {
        this.$emit("change", {
          type: "italic",
          value: void 0
        });
      }
    }
  };
  function _sfc_render$U(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "button",
      onChange: $options.change,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "斜体", key: ["Ctrl", "I"] }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-italic",
          size: "24px"
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "active", "disabled"]);
  }
  const ToolItalic = /* @__PURE__ */ _export_sfc$1(_sfc_main$2W, [["render", _sfc_render$U], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/italic.vue"]]);
  const _sfc_main$2V = {
    name: "strike",
    emits: ["change"],
    props: {
      active: Boolean,
      disabled: Boolean
    },
    components: {
      ToolbarTool
    },
    methods: {
      change() {
        this.$emit("change", {
          type: "strike",
          value: void 0
        });
      }
    }
  };
  function _sfc_render$T(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "button",
      onChange: $options.change,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "删除线" }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-strike",
          size: "24px"
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "active", "disabled"]);
  }
  const ToolStrike = /* @__PURE__ */ _export_sfc$1(_sfc_main$2V, [["render", _sfc_render$T], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/strike.vue"]]);
  const _sfc_main$2U = {
    name: "tool-list",
    emits: ["change"],
    props: {
      active: [Boolean, String],
      disabled: Boolean
    },
    data() {
      return {
        items: [
          {
            icon: "icon-ul",
            text: "有序列表",
            value: "ordered",
            active: false
          },
          {
            icon: "icon-ol",
            text: "无序列表",
            value: "bullet",
            active: false
          }
        ]
      };
    },
    watch: {
      active(newValue) {
        const index = this.items.findIndex((item) => item.value === newValue);
        this.items.map((item, mIndex) => {
          this.items[mIndex].active = index === mIndex;
        });
      }
    },
    computed: {
      activeIcon() {
        const item = this.items.find((item2) => item2.active);
        if (item)
          return item.icon;
        return this.items[0].icon;
      }
    },
    components: {
      ToolbarTool
    },
    methods: {
      change(e) {
        this.$emit("change", {
          type: "list",
          value: e.value
        });
      }
    }
  };
  function _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "dropdown",
      onChange: $options.change,
      items: $data.items,
      active: $props.active,
      disabled: $props.disabled,
      "popup-style": "width: 170px;",
      tooltip: { content: "列表" }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: $options.activeIcon,
          size: "24px"
        }, null, 8, ["type"])
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "items", "active", "disabled"]);
  }
  const ToolList = /* @__PURE__ */ _export_sfc$1(_sfc_main$2U, [["render", _sfc_render$S], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/list.vue"]]);
  const _sfc_main$2T = {
    name: "tool-hr",
    emits: ["change"],
    props: {
      active: Boolean,
      disabled: Boolean
    },
    components: {
      ToolbarTool
    },
    methods: {
      change() {
        this.$emit("change", {
          type: "hr",
          value: void 0
        });
      }
    }
  };
  function _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "button",
      onChange: $options.change,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "分割线" }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-hr",
          size: "24px"
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "active", "disabled"]);
  }
  const ToolHr = /* @__PURE__ */ _export_sfc$1(_sfc_main$2T, [["render", _sfc_render$R], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/hr.vue"]]);
  const _sfc_main$2S = {
    name: "undo",
    emits: ["change"],
    props: {
      active: Boolean,
      disabled: Boolean
    },
    components: {
      ToolbarTool
    },
    methods: {
      change() {
        this.$emit("change", {
          type: "undo",
          value: void 0
        });
      }
    }
  };
  function _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "button",
      onChange: $options.change,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "撤销", key: ["Ctrl", "Z"] }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-undo",
          size: "24px"
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "active", "disabled"]);
  }
  const ToolUndo = /* @__PURE__ */ _export_sfc$1(_sfc_main$2S, [["render", _sfc_render$Q], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/undo.vue"]]);
  const _sfc_main$2R = {
    name: "redo",
    emits: ["change"],
    props: {
      active: Boolean,
      disabled: Boolean
    },
    components: {
      ToolbarTool
    },
    methods: {
      change() {
        this.$emit("change", {
          type: "redo",
          value: void 0
        });
      }
    }
  };
  function _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "button",
      onChange: $options.change,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "恢复", key: ["Ctrl", "Y"] }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-redo",
          size: "24px"
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "active", "disabled"]);
  }
  const ToolRedo = /* @__PURE__ */ _export_sfc$1(_sfc_main$2R, [["render", _sfc_render$P], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/redo.vue"]]);
  const _sfc_main$2Q = {
    name: "tool-header",
    emits: ["change"],
    props: {
      active: [Boolean, Number],
      disabled: Boolean
    },
    data() {
      return {
        items: [
          {
            text: "H1",
            value: 1,
            active: false,
            style: {
              fontSize: "24px",
              fontWeight: "bold"
            }
          },
          {
            text: "H2",
            value: 2,
            active: false,
            style: {
              fontSize: "22px",
              fontWeight: "bold"
            }
          },
          {
            text: "H3",
            value: 3,
            active: false,
            style: {
              fontSize: "20px",
              fontWeight: "bold"
            }
          },
          {
            text: "H4",
            value: 4,
            active: false,
            style: {
              fontSize: "18px",
              fontWeight: "bold"
            }
          },
          {
            text: "H5",
            value: 5,
            active: false,
            style: {
              fontSize: "16px",
              fontWeight: "bold"
            }
          },
          {
            text: "H6",
            value: 6,
            active: false,
            style: {
              fontSize: "14px",
              fontWeight: "bold"
            }
          }
        ]
      };
    },
    watch: {
      active(newValue) {
        const index = this.items.findIndex((item) => item.value === newValue);
        this.items.map((item, mIndex) => {
          this.items[mIndex].active = index === mIndex;
        });
      }
    },
    computed: {
      activeText() {
        const item = this.items.find((item2) => item2.active);
        if (item)
          return item.text;
        return this.items[0].text;
      }
    },
    components: {
      ToolbarTool
    },
    methods: {
      change(e) {
        this.$emit("change", {
          type: "header",
          value: e.value
        });
      }
    }
  };
  function _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "dropdown",
      onChange: $options.change,
      items: $data.items,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "标题" },
      "popup-style": "width: 100px;"
    }, {
      default: vue.withCtx(() => [
        vue.createElementVNode(
          "view",
          { style: { "width": "24px", "height": "24px" } },
          vue.toDisplayString($options.activeText),
          1
          /* TEXT */
        )
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "items", "active", "disabled"]);
  }
  const ToolHeader = /* @__PURE__ */ _export_sfc$1(_sfc_main$2Q, [["render", _sfc_render$O], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/header.vue"]]);
  const _sfc_main$2P = {
    name: "align",
    emits: ["change"],
    props: {
      active: [Boolean, String],
      disabled: Boolean
    },
    data() {
      return {
        items: [
          {
            icon: "icon-align-left",
            text: "左对齐",
            value: "left",
            active: false
          },
          {
            icon: "icon-align-center",
            text: "居中对齐",
            value: "center",
            active: false
          },
          {
            icon: "icon-align-right",
            text: "右对齐",
            value: "right",
            active: false
          },
          {
            icon: "icon-align-justify",
            text: "两端对齐",
            value: "justify",
            active: false
          }
        ]
      };
    },
    watch: {
      active(newValue) {
        const index = this.items.findIndex((item) => item.value === newValue);
        this.items.map((item, mIndex) => {
          this.items[mIndex].active = index === mIndex;
        });
      }
    },
    computed: {
      activeIcon() {
        const item = this.items.find((item2) => item2.active);
        if (item)
          return item.icon;
        return this.items[0].icon;
      }
    },
    components: {
      ToolbarTool
    },
    methods: {
      change(e) {
        this.$emit("change", {
          type: "align",
          value: e.value
        });
      }
    }
  };
  function _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "dropdown",
      onChange: $options.change,
      items: $data.items,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "对齐方式" },
      "popup-style": "width: 170px;"
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: $options.activeIcon,
          size: "24px"
        }, null, 8, ["type"])
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "items", "active", "disabled"]);
  }
  const ToolAlign = /* @__PURE__ */ _export_sfc$1(_sfc_main$2P, [["render", _sfc_render$N], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/align.vue"]]);
  const _sfc_main$2O = {
    name: "tool-link",
    emits: ["change"],
    props: {
      active: [Boolean, String],
      disabled: Boolean
    },
    data() {
      return {
        link: ""
      };
    },
    watch: {
      active(newValue) {
        if (newValue) {
          this.link = newValue;
        }
      }
    },
    components: {
      ToolbarTool
    },
    methods: {
      change() {
        this.$emit("change", {
          type: "link",
          value: this.link
        });
        this.$refs.popup.close();
      }
    }
  };
  function _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    const _component_uni_easyinput = resolveEasycom(vue.resolveDynamicComponent("uni-easyinput"), __easycom_2);
    const _component_uni_forms_item = resolveEasycom(vue.resolveDynamicComponent("uni-forms-item"), __easycom_3);
    const _component_uni_forms = resolveEasycom(vue.resolveDynamicComponent("uni-forms"), __easycom_4);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_5);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createVNode(_component_toolbarTool, {
        type: "button",
        onChange: _cache[0] || (_cache[0] = ($event) => _ctx.$refs.popup.open()),
        active: $props.active,
        disabled: $props.disabled,
        tooltip: { content: $props.active ? "修改链接" : "添加链接" }
      }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_uni_icons, {
            "custom-prefix": "editor-icon",
            type: "icon-link",
            size: "24px"
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["active", "disabled", "tooltip"]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "popup",
          type: "center"
        },
        {
          default: vue.withCtx(() => [
            vue.createElementVNode("view", { class: "popup-body" }, [
              vue.createVNode(_component_uni_forms, { "label-width": "90px" }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_uni_forms_item, {
                    label: "链接地址",
                    name: "link"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_uni_easyinput, {
                        modelValue: $data.link,
                        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.link = $event),
                        placeholder: "填写链接地址"
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }),
              vue.createElementVNode("view", { class: "popup-body-btn-group" }, [
                vue.createElementVNode("button", {
                  class: "btn",
                  size: "mini",
                  onClick: _cache[2] || (_cache[2] = ($event) => _ctx.$refs.popup.close())
                }, "取消"),
                vue.createElementVNode("button", {
                  class: "btn",
                  size: "mini",
                  type: "primary",
                  onClick: _cache[3] || (_cache[3] = (...args) => $options.change && $options.change(...args))
                }, "确定")
              ])
            ])
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const ToolLink = /* @__PURE__ */ _export_sfc$1(_sfc_main$2O, [["render", _sfc_render$M], ["__scopeId", "data-v-e676c690"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/link.vue"]]);
  const _sfc_main$2N = {
    name: "underline",
    emits: ["change"],
    props: {
      active: Boolean,
      disabled: Boolean
    },
    components: {
      ToolbarTool
    },
    methods: {
      change() {
        this.$emit("change", {
          type: "underline",
          value: void 0
        });
      }
    }
  };
  function _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "button",
      onChange: $options.change,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "下划线", key: ["Ctrl", "U"] }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-underline",
          size: "24px"
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "active", "disabled"]);
  }
  const ToolUnderline = /* @__PURE__ */ _export_sfc$1(_sfc_main$2N, [["render", _sfc_render$L], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/underline.vue"]]);
  const _sfc_main$2M = {
    name: "line-indent",
    emits: ["change"],
    props: {
      active: [Boolean, String],
      disabled: Boolean
    },
    components: {
      ToolbarTool
    },
    methods: {
      change() {
        this.$emit("change", {
          type: "textIndent",
          value: "1em"
        });
      }
    }
  };
  function _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "button",
      onChange: $options.change,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "首行缩进" }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-line-indent",
          size: "18px",
          style: { "padding": "3px" }
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "active", "disabled"]);
  }
  const ToolLineIndent = /* @__PURE__ */ _export_sfc$1(_sfc_main$2M, [["render", _sfc_render$K], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/line-indent.vue"]]);
  const _sfc_main$2L = {
    name: "space-both",
    emits: ["change"],
    props: {
      active: [Boolean, String],
      disabled: Boolean
    },
    data() {
      return {
        items: [
          {
            text: "0",
            value: "0px",
            active: false
          },
          {
            text: "8",
            value: "8px",
            active: false
          },
          {
            text: "16",
            value: "16px",
            active: false
          },
          {
            text: "32",
            value: "32px",
            active: false
          }
        ]
      };
    },
    watch: {
      active(newValue) {
        const index = this.items.findIndex((item) => item.value === newValue);
        this.items.map((item, mIndex) => {
          this.items[mIndex].active = index === mIndex;
        });
      }
    },
    components: {
      ToolbarTool
    },
    methods: {
      change(e) {
        this.$emit("change", {
          type: "space-both",
          value: e.value
        });
      }
    }
  };
  function _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "dropdown",
      onChange: $options.change,
      items: $data.items,
      active: $props.active,
      disabled: $props.disabled,
      "popup-style": "width: 170px;",
      tooltip: { content: "两端缩进" }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-space-both",
          size: "18px",
          style: { "padding": "3px" }
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "items", "active", "disabled"]);
  }
  const ToolSpaceBoth = /* @__PURE__ */ _export_sfc$1(_sfc_main$2L, [["render", _sfc_render$J], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/space-both.vue"]]);
  const _sfc_main$2K = {
    name: "line-height",
    emits: ["change"],
    props: {
      active: [Boolean, String],
      disabled: Boolean
    },
    data() {
      return {
        items: [
          {
            text: "1",
            value: "1",
            active: false
          },
          {
            text: "1.5",
            value: "1.5",
            active: false
          },
          {
            text: "1.75",
            value: "1.75",
            active: false
          },
          {
            text: "2",
            value: "2",
            active: false
          },
          {
            text: "3",
            value: "3",
            active: false
          }
        ]
      };
    },
    watch: {
      active(newValue) {
        const index = this.items.findIndex((item) => item.value === newValue);
        this.items.map((item, mIndex) => {
          this.items[mIndex].active = index === mIndex;
        });
      }
    },
    components: {
      ToolbarTool
    },
    methods: {
      change(e) {
        this.$emit("change", {
          type: "lineHeight",
          value: e.value
        });
      }
    }
  };
  function _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "dropdown",
      onChange: $options.change,
      items: $data.items,
      active: $props.active,
      disabled: $props.disabled,
      defaultVal: "1.75",
      tooltip: { content: "行间距" },
      "popup-style": "width: 170px;"
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-line-height",
          size: "18px",
          style: { "padding": "3px" }
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "items", "active", "disabled"]);
  }
  const ToolLineHeight = /* @__PURE__ */ _export_sfc$1(_sfc_main$2K, [["render", _sfc_render$I], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/line-height.vue"]]);
  const _sfc_main$2J = {
    name: "letter-space",
    emits: ["change"],
    props: {
      active: [Boolean, String],
      disabled: Boolean
    },
    data() {
      return {
        items: [
          {
            text: "0",
            value: "0em",
            active: false
          },
          {
            text: "0.5",
            value: "0.5em",
            active: false
          },
          {
            text: "1",
            value: "1em",
            active: false
          },
          {
            text: "1.5",
            value: "1.5em",
            active: false
          },
          {
            text: "2",
            value: "2em",
            active: false
          }
        ]
      };
    },
    watch: {
      active(newValue) {
        const index = this.items.findIndex((item) => item.value === newValue);
        this.items.map((item, mIndex) => {
          this.items[mIndex].active = index === mIndex;
        });
      }
    },
    components: {
      ToolbarTool
    },
    methods: {
      change(e) {
        this.$emit("change", {
          type: "letterSpacing",
          value: e.value
        });
      }
    }
  };
  function _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "dropdown",
      onChange: $options.change,
      items: $data.items,
      active: $props.active,
      disabled: $props.disabled,
      "default-val": "0em",
      tooltip: { content: "字间距" },
      "popup-style": "width: 170px;"
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-letter-space",
          size: "18px",
          style: { "padding": "3px" }
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "items", "active", "disabled"]);
  }
  const ToolLetterSpace = /* @__PURE__ */ _export_sfc$1(_sfc_main$2J, [["render", _sfc_render$H], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/letter-space.vue"]]);
  const _sfc_main$2I = {
    name: "background",
    emits: ["change"],
    props: {
      active: [Boolean, String, Array],
      disabled: Boolean
    },
    data() {
      return {
        lastColor: void 0
      };
    },
    components: {
      ColorPicker: ColorPicker$1,
      ToolbarTool
    },
    methods: {
      change(e) {
        if (e && e.hasOwnProperty("color")) {
          this.lastColor = e.color;
        }
        this.$emit("change", {
          type: "background",
          value: e && e.color ? e.color : this.lastColor
        });
      }
    }
  };
  function _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_color_picker = vue.resolveComponent("color-picker");
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "dropdown",
      split: "",
      active: $props.active,
      disabled: $props.disabled,
      "popup-style": "width: 250px;",
      tooltip: { content: "背景颜色" },
      onChange: $options.change
    }, {
      popup: vue.withCtx(({ change }) => [
        vue.createVNode(_component_color_picker, { onChange: change }, null, 8, ["onChange"])
      ]),
      default: vue.withCtx(() => [
        vue.createElementVNode("view", { class: "icon-group" }, [
          vue.createVNode(_component_uni_icons, {
            "custom-prefix": "editor-icon",
            type: "icon-background",
            size: "20px"
          }),
          vue.createElementVNode(
            "span",
            {
              class: "active-color",
              style: vue.normalizeStyle({ background: $data.lastColor ? $data.lastColor : "#fff" })
            },
            null,
            4
            /* STYLE */
          )
        ])
      ]),
      _: 1
      /* STABLE */
    }, 8, ["active", "disabled", "onChange"]);
  }
  const ToolBackground = /* @__PURE__ */ _export_sfc$1(_sfc_main$2I, [["render", _sfc_render$G], ["__scopeId", "data-v-87fa07ef"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/background.vue"]]);
  const _sfc_main$2H = {
    name: "tool-image",
    emits: ["change"],
    props: {
      active: Boolean,
      disabled: Boolean,
      getEditorContent: Function
    },
    components: {
      ToolbarTool
    },
    data() {
      return {
        drawerWidth: null
      };
    },
    mounted() {
      const sysinfo = uni.getSystemInfoSync();
      this.drawerWidth = sysinfo.windowWidth * 0.8;
    },
    methods: {
      change() {
        uni.chooseImage({
          count: 1,
          //默认9
          sizeType: ["original", "compressed"],
          //可以指定是原图还是压缩图，默认二者都有
          success: async (res) => {
            res.tempFilePaths[0];
            this.onInsert({
              src: res.tempFilePaths[0]
            });
          }
        });
      },
      onInsert(selectedMedia) {
        this.$emit("change", {
          type: "image",
          value: {
            src: selectedMedia.src,
            alt: ""
          }
        });
      }
    }
  };
  function _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    const _component_uni_media_library = resolveEasycom(vue.resolveDynamicComponent("uni-media-library"), __easycom_6);
    const _component_uni_drawer = resolveEasycom(vue.resolveDynamicComponent("uni-drawer"), __easycom_7);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.renderSlot(_ctx.$slots, "default", { change: $options.change }, () => [
        vue.createVNode(_component_toolbarTool, {
          type: "button",
          onChange: $options.change,
          active: $props.active,
          disabled: $props.disabled,
          tooltip: { content: "插入图片" }
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_icons, {
              "custom-prefix": "editor-icon",
              type: "icon-image",
              size: "22px",
              style: { "padding": "1px" }
            })
          ]),
          _: 1
          /* STABLE */
        }, 8, ["onChange", "active", "disabled"])
      ]),
      $data.drawerWidth ? (vue.openBlock(), vue.createBlock(_component_uni_drawer, {
        key: 0,
        class: "insert-image-drawer",
        ref: "insertImageDrawer",
        mode: "right",
        width: $data.drawerWidth
      }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_uni_media_library, {
            mode: "picker",
            "selected-count": 1,
            "media-tabs": ["image"],
            onOnInsert: $options.onInsert
          }, null, 8, ["onOnInsert"])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["width"])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const ToolImage = /* @__PURE__ */ _export_sfc$1(_sfc_main$2H, [["render", _sfc_render$F], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/image.vue"]]);
  const _sfc_main$2G = {
    name: "format-clear",
    emits: ["change"],
    props: {
      active: Boolean,
      disabled: Boolean
    },
    components: {
      ToolbarTool
    },
    methods: {
      change() {
        this.$emit("change", {
          type: "format-clear",
          value: void 0
        });
      }
    }
  };
  function _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "button",
      onChange: $options.change,
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "清除格式" }
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_uni_icons, {
          "custom-prefix": "editor-icon",
          type: "icon-format-clear",
          size: "24px"
        })
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "active", "disabled"]);
  }
  const ToolFormatClear = /* @__PURE__ */ _export_sfc$1(_sfc_main$2G, [["render", _sfc_render$E], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/format-clear.vue"]]);
  const _sfc_main$2F = {
    name: "mediaVideo",
    emits: ["change"],
    components: {
      ToolbarTool
    },
    props: {
      active: Boolean,
      disabled: Boolean
    },
    data() {
      return {
        drawerWidth: null
      };
    },
    mounted() {
      const sysinfo = uni.getSystemInfoSync();
      this.drawerWidth = sysinfo.windowWidth * 0.8;
    },
    methods: {
      change() {
        this.$refs.insertVideoDrawer.open();
      },
      onInsert(selectedMediaList) {
        this.$refs.insertVideoDrawer.close();
        this.$emit("change", {
          type: "mediaVideo",
          value: {
            poster: selectedMediaList[0].cover,
            src: selectedMediaList[0].src,
            duration: selectedMediaList[0].duration
          }
        });
      }
    }
  };
  function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    const _component_uni_media_library = resolveEasycom(vue.resolveDynamicComponent("uni-media-library"), __easycom_6);
    const _component_uni_drawer = resolveEasycom(vue.resolveDynamicComponent("uni-drawer"), __easycom_7);
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createVNode(_component_toolbarTool, {
        type: "button",
        onChange: $options.change,
        tooltip: { content: "插入视频" },
        disabled: $props.disabled,
        active: $props.active
      }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_uni_icons, {
            "custom-prefix": "editor-icon",
            type: "icon-video",
            size: "24px"
          })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["onChange", "disabled", "active"]),
      $data.drawerWidth ? (vue.openBlock(), vue.createBlock(_component_uni_drawer, {
        key: 0,
        class: "insert-image-drawer",
        ref: "insertVideoDrawer",
        mode: "right",
        width: $data.drawerWidth
      }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_uni_media_library, {
            mode: "picker",
            "selected-count": 1,
            "media-tabs": ["video"],
            onOnInsert: $options.onInsert
          }, null, 8, ["onOnInsert"])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["width"])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const ToolVideo = /* @__PURE__ */ _export_sfc$1(_sfc_main$2F, [["render", _sfc_render$D], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/video.vue"]]);
  const _sfc_main$2E = {
    name: "tool-font-size",
    emits: ["change"],
    props: {
      active: [Boolean, Number, String],
      disabled: Boolean
    },
    data() {
      return {
        items: [
          {
            text: "12",
            value: "12px",
            active: false,
            style: {
              fontSize: "12px"
            }
          },
          {
            text: "14",
            value: "14px",
            active: false,
            style: {
              fontSize: "14px"
            }
          },
          {
            text: "15",
            value: "15px",
            active: false,
            style: {
              fontSize: "15px"
            }
          },
          {
            text: "16",
            value: "16px",
            active: false,
            style: {
              fontSize: "16px"
            }
          },
          {
            text: "17",
            value: "17px",
            active: false,
            style: {
              fontSize: "17px"
            }
          },
          {
            text: "18",
            value: "18px",
            active: false,
            style: {
              fontSize: "18px"
            }
          },
          {
            text: "19",
            value: "19px",
            active: false,
            style: {
              fontSize: "19px"
            }
          },
          {
            text: "20",
            value: "20px",
            active: false,
            style: {
              fontSize: "20px"
            }
          },
          {
            text: "22",
            value: "22px",
            active: false,
            style: {
              fontSize: "22px"
            }
          },
          {
            text: "24",
            value: "24px",
            active: false,
            style: {
              fontSize: "24px"
            }
          }
        ]
      };
    },
    watch: {
      active(newValue) {
        const index = this.items.findIndex((item) => item.value === newValue);
        this.items.map((item, mIndex) => {
          this.items[mIndex].active = index === mIndex;
        });
      }
    },
    computed: {
      activeText() {
        const item = this.items.find((item2) => item2.active);
        if (item)
          return item.text;
        return this.items[0].text;
      }
    },
    components: {
      ToolbarTool
    },
    methods: {
      change(e) {
        this.$emit("change", {
          type: "font-size",
          value: e.value
        });
      }
    }
  };
  function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_toolbarTool = vue.resolveComponent("toolbarTool");
    return vue.openBlock(), vue.createBlock(_component_toolbarTool, {
      type: "dropdown",
      onChange: $options.change,
      items: $data.items,
      "default-val": "17px",
      active: $props.active,
      disabled: $props.disabled,
      tooltip: { content: "字号" },
      "popup-style": "width: 140px;"
    }, {
      default: vue.withCtx(() => [
        vue.createElementVNode("view", null, [
          vue.createTextVNode(
            vue.toDisplayString($options.activeText),
            1
            /* TEXT */
          ),
          vue.createElementVNode("text", { style: { "font-size": "13px" } }, "px")
        ])
      ]),
      _: 1
      /* STABLE */
    }, 8, ["onChange", "items", "active", "disabled"]);
  }
  const ToolFontSize = /* @__PURE__ */ _export_sfc$1(_sfc_main$2E, [["render", _sfc_render$C], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/tools/font-size.vue"]]);
  const http$3 = request.http;
  const _sfc_main$2D = {
    name: "editor",
    emits: ["change", "textchange"],
    components: {
      ToolBackground,
      ToolLetterSpace,
      ToolLineHeight,
      ToolLineIndent,
      ToolUnderline,
      ToolAlign,
      ToolUndo,
      ToolItalic,
      ToolBold,
      ToolStrike,
      ToolList,
      ToolHr,
      ToolRedo,
      ToolHeader,
      ToolLink,
      ToolSpaceBoth,
      ToolImage,
      ToolColor,
      ToolFormatClear,
      // ToolUnlockContent,
      // ToolAi,
      ToolVideo,
      // uniImChat,
      ToolFontSize
    },
    data() {
      return {
        formats: {},
        // 编辑器格式状态
        keyboardHeight: 0,
        // 键盘高度
        showFooterToolBar: true,
        // 是否显示底部工具栏
        showToolSettingMask: false,
        // 是否显示工具栏设置遮罩层
        showInsertBlockToolSetting: false,
        // 是否显示插入块工具栏
        showToolPopup: "",
        // 当前工具栏弹出的工具名称，为空则表示没有弹出的工具
        toolPopupRect: {},
        // 弹出工具栏的位置和大小
        showImChat: false,
        // 是否显示 AI 聊天窗口
        currentLink: {
          // 当前链接的信息
          title: "",
          // 链接标题
          url: ""
          // 链接URL
        },
        drawerWidth: 0
        // 插入图片抽屉宽度
      };
    },
    computed: {
      // `editorHeight`计算属性，返回编辑器高度。当键盘弹出时，编辑器高度为键盘高度减去工具栏高度，否则为窗口高度减去工具栏高度
      editorHeight() {
        if (this.showToolPopup !== "")
          ;
        return 0;
      }
    },
    watch: {
      // 监听`showFooterToolBar`属性，当值为false时，清空弹出工具栏名称和弹出工具栏位置信息
      showFooterToolBar(newValue) {
        if (!newValue) {
          this.showToolPopup = "";
          this.toolPopupRect = {};
        }
      }
    },
    mounted() {
      this.systemInfo = uni.getSystemInfoSync();
      this.drawerWidth = this.systemInfo.windowWidth * 0.8;
      uni.$on("parstImage", (src) => {
        this.format("image", {
          src,
          data: {
            source: src
          }
        });
      });
    },
    methods: {
      getEditorContent() {
        return this.$refs.webEditor.getEditorContext();
      },
      parseHtml(htmlContent) {
        this.$refs.webEditor.parseHtml(htmlContent);
      },
      // 编辑器加载完成时触发
      onEditorReady(editorCtx) {
        this.createSelectorQuery().select("#editor").context((res) => {
          this.editorCtx = res.context;
          this.$emit("ready", res.context);
        }).exec();
        uni.onKeyboardHeightChange(this.onKeyboardHeightChange.bind(this));
      },
      // 监听键盘高度变化事件
      onKeyboardHeightChange(res) {
        if (res.height < 20 || res.height === this.keyboardHeight)
          return;
        const duration = res.height > 0 ? res.duration * 1e3 : 0;
        setTimeout(() => {
          uni.pageScrollTo({
            scrollTop: 0,
            success: () => {
              this.updatePosition(res.height);
              setTimeout(() => this.editorCtx.scrollIntoView(), 0);
            }
          });
        }, duration);
      },
      // 更新键盘高度
      updatePosition(keyboardHeight) {
        this.keyboardHeight = keyboardHeight;
      },
      // 显示工具栏弹出层
      showToolPopupView(id) {
        uni.createSelectorQuery().in(this).select("#" + id).boundingClientRect((btnData) => {
          uni.createSelectorQuery().in(this).select("#" + id + "-popup").boundingClientRect(
            (popupData) => {
              const center = popupData.width / 2;
              if (btnData.left > center) {
                this.toolPopupRect.left = btnData.left - center + btnData.width / 2;
              } else {
                this.toolPopupRect.left = 10;
              }
              if (popupData.width > this.systemInfo.windowWidth) {
                this.toolPopupRect.right = 10;
              }
              this.showToolPopup = this.showToolPopup !== id ? id : "";
              if (this.showToolPopup === "") {
                this.toolPopupRect = {};
              }
            }
          ).exec();
        }).exec();
      },
      // 显示插入块元素工具栏
      showInsertBlockView() {
        this.editorCtx.blur();
        uni.hideKeyboard();
        this.showToolSettingMask = true;
        this.showInsertBlockToolSetting = true;
        this.showToolPopup = false;
        this.toolPopupRect = {};
      },
      // 关闭插入块元素工具栏
      closeToolSetting() {
        this.showToolSettingMask = false;
        this.showInsertBlockToolSetting = false;
      },
      // 编辑器辑器状态改变时触发
      onStatusChange(e) {
        this.formats = e.detail;
      },
      // 编辑器获取焦点时触发
      onEditorFocus() {
        this.showFooterToolBar = true;
      },
      // 编辑器失去焦点时触发
      onEditorBlur() {
        this.updatePosition(0);
        this.showFooterToolBar = false;
      },
      // 手动隐藏键盘
      hideKeyboard() {
        this.editorCtx.blur();
      },
      // 设置编辑器格式
      format(name, value) {
        if (!name || !this.editorCtx)
          return;
        switch (name) {
          case "hr":
            this.editorCtx.insertDivider();
            break;
          case "undo":
            this.editorCtx.undo();
            break;
          case "redo":
            this.editorCtx.redo();
            break;
          case "link":
            this.editorCtx.insertText({
              text: `[${value.text}](${value.link})`
            });
            break;
          case "space-both":
            this.editorCtx.format("marginLeft", value);
            this.editorCtx.format("marginRight", value);
            break;
          case "format-clear":
            this.editorCtx.removeFormat();
            break;
          case "image":
            this.editorCtx.insertImage(value);
            break;
          case "unlockContent":
            const isExist = document.querySelector(".ql-unlock-content");
            if (isExist) {
              uni.showModal({
                content: "付费解锁不允许重新插入",
                showCancel: false
              });
              return;
            }
            this.editorCtx.insertUnlockContent(value);
            break;
          case "ai":
            this.showImChat = !this.showImChat;
            break;
          case "mediaVideo":
            break;
          default:
            this.editorCtx.format(name, value);
            break;
        }
        setTimeout(() => this.editorCtx.scrollIntoView(), 100);
      },
      // 获取编辑器所选内容的格式
      getFormat(range2) {
        this.formats = range2 ? this.editorCtx.getFormat(range2) : {};
        return this.formats;
      },
      // 复制图片进入编辑器上传
      uploadHandlerForH5({
        blob,
        ext,
        size
      }, el) {
        return new Promise(async (resolve, reject) => {
          http$3.upload("common/imageUpload", {
            name: "file",
            filePath: blob
          }).then((res) => {
            formatAppLog("log", "at uni_modules/uni-cms/components/editor/editor.vue:578", res);
            const result = JSON.parse(res.data);
            if (result.code === 200) {
              formatAppLog("log", "at uni_modules/uni-cms/components/editor/editor.vue:581", result.data.url);
              resolve(result.data.url);
            }
          }).catch((err) => {
            Quill && Quill.find(el).deleteAt(0);
          });
        });
      },
      onInsertImage(selectMediaItems) {
        const image = selectMediaItems[0];
        this.$refs.insertImageDrawer.close();
        this.format("image", {
          src: image.src,
          data: {
            source: image.src
          }
        });
        setTimeout(() => this.editorCtx.scrollIntoView(), 0);
      },
      uploadEditorImage({
        filePath,
        fileExt,
        size
      }) {
      },
      // 在移动端插入超链接
      showLinkPopup(link) {
        this.currentLink.url = link;
        this.hideKeyboard();
        this.$refs.popup.open();
      },
      // 插入超链接
      linkChange() {
        if (!this.currentLink.url)
          return;
        this.format("link", {
          text: this.currentLink.title || this.currentLink.url,
          link: this.currentLink.url
        });
        this.$refs.popup.close();
      }
    }
  };
  function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_web_editor = vue.resolveComponent("web-editor");
    const _component_tool_undo = vue.resolveComponent("tool-undo");
    const _component_tool_redo = vue.resolveComponent("tool-redo");
    const _component_tool_format_clear = vue.resolveComponent("tool-format-clear");
    const _component_tool_header = vue.resolveComponent("tool-header");
    const _component_tool_font_size = vue.resolveComponent("tool-font-size");
    const _component_tool_bold = vue.resolveComponent("tool-bold");
    const _component_tool_italic = vue.resolveComponent("tool-italic");
    const _component_tool_strike = vue.resolveComponent("tool-strike");
    const _component_tool_underline = vue.resolveComponent("tool-underline");
    const _component_tool_link = vue.resolveComponent("tool-link");
    const _component_tool_align = vue.resolveComponent("tool-align");
    const _component_tool_line_indent = vue.resolveComponent("tool-line-indent");
    const _component_tool_space_both = vue.resolveComponent("tool-space-both");
    const _component_tool_line_height = vue.resolveComponent("tool-line-height");
    const _component_tool_letter_space = vue.resolveComponent("tool-letter-space");
    const _component_tool_background = vue.resolveComponent("tool-background");
    const _component_tool_color = vue.resolveComponent("tool-color");
    const _component_tool_image = vue.resolveComponent("tool-image");
    const _component_tool_video = vue.resolveComponent("tool-video");
    const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0);
    const _component_uni_transition = resolveEasycom(vue.resolveDynamicComponent("uni-transition"), __easycom_1$2);
    const _component_uni_easyinput = resolveEasycom(vue.resolveDynamicComponent("uni-easyinput"), __easycom_2);
    const _component_uni_forms_item = resolveEasycom(vue.resolveDynamicComponent("uni-forms-item"), __easycom_3);
    const _component_uni_forms = resolveEasycom(vue.resolveDynamicComponent("uni-forms"), __easycom_4);
    const _component_uni_popup = resolveEasycom(vue.resolveDynamicComponent("uni-popup"), __easycom_5);
    const _component_uni_media_library = resolveEasycom(vue.resolveDynamicComponent("uni-media-library"), __easycom_6);
    const _component_uni_drawer = resolveEasycom(vue.resolveDynamicComponent("uni-drawer"), __easycom_7);
    return vue.openBlock(), vue.createElementBlock("view", { class: "editor-container" }, [
      vue.createElementVNode(
        "view",
        {
          class: "editor",
          style: vue.normalizeStyle({ height: $options.editorHeight <= 0 ? "auto" : `${$options.editorHeight}px` })
        },
        [
          vue.createVNode(_component_web_editor, {
            ref: "webEditor",
            id: "editor",
            onReady: $options.onEditorReady,
            onStatuschange: $options.onStatusChange,
            onTextchange: _cache[0] || (_cache[0] = (e) => _ctx.$emit("textchange", e)),
            showImgSize: "",
            showImgToolbar: "",
            showImgResize: "",
            "upload-handler": $options.uploadHandlerForH5,
            onFocus: $options.onEditorFocus,
            onBlur: $options.onEditorBlur
          }, null, 8, ["onReady", "onStatuschange", "upload-handler", "onFocus", "onBlur"])
        ],
        4
        /* STYLE */
      ),
      vue.createElementVNode("view", { class: "editor-toolbar" }, [
        vue.createElementVNode("view", { class: "editor-toolbar-box moto-flex-row-center" }, [
          vue.createVNode(_component_tool_undo, {
            onChange: _cache[1] || (_cache[1] = ({ type: type3, value }) => $options.format(type3, value)),
            disabled: !$data.showFooterToolBar
          }, null, 8, ["disabled"]),
          vue.createVNode(_component_tool_redo, {
            onChange: _cache[2] || (_cache[2] = ({ type: type3, value }) => $options.format(type3, value)),
            disabled: !$data.showFooterToolBar
          }, null, 8, ["disabled"]),
          vue.createVNode(_component_tool_format_clear, {
            onChange: _cache[3] || (_cache[3] = ({ type: type3, value }) => $options.format(type3, value)),
            disabled: !$data.showFooterToolBar
          }, null, 8, ["disabled"]),
          vue.createElementVNode("view", { class: "editor-toolbar-divider" }),
          vue.createVNode(_component_tool_header, {
            onChange: _cache[4] || (_cache[4] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.header,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_font_size, {
            onChange: _cache[5] || (_cache[5] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.fontSize,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_bold, {
            onChange: _cache[6] || (_cache[6] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.bold,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_italic, {
            onChange: _cache[7] || (_cache[7] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.italic,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_strike, {
            onChange: _cache[8] || (_cache[8] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.strike,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_underline, {
            onChange: _cache[9] || (_cache[9] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.underline,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_link, {
            onChange: _cache[10] || (_cache[10] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.link,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_align, {
            onChange: _cache[11] || (_cache[11] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.align,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createCommentVNode(' <tool-hr @change="({type, value}) => format(type, value)" :disabled="!showFooterToolBar"></tool-hr> '),
          vue.createCommentVNode(' <tool-list @change="({type, value}) => format(type, value)" :active="formats.list"\r\n					:disabled="!showFooterToolBar"></tool-list> '),
          vue.createVNode(_component_tool_line_indent, {
            onChange: _cache[12] || (_cache[12] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.textIndent,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_space_both, {
            onChange: _cache[13] || (_cache[13] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.marginLeft && $data.formats.marginRight,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_line_height, {
            onChange: _cache[14] || (_cache[14] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.lineHeight,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_letter_space, {
            onChange: _cache[15] || (_cache[15] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.letterSpacing,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createElementVNode("view", { class: "editor-toolbar-divider" }),
          vue.createVNode(_component_tool_background, {
            onChange: _cache[16] || (_cache[16] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.background,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createVNode(_component_tool_color, {
            onChange: _cache[17] || (_cache[17] = ({ type: type3, value }) => $options.format(type3, value)),
            active: $data.formats.color,
            disabled: !$data.showFooterToolBar
          }, null, 8, ["active", "disabled"]),
          vue.createElementVNode("view", { class: "editor-toolbar-divider" }),
          vue.createVNode(_component_tool_image, {
            getEditorContent: $options.getEditorContent,
            onChange: _cache[18] || (_cache[18] = ({ type: type3, value }) => $options.format(type3, value)),
            disabled: !$data.showFooterToolBar
          }, null, 8, ["getEditorContent", "disabled"]),
          vue.createVNode(_component_tool_video, {
            onChange: _cache[19] || (_cache[19] = ({ type: type3, value }) => $options.format(type3, value)),
            disabled: !$data.showFooterToolBar
          }, null, 8, ["disabled"]),
          vue.createCommentVNode(' <tool-unlock-content @change="({type, value}) => format(type, value)"\r\n					:disabled="!showFooterToolBar"></tool-unlock-content> '),
          vue.createCommentVNode(' <tool-ai @change="({type, value}) => format(type, value)" :active="showImChat"\r\n					:disabled="!showFooterToolBar"></tool-ai> ')
        ])
      ]),
      vue.createElementVNode("view", {
        class: "editor-toolbar m",
        hidden: !$data.showFooterToolBar,
        style: vue.normalizeStyle({ transform: `translateY(-${$data.keyboardHeight}px)` }),
        onTouchend: _cache[45] || (_cache[45] = vue.withModifiers(() => {
        }, ["stop"]))
      }, [
        vue.createElementVNode("view", { class: "editor-toolbar-tools" }, [
          vue.createElementVNode("view", {
            class: "tool",
            onClick: _cache[20] || (_cache[20] = (...args) => $options.showInsertBlockView && $options.showInsertBlockView(...args))
          }, [
            vue.createVNode(_component_uni_icons, {
              type: "plus",
              size: "60rpx"
            })
          ]),
          vue.createElementVNode("view", { class: "editor-toolbar-divider" }),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass({ tool: true, active: $data.showToolPopup === "m-tool-header" }),
              onClick: _cache[21] || (_cache[21] = ($event) => $options.showToolPopupView("m-tool-header")),
              id: "m-tool-header"
            },
            [
              vue.createVNode(_component_uni_icons, {
                "custom-prefix": "editor-icon",
                type: "icon-text-group",
                size: "54rpx"
              })
            ],
            2
            /* CLASS */
          ),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass({ tool: true, active: $data.showToolPopup === "m-tool-text" }),
              onClick: _cache[22] || (_cache[22] = ($event) => $options.showToolPopupView("m-tool-text")),
              id: "m-tool-text"
            },
            [
              vue.createVNode(_component_uni_icons, {
                "custom-prefix": "editor-icon",
                type: "icon-attr-group",
                size: "60rpx"
              })
            ],
            2
            /* CLASS */
          ),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass({ tool: true, active: $data.showToolPopup === "m-tool-align" }),
              onClick: _cache[23] || (_cache[23] = ($event) => $options.showToolPopupView("m-tool-align")),
              id: "m-tool-align"
            },
            [
              vue.createVNode(_component_uni_icons, {
                "custom-prefix": "editor-icon",
                type: "icon-align-left",
                size: "60rpx"
              })
            ],
            2
            /* CLASS */
          ),
          vue.createElementVNode(
            "view",
            {
              class: vue.normalizeClass({ tool: true, active: $data.formats.link }),
              onClick: _cache[24] || (_cache[24] = ($event) => $options.showLinkPopup($data.formats.link))
            },
            [
              vue.createVNode(_component_uni_icons, {
                "custom-prefix": "editor-icon",
                type: "icon-link",
                size: "60rpx"
              })
            ],
            2
            /* CLASS */
          ),
          vue.createElementVNode("view", {
            class: "tool",
            onClick: _cache[25] || (_cache[25] = () => _ctx.$refs.insertImageDrawer.open())
          }, [
            vue.createVNode(_component_uni_icons, {
              "custom-prefix": "editor-icon",
              type: "icon-image",
              size: "60rpx"
            })
          ]),
          vue.createElementVNode("view", {
            class: vue.normalizeClass({ tool: true }),
            onClick: _cache[26] || (_cache[26] = ($event) => $options.format("ai"))
          }, [
            vue.createVNode(_component_uni_icons, {
              "custom-prefix": "editor-icon",
              type: "icon-ai",
              size: "60rpx",
              color: "#b454ff"
            })
          ]),
          vue.createElementVNode("view", { class: "editor-toolbar-divider" }),
          vue.createElementVNode("view", {
            class: "tool hide-keyboard",
            onClick: _cache[27] || (_cache[27] = ($event) => $options.hideKeyboard())
          }, [
            vue.createVNode(_component_uni_icons, {
              "custom-prefix": "editor-icon",
              type: "icon-jianpan",
              size: "70rpx"
            })
          ])
        ]),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["editor-toolbar-popup", { show: $data.showToolPopup === "m-tool-header" }]),
            id: "m-tool-header-popup",
            style: vue.normalizeStyle({ left: `${$data.toolPopupRect.left}px`, right: `${$data.toolPopupRect.right}px` })
          },
          [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.header === 1 }),
                onClick: _cache[28] || (_cache[28] = ($event) => $options.format("header", 1))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-header1",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.header === 2 }),
                onClick: _cache[29] || (_cache[29] = ($event) => $options.format("header", 2))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-header2",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.header === 3 }),
                onClick: _cache[30] || (_cache[30] = ($event) => $options.format("header", 3))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-header3",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.header === 4 }),
                onClick: _cache[31] || (_cache[31] = ($event) => $options.format("header", 4))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-header4",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.header === 5 }),
                onClick: _cache[32] || (_cache[32] = ($event) => $options.format("header", 5))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-header5",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.header === 6 }),
                onClick: _cache[33] || (_cache[33] = ($event) => $options.format("header", 6))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-header6",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.list === "ordered" }),
                onClick: _cache[34] || (_cache[34] = ($event) => $options.format("list", "ordered"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-ul",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.list === "bullet" }),
                onClick: _cache[35] || (_cache[35] = ($event) => $options.format("list", "bullet"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-ol",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            )
          ],
          6
          /* CLASS, STYLE */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["editor-toolbar-popup", { show: $data.showToolPopup === "m-tool-text" }]),
            id: "m-tool-text-popup",
            style: vue.normalizeStyle({ left: `${$data.toolPopupRect.left}px`, right: `${$data.toolPopupRect.right}px` })
          },
          [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.bold }),
                onClick: _cache[36] || (_cache[36] = ($event) => $options.format("bold"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-bold",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.italic }),
                onClick: _cache[37] || (_cache[37] = ($event) => $options.format("italic"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-italic",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.underline }),
                onClick: _cache[38] || (_cache[38] = ($event) => $options.format("underline"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-underline",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.strike }),
                onClick: _cache[39] || (_cache[39] = ($event) => $options.format("strike"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-strike",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            )
          ],
          6
          /* CLASS, STYLE */
        ),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["editor-toolbar-popup", { show: $data.showToolPopup === "m-tool-align" }]),
            id: "m-tool-align-popup",
            style: vue.normalizeStyle({ left: `${$data.toolPopupRect.left}px`, right: `${$data.toolPopupRect.right}px` })
          },
          [
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.indent }),
                onClick: _cache[40] || (_cache[40] = ($event) => $options.format("indent", $data.formats.indent ? "-1" : "+1"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-line-indent",
                  size: "48rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode("view", { class: "editor-toolbar-popup-divider" }),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.align === "left" }),
                onClick: _cache[41] || (_cache[41] = ($event) => $options.format("align", "left"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-align-left",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.align === "center" }),
                onClick: _cache[42] || (_cache[42] = ($event) => $options.format("align", "center"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-align-center",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.align === "right" }),
                onClick: _cache[43] || (_cache[43] = ($event) => $options.format("align", "right"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-align-right",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            ),
            vue.createElementVNode(
              "view",
              {
                class: vue.normalizeClass({ tool: true, active: $data.formats.align === "justify" }),
                onClick: _cache[44] || (_cache[44] = ($event) => $options.format("align", "justify"))
              },
              [
                vue.createVNode(_component_uni_icons, {
                  "custom-prefix": "editor-icon",
                  type: "icon-align-justify",
                  size: "60rpx"
                })
              ],
              2
              /* CLASS */
            )
          ],
          6
          /* CLASS, STYLE */
        )
      ], 44, ["hidden"]),
      vue.createVNode(_component_uni_transition, {
        "mode-class": ["slide-bottom", "fade"],
        show: $data.showInsertBlockToolSetting,
        class: "tool-setting"
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", null, [
            vue.createElementVNode("view", { class: "tool-setting-header" }, [
              vue.createElementVNode("view", {
                class: "close",
                onClick: _cache[46] || (_cache[46] = (...args) => $options.closeToolSetting && $options.closeToolSetting(...args))
              }, [
                vue.createVNode(_component_uni_icons, {
                  type: "closeempty",
                  size: "40rpx",
                  class: "icon"
                })
              ]),
              vue.createElementVNode("text", null, "添加")
            ]),
            vue.createElementVNode("view", { class: "body insert-block" }, [
              vue.createElementVNode("view", {
                class: "item",
                onClick: _cache[47] || (_cache[47] = () => _ctx.$refs.insertImageDrawer.open())
              }, [
                vue.createElementVNode("view", { class: "icon" }, [
                  vue.createVNode(_component_uni_icons, {
                    "custom-prefix": "editor-icon",
                    type: "icon-image",
                    size: "70rpx"
                  })
                ]),
                vue.createElementVNode("text", { class: "text" }, "图片")
              ]),
              vue.createElementVNode("view", {
                class: "item",
                onClick: _cache[48] || (_cache[48] = ($event) => $options.format("hr"))
              }, [
                vue.createElementVNode("view", { class: "icon" }, [
                  vue.createVNode(_component_uni_icons, {
                    "custom-prefix": "editor-icon",
                    type: "icon-hr",
                    size: "70rpx"
                  })
                ]),
                vue.createElementVNode("text", { class: "text" }, "分割线")
              ])
            ])
          ])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["show"]),
      vue.createVNode(_component_uni_transition, { show: $data.showToolSettingMask }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", { class: "tool-setting-mask" })
        ]),
        _: 1
        /* STABLE */
      }, 8, ["show"]),
      vue.createVNode(
        _component_uni_popup,
        {
          ref: "popup",
          type: "center"
        },
        {
          default: vue.withCtx(() => [
            vue.createElementVNode(
              "view",
              {
                class: "popup-body",
                onTouchend: _cache[53] || (_cache[53] = vue.withModifiers(() => {
                }, ["stop"]))
              },
              [
                vue.createElementVNode("view", { class: "tip" }, [
                  vue.createElementVNode("text", null, "由于平台限制，插入超链接将转换为Markdown格式，不影响内容展示")
                ]),
                vue.createVNode(_component_uni_forms, { "label-width": "90px" }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_uni_forms_item, {
                      label: "链接名称",
                      name: "link"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_uni_easyinput, {
                          modelValue: $data.currentLink.title,
                          "onUpdate:modelValue": _cache[49] || (_cache[49] = ($event) => $data.currentLink.title = $event)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_uni_forms_item, {
                      label: "链接地址",
                      name: "link"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_uni_easyinput, {
                          modelValue: $data.currentLink.url,
                          "onUpdate:modelValue": _cache[50] || (_cache[50] = ($event) => $data.currentLink.url = $event)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createElementVNode("view", { class: "popup-body-btn-group" }, [
                  vue.createElementVNode("button", {
                    class: "btn",
                    size: "mini",
                    onClick: _cache[51] || (_cache[51] = ($event) => _ctx.$refs.popup.close())
                  }, "取消"),
                  vue.createElementVNode("button", {
                    class: "btn",
                    size: "mini",
                    type: "primary",
                    onClick: _cache[52] || (_cache[52] = (...args) => $options.linkChange && $options.linkChange(...args))
                  }, "确定")
                ])
              ],
              32
              /* NEED_HYDRATION */
            )
          ]),
          _: 1
          /* STABLE */
        },
        512
        /* NEED_PATCH */
      ),
      vue.createElementVNode("view", {
        class: "uni-im-chat-components",
        hidden: !$data.showImChat
      }, [
        vue.createElementVNode("view", { class: "close-bar" }, [
          vue.createElementVNode("view", { class: "head" }, [
            vue.createElementVNode("text", { class: "title" }, "uni-ai-chat"),
            vue.createElementVNode("text", { class: "desc" }, "输入prompt提示词后AI根据你的输入生成文章")
          ]),
          vue.createElementVNode("view", {
            class: "close",
            onClick: _cache[54] || (_cache[54] = ($event) => $data.showImChat = false)
          }, [
            vue.createVNode(_component_uni_icons, {
              type: "closeempty",
              size: "40rpx",
              class: "icon"
            })
          ])
        ]),
        vue.createCommentVNode(' 	<uni-im-chat ref="uniImChat"></uni-im-chat> ')
      ], 8, ["hidden"]),
      $data.drawerWidth ? (vue.openBlock(), vue.createBlock(_component_uni_drawer, {
        key: 0,
        class: "insert-image-drawer",
        ref: "insertImageDrawer",
        mode: "right",
        width: $data.drawerWidth
      }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_uni_media_library, {
            mode: "picker",
            "selected-count": 1,
            "media-tabs": ["image"],
            onOnInsert: $options.onInsertImage
          }, null, 8, ["onOnInsert"])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["width"])) : vue.createCommentVNode("v-if", true)
    ]);
  }
  const editorComponent = /* @__PURE__ */ _export_sfc$1(_sfc_main$2D, [["render", _sfc_render$B], ["__scopeId", "data-v-e12c4750"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/uni_modules/uni-cms/components/editor/editor.vue"]]);
  var lodash = { exports: {} };
  /**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   */
  lodash.exports;
  (function(module2, exports2) {
    (function() {
      var undefined$12;
      var VERSION = "4.17.21";
      var LARGE_ARRAY_SIZE2 = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT2 = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
      var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE2 = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG2 = 1, CLONE_FLAT_FLAG2 = 2, CLONE_SYMBOLS_FLAG2 = 4;
      var COMPARE_PARTIAL_FLAG2 = 1, COMPARE_UNORDERED_FLAG2 = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT2 = 800, HOT_SPAN2 = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY2 = 1 / 0, MAX_SAFE_INTEGER2 = 9007199254740991, MAX_INTEGER2 = 17976931348623157e292, NAN2 = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [
        ["ary", WRAP_ARY_FLAG],
        ["bind", WRAP_BIND_FLAG],
        ["bindKey", WRAP_BIND_KEY_FLAG],
        ["curry", WRAP_CURRY_FLAG],
        ["curryRight", WRAP_CURRY_RIGHT_FLAG],
        ["flip", WRAP_FLIP_FLAG],
        ["partial", WRAP_PARTIAL_FLAG],
        ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
        ["rearg", WRAP_REARG_FLAG]
      ];
      var argsTag2 = "[object Arguments]", arrayTag2 = "[object Array]", asyncTag2 = "[object AsyncFunction]", boolTag2 = "[object Boolean]", dateTag2 = "[object Date]", domExcTag = "[object DOMException]", errorTag2 = "[object Error]", funcTag2 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag2 = "[object Map]", numberTag2 = "[object Number]", nullTag2 = "[object Null]", objectTag2 = "[object Object]", promiseTag2 = "[object Promise]", proxyTag2 = "[object Proxy]", regexpTag2 = "[object RegExp]", setTag2 = "[object Set]", stringTag2 = "[object String]", symbolTag2 = "[object Symbol]", undefinedTag2 = "[object Undefined]", weakMapTag2 = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag2 = "[object ArrayBuffer]", dataViewTag2 = "[object DataView]", float32Tag2 = "[object Float32Array]", float64Tag2 = "[object Float64Array]", int8Tag2 = "[object Int8Array]", int16Tag2 = "[object Int16Array]", int32Tag2 = "[object Int32Array]", uint8Tag2 = "[object Uint8Array]", uint8ClampedTag2 = "[object Uint8ClampedArray]", uint16Tag2 = "[object Uint16Array]", uint32Tag2 = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp2 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp2 = /^\w*$/, rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar2.source);
      var reTrimStart2 = /^\s+/;
      var reWhitespace2 = /\s/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
      var reEscapeChar2 = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags2 = /\w*$/;
      var reIsBadHex2 = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary2 = /^0b[01]+$/i;
      var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
      var reIsOctal2 = /^0o[0-7]+$/i;
      var reIsUint2 = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([
        rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
        rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
        rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
        rsUpper + "+" + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
      ].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = [
        "Array",
        "Buffer",
        "DataView",
        "Date",
        "Error",
        "Float32Array",
        "Float64Array",
        "Function",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Map",
        "Math",
        "Object",
        "Promise",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "TypeError",
        "Uint8Array",
        "Uint8ClampedArray",
        "Uint16Array",
        "Uint32Array",
        "WeakMap",
        "_",
        "clearTimeout",
        "isFinite",
        "parseInt",
        "setTimeout"
      ];
      var templateCounter = -1;
      var typedArrayTags2 = {};
      typedArrayTags2[float32Tag2] = typedArrayTags2[float64Tag2] = typedArrayTags2[int8Tag2] = typedArrayTags2[int16Tag2] = typedArrayTags2[int32Tag2] = typedArrayTags2[uint8Tag2] = typedArrayTags2[uint8ClampedTag2] = typedArrayTags2[uint16Tag2] = typedArrayTags2[uint32Tag2] = true;
      typedArrayTags2[argsTag2] = typedArrayTags2[arrayTag2] = typedArrayTags2[arrayBufferTag2] = typedArrayTags2[boolTag2] = typedArrayTags2[dataViewTag2] = typedArrayTags2[dateTag2] = typedArrayTags2[errorTag2] = typedArrayTags2[funcTag2] = typedArrayTags2[mapTag2] = typedArrayTags2[numberTag2] = typedArrayTags2[objectTag2] = typedArrayTags2[regexpTag2] = typedArrayTags2[setTag2] = typedArrayTags2[stringTag2] = typedArrayTags2[weakMapTag2] = false;
      var cloneableTags2 = {};
      cloneableTags2[argsTag2] = cloneableTags2[arrayTag2] = cloneableTags2[arrayBufferTag2] = cloneableTags2[dataViewTag2] = cloneableTags2[boolTag2] = cloneableTags2[dateTag2] = cloneableTags2[float32Tag2] = cloneableTags2[float64Tag2] = cloneableTags2[int8Tag2] = cloneableTags2[int16Tag2] = cloneableTags2[int32Tag2] = cloneableTags2[mapTag2] = cloneableTags2[numberTag2] = cloneableTags2[objectTag2] = cloneableTags2[regexpTag2] = cloneableTags2[setTag2] = cloneableTags2[stringTag2] = cloneableTags2[symbolTag2] = cloneableTags2[uint8Tag2] = cloneableTags2[uint8ClampedTag2] = cloneableTags2[uint16Tag2] = cloneableTags2[uint32Tag2] = true;
      cloneableTags2[errorTag2] = cloneableTags2[funcTag2] = cloneableTags2[weakMapTag2] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        "À": "A",
        "Á": "A",
        "Â": "A",
        "Ã": "A",
        "Ä": "A",
        "Å": "A",
        "à": "a",
        "á": "a",
        "â": "a",
        "ã": "a",
        "ä": "a",
        "å": "a",
        "Ç": "C",
        "ç": "c",
        "Ð": "D",
        "ð": "d",
        "È": "E",
        "É": "E",
        "Ê": "E",
        "Ë": "E",
        "è": "e",
        "é": "e",
        "ê": "e",
        "ë": "e",
        "Ì": "I",
        "Í": "I",
        "Î": "I",
        "Ï": "I",
        "ì": "i",
        "í": "i",
        "î": "i",
        "ï": "i",
        "Ñ": "N",
        "ñ": "n",
        "Ò": "O",
        "Ó": "O",
        "Ô": "O",
        "Õ": "O",
        "Ö": "O",
        "Ø": "O",
        "ò": "o",
        "ó": "o",
        "ô": "o",
        "õ": "o",
        "ö": "o",
        "ø": "o",
        "Ù": "U",
        "Ú": "U",
        "Û": "U",
        "Ü": "U",
        "ù": "u",
        "ú": "u",
        "û": "u",
        "ü": "u",
        "Ý": "Y",
        "ý": "y",
        "ÿ": "y",
        "Æ": "Ae",
        "æ": "ae",
        "Þ": "Th",
        "þ": "th",
        "ß": "ss",
        // Latin Extended-A block.
        "Ā": "A",
        "Ă": "A",
        "Ą": "A",
        "ā": "a",
        "ă": "a",
        "ą": "a",
        "Ć": "C",
        "Ĉ": "C",
        "Ċ": "C",
        "Č": "C",
        "ć": "c",
        "ĉ": "c",
        "ċ": "c",
        "č": "c",
        "Ď": "D",
        "Đ": "D",
        "ď": "d",
        "đ": "d",
        "Ē": "E",
        "Ĕ": "E",
        "Ė": "E",
        "Ę": "E",
        "Ě": "E",
        "ē": "e",
        "ĕ": "e",
        "ė": "e",
        "ę": "e",
        "ě": "e",
        "Ĝ": "G",
        "Ğ": "G",
        "Ġ": "G",
        "Ģ": "G",
        "ĝ": "g",
        "ğ": "g",
        "ġ": "g",
        "ģ": "g",
        "Ĥ": "H",
        "Ħ": "H",
        "ĥ": "h",
        "ħ": "h",
        "Ĩ": "I",
        "Ī": "I",
        "Ĭ": "I",
        "Į": "I",
        "İ": "I",
        "ĩ": "i",
        "ī": "i",
        "ĭ": "i",
        "į": "i",
        "ı": "i",
        "Ĵ": "J",
        "ĵ": "j",
        "Ķ": "K",
        "ķ": "k",
        "ĸ": "k",
        "Ĺ": "L",
        "Ļ": "L",
        "Ľ": "L",
        "Ŀ": "L",
        "Ł": "L",
        "ĺ": "l",
        "ļ": "l",
        "ľ": "l",
        "ŀ": "l",
        "ł": "l",
        "Ń": "N",
        "Ņ": "N",
        "Ň": "N",
        "Ŋ": "N",
        "ń": "n",
        "ņ": "n",
        "ň": "n",
        "ŋ": "n",
        "Ō": "O",
        "Ŏ": "O",
        "Ő": "O",
        "ō": "o",
        "ŏ": "o",
        "ő": "o",
        "Ŕ": "R",
        "Ŗ": "R",
        "Ř": "R",
        "ŕ": "r",
        "ŗ": "r",
        "ř": "r",
        "Ś": "S",
        "Ŝ": "S",
        "Ş": "S",
        "Š": "S",
        "ś": "s",
        "ŝ": "s",
        "ş": "s",
        "š": "s",
        "Ţ": "T",
        "Ť": "T",
        "Ŧ": "T",
        "ţ": "t",
        "ť": "t",
        "ŧ": "t",
        "Ũ": "U",
        "Ū": "U",
        "Ŭ": "U",
        "Ů": "U",
        "Ű": "U",
        "Ų": "U",
        "ũ": "u",
        "ū": "u",
        "ŭ": "u",
        "ů": "u",
        "ű": "u",
        "ų": "u",
        "Ŵ": "W",
        "ŵ": "w",
        "Ŷ": "Y",
        "ŷ": "y",
        "Ÿ": "Y",
        "Ź": "Z",
        "Ż": "Z",
        "Ž": "Z",
        "ź": "z",
        "ż": "z",
        "ž": "z",
        "Ĳ": "IJ",
        "ĳ": "ij",
        "Œ": "Oe",
        "œ": "oe",
        "ŉ": "'n",
        "ſ": "s"
      };
      var htmlEscapes = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;"
      };
      var htmlUnescapes = {
        "&amp;": "&",
        "&lt;": "<",
        "&gt;": ">",
        "&quot;": '"',
        "&#39;": "'"
      };
      var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var freeParseFloat = parseFloat, freeParseInt2 = parseInt;
      var freeGlobal2 = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
      var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
      var freeExports2 = exports2 && !exports2.nodeType && exports2;
      var freeModule2 = freeExports2 && true && module2 && !module2.nodeType && module2;
      var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
      var freeProcess2 = moduleExports2 && freeGlobal2.process;
      var nodeUtil2 = function() {
        try {
          var types2 = freeModule2 && freeModule2.require && freeModule2.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil2 && nodeUtil2.isArrayBuffer, nodeIsDate = nodeUtil2 && nodeUtil2.isDate, nodeIsMap2 = nodeUtil2 && nodeUtil2.isMap, nodeIsRegExp = nodeUtil2 && nodeUtil2.isRegExp, nodeIsSet2 = nodeUtil2 && nodeUtil2.isSet, nodeIsTypedArray2 = nodeUtil2 && nodeUtil2.isTypedArray;
      function apply2(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          var value = array[index];
          setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
      }
      function arrayEach2(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (iteratee(array[index], index, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while (length--) {
          if (iteratee(array[length], length, array) === false) {
            break;
          }
        }
        return array;
      }
      function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (!predicate(array[index], index, array)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter2(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes2(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf2(array, value, 0) > -1;
      }
      function arrayIncludesWith2(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap2(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }
        return result;
      }
      function arrayPush2(array, values) {
        var index = -1, length = values.length, offset2 = array.length;
        while (++index < length) {
          array[offset2 + index] = values[index];
        }
        return array;
      }
      function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[++index];
        }
        while (++index < length) {
          accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
      }
      function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) {
          accumulator = array[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
      }
      function arraySome2(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while (++index < length) {
          if (predicate(array[index], index, array)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty2("length");
      function asciiToArray(string2) {
        return string2.split("");
      }
      function asciiWords(string2) {
        return string2.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex2(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }
        return -1;
      }
      function baseIndexOf2(array, value, fromIndex) {
        return value === value ? strictIndexOf2(array, value, fromIndex) : baseFindIndex2(array, baseIsNaN2, fromIndex);
      }
      function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (comparator(array[index], value)) {
            return index;
          }
        }
        return -1;
      }
      function baseIsNaN2(value) {
        return value !== value;
      }
      function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN2;
      }
      function baseProperty2(key) {
        return function(object) {
          return object == null ? undefined$12 : object[key];
        };
      }
      function basePropertyOf(object) {
        return function(key) {
          return object == null ? undefined$12 : object[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
          array[length] = array[length].value;
        }
        return array;
      }
      function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
          var current = iteratee(array[index]);
          if (current !== undefined$12) {
            result = result === undefined$12 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes2(n2, iteratee) {
        var index = -1, result = Array(n2);
        while (++index < n2) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseToPairs(object, props2) {
        return arrayMap2(props2, function(key) {
          return [key, object[key]];
        });
      }
      function baseTrim2(string2) {
        return string2 ? string2.slice(0, trimmedEndIndex2(string2) + 1).replace(reTrimStart2, "") : string2;
      }
      function baseUnary2(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object, props2) {
        return arrayMap2(props2, function(key) {
          return object[key];
        });
      }
      function cacheHas2(cache2, key) {
        return cache2.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf2(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf2(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
      }
      function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
          if (array[length] === placeholder) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue2(object, key) {
        return object == null ? undefined$12 : object[key];
      }
      function hasUnicode(string2) {
        return reHasUnicode.test(string2);
      }
      function hasUnicodeWord(string2) {
        return reHasUnicodeWord.test(string2);
      }
      function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray2(map2) {
        var index = -1, result = Array(map2.size);
        map2.forEach(function(value, key) {
          result[++index] = [key, value];
        });
        return result;
      }
      function overArg2(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
          var value = array[index];
          if (value === placeholder || value === PLACEHOLDER) {
            array[index] = PLACEHOLDER;
            result[resIndex++] = index;
          }
        }
        return result;
      }
      function setToArray2(set2) {
        var index = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index] = value;
        });
        return result;
      }
      function setToPairs(set2) {
        var index = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index] = [value, value];
        });
        return result;
      }
      function strictIndexOf2(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while (index--) {
          if (array[index] === value) {
            return index;
          }
        }
        return index;
      }
      function stringSize(string2) {
        return hasUnicode(string2) ? unicodeSize(string2) : asciiSize(string2);
      }
      function stringToArray(string2) {
        return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
      }
      function trimmedEndIndex2(string2) {
        var index = string2.length;
        while (index-- && reWhitespace2.test(string2.charAt(index))) {
        }
        return index;
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string2) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string2)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string2) {
        return string2.match(reUnicode) || [];
      }
      function unicodeWords(string2) {
        return string2.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root2 : _2.defaults(root2.Object(), context, _2.pick(root2, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto2 = Array2.prototype, funcProto2 = Function2.prototype, objectProto2 = Object2.prototype;
        var coreJsData2 = context["__core-js_shared__"];
        var funcToString2 = funcProto2.toString;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey2 = function() {
          var uid2 = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
          return uid2 ? "Symbol(src)_1." + uid2 : "";
        }();
        var nativeObjectToString2 = objectProto2.toString;
        var objectCtorString2 = funcToString2.call(Object2);
        var oldDash = root2._;
        var reIsNative2 = RegExp2(
          "^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
        );
        var Buffer2 = moduleExports2 ? context.Buffer : undefined$12, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe2 = Buffer2 ? Buffer2.allocUnsafe : undefined$12, getPrototype2 = overArg2(Object2.getPrototypeOf, Object2), objectCreate2 = Object2.create, propertyIsEnumerable2 = objectProto2.propertyIsEnumerable, splice2 = arrayProto2.splice, spreadableSymbol2 = Symbol2 ? Symbol2.isConcatSpreadable : undefined$12, symIterator = Symbol2 ? Symbol2.iterator : undefined$12, symToStringTag2 = Symbol2 ? Symbol2.toStringTag : undefined$12;
        var defineProperty2 = function() {
          try {
            var func = getNative2(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root2.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root2.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root2.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols2 = Object2.getOwnPropertySymbols, nativeIsBuffer2 = Buffer2 ? Buffer2.isBuffer : undefined$12, nativeIsFinite = context.isFinite, nativeJoin = arrayProto2.join, nativeKeys2 = overArg2(Object2.keys, Object2), nativeMax2 = Math2.max, nativeMin2 = Math2.min, nativeNow2 = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto2.reverse;
        var DataView2 = getNative2(context, "DataView"), Map2 = getNative2(context, "Map"), Promise2 = getNative2(context, "Promise"), Set2 = getNative2(context, "Set"), WeakMap2 = getNative2(context, "WeakMap"), nativeCreate2 = getNative2(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString2 = toSource2(DataView2), mapCtorString2 = toSource2(Map2), promiseCtorString2 = toSource2(Promise2), setCtorString2 = toSource2(Set2), weakMapCtorString2 = toSource2(WeakMap2);
        var symbolProto2 = Symbol2 ? Symbol2.prototype : undefined$12, symbolValueOf2 = symbolProto2 ? symbolProto2.valueOf : undefined$12, symbolToString2 = symbolProto2 ? symbolProto2.toString : undefined$12;
        function lodash2(value) {
          if (isObjectLike2(value) && !isArray2(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty2.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate2 = /* @__PURE__ */ function() {
          function object() {
          }
          return function(proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate2) {
              return objectCreate2(proto);
            }
            object.prototype = proto;
            var result2 = new object();
            object.prototype = undefined$12;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined$12;
        }
        lodash2.templateSettings = {
          /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "escape": reEscape,
          /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "evaluate": reEvaluate,
          /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */
          "interpolate": reInterpolate,
          /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */
          "variable": "",
          /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */
          "imports": {
            /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */
            "_": lodash2
          }
        };
        lodash2.prototype = baseLodash.prototype;
        lodash2.prototype.constructor = lodash2;
        LodashWrapper.prototype = baseCreate2(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray2(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray2(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray2(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end2 = view.end, length = end2 - start, index = isRight ? end2 : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin2(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index += dir;
              var iterIndex = -1, value = array[index];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type3 = data.type, computed = iteratee2(value);
                if (type3 == LAZY_MAP_FLAG) {
                  value = computed;
                } else if (!computed) {
                  if (type3 == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate2(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash2(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear2() {
          this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
          this.size = 0;
        }
        function hashDelete2(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet2(key) {
          var data = this.__data__;
          if (nativeCreate2) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED2 ? undefined$12 : result2;
          }
          return hasOwnProperty2.call(data, key) ? data[key] : undefined$12;
        }
        function hashHas2(key) {
          var data = this.__data__;
          return nativeCreate2 ? data[key] !== undefined$12 : hasOwnProperty2.call(data, key);
        }
        function hashSet2(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate2 && value === undefined$12 ? HASH_UNDEFINED2 : value;
          return this;
        }
        Hash2.prototype.clear = hashClear2;
        Hash2.prototype["delete"] = hashDelete2;
        Hash2.prototype.get = hashGet2;
        Hash2.prototype.has = hashHas2;
        Hash2.prototype.set = hashSet2;
        function ListCache2(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear2() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete2(key) {
          var data = this.__data__, index = assocIndexOf2(data, key);
          if (index < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index == lastIndex) {
            data.pop();
          } else {
            splice2.call(data, index, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet2(key) {
          var data = this.__data__, index = assocIndexOf2(data, key);
          return index < 0 ? undefined$12 : data[index][1];
        }
        function listCacheHas2(key) {
          return assocIndexOf2(this.__data__, key) > -1;
        }
        function listCacheSet2(key, value) {
          var data = this.__data__, index = assocIndexOf2(data, key);
          if (index < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index][1] = value;
          }
          return this;
        }
        ListCache2.prototype.clear = listCacheClear2;
        ListCache2.prototype["delete"] = listCacheDelete2;
        ListCache2.prototype.get = listCacheGet2;
        ListCache2.prototype.has = listCacheHas2;
        ListCache2.prototype.set = listCacheSet2;
        function MapCache2(entries) {
          var index = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear2() {
          this.size = 0;
          this.__data__ = {
            "hash": new Hash2(),
            "map": new (Map2 || ListCache2)(),
            "string": new Hash2()
          };
        }
        function mapCacheDelete2(key) {
          var result2 = getMapData2(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet2(key) {
          return getMapData2(this, key).get(key);
        }
        function mapCacheHas2(key) {
          return getMapData2(this, key).has(key);
        }
        function mapCacheSet2(key, value) {
          var data = getMapData2(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache2.prototype.clear = mapCacheClear2;
        MapCache2.prototype["delete"] = mapCacheDelete2;
        MapCache2.prototype.get = mapCacheGet2;
        MapCache2.prototype.has = mapCacheHas2;
        MapCache2.prototype.set = mapCacheSet2;
        function SetCache2(values2) {
          var index = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache2();
          while (++index < length) {
            this.add(values2[index]);
          }
        }
        function setCacheAdd2(value) {
          this.__data__.set(value, HASH_UNDEFINED2);
          return this;
        }
        function setCacheHas2(value) {
          return this.__data__.has(value);
        }
        SetCache2.prototype.add = SetCache2.prototype.push = setCacheAdd2;
        SetCache2.prototype.has = setCacheHas2;
        function Stack2(entries) {
          var data = this.__data__ = new ListCache2(entries);
          this.size = data.size;
        }
        function stackClear2() {
          this.__data__ = new ListCache2();
          this.size = 0;
        }
        function stackDelete2(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet2(key) {
          return this.__data__.get(key);
        }
        function stackHas2(key) {
          return this.__data__.has(key);
        }
        function stackSet2(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache2) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE2 - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache2(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack2.prototype.clear = stackClear2;
        Stack2.prototype["delete"] = stackDelete2;
        Stack2.prototype.get = stackGet2;
        Stack2.prototype.has = stackHas2;
        Stack2.prototype.set = stackSet2;
        function arrayLikeKeys2(value, inherited) {
          var isArr = isArray2(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes2(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex2(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array) {
          var length = array.length;
          return length ? array[baseRandom(0, length - 1)] : undefined$12;
        }
        function arraySampleSize(array, n2) {
          return shuffleSelf(copyArray2(array), baseClamp(n2, 0, array.length));
        }
        function arrayShuffle(array) {
          return shuffleSelf(copyArray2(array));
        }
        function assignMergeValue2(object, key, value) {
          if (value !== undefined$12 && !eq2(object[key], value) || value === undefined$12 && !(key in object)) {
            baseAssignValue2(object, key, value);
          }
        }
        function assignValue2(object, key, value) {
          var objValue = object[key];
          if (!(hasOwnProperty2.call(object, key) && eq2(objValue, value)) || value === undefined$12 && !(key in object)) {
            baseAssignValue2(object, key, value);
          }
        }
        function assocIndexOf2(array, key) {
          var length = array.length;
          while (length--) {
            if (eq2(array[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter, iteratee2, accumulator) {
          baseEach2(collection, function(value, key, collection2) {
            setter(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign2(object, source) {
          return object && copyObject2(source, keys2(source), object);
        }
        function baseAssignIn2(object, source) {
          return object && copyObject2(source, keysIn2(source), object);
        }
        function baseAssignValue2(object, key, value) {
          if (key == "__proto__" && defineProperty2) {
            defineProperty2(object, key, {
              "configurable": true,
              "enumerable": true,
              "value": value,
              "writable": true
            });
          } else {
            object[key] = value;
          }
        }
        function baseAt(object, paths) {
          var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
          while (++index < length) {
            result2[index] = skip ? undefined$12 : get2(object, paths[index]);
          }
          return result2;
        }
        function baseClamp(number, lower, upper) {
          if (number === number) {
            if (upper !== undefined$12) {
              number = number <= upper ? number : upper;
            }
            if (lower !== undefined$12) {
              number = number >= lower ? number : lower;
            }
          }
          return number;
        }
        function baseClone2(value, bitmask, customizer, key, object, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG2, isFlat = bitmask & CLONE_FLAT_FLAG2, isFull = bitmask & CLONE_SYMBOLS_FLAG2;
          if (customizer) {
            result2 = object ? customizer(value, key, object, stack) : customizer(value);
          }
          if (result2 !== undefined$12) {
            return result2;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray2(value);
          if (isArr) {
            result2 = initCloneArray2(value);
            if (!isDeep) {
              return copyArray2(value, result2);
            }
          } else {
            var tag = getTag2(value), isFunc = tag == funcTag2 || tag == genTag2;
            if (isBuffer2(value)) {
              return cloneBuffer2(value, isDeep);
            }
            if (tag == objectTag2 || tag == argsTag2 || isFunc && !object) {
              result2 = isFlat || isFunc ? {} : initCloneObject2(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn2(value, baseAssignIn2(result2, value)) : copySymbols2(value, baseAssign2(result2, value));
              }
            } else {
              if (!cloneableTags2[tag]) {
                return object ? value : {};
              }
              result2 = initCloneByTag2(value, tag, isDeep);
            }
          }
          stack || (stack = new Stack2());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet2(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone2(subValue, bitmask, customizer, subValue, value, stack));
            });
          } else if (isMap2(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone2(subValue, bitmask, customizer, key2, value, stack));
            });
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn2 : getAllKeys2 : isFlat ? keysIn2 : keys2;
          var props2 = isArr ? undefined$12 : keysFunc(value);
          arrayEach2(props2 || value, function(subValue, key2) {
            if (props2) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue2(result2, key2, baseClone2(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props2 = keys2(source);
          return function(object) {
            return baseConformsTo(object, source, props2);
          };
        }
        function baseConformsTo(object, source, props2) {
          var length = props2.length;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (length--) {
            var key = props2[length], predicate = source[key], value = object[key];
            if (value === undefined$12 && !(key in object) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          return setTimeout2(function() {
            func.apply(undefined$12, args);
          }, wait);
        }
        function baseDifference(array, values2, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes2, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap2(values2, baseUnary2(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith2;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE2) {
            includes2 = cacheHas2;
            isCommon = false;
            values2 = new SetCache2(values2);
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach2 = createBaseEach2(baseForOwn2);
        var baseEachRight = createBaseEach2(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach2(collection, function(value, index, collection2) {
            result2 = !!predicate(value, index, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array, iteratee2, comparator) {
          var index = -1, length = array.length;
          while (++index < length) {
            var value = array[index], current = iteratee2(value);
            if (current != null && (computed === undefined$12 ? current === current && !isSymbol2(current) : comparator(current, computed))) {
              var computed = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array, value, start, end2) {
          var length = array.length;
          start = toInteger2(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end2 = end2 === undefined$12 || end2 > length ? length : toInteger2(end2);
          if (end2 < 0) {
            end2 += length;
          }
          end2 = start > end2 ? 0 : toLength(end2);
          while (start < end2) {
            array[start++] = value;
          }
          return array;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach2(collection, function(value, index, collection2) {
            if (predicate(value, index, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten2(array, depth, predicate, isStrict, result2) {
          var index = -1, length = array.length;
          predicate || (predicate = isFlattenable2);
          result2 || (result2 = []);
          while (++index < length) {
            var value = array[index];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten2(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush2(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor2 = createBaseFor2();
        var baseForRight = createBaseFor2(true);
        function baseForOwn2(object, iteratee2) {
          return object && baseFor2(object, iteratee2, keys2);
        }
        function baseForOwnRight(object, iteratee2) {
          return object && baseForRight(object, iteratee2, keys2);
        }
        function baseFunctions(object, props2) {
          return arrayFilter2(props2, function(key) {
            return isFunction2(object[key]);
          });
        }
        function baseGet2(object, path) {
          path = castPath2(path, object);
          var index = 0, length = path.length;
          while (object != null && index < length) {
            object = object[toKey2(path[index++])];
          }
          return index && index == length ? object : undefined$12;
        }
        function baseGetAllKeys2(object, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object);
          return isArray2(object) ? result2 : arrayPush2(result2, symbolsFunc(object));
        }
        function baseGetTag2(value) {
          if (value == null) {
            return value === undefined$12 ? undefinedTag2 : nullTag2;
          }
          return symToStringTag2 && symToStringTag2 in Object2(value) ? getRawTag2(value) : objectToString2(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object, key) {
          return object != null && hasOwnProperty2.call(object, key);
        }
        function baseHasIn2(object, key) {
          return object != null && key in Object2(object);
        }
        function baseInRange(number, start, end2) {
          return number >= nativeMin2(start, end2) && number < nativeMax2(start, end2);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith2 : arrayIncludes2, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array = arrays[othIndex];
            if (othIndex && iteratee2) {
              array = arrayMap2(array, baseUnary2(iteratee2));
            }
            maxLength = nativeMin2(array.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache2(othIndex && array) : undefined$12;
          }
          array = arrays[0];
          var index = -1, seen = caches[0];
          outer:
            while (++index < length && result2.length < maxLength) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas2(seen, computed) : includes2(result2, computed, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache2 = caches[othIndex];
                  if (!(cache2 ? cacheHas2(cache2, computed) : includes2(arrays[othIndex], computed, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object, setter, iteratee2, accumulator) {
          baseForOwn2(object, function(value, key, object3) {
            setter(accumulator, iteratee2(value), key, object3);
          });
          return accumulator;
        }
        function baseInvoke(object, path, args) {
          path = castPath2(path, object);
          object = parent2(object, path);
          var func = object == null ? object : object[toKey2(last2(path))];
          return func == null ? undefined$12 : apply2(func, object, args);
        }
        function baseIsArguments2(value) {
          return isObjectLike2(value) && baseGetTag2(value) == argsTag2;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike2(value) && baseGetTag2(value) == arrayBufferTag2;
        }
        function baseIsDate(value) {
          return isObjectLike2(value) && baseGetTag2(value) == dateTag2;
        }
        function baseIsEqual2(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep2(value, other, bitmask, customizer, baseIsEqual2, stack);
        }
        function baseIsEqualDeep2(object, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag2 : getTag2(object), othTag = othIsArr ? arrayTag2 : getTag2(other);
          objTag = objTag == argsTag2 ? objectTag2 : objTag;
          othTag = othTag == argsTag2 ? objectTag2 : othTag;
          var objIsObj = objTag == objectTag2, othIsObj = othTag == objectTag2, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer2(object)) {
            if (!isBuffer2(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack2());
            return objIsArr || isTypedArray2(object) ? equalArrays2(object, other, bitmask, customizer, equalFunc, stack) : equalByTag2(object, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG2)) {
            var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack2());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack2());
          return equalObjects2(object, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap2(value) {
          return isObjectLike2(value) && getTag2(value) == mapTag2;
        }
        function baseIsMatch2(object, source, matchData, customizer) {
          var index = matchData.length, length = index, noCustomizer = !customizer;
          if (object == null) {
            return !length;
          }
          object = Object2(object);
          while (index--) {
            var data = matchData[index];
            if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
              return false;
            }
          }
          while (++index < length) {
            data = matchData[index];
            var key = data[0], objValue = object[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined$12 && !(key in object)) {
                return false;
              }
            } else {
              var stack = new Stack2();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object, source, stack);
              }
              if (!(result2 === undefined$12 ? baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG2 | COMPARE_UNORDERED_FLAG2, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative2(value) {
          if (!isObject2(value) || isMasked2(value)) {
            return false;
          }
          var pattern3 = isFunction2(value) ? reIsNative2 : reIsHostCtor2;
          return pattern3.test(toSource2(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike2(value) && baseGetTag2(value) == regexpTag2;
        }
        function baseIsSet2(value) {
          return isObjectLike2(value) && getTag2(value) == setTag2;
        }
        function baseIsTypedArray2(value) {
          return isObjectLike2(value) && isLength2(value.length) && !!typedArrayTags2[baseGetTag2(value)];
        }
        function baseIteratee2(value) {
          if (typeof value == "function") {
            return value;
          }
          if (value == null) {
            return identity2;
          }
          if (typeof value == "object") {
            return isArray2(value) ? baseMatchesProperty2(value[0], value[1]) : baseMatches2(value);
          }
          return property2(value);
        }
        function baseKeys2(object) {
          if (!isPrototype2(object)) {
            return nativeKeys2(object);
          }
          var result2 = [];
          for (var key in Object2(object)) {
            if (hasOwnProperty2.call(object, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn2(object) {
          if (!isObject2(object)) {
            return nativeKeysIn2(object);
          }
          var isProto = isPrototype2(object), result2 = [];
          for (var key in object) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap2(collection, iteratee2) {
          var index = -1, result2 = isArrayLike2(collection) ? Array2(collection.length) : [];
          baseEach2(collection, function(value, key, collection2) {
            result2[++index] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches2(source) {
          var matchData = getMatchData2(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable2(matchData[0][0], matchData[0][1]);
          }
          return function(object) {
            return object === source || baseIsMatch2(object, source, matchData);
          };
        }
        function baseMatchesProperty2(path, srcValue) {
          if (isKey2(path) && isStrictComparable2(srcValue)) {
            return matchesStrictComparable2(toKey2(path), srcValue);
          }
          return function(object) {
            var objValue = get2(object, path);
            return objValue === undefined$12 && objValue === srcValue ? hasIn2(object, path) : baseIsEqual2(srcValue, objValue, COMPARE_PARTIAL_FLAG2 | COMPARE_UNORDERED_FLAG2);
          };
        }
        function baseMerge2(object, source, srcIndex, customizer, stack) {
          if (object === source) {
            return;
          }
          baseFor2(source, function(srcValue, key) {
            stack || (stack = new Stack2());
            if (isObject2(srcValue)) {
              baseMergeDeep2(object, source, key, srcIndex, baseMerge2, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet2(object, key), srcValue, key + "", object, source, stack) : undefined$12;
              if (newValue === undefined$12) {
                newValue = srcValue;
              }
              assignMergeValue2(object, key, newValue);
            }
          }, keysIn2);
        }
        function baseMergeDeep2(object, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet2(object, key), srcValue = safeGet2(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue2(object, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined$12;
          var isCommon = newValue === undefined$12;
          if (isCommon) {
            var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray2(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject2(objValue)) {
                newValue = copyArray2(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer2(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray2(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject2(srcValue) || isArguments2(srcValue)) {
              newValue = objValue;
              if (isArguments2(objValue)) {
                newValue = toPlainObject2(objValue);
              } else if (!isObject2(objValue) || isFunction2(objValue)) {
                newValue = initCloneObject2(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue2(object, key, newValue);
        }
        function baseNth(array, n2) {
          var length = array.length;
          if (!length) {
            return;
          }
          n2 += n2 < 0 ? length : 0;
          return isIndex2(n2, length) ? array[n2] : undefined$12;
        }
        function baseOrderBy(collection, iteratees, orders) {
          if (iteratees.length) {
            iteratees = arrayMap2(iteratees, function(iteratee2) {
              if (isArray2(iteratee2)) {
                return function(value) {
                  return baseGet2(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                };
              }
              return iteratee2;
            });
          } else {
            iteratees = [identity2];
          }
          var index = -1;
          iteratees = arrayMap2(iteratees, baseUnary2(getIteratee()));
          var result2 = baseMap2(collection, function(value, key, collection2) {
            var criteria = arrayMap2(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { "criteria": criteria, "index": ++index, "value": value };
          });
          return baseSortBy(result2, function(object, other) {
            return compareMultiple(object, other, orders);
          });
        }
        function basePick2(object, paths) {
          return basePickBy2(object, paths, function(value, path) {
            return hasIn2(object, path);
          });
        }
        function basePickBy2(object, paths, predicate) {
          var index = -1, length = paths.length, result2 = {};
          while (++index < length) {
            var path = paths[index], value = baseGet2(object, path);
            if (predicate(value, path)) {
              baseSet2(result2, castPath2(path, object), value);
            }
          }
          return result2;
        }
        function basePropertyDeep2(path) {
          return function(object) {
            return baseGet2(object, path);
          };
        }
        function basePullAll(array, values2, iteratee2, comparator) {
          var indexOf3 = comparator ? baseIndexOfWith : baseIndexOf2, index = -1, length = values2.length, seen = array;
          if (array === values2) {
            values2 = copyArray2(values2);
          }
          if (iteratee2) {
            seen = arrayMap2(array, baseUnary2(iteratee2));
          }
          while (++index < length) {
            var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf3(seen, computed, fromIndex, comparator)) > -1) {
              if (seen !== array) {
                splice2.call(seen, fromIndex, 1);
              }
              splice2.call(array, fromIndex, 1);
            }
          }
          return array;
        }
        function basePullAt(array, indexes) {
          var length = array ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index = indexes[length];
            if (length == lastIndex || index !== previous) {
              var previous = index;
              if (isIndex2(index)) {
                splice2.call(array, index, 1);
              } else {
                baseUnset2(array, index);
              }
            }
          }
          return array;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end2, step, fromRight) {
          var index = -1, length = nativeMax2(nativeCeil((end2 - start) / (step || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index] = start;
            start += step;
          }
          return result2;
        }
        function baseRepeat(string2, n2) {
          var result2 = "";
          if (!string2 || n2 < 1 || n2 > MAX_SAFE_INTEGER2) {
            return result2;
          }
          do {
            if (n2 % 2) {
              result2 += string2;
            }
            n2 = nativeFloor(n2 / 2);
            if (n2) {
              string2 += string2;
            }
          } while (n2);
          return result2;
        }
        function baseRest2(func, start) {
          return setToString2(overRest2(func, start, identity2), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n2) {
          var array = values(collection);
          return shuffleSelf(array, baseClamp(n2, 0, array.length));
        }
        function baseSet2(object, path, value, customizer) {
          if (!isObject2(object)) {
            return object;
          }
          path = castPath2(path, object);
          var index = -1, length = path.length, lastIndex = length - 1, nested = object;
          while (nested != null && ++index < length) {
            var key = toKey2(path[index]), newValue = value;
            if (key === "__proto__" || key === "constructor" || key === "prototype") {
              return object;
            }
            if (index != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined$12;
              if (newValue === undefined$12) {
                newValue = isObject2(objValue) ? objValue : isIndex2(path[index + 1]) ? [] : {};
              }
            }
            assignValue2(nested, key, newValue);
            nested = nested[key];
          }
          return object;
        }
        var baseSetData = !metaMap ? identity2 : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString2 = !defineProperty2 ? identity2 : function(func, string2) {
          return defineProperty2(func, "toString", {
            "configurable": true,
            "enumerable": false,
            "value": constant2(string2),
            "writable": true
          });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice2(array, start, end2) {
          var index = -1, length = array.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end2 = end2 > length ? length : end2;
          if (end2 < 0) {
            end2 += length;
          }
          length = start > end2 ? 0 : end2 - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index < length) {
            result2[index] = array[index + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach2(collection, function(value, index, collection2) {
            result2 = predicate(value, index, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array, value, retHighest) {
          var low = 0, high = array == null ? low : array.length;
          if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed = array[mid];
              if (computed !== null && !isSymbol2(computed) && (retHighest ? computed <= value : computed < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array, value, identity2, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee2, retHighest) {
          var low = 0, high = array == null ? 0 : array.length;
          if (high === 0) {
            return 0;
          }
          value = iteratee2(value);
          var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol2(value), valIsUndefined = value === undefined$12;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined$12, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol2(computed);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed <= value : computed < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin2(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array, iteratee2) {
          var index = -1, length = array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
            if (!index || !eq2(computed, seen)) {
              var seen = computed;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol2(value)) {
            return NAN2;
          }
          return +value;
        }
        function baseToString2(value) {
          if (typeof value == "string") {
            return value;
          }
          if (isArray2(value)) {
            return arrayMap2(value, baseToString2) + "";
          }
          if (isSymbol2(value)) {
            return symbolToString2 ? symbolToString2.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY2 ? "-0" : result2;
        }
        function baseUniq2(array, iteratee2, comparator) {
          var index = -1, includes2 = arrayIncludes2, length = array.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith2;
          } else if (length >= LARGE_ARRAY_SIZE2) {
            var set3 = iteratee2 ? null : createSet2(array);
            if (set3) {
              return setToArray2(set3);
            }
            isCommon = false;
            includes2 = cacheHas2;
            seen = new SetCache2();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed === computed) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed);
                }
                result2.push(value);
              } else if (!includes2(seen, computed, comparator)) {
                if (seen !== result2) {
                  seen.push(computed);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset2(object, path) {
          path = castPath2(path, object);
          object = parent2(object, path);
          return object == null || delete object[toKey2(last2(path))];
        }
        function baseUpdate(object, path, updater, customizer) {
          return baseSet2(object, path, updater(baseGet2(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
          var length = array.length, index = fromRight ? length : -1;
          while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
          }
          return isDrop ? baseSlice2(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice2(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush2([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq2(arrays[0]) : [];
          }
          var index = -1, result2 = Array2(length);
          while (++index < length) {
            var array = arrays[index], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index) {
                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq2(baseFlatten2(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props2, values2, assignFunc) {
          var index = -1, length = props2.length, valsLength = values2.length, result2 = {};
          while (++index < length) {
            var value = index < valsLength ? values2[index] : undefined$12;
            assignFunc(result2, props2[index], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject2(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value == "function" ? value : identity2;
        }
        function castPath2(value, object) {
          if (isArray2(value)) {
            return value;
          }
          return isKey2(value, object) ? [value] : stringToPath2(toString2(value));
        }
        var castRest = baseRest2;
        function castSlice(array, start, end2) {
          var length = array.length;
          end2 = end2 === undefined$12 ? length : end2;
          return !start && end2 >= length ? array : baseSlice2(array, start, end2);
        }
        var clearTimeout2 = ctxClearTimeout || function(id) {
          return root2.clearTimeout(id);
        };
        function cloneBuffer2(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe2 ? allocUnsafe2(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer2(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
          return result2;
        }
        function cloneDataView2(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer2(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp2(regexp) {
          var result2 = new regexp.constructor(regexp.source, reFlags2.exec(regexp));
          result2.lastIndex = regexp.lastIndex;
          return result2;
        }
        function cloneSymbol2(symbol) {
          return symbolValueOf2 ? Object2(symbolValueOf2.call(symbol)) : {};
        }
        function cloneTypedArray2(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer2(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined$12, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol2(value);
            var othIsDefined = other !== undefined$12, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object, other, orders) {
          var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index < length) {
            var result2 = compareAscending(objCriteria[index], othCriteria[index]);
            if (result2) {
              if (index >= ordersLength) {
                return result2;
              }
              var order2 = orders[index];
              return result2 * (order2 == "desc" ? -1 : 1);
            }
          }
          return object.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax2(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax2(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset2 = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset2 + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset2 + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray2(source, array) {
          var index = -1, length = source.length;
          array || (array = Array2(length));
          while (++index < length) {
            array[index] = source[index];
          }
          return array;
        }
        function copyObject2(source, props2, object, customizer) {
          var isNew = !object;
          object || (object = {});
          var index = -1, length = props2.length;
          while (++index < length) {
            var key = props2[index];
            var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined$12;
            if (newValue === undefined$12) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue2(object, key, newValue);
            } else {
              assignValue2(object, key, newValue);
            }
          }
          return object;
        }
        function copySymbols2(source, object) {
          return copyObject2(source, getSymbols2(source), object);
        }
        function copySymbolsIn2(source, object) {
          return copyObject2(source, getSymbolsIn2(source), object);
        }
        function createAggregator(setter, initializer) {
          return function(collection, iteratee2) {
            var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner2(assigner) {
          return baseRest2(function(object, sources) {
            var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined$12, guard = length > 2 ? sources[2] : undefined$12;
            customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined$12;
            if (guard && isIterateeCall2(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined$12 : customizer;
              length = 1;
            }
            object = Object2(object);
            while (++index < length) {
              var source = sources[index];
              if (source) {
                assigner(object, source, index, customizer);
              }
            }
            return object;
          });
        }
        function createBaseEach2(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike2(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index-- : ++index < length) {
              if (iteratee2(iterable[index], index, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor2(fromRight) {
          return function(object, iteratee2, keysFunc) {
            var index = -1, iterable = Object2(object), props2 = keysFunc(object), length = props2.length;
            while (length--) {
              var key = props2[fromRight ? length : ++index];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn2 = this && this !== root2 && this instanceof wrapper ? Ctor : func;
            return fn2.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string2) {
            string2 = toString2(string2);
            var strSymbols = hasUnicode(string2) ? stringToArray(string2) : undefined$12;
            var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string2) {
            return arrayReduce(words(deburr(string2).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate2(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject2(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
            while (index--) {
              args[index] = arguments[index];
            }
            var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                undefined$12,
                args,
                holders,
                undefined$12,
                undefined$12,
                arity - length
              );
            }
            var fn2 = this && this !== root2 && this instanceof wrapper ? Ctor : func;
            return apply2(fn2, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike2(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys2(collection);
              predicate = function(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index = findIndexFunc(collection, predicate, fromIndex);
            return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined$12;
          };
        }
        function createFlow(fromRight) {
          return flatRest2(function(funcs) {
            var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index--) {
              var func = funcs[index];
              if (typeof func != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index = wrapper ? index : length;
            while (++index < length) {
              func = funcs[index];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined$12;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray2(value)) {
                return wrapper.plant(value).value();
              }
              var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
              while (++index2 < length) {
                result2 = funcs[index2].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$12 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index = length;
            while (index--) {
              args[index] = arguments[index];
            }
            if (isCurried) {
              var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder);
              return createRecurry(
                func,
                bitmask,
                createHybrid,
                wrapper.placeholder,
                thisArg,
                args,
                newHolders,
                argPos,
                ary2,
                arity - length
              );
            }
            var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root2 && this instanceof wrapper) {
              fn2 = Ctor || createCtor(fn2);
            }
            return fn2.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter, toIteratee) {
          return function(object, iteratee2) {
            return baseInverter(object, setter, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined$12 && other === undefined$12) {
              return defaultValue;
            }
            if (value !== undefined$12) {
              result2 = value;
            }
            if (other !== undefined$12) {
              if (result2 === undefined$12) {
                return other;
              }
              if (typeof value == "string" || typeof other == "string") {
                value = baseToString2(value);
                other = baseToString2(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest2(function(iteratees) {
            iteratees = arrayMap2(iteratees, baseUnary2(getIteratee()));
            return baseRest2(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply2(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined$12 ? " " : baseToString2(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root2 && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply2(fn2, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end2, step) {
            if (step && typeof step != "number" && isIterateeCall2(start, end2, step)) {
              end2 = step = undefined$12;
            }
            start = toFinite2(start);
            if (end2 === undefined$12) {
              end2 = start;
              start = 0;
            } else {
              end2 = toFinite2(end2);
            }
            step = step === undefined$12 ? start < end2 ? 1 : -1 : toFinite2(step);
            return baseRange(start, end2, step, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value == "string" && typeof other == "string")) {
              value = toNumber2(value);
              other = toNumber2(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$12, newHoldersRight = isCurry ? undefined$12 : holders, newPartials = isCurry ? partials : undefined$12, newPartialsRight = isCurry ? undefined$12 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [
            func,
            bitmask,
            thisArg,
            newPartials,
            newHolders,
            newPartialsRight,
            newHoldersRight,
            argPos,
            ary2,
            arity
          ];
          var result2 = wrapFunc.apply(undefined$12, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number, precision) {
            number = toNumber2(number);
            precision = precision == null ? 0 : nativeMin2(toInteger2(precision), 292);
            if (precision && nativeIsFinite(number)) {
              var pair = (toString2(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString2(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number);
          };
        }
        var createSet2 = !(Set2 && 1 / setToArray2(new Set2([, -0]))[1] == INFINITY2) ? noop2 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object) {
            var tag = getTag2(object);
            if (tag == mapTag2) {
              return mapToArray2(object);
            }
            if (tag == setTag2) {
              return setToPairs(object);
            }
            return baseToPairs(object, keysFunc(object));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined$12;
          }
          ary2 = ary2 === undefined$12 ? ary2 : nativeMax2(toInteger2(ary2), 0);
          arity = arity === undefined$12 ? arity : toInteger2(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined$12;
          }
          var data = isBindKey ? undefined$12 : getData(func);
          var newData = [
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary2,
            arity
          ];
          if (data) {
            mergeData(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined$12 ? isBindKey ? 0 : func.length : nativeMax2(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined$12, newData);
          }
          var setter = data ? baseSetData : setData;
          return setWrapToString(setter(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object) {
          if (objValue === undefined$12 || eq2(objValue, objectProto2[key]) && !hasOwnProperty2.call(object, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
          if (isObject2(objValue) && isObject2(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge2(objValue, srcValue, undefined$12, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone2(value) {
          return isPlainObject2(value) ? undefined$12 : value;
        }
        function equalArrays2(array, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG2, arrLength = array.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var arrStacked = stack.get(array);
          var othStacked = stack.get(other);
          if (arrStacked && othStacked) {
            return arrStacked == other && othStacked == array;
          }
          var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG2 ? new SetCache2() : undefined$12;
          stack.set(array, other);
          stack.set(other, array);
          while (++index < arrLength) {
            var arrValue = array[index], othValue = other[index];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
            }
            if (compared !== undefined$12) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome2(other, function(othValue2, othIndex) {
                if (!cacheHas2(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array);
          stack["delete"](other);
          return result2;
        }
        function equalByTag2(object, other, tag, bitmask, customizer, equalFunc, stack) {
          switch (tag) {
            case dataViewTag2:
              if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                return false;
              }
              object = object.buffer;
              other = other.buffer;
            case arrayBufferTag2:
              if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                return false;
              }
              return true;
            case boolTag2:
            case dateTag2:
            case numberTag2:
              return eq2(+object, +other);
            case errorTag2:
              return object.name == other.name && object.message == other.message;
            case regexpTag2:
            case stringTag2:
              return object == other + "";
            case mapTag2:
              var convert = mapToArray2;
            case setTag2:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG2;
              convert || (convert = setToArray2);
              if (object.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG2;
              stack.set(object, other);
              var result2 = equalArrays2(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object);
              return result2;
            case symbolTag2:
              if (symbolValueOf2) {
                return symbolValueOf2.call(object) == symbolValueOf2.call(other);
              }
          }
          return false;
        }
        function equalObjects2(object, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG2, objProps = getAllKeys2(object), objLength = objProps.length, othProps = getAllKeys2(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index = objLength;
          while (index--) {
            var key = objProps[index];
            if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
              return false;
            }
          }
          var objStacked = stack.get(object);
          var othStacked = stack.get(other);
          if (objStacked && othStacked) {
            return objStacked == other && othStacked == object;
          }
          var result2 = true;
          stack.set(object, other);
          stack.set(other, object);
          var skipCtor = isPartial;
          while (++index < objLength) {
            key = objProps[index];
            var objValue = object[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
            }
            if (!(compared === undefined$12 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object);
          stack["delete"](other);
          return result2;
        }
        function flatRest2(func) {
          return setToString2(overRest2(func, undefined$12, flatten2), func + "");
        }
        function getAllKeys2(object) {
          return baseGetAllKeys2(object, keys2, getSymbols2);
        }
        function getAllKeysIn2(object) {
          return baseGetAllKeys2(object, keysIn2, getSymbolsIn2);
        }
        var getData = !metaMap ? noop2 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array.length : 0;
          while (length--) {
            var data = array[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object = hasOwnProperty2.call(lodash2, "placeholder") ? lodash2 : func;
          return object.placeholder;
        }
        function getIteratee() {
          var result2 = lodash2.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee2 : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData2(map3, key) {
          var data = map3.__data__;
          return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData2(object) {
          var result2 = keys2(object), length = result2.length;
          while (length--) {
            var key = result2[length], value = object[key];
            result2[length] = [key, value, isStrictComparable2(value)];
          }
          return result2;
        }
        function getNative2(object, key) {
          var value = getValue2(object, key);
          return baseIsNative2(value) ? value : undefined$12;
        }
        function getRawTag2(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag2), tag = value[symToStringTag2];
          try {
            value[symToStringTag2] = undefined$12;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString2.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag2] = tag;
            } else {
              delete value[symToStringTag2];
            }
          }
          return result2;
        }
        var getSymbols2 = !nativeGetSymbols2 ? stubArray2 : function(object) {
          if (object == null) {
            return [];
          }
          object = Object2(object);
          return arrayFilter2(nativeGetSymbols2(object), function(symbol) {
            return propertyIsEnumerable2.call(object, symbol);
          });
        };
        var getSymbolsIn2 = !nativeGetSymbols2 ? stubArray2 : function(object) {
          var result2 = [];
          while (object) {
            arrayPush2(result2, getSymbols2(object));
            object = getPrototype2(object);
          }
          return result2;
        };
        var getTag2 = baseGetTag2;
        if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag2 || Map2 && getTag2(new Map2()) != mapTag2 || Promise2 && getTag2(Promise2.resolve()) != promiseTag2 || Set2 && getTag2(new Set2()) != setTag2 || WeakMap2 && getTag2(new WeakMap2()) != weakMapTag2) {
          getTag2 = function(value) {
            var result2 = baseGetTag2(value), Ctor = result2 == objectTag2 ? value.constructor : undefined$12, ctorString = Ctor ? toSource2(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString2:
                  return dataViewTag2;
                case mapCtorString2:
                  return mapTag2;
                case promiseCtorString2:
                  return promiseTag2;
                case setCtorString2:
                  return setTag2;
                case weakMapCtorString2:
                  return weakMapTag2;
              }
            }
            return result2;
          };
        }
        function getView(start, end2, transforms) {
          var index = -1, length = transforms.length;
          while (++index < length) {
            var data = transforms[index], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end2 -= size2;
                break;
              case "take":
                end2 = nativeMin2(end2, start + size2);
                break;
              case "takeRight":
                start = nativeMax2(start, end2 - size2);
                break;
            }
          }
          return { "start": start, "end": end2 };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath2(object, path, hasFunc) {
          path = castPath2(path, object);
          var index = -1, length = path.length, result2 = false;
          while (++index < length) {
            var key = toKey2(path[index]);
            if (!(result2 = object != null && hasFunc(object, key))) {
              break;
            }
            object = object[key];
          }
          if (result2 || ++index != length) {
            return result2;
          }
          length = object == null ? 0 : object.length;
          return !!length && isLength2(length) && isIndex2(key, length) && (isArray2(object) || isArguments2(object));
        }
        function initCloneArray2(array) {
          var length = array.length, result2 = new array.constructor(length);
          if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
            result2.index = array.index;
            result2.input = array.input;
          }
          return result2;
        }
        function initCloneObject2(object) {
          return typeof object.constructor == "function" && !isPrototype2(object) ? baseCreate2(getPrototype2(object)) : {};
        }
        function initCloneByTag2(object, tag, isDeep) {
          var Ctor = object.constructor;
          switch (tag) {
            case arrayBufferTag2:
              return cloneArrayBuffer2(object);
            case boolTag2:
            case dateTag2:
              return new Ctor(+object);
            case dataViewTag2:
              return cloneDataView2(object, isDeep);
            case float32Tag2:
            case float64Tag2:
            case int8Tag2:
            case int16Tag2:
            case int32Tag2:
            case uint8Tag2:
            case uint8ClampedTag2:
            case uint16Tag2:
            case uint32Tag2:
              return cloneTypedArray2(object, isDeep);
            case mapTag2:
              return new Ctor();
            case numberTag2:
            case stringTag2:
              return new Ctor(object);
            case regexpTag2:
              return cloneRegExp2(object);
            case setTag2:
              return new Ctor();
            case symbolTag2:
              return cloneSymbol2(object);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable2(value) {
          return isArray2(value) || isArguments2(value) || !!(spreadableSymbol2 && value && value[spreadableSymbol2]);
        }
        function isIndex2(value, length) {
          var type3 = typeof value;
          length = length == null ? MAX_SAFE_INTEGER2 : length;
          return !!length && (type3 == "number" || type3 != "symbol" && reIsUint2.test(value)) && (value > -1 && value % 1 == 0 && value < length);
        }
        function isIterateeCall2(value, index, object) {
          if (!isObject2(object)) {
            return false;
          }
          var type3 = typeof index;
          if (type3 == "number" ? isArrayLike2(object) && isIndex2(index, object.length) : type3 == "string" && index in object) {
            return eq2(object[index], value);
          }
          return false;
        }
        function isKey2(value, object) {
          if (isArray2(value)) {
            return false;
          }
          var type3 = typeof value;
          if (type3 == "number" || type3 == "symbol" || type3 == "boolean" || value == null || isSymbol2(value)) {
            return true;
          }
          return reIsPlainProp2.test(value) || !reIsDeepProp2.test(value) || object != null && value in Object2(object);
        }
        function isKeyable2(value) {
          var type3 = typeof value;
          return type3 == "string" || type3 == "number" || type3 == "symbol" || type3 == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash2[funcName];
          if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData(other);
          return !!data && func === data[0];
        }
        function isMasked2(func) {
          return !!maskSrcKey2 && maskSrcKey2 in func;
        }
        var isMaskable = coreJsData2 ? isFunction2 : stubFalse2;
        function isPrototype2(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto2;
          return value === proto;
        }
        function isStrictComparable2(value) {
          return value === value && !isObject2(value);
        }
        function matchesStrictComparable2(key, srcValue) {
          return function(object) {
            if (object == null) {
              return false;
            }
            return object[key] === srcValue && (srcValue !== undefined$12 || key in Object2(object));
          };
        }
        function memoizeCapped2(func) {
          var result2 = memoize2(func, function(key) {
            if (cache2.size === MAX_MEMOIZE_SIZE2) {
              cache2.clear();
            }
            return key;
          });
          var cache2 = result2.cache;
          return result2;
        }
        function mergeData(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin2(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn2(object) {
          var result2 = [];
          if (object != null) {
            for (var key in Object2(object)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString2(value) {
          return nativeObjectToString2.call(value);
        }
        function overRest2(func, start, transform2) {
          start = nativeMax2(start === undefined$12 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index = -1, length = nativeMax2(args.length - start, 0), array = Array2(length);
            while (++index < length) {
              array[index] = args[start + index];
            }
            index = -1;
            var otherArgs = Array2(start + 1);
            while (++index < start) {
              otherArgs[index] = args[index];
            }
            otherArgs[start] = transform2(array);
            return apply2(func, this, otherArgs);
          };
        }
        function parent2(object, path) {
          return path.length < 2 ? object : baseGet2(object, baseSlice2(path, 0, -1));
        }
        function reorder(array, indexes) {
          var arrLength = array.length, length = nativeMin2(indexes.length, arrLength), oldArray = copyArray2(array);
          while (length--) {
            var index = indexes[length];
            array[length] = isIndex2(index, arrLength) ? oldArray[index] : undefined$12;
          }
          return array;
        }
        function safeGet2(object, key) {
          if (key === "constructor" && typeof object[key] === "function") {
            return;
          }
          if (key == "__proto__") {
            return;
          }
          return object[key];
        }
        var setData = shortOut2(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root2.setTimeout(func, wait);
        };
        var setToString2 = shortOut2(baseSetToString2);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString2(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut2(func) {
          var count2 = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow2(), remaining = HOT_SPAN2 - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count2 >= HOT_COUNT2) {
                return arguments[0];
              }
            } else {
              count2 = 0;
            }
            return func.apply(undefined$12, arguments);
          };
        }
        function shuffleSelf(array, size2) {
          var index = -1, length = array.length, lastIndex = length - 1;
          size2 = size2 === undefined$12 ? length : size2;
          while (++index < size2) {
            var rand = baseRandom(index, lastIndex), value = array[rand];
            array[rand] = array[index];
            array[index] = value;
          }
          array.length = size2;
          return array;
        }
        var stringToPath2 = memoizeCapped2(function(string2) {
          var result2 = [];
          if (string2.charCodeAt(0) === 46) {
            result2.push("");
          }
          string2.replace(rePropName2, function(match, number, quote2, subString) {
            result2.push(quote2 ? subString.replace(reEscapeChar2, "$1") : number || match);
          });
          return result2;
        });
        function toKey2(value) {
          if (typeof value == "string" || isSymbol2(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY2 ? "-0" : result2;
        }
        function toSource2(func) {
          if (func != null) {
            try {
              return funcToString2.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach2(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes2(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray2(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array, size2, guard) {
          if (guard ? isIterateeCall2(array, size2, guard) : size2 === undefined$12) {
            size2 = 1;
          } else {
            size2 = nativeMax2(toInteger2(size2), 0);
          }
          var length = array == null ? 0 : array.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index < length) {
            result2[resIndex++] = baseSlice2(array, index, index += size2);
          }
          return result2;
        }
        function compact2(array) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
          while (++index < length) {
            var value = array[index];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array = arguments[0], index = length;
          while (index--) {
            args[index - 1] = arguments[index];
          }
          return arrayPush2(isArray2(array) ? copyArray2(array) : [array], baseFlatten2(args, 1));
        }
        var difference = baseRest2(function(array, values2) {
          return isArrayLikeObject2(array) ? baseDifference(array, baseFlatten2(values2, 1, isArrayLikeObject2, true)) : [];
        });
        var differenceBy = baseRest2(function(array, values2) {
          var iteratee2 = last2(values2);
          if (isArrayLikeObject2(iteratee2)) {
            iteratee2 = undefined$12;
          }
          return isArrayLikeObject2(array) ? baseDifference(array, baseFlatten2(values2, 1, isArrayLikeObject2, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest2(function(array, values2) {
          var comparator = last2(values2);
          if (isArrayLikeObject2(comparator)) {
            comparator = undefined$12;
          }
          return isArrayLikeObject2(array) ? baseDifference(array, baseFlatten2(values2, 1, isArrayLikeObject2, true), undefined$12, comparator) : [];
        });
        function drop(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined$12 ? 1 : toInteger2(n2);
          return baseSlice2(array, n2 < 0 ? 0 : n2, length);
        }
        function dropRight(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined$12 ? 1 : toInteger2(n2);
          n2 = length - n2;
          return baseSlice2(array, 0, n2 < 0 ? 0 : n2);
        }
        function dropRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end2) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (start && typeof start != "number" && isIterateeCall2(array, value, start)) {
            start = 0;
            end2 = length;
          }
          return baseFill(array, value, start, end2);
        }
        function findIndex(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger2(fromIndex);
          if (index < 0) {
            index = nativeMax2(length + index, 0);
          }
          return baseFindIndex2(array, getIteratee(predicate, 3), index);
        }
        function findLastIndex2(array, predicate, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length - 1;
          if (fromIndex !== undefined$12) {
            index = toInteger2(fromIndex);
            index = fromIndex < 0 ? nativeMax2(length + index, 0) : nativeMin2(index, length - 1);
          }
          return baseFindIndex2(array, getIteratee(predicate, 3), index, true);
        }
        function flatten2(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten2(array, 1) : [];
        }
        function flattenDeep2(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseFlatten2(array, INFINITY2) : [];
        }
        function flattenDepth(array, depth) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined$12 ? 1 : toInteger2(depth);
          return baseFlatten2(array, depth);
        }
        function fromPairs2(pairs) {
          var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index < length) {
            var pair = pairs[index];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array) {
          return array && array.length ? array[0] : undefined$12;
        }
        function indexOf2(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = fromIndex == null ? 0 : toInteger2(fromIndex);
          if (index < 0) {
            index = nativeMax2(length + index, 0);
          }
          return baseIndexOf2(array, value, index);
        }
        function initial2(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice2(array, 0, -1) : [];
        }
        var intersection = baseRest2(function(arrays) {
          var mapped = arrayMap2(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest2(function(arrays) {
          var iteratee2 = last2(arrays), mapped = arrayMap2(arrays, castArrayLikeObject);
          if (iteratee2 === last2(mapped)) {
            iteratee2 = undefined$12;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest2(function(arrays) {
          var comparator = last2(arrays), mapped = arrayMap2(arrays, castArrayLikeObject);
          comparator = typeof comparator == "function" ? comparator : undefined$12;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$12, comparator) : [];
        });
        function join(array, separator) {
          return array == null ? "" : nativeJoin.call(array, separator);
        }
        function last2(array) {
          var length = array == null ? 0 : array.length;
          return length ? array[length - 1] : undefined$12;
        }
        function lastIndexOf(array, value, fromIndex) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return -1;
          }
          var index = length;
          if (fromIndex !== undefined$12) {
            index = toInteger2(fromIndex);
            index = index < 0 ? nativeMax2(length + index, 0) : nativeMin2(index, length - 1);
          }
          return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex2(array, baseIsNaN2, index, true);
        }
        function nth(array, n2) {
          return array && array.length ? baseNth(array, toInteger2(n2)) : undefined$12;
        }
        var pull = baseRest2(pullAll);
        function pullAll(array, values2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
        }
        function pullAllBy(array, values2, iteratee2) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
        }
        function pullAllWith(array, values2, comparator) {
          return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined$12, comparator) : array;
        }
        var pullAt = flatRest2(function(array, indexes) {
          var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
          basePullAt(array, arrayMap2(indexes, function(index) {
            return isIndex2(index, length) ? +index : index;
          }).sort(compareAscending));
          return result2;
        });
        function remove(array, predicate) {
          var result2 = [];
          if (!(array && array.length)) {
            return result2;
          }
          var index = -1, indexes = [], length = array.length;
          predicate = getIteratee(predicate, 3);
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result2.push(value);
              indexes.push(index);
            }
          }
          basePullAt(array, indexes);
          return result2;
        }
        function reverse(array) {
          return array == null ? array : nativeReverse.call(array);
        }
        function slice(array, start, end2) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          if (end2 && typeof end2 != "number" && isIterateeCall2(array, start, end2)) {
            start = 0;
            end2 = length;
          } else {
            start = start == null ? 0 : toInteger2(start);
            end2 = end2 === undefined$12 ? length : toInteger2(end2);
          }
          return baseSlice2(array, start, end2);
        }
        function sortedIndex(array, value) {
          return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value);
            if (index < length && eq2(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedLastIndex(array, value) {
          return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee2) {
          return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array, value) {
          var length = array == null ? 0 : array.length;
          if (length) {
            var index = baseSortedIndex(array, value, true) - 1;
            if (eq2(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function sortedUniq(array) {
          return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee2) {
          return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array) {
          var length = array == null ? 0 : array.length;
          return length ? baseSlice2(array, 1, length) : [];
        }
        function take(array, n2, guard) {
          if (!(array && array.length)) {
            return [];
          }
          n2 = guard || n2 === undefined$12 ? 1 : toInteger2(n2);
          return baseSlice2(array, 0, n2 < 0 ? 0 : n2);
        }
        function takeRight(array, n2, guard) {
          var length = array == null ? 0 : array.length;
          if (!length) {
            return [];
          }
          n2 = guard || n2 === undefined$12 ? 1 : toInteger2(n2);
          n2 = length - n2;
          return baseSlice2(array, n2 < 0 ? 0 : n2, length);
        }
        function takeRightWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
          return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union2 = baseRest2(function(arrays) {
          return baseUniq2(baseFlatten2(arrays, 1, isArrayLikeObject2, true));
        });
        var unionBy = baseRest2(function(arrays) {
          var iteratee2 = last2(arrays);
          if (isArrayLikeObject2(iteratee2)) {
            iteratee2 = undefined$12;
          }
          return baseUniq2(baseFlatten2(arrays, 1, isArrayLikeObject2, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest2(function(arrays) {
          var comparator = last2(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined$12;
          return baseUniq2(baseFlatten2(arrays, 1, isArrayLikeObject2, true), undefined$12, comparator);
        });
        function uniq(array) {
          return array && array.length ? baseUniq2(array) : [];
        }
        function uniqBy(array, iteratee2) {
          return array && array.length ? baseUniq2(array, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array, comparator) {
          comparator = typeof comparator == "function" ? comparator : undefined$12;
          return array && array.length ? baseUniq2(array, undefined$12, comparator) : [];
        }
        function unzip(array) {
          if (!(array && array.length)) {
            return [];
          }
          var length = 0;
          array = arrayFilter2(array, function(group) {
            if (isArrayLikeObject2(group)) {
              length = nativeMax2(group.length, length);
              return true;
            }
          });
          return baseTimes2(length, function(index) {
            return arrayMap2(array, baseProperty2(index));
          });
        }
        function unzipWith(array, iteratee2) {
          if (!(array && array.length)) {
            return [];
          }
          var result2 = unzip(array);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap2(result2, function(group) {
            return apply2(iteratee2, undefined$12, group);
          });
        }
        var without = baseRest2(function(array, values2) {
          return isArrayLikeObject2(array) ? baseDifference(array, values2) : [];
        });
        var xor = baseRest2(function(arrays) {
          return baseXor(arrayFilter2(arrays, isArrayLikeObject2));
        });
        var xorBy = baseRest2(function(arrays) {
          var iteratee2 = last2(arrays);
          if (isArrayLikeObject2(iteratee2)) {
            iteratee2 = undefined$12;
          }
          return baseXor(arrayFilter2(arrays, isArrayLikeObject2), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest2(function(arrays) {
          var comparator = last2(arrays);
          comparator = typeof comparator == "function" ? comparator : undefined$12;
          return baseXor(arrayFilter2(arrays, isArrayLikeObject2), undefined$12, comparator);
        });
        var zip = baseRest2(unzip);
        function zipObject(props2, values2) {
          return baseZipObject(props2 || [], values2 || [], assignValue2);
        }
        function zipObjectDeep(props2, values2) {
          return baseZipObject(props2 || [], values2 || [], baseSet2);
        }
        var zipWith = baseRest2(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined$12;
          iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined$12;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash2(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest2(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
            return baseAt(object, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex2(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({
            "func": thru,
            "args": [interceptor],
            "thisArg": undefined$12
          });
          return new LodashWrapper(value, this.__chain__).thru(function(array) {
            if (length && !array.length) {
              array.push(undefined$12);
            }
            return array;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined$12) {
            this.__values__ = toArray(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined$12 : this.__values__[this.__index__++];
          return { "done": done, "value": value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent3 = this;
          while (parent3 instanceof baseLodash) {
            var clone3 = wrapperClone(parent3);
            clone3.__index__ = 0;
            clone3.__values__ = undefined$12;
            if (result2) {
              previous.__wrapped__ = clone3;
            } else {
              result2 = clone3;
            }
            var previous = clone3;
            parent3 = parent3.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({
              "func": thru,
              "args": [reverse],
              "thisArg": undefined$12
            });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue2(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray2(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall2(collection, predicate, guard)) {
            predicate = undefined$12;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray2(collection) ? arrayFilter2 : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex2);
        function flatMap2(collection, iteratee2) {
          return baseFlatten2(map2(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten2(map2(collection, iteratee2), INFINITY2);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined$12 ? 1 : toInteger2(depth);
          return baseFlatten2(map2(collection, iteratee2), depth);
        }
        function forEach2(collection, iteratee2) {
          var func = isArray2(collection) ? arrayEach2 : baseEach2;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray2(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue2(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike2(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger2(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax2(length + fromIndex, 0);
          }
          return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf2(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest2(function(collection, path, args) {
          var index = -1, isFunc = typeof path == "function", result2 = isArrayLike2(collection) ? Array2(collection.length) : [];
          baseEach2(collection, function(value) {
            result2[++index] = isFunc ? apply2(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue2(result2, key, value);
        });
        function map2(collection, iteratee2) {
          var func = isArray2(collection) ? arrayMap2 : baseMap2;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy2(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray2(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined$12 : orders;
          if (!isArray2(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray2(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach2);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray2(collection) ? arrayFilter2 : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray2(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n2, guard) {
          if (guard ? isIterateeCall2(collection, n2, guard) : n2 === undefined$12) {
            n2 = 1;
          } else {
            n2 = toInteger2(n2);
          }
          var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n2);
        }
        function shuffle(collection) {
          var func = isArray2(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike2(collection)) {
            return isString2(collection) ? stringSize(collection) : collection.length;
          }
          var tag = getTag2(collection);
          if (tag == mapTag2 || tag == setTag2) {
            return collection.size;
          }
          return baseKeys2(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray2(collection) ? arraySome2 : baseSome;
          if (guard && isIterateeCall2(collection, predicate, guard)) {
            predicate = undefined$12;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest2(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall2(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall2(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten2(iteratees, 1), []);
        });
        var now2 = ctxNow || function() {
          return root2.Date.now();
        };
        function after(n2, func) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          n2 = toInteger2(n2);
          return function() {
            if (--n2 < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n2, guard) {
          n2 = guard ? undefined$12 : n2;
          n2 = func && n2 == null ? func.length : n2;
          return createWrap(func, WRAP_ARY_FLAG, undefined$12, undefined$12, undefined$12, undefined$12, n2);
        }
        function before(n2, func) {
          var result2;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          n2 = toInteger2(n2);
          return function() {
            if (--n2 > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n2 <= 1) {
              func = undefined$12;
            }
            return result2;
          };
        }
        var bind2 = baseRest2(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind2));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest2(function(object, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined$12 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined$12, undefined$12, undefined$12, undefined$12, undefined$12, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined$12 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$12, undefined$12, undefined$12, undefined$12, undefined$12, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce2(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          wait = toNumber2(wait) || 0;
          if (isObject2(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax2(toNumber2(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined$12;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin2(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined$12 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now2();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined$12;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined$12;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined$12) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined$12;
          }
          function flush() {
            return timerId === undefined$12 ? result2 : trailingEdge(now2());
          }
          function debounced() {
            var time = now2(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined$12) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                clearTimeout2(timerId);
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined$12) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest2(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest2(function(func, wait, args) {
          return baseDelay(func, toNumber2(wait) || 0, args);
        });
        function flip2(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize2(func, resolver) {
          if (typeof func != "function" || resolver != null && typeof resolver != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          var memoized = function() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
            if (cache2.has(key)) {
              return cache2.get(key);
            }
            var result2 = func.apply(this, args);
            memoized.cache = cache2.set(key, result2) || cache2;
            return result2;
          };
          memoized.cache = new (memoize2.Cache || MapCache2)();
          return memoized;
        }
        memoize2.Cache = MapCache2;
        function negate(predicate) {
          if (typeof predicate != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray2(transforms[0]) ? arrayMap2(transforms[0], baseUnary2(getIteratee())) : arrayMap2(baseFlatten2(transforms, 1), baseUnary2(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest2(function(args) {
            var index = -1, length = nativeMin2(args.length, funcsLength);
            while (++index < length) {
              args[index] = transforms[index].call(this, args[index]);
            }
            return apply2(func, this, args);
          });
        });
        var partial2 = baseRest2(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial2));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined$12, partials, holders);
        });
        var partialRight = baseRest2(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$12, partials, holders);
        });
        var rearg = flatRest2(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined$12, undefined$12, undefined$12, indexes);
        });
        function rest(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          start = start === undefined$12 ? start : toInteger2(start);
          return baseRest2(func, start);
        }
        function spread(func, start) {
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          start = start == null ? 0 : nativeMax2(toInteger2(start), 0);
          return baseRest2(function(args) {
            var array = args[start], otherArgs = castSlice(args, 0, start);
            if (array) {
              arrayPush2(otherArgs, array);
            }
            return apply2(func, this, otherArgs);
          });
        }
        function throttle2(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          if (isObject2(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce2(func, wait, {
            "leading": leading,
            "maxWait": wait,
            "trailing": trailing
          });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap(value, wrapper) {
          return partial2(castFunction(wrapper), value);
        }
        function castArray2() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray2(value) ? value : [value];
        }
        function clone2(value) {
          return baseClone2(value, CLONE_SYMBOLS_FLAG2);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$12;
          return baseClone2(value, CLONE_SYMBOLS_FLAG2, customizer);
        }
        function cloneDeep2(value) {
          return baseClone2(value, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$12;
          return baseClone2(value, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2, customizer);
        }
        function conformsTo(object, source) {
          return source == null || baseConformsTo(object, source, keys2(source));
        }
        function eq2(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt2 = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments2 = baseIsArguments2(/* @__PURE__ */ function() {
          return arguments;
        }()) ? baseIsArguments2 : function(value) {
          return isObjectLike2(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable2.call(value, "callee");
        };
        var isArray2 = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary2(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike2(value) {
          return value != null && isLength2(value.length) && !isFunction2(value);
        }
        function isArrayLikeObject2(value) {
          return isObjectLike2(value) && isArrayLike2(value);
        }
        function isBoolean2(value) {
          return value === true || value === false || isObjectLike2(value) && baseGetTag2(value) == boolTag2;
        }
        var isBuffer2 = nativeIsBuffer2 || stubFalse2;
        var isDate2 = nodeIsDate ? baseUnary2(nodeIsDate) : baseIsDate;
        function isElement2(value) {
          return isObjectLike2(value) && value.nodeType === 1 && !isPlainObject2(value);
        }
        function isEmpty2(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike2(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray2(value) || isArguments2(value))) {
            return !value.length;
          }
          var tag = getTag2(value);
          if (tag == mapTag2 || tag == setTag2) {
            return !value.size;
          }
          if (isPrototype2(value)) {
            return !baseKeys2(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty2.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual2(value, other) {
          return baseIsEqual2(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$12;
          var result2 = customizer ? customizer(value, other) : undefined$12;
          return result2 === undefined$12 ? baseIsEqual2(value, other, undefined$12, customizer) : !!result2;
        }
        function isError2(value) {
          if (!isObjectLike2(value)) {
            return false;
          }
          var tag = baseGetTag2(value);
          return tag == errorTag2 || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject2(value);
        }
        function isFinite2(value) {
          return typeof value == "number" && nativeIsFinite(value);
        }
        function isFunction2(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag = baseGetTag2(value);
          return tag == funcTag2 || tag == genTag2 || tag == asyncTag2 || tag == proxyTag2;
        }
        function isInteger(value) {
          return typeof value == "number" && value == toInteger2(value);
        }
        function isLength2(value) {
          return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
        }
        function isObject2(value) {
          var type3 = typeof value;
          return value != null && (type3 == "object" || type3 == "function");
        }
        function isObjectLike2(value) {
          return value != null && typeof value == "object";
        }
        var isMap2 = nodeIsMap2 ? baseUnary2(nodeIsMap2) : baseIsMap2;
        function isMatch(object, source) {
          return object === source || baseIsMatch2(object, source, getMatchData2(source));
        }
        function isMatchWith(object, source, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$12;
          return baseIsMatch2(object, source, getMatchData2(source), customizer);
        }
        function isNaN2(value) {
          return isNumber2(value) && value != +value;
        }
        function isNative(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative2(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil2(value) {
          return value == null;
        }
        function isNumber2(value) {
          return typeof value == "number" || isObjectLike2(value) && baseGetTag2(value) == numberTag2;
        }
        function isPlainObject2(value) {
          if (!isObjectLike2(value) || baseGetTag2(value) != objectTag2) {
            return false;
          }
          var proto = getPrototype2(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
          return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString2.call(Ctor) == objectCtorString2;
        }
        var isRegExp2 = nodeIsRegExp ? baseUnary2(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER2 && value <= MAX_SAFE_INTEGER2;
        }
        var isSet2 = nodeIsSet2 ? baseUnary2(nodeIsSet2) : baseIsSet2;
        function isString2(value) {
          return typeof value == "string" || !isArray2(value) && isObjectLike2(value) && baseGetTag2(value) == stringTag2;
        }
        function isSymbol2(value) {
          return typeof value == "symbol" || isObjectLike2(value) && baseGetTag2(value) == symbolTag2;
        }
        var isTypedArray2 = nodeIsTypedArray2 ? baseUnary2(nodeIsTypedArray2) : baseIsTypedArray2;
        function isUndefined2(value) {
          return value === undefined$12;
        }
        function isWeakMap2(value) {
          return isObjectLike2(value) && getTag2(value) == weakMapTag2;
        }
        function isWeakSet2(value) {
          return isObjectLike2(value) && baseGetTag2(value) == weakSetTag;
        }
        var lt2 = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike2(value)) {
            return isString2(value) ? stringToArray(value) : copyArray2(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag = getTag2(value), func = tag == mapTag2 ? mapToArray2 : tag == setTag2 ? setToArray2 : values;
          return func(value);
        }
        function toFinite2(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber2(value);
          if (value === INFINITY2 || value === -INFINITY2) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER2;
          }
          return value === value ? value : 0;
        }
        function toInteger2(value) {
          var result2 = toFinite2(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength(value) {
          return value ? baseClamp(toInteger2(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber2(value) {
          if (typeof value == "number") {
            return value;
          }
          if (isSymbol2(value)) {
            return NAN2;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf == "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value != "string") {
            return value === 0 ? value : +value;
          }
          value = baseTrim2(value);
          var isBinary = reIsBinary2.test(value);
          return isBinary || reIsOctal2.test(value) ? freeParseInt2(value.slice(2), isBinary ? 2 : 8) : reIsBadHex2.test(value) ? NAN2 : +value;
        }
        function toPlainObject2(value) {
          return copyObject2(value, keysIn2(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger2(value), -MAX_SAFE_INTEGER2, MAX_SAFE_INTEGER2) : value === 0 ? value : 0;
        }
        function toString2(value) {
          return value == null ? "" : baseToString2(value);
        }
        var assign2 = createAssigner2(function(object, source) {
          if (isPrototype2(source) || isArrayLike2(source)) {
            copyObject2(source, keys2(source), object);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              assignValue2(object, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner2(function(object, source) {
          copyObject2(source, keysIn2(source), object);
        });
        var assignInWith = createAssigner2(function(object, source, srcIndex, customizer) {
          copyObject2(source, keysIn2(source), object, customizer);
        });
        var assignWith = createAssigner2(function(object, source, srcIndex, customizer) {
          copyObject2(source, keys2(source), object, customizer);
        });
        var at2 = flatRest2(baseAt);
        function create(prototype, properties) {
          var result2 = baseCreate2(prototype);
          return properties == null ? result2 : baseAssign2(result2, properties);
        }
        var defaults2 = baseRest2(function(object, sources) {
          object = Object2(object);
          var index = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined$12;
          if (guard && isIterateeCall2(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index < length) {
            var source = sources[index];
            var props2 = keysIn2(source);
            var propsIndex = -1;
            var propsLength = props2.length;
            while (++propsIndex < propsLength) {
              var key = props2[propsIndex];
              var value = object[key];
              if (value === undefined$12 || eq2(value, objectProto2[key]) && !hasOwnProperty2.call(object, key)) {
                object[key] = source[key];
              }
            }
          }
          return object;
        });
        var defaultsDeep = baseRest2(function(args) {
          args.push(undefined$12, customDefaultsMerge);
          return apply2(mergeWith, undefined$12, args);
        });
        function findKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwn2);
        }
        function findLastKey(object, predicate) {
          return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object, iteratee2) {
          return object == null ? object : baseFor2(object, getIteratee(iteratee2, 3), keysIn2);
        }
        function forInRight(object, iteratee2) {
          return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn2);
        }
        function forOwn(object, iteratee2) {
          return object && baseForOwn2(object, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object, iteratee2) {
          return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
        }
        function functions(object) {
          return object == null ? [] : baseFunctions(object, keys2(object));
        }
        function functionsIn(object) {
          return object == null ? [] : baseFunctions(object, keysIn2(object));
        }
        function get2(object, path, defaultValue) {
          var result2 = object == null ? undefined$12 : baseGet2(object, path);
          return result2 === undefined$12 ? defaultValue : result2;
        }
        function has2(object, path) {
          return object != null && hasPath2(object, path, baseHas);
        }
        function hasIn2(object, path) {
          return object != null && hasPath2(object, path, baseHasIn2);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString2.call(value);
          }
          result2[value] = key;
        }, constant2(identity2));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString != "function") {
            value = nativeObjectToString2.call(value);
          }
          if (hasOwnProperty2.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke2 = baseRest2(baseInvoke);
        function keys2(object) {
          return isArrayLike2(object) ? arrayLikeKeys2(object) : baseKeys2(object);
        }
        function keysIn2(object) {
          return isArrayLike2(object) ? arrayLikeKeys2(object, true) : baseKeysIn2(object);
        }
        function mapKeys(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn2(object, function(value, key, object3) {
            baseAssignValue2(result2, iteratee2(value, key, object3), value);
          });
          return result2;
        }
        function mapValues(object, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn2(object, function(value, key, object3) {
            baseAssignValue2(result2, key, iteratee2(value, key, object3));
          });
          return result2;
        }
        var merge2 = createAssigner2(function(object, source, srcIndex) {
          baseMerge2(object, source, srcIndex);
        });
        var mergeWith = createAssigner2(function(object, source, srcIndex, customizer) {
          baseMerge2(object, source, srcIndex, customizer);
        });
        var omit2 = flatRest2(function(object, paths) {
          var result2 = {};
          if (object == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap2(paths, function(path) {
            path = castPath2(path, object);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject2(object, getAllKeysIn2(object), result2);
          if (isDeep) {
            result2 = baseClone2(result2, CLONE_DEEP_FLAG2 | CLONE_FLAT_FLAG2 | CLONE_SYMBOLS_FLAG2, customOmitClone2);
          }
          var length = paths.length;
          while (length--) {
            baseUnset2(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object, predicate) {
          return pickBy(object, negate(getIteratee(predicate)));
        }
        var pick2 = flatRest2(function(object, paths) {
          return object == null ? {} : basePick2(object, paths);
        });
        function pickBy(object, predicate) {
          if (object == null) {
            return {};
          }
          var props2 = arrayMap2(getAllKeysIn2(object), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy2(object, props2, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object, path, defaultValue) {
          path = castPath2(path, object);
          var index = -1, length = path.length;
          if (!length) {
            length = 1;
            object = undefined$12;
          }
          while (++index < length) {
            var value = object == null ? undefined$12 : object[toKey2(path[index])];
            if (value === undefined$12) {
              index = length;
              value = defaultValue;
            }
            object = isFunction2(value) ? value.call(object) : value;
          }
          return object;
        }
        function set2(object, path, value) {
          return object == null ? object : baseSet2(object, path, value);
        }
        function setWith(object, path, value, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$12;
          return object == null ? object : baseSet2(object, path, value, customizer);
        }
        var toPairs = createToPairs(keys2);
        var toPairsIn = createToPairs(keysIn2);
        function transform(object, iteratee2, accumulator) {
          var isArr = isArray2(object), isArrLike = isArr || isBuffer2(object) || isTypedArray2(object);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object && object.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject2(object)) {
              accumulator = isFunction2(Ctor) ? baseCreate2(getPrototype2(object)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach2 : baseForOwn2)(object, function(value, index, object3) {
            return iteratee2(accumulator, value, index, object3);
          });
          return accumulator;
        }
        function unset(object, path) {
          return object == null ? true : baseUnset2(object, path);
        }
        function update(object, path, updater) {
          return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
          customizer = typeof customizer == "function" ? customizer : undefined$12;
          return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
          return object == null ? [] : baseValues(object, keys2(object));
        }
        function valuesIn(object) {
          return object == null ? [] : baseValues(object, keysIn2(object));
        }
        function clamp2(number, lower, upper) {
          if (upper === undefined$12) {
            upper = lower;
            lower = undefined$12;
          }
          if (upper !== undefined$12) {
            upper = toNumber2(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined$12) {
            lower = toNumber2(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber2(number), lower, upper);
        }
        function inRange(number, start, end2) {
          start = toFinite2(start);
          if (end2 === undefined$12) {
            end2 = start;
            start = 0;
          } else {
            end2 = toFinite2(end2);
          }
          number = toNumber2(number);
          return baseInRange(number, start, end2);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating != "boolean" && isIterateeCall2(lower, upper, floating)) {
            upper = floating = undefined$12;
          }
          if (floating === undefined$12) {
            if (typeof upper == "boolean") {
              floating = upper;
              upper = undefined$12;
            } else if (typeof lower == "boolean") {
              floating = lower;
              lower = undefined$12;
            }
          }
          if (lower === undefined$12 && upper === undefined$12) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite2(lower);
            if (upper === undefined$12) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite2(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin2(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index) {
          word = word.toLowerCase();
          return result2 + (index ? capitalize2(word) : word);
        });
        function capitalize2(string2) {
          return upperFirst(toString2(string2).toLowerCase());
        }
        function deburr(string2) {
          string2 = toString2(string2);
          return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string2, target, position) {
          string2 = toString2(string2);
          target = baseToString2(target);
          var length = string2.length;
          position = position === undefined$12 ? length : baseClamp(toInteger2(position), 0, length);
          var end2 = position;
          position -= target.length;
          return position >= 0 && string2.slice(position, end2) == target;
        }
        function escape2(string2) {
          string2 = toString2(string2);
          return string2 && reHasUnescapedHtml.test(string2) ? string2.replace(reUnescapedHtml, escapeHtmlChar) : string2;
        }
        function escapeRegExp(string2) {
          string2 = toString2(string2);
          return string2 && reHasRegExpChar.test(string2) ? string2.replace(reRegExpChar2, "\\$&") : string2;
        }
        var kebabCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string2, length, chars) {
          string2 = toString2(string2);
          length = toInteger2(length);
          var strLength = length ? stringSize(string2) : 0;
          if (!length || strLength >= length) {
            return string2;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string2 + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string2, length, chars) {
          string2 = toString2(string2);
          length = toInteger2(length);
          var strLength = length ? stringSize(string2) : 0;
          return length && strLength < length ? string2 + createPadding(length - strLength, chars) : string2;
        }
        function padStart(string2, length, chars) {
          string2 = toString2(string2);
          length = toInteger2(length);
          var strLength = length ? stringSize(string2) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string2 : string2;
        }
        function parseInt2(string2, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString2(string2).replace(reTrimStart2, ""), radix || 0);
        }
        function repeat(string2, n2, guard) {
          if (guard ? isIterateeCall2(string2, n2, guard) : n2 === undefined$12) {
            n2 = 1;
          } else {
            n2 = toInteger2(n2);
          }
          return baseRepeat(toString2(string2), n2);
        }
        function replace2() {
          var args = arguments, string2 = toString2(args[0]);
          return args.length < 3 ? string2 : string2.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? "_" : "") + word.toLowerCase();
        });
        function split(string2, separator, limit2) {
          if (limit2 && typeof limit2 != "number" && isIterateeCall2(string2, separator, limit2)) {
            separator = limit2 = undefined$12;
          }
          limit2 = limit2 === undefined$12 ? MAX_ARRAY_LENGTH : limit2 >>> 0;
          if (!limit2) {
            return [];
          }
          string2 = toString2(string2);
          if (string2 && (typeof separator == "string" || separator != null && !isRegExp2(separator))) {
            separator = baseToString2(separator);
            if (!separator && hasUnicode(string2)) {
              return castSlice(stringToArray(string2), 0, limit2);
            }
          }
          return string2.split(separator, limit2);
        }
        var startCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + upperFirst(word);
        });
        function startsWith2(string2, target, position) {
          string2 = toString2(string2);
          position = position == null ? 0 : baseClamp(toInteger2(position), 0, string2.length);
          target = baseToString2(target);
          return string2.slice(position, position + target.length) == target;
        }
        function template(string2, options, guard) {
          var settings = lodash2.templateSettings;
          if (guard && isIterateeCall2(string2, options, guard)) {
            options = undefined$12;
          }
          string2 = toString2(string2);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2(
            (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
            "g"
          );
          var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string2.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset2) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string2.slice(index, offset2).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index = offset2 + match.length;
            return match;
          });
          source += "';\n";
          var variable = hasOwnProperty2.call(options, "variable") && options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          } else if (reForbiddenIdentifierChars.test(variable)) {
            throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined$12, importsValues);
          });
          result2.source = source;
          if (isError2(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString2(value).toLowerCase();
        }
        function toUpper(value) {
          return toString2(value).toUpperCase();
        }
        function trim(string2, chars, guard) {
          string2 = toString2(string2);
          if (string2 && (guard || chars === undefined$12)) {
            return baseTrim2(string2);
          }
          if (!string2 || !(chars = baseToString2(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end2 = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end2).join("");
        }
        function trimEnd(string2, chars, guard) {
          string2 = toString2(string2);
          if (string2 && (guard || chars === undefined$12)) {
            return string2.slice(0, trimmedEndIndex2(string2) + 1);
          }
          if (!string2 || !(chars = baseToString2(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), end2 = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end2).join("");
        }
        function trimStart(string2, chars, guard) {
          string2 = toString2(string2);
          if (string2 && (guard || chars === undefined$12)) {
            return string2.replace(reTrimStart2, "");
          }
          if (!string2 || !(chars = baseToString2(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string2, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject2(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger2(options.length) : length;
            omission = "omission" in options ? baseToString2(options.omission) : omission;
          }
          string2 = toString2(string2);
          var strLength = string2.length;
          if (hasUnicode(string2)) {
            var strSymbols = stringToArray(string2);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string2;
          }
          var end2 = length - stringSize(omission);
          if (end2 < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end2).join("") : string2.slice(0, end2);
          if (separator === undefined$12) {
            return result2 + omission;
          }
          if (strSymbols) {
            end2 += result2.length - end2;
          }
          if (isRegExp2(separator)) {
            if (string2.slice(end2).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString2(reFlags2.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined$12 ? end2 : newEnd);
            }
          } else if (string2.indexOf(baseToString2(separator), end2) != end2) {
            var index = result2.lastIndexOf(separator);
            if (index > -1) {
              result2 = result2.slice(0, index);
            }
          }
          return result2 + omission;
        }
        function unescape2(string2) {
          string2 = toString2(string2);
          return string2 && reHasEscapedHtml.test(string2) ? string2.replace(reEscapedHtml, unescapeHtmlChar) : string2;
        }
        var upperCase = createCompounder(function(result2, word, index) {
          return result2 + (index ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string2, pattern3, guard) {
          string2 = toString2(string2);
          pattern3 = guard ? undefined$12 : pattern3;
          if (pattern3 === undefined$12) {
            return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
          }
          return string2.match(pattern3) || [];
        }
        var attempt = baseRest2(function(func, args) {
          try {
            return apply2(func, undefined$12, args);
          } catch (e) {
            return isError2(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest2(function(object, methodNames) {
          arrayEach2(methodNames, function(key) {
            key = toKey2(key);
            baseAssignValue2(object, key, bind2(object[key], object));
          });
          return object;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap2(pairs, function(pair) {
            if (typeof pair[1] != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT2);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest2(function(args) {
            var index = -1;
            while (++index < length) {
              var pair = pairs[index];
              if (apply2(pair[0], this, args)) {
                return apply2(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone2(source, CLONE_DEEP_FLAG2));
        }
        function constant2(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity2(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee2(typeof func == "function" ? func : baseClone2(func, CLONE_DEEP_FLAG2));
        }
        function matches(source) {
          return baseMatches2(baseClone2(source, CLONE_DEEP_FLAG2));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty2(path, baseClone2(srcValue, CLONE_DEEP_FLAG2));
        }
        var method = baseRest2(function(path, args) {
          return function(object) {
            return baseInvoke(object, path, args);
          };
        });
        var methodOf = baseRest2(function(object, args) {
          return function(path) {
            return baseInvoke(object, path, args);
          };
        });
        function mixin(object, source, options) {
          var props2 = keys2(source), methodNames = baseFunctions(source, props2);
          if (options == null && !(isObject2(source) && (methodNames.length || !props2.length))) {
            options = source;
            source = object;
            object = this;
            methodNames = baseFunctions(source, keys2(source));
          }
          var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
          arrayEach2(methodNames, function(methodName) {
            var func = source[methodName];
            object[methodName] = func;
            if (isFunc) {
              object.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray2(this.__actions__);
                  actions.push({ "func": func, "args": arguments, "thisArg": object });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object, arrayPush2([this.value()], arguments));
              };
            }
          });
          return object;
        }
        function noConflict() {
          if (root2._ === this) {
            root2._ = oldDash;
          }
          return this;
        }
        function noop2() {
        }
        function nthArg(n2) {
          n2 = toInteger2(n2);
          return baseRest2(function(args) {
            return baseNth(args, n2);
          });
        }
        var over = createOver(arrayMap2);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome2);
        function property2(path) {
          return isKey2(path) ? baseProperty2(toKey2(path)) : basePropertyDeep2(path);
        }
        function propertyOf(object) {
          return function(path) {
            return object == null ? undefined$12 : baseGet2(object, path);
          };
        }
        var range2 = createRange();
        var rangeRight = createRange(true);
        function stubArray2() {
          return [];
        }
        function stubFalse2() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n2, iteratee2) {
          n2 = toInteger2(n2);
          if (n2 < 1 || n2 > MAX_SAFE_INTEGER2) {
            return [];
          }
          var index = MAX_ARRAY_LENGTH, length = nativeMin2(n2, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n2 -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes2(length, iteratee2);
          while (++index < n2) {
            iteratee2(index);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray2(value)) {
            return arrayMap2(value, toKey2);
          }
          return isSymbol2(value) ? [value] : copyArray2(stringToPath2(toString2(value)));
        }
        function uniqueId(prefix) {
          var id = ++idCounter;
          return toString2(prefix) + id;
        }
        var add = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor2 = createRound("floor");
        function max2(array) {
          return array && array.length ? baseExtremum(array, identity2, baseGt) : undefined$12;
        }
        function maxBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined$12;
        }
        function mean(array) {
          return baseMean(array, identity2);
        }
        function meanBy(array, iteratee2) {
          return baseMean(array, getIteratee(iteratee2, 2));
        }
        function min2(array) {
          return array && array.length ? baseExtremum(array, identity2, baseLt) : undefined$12;
        }
        function minBy(array, iteratee2) {
          return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined$12;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round2 = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum2(array) {
          return array && array.length ? baseSum(array, identity2) : 0;
        }
        function sumBy(array, iteratee2) {
          return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
        }
        lodash2.after = after;
        lodash2.ary = ary;
        lodash2.assign = assign2;
        lodash2.assignIn = assignIn;
        lodash2.assignInWith = assignInWith;
        lodash2.assignWith = assignWith;
        lodash2.at = at2;
        lodash2.before = before;
        lodash2.bind = bind2;
        lodash2.bindAll = bindAll;
        lodash2.bindKey = bindKey;
        lodash2.castArray = castArray2;
        lodash2.chain = chain;
        lodash2.chunk = chunk;
        lodash2.compact = compact2;
        lodash2.concat = concat;
        lodash2.cond = cond;
        lodash2.conforms = conforms;
        lodash2.constant = constant2;
        lodash2.countBy = countBy;
        lodash2.create = create;
        lodash2.curry = curry;
        lodash2.curryRight = curryRight;
        lodash2.debounce = debounce2;
        lodash2.defaults = defaults2;
        lodash2.defaultsDeep = defaultsDeep;
        lodash2.defer = defer;
        lodash2.delay = delay;
        lodash2.difference = difference;
        lodash2.differenceBy = differenceBy;
        lodash2.differenceWith = differenceWith;
        lodash2.drop = drop;
        lodash2.dropRight = dropRight;
        lodash2.dropRightWhile = dropRightWhile;
        lodash2.dropWhile = dropWhile;
        lodash2.fill = fill;
        lodash2.filter = filter;
        lodash2.flatMap = flatMap2;
        lodash2.flatMapDeep = flatMapDeep;
        lodash2.flatMapDepth = flatMapDepth;
        lodash2.flatten = flatten2;
        lodash2.flattenDeep = flattenDeep2;
        lodash2.flattenDepth = flattenDepth;
        lodash2.flip = flip2;
        lodash2.flow = flow;
        lodash2.flowRight = flowRight;
        lodash2.fromPairs = fromPairs2;
        lodash2.functions = functions;
        lodash2.functionsIn = functionsIn;
        lodash2.groupBy = groupBy;
        lodash2.initial = initial2;
        lodash2.intersection = intersection;
        lodash2.intersectionBy = intersectionBy;
        lodash2.intersectionWith = intersectionWith;
        lodash2.invert = invert;
        lodash2.invertBy = invertBy;
        lodash2.invokeMap = invokeMap;
        lodash2.iteratee = iteratee;
        lodash2.keyBy = keyBy;
        lodash2.keys = keys2;
        lodash2.keysIn = keysIn2;
        lodash2.map = map2;
        lodash2.mapKeys = mapKeys;
        lodash2.mapValues = mapValues;
        lodash2.matches = matches;
        lodash2.matchesProperty = matchesProperty;
        lodash2.memoize = memoize2;
        lodash2.merge = merge2;
        lodash2.mergeWith = mergeWith;
        lodash2.method = method;
        lodash2.methodOf = methodOf;
        lodash2.mixin = mixin;
        lodash2.negate = negate;
        lodash2.nthArg = nthArg;
        lodash2.omit = omit2;
        lodash2.omitBy = omitBy;
        lodash2.once = once;
        lodash2.orderBy = orderBy2;
        lodash2.over = over;
        lodash2.overArgs = overArgs;
        lodash2.overEvery = overEvery;
        lodash2.overSome = overSome;
        lodash2.partial = partial2;
        lodash2.partialRight = partialRight;
        lodash2.partition = partition;
        lodash2.pick = pick2;
        lodash2.pickBy = pickBy;
        lodash2.property = property2;
        lodash2.propertyOf = propertyOf;
        lodash2.pull = pull;
        lodash2.pullAll = pullAll;
        lodash2.pullAllBy = pullAllBy;
        lodash2.pullAllWith = pullAllWith;
        lodash2.pullAt = pullAt;
        lodash2.range = range2;
        lodash2.rangeRight = rangeRight;
        lodash2.rearg = rearg;
        lodash2.reject = reject;
        lodash2.remove = remove;
        lodash2.rest = rest;
        lodash2.reverse = reverse;
        lodash2.sampleSize = sampleSize;
        lodash2.set = set2;
        lodash2.setWith = setWith;
        lodash2.shuffle = shuffle;
        lodash2.slice = slice;
        lodash2.sortBy = sortBy;
        lodash2.sortedUniq = sortedUniq;
        lodash2.sortedUniqBy = sortedUniqBy;
        lodash2.split = split;
        lodash2.spread = spread;
        lodash2.tail = tail;
        lodash2.take = take;
        lodash2.takeRight = takeRight;
        lodash2.takeRightWhile = takeRightWhile;
        lodash2.takeWhile = takeWhile;
        lodash2.tap = tap;
        lodash2.throttle = throttle2;
        lodash2.thru = thru;
        lodash2.toArray = toArray;
        lodash2.toPairs = toPairs;
        lodash2.toPairsIn = toPairsIn;
        lodash2.toPath = toPath;
        lodash2.toPlainObject = toPlainObject2;
        lodash2.transform = transform;
        lodash2.unary = unary;
        lodash2.union = union2;
        lodash2.unionBy = unionBy;
        lodash2.unionWith = unionWith;
        lodash2.uniq = uniq;
        lodash2.uniqBy = uniqBy;
        lodash2.uniqWith = uniqWith;
        lodash2.unset = unset;
        lodash2.unzip = unzip;
        lodash2.unzipWith = unzipWith;
        lodash2.update = update;
        lodash2.updateWith = updateWith;
        lodash2.values = values;
        lodash2.valuesIn = valuesIn;
        lodash2.without = without;
        lodash2.words = words;
        lodash2.wrap = wrap;
        lodash2.xor = xor;
        lodash2.xorBy = xorBy;
        lodash2.xorWith = xorWith;
        lodash2.zip = zip;
        lodash2.zipObject = zipObject;
        lodash2.zipObjectDeep = zipObjectDeep;
        lodash2.zipWith = zipWith;
        lodash2.entries = toPairs;
        lodash2.entriesIn = toPairsIn;
        lodash2.extend = assignIn;
        lodash2.extendWith = assignInWith;
        mixin(lodash2, lodash2);
        lodash2.add = add;
        lodash2.attempt = attempt;
        lodash2.camelCase = camelCase;
        lodash2.capitalize = capitalize2;
        lodash2.ceil = ceil;
        lodash2.clamp = clamp2;
        lodash2.clone = clone2;
        lodash2.cloneDeep = cloneDeep2;
        lodash2.cloneDeepWith = cloneDeepWith;
        lodash2.cloneWith = cloneWith;
        lodash2.conformsTo = conformsTo;
        lodash2.deburr = deburr;
        lodash2.defaultTo = defaultTo;
        lodash2.divide = divide;
        lodash2.endsWith = endsWith;
        lodash2.eq = eq2;
        lodash2.escape = escape2;
        lodash2.escapeRegExp = escapeRegExp;
        lodash2.every = every;
        lodash2.find = find;
        lodash2.findIndex = findIndex;
        lodash2.findKey = findKey;
        lodash2.findLast = findLast;
        lodash2.findLastIndex = findLastIndex2;
        lodash2.findLastKey = findLastKey;
        lodash2.floor = floor2;
        lodash2.forEach = forEach2;
        lodash2.forEachRight = forEachRight;
        lodash2.forIn = forIn;
        lodash2.forInRight = forInRight;
        lodash2.forOwn = forOwn;
        lodash2.forOwnRight = forOwnRight;
        lodash2.get = get2;
        lodash2.gt = gt2;
        lodash2.gte = gte;
        lodash2.has = has2;
        lodash2.hasIn = hasIn2;
        lodash2.head = head;
        lodash2.identity = identity2;
        lodash2.includes = includes;
        lodash2.indexOf = indexOf2;
        lodash2.inRange = inRange;
        lodash2.invoke = invoke2;
        lodash2.isArguments = isArguments2;
        lodash2.isArray = isArray2;
        lodash2.isArrayBuffer = isArrayBuffer;
        lodash2.isArrayLike = isArrayLike2;
        lodash2.isArrayLikeObject = isArrayLikeObject2;
        lodash2.isBoolean = isBoolean2;
        lodash2.isBuffer = isBuffer2;
        lodash2.isDate = isDate2;
        lodash2.isElement = isElement2;
        lodash2.isEmpty = isEmpty2;
        lodash2.isEqual = isEqual2;
        lodash2.isEqualWith = isEqualWith;
        lodash2.isError = isError2;
        lodash2.isFinite = isFinite2;
        lodash2.isFunction = isFunction2;
        lodash2.isInteger = isInteger;
        lodash2.isLength = isLength2;
        lodash2.isMap = isMap2;
        lodash2.isMatch = isMatch;
        lodash2.isMatchWith = isMatchWith;
        lodash2.isNaN = isNaN2;
        lodash2.isNative = isNative;
        lodash2.isNil = isNil2;
        lodash2.isNull = isNull;
        lodash2.isNumber = isNumber2;
        lodash2.isObject = isObject2;
        lodash2.isObjectLike = isObjectLike2;
        lodash2.isPlainObject = isPlainObject2;
        lodash2.isRegExp = isRegExp2;
        lodash2.isSafeInteger = isSafeInteger;
        lodash2.isSet = isSet2;
        lodash2.isString = isString2;
        lodash2.isSymbol = isSymbol2;
        lodash2.isTypedArray = isTypedArray2;
        lodash2.isUndefined = isUndefined2;
        lodash2.isWeakMap = isWeakMap2;
        lodash2.isWeakSet = isWeakSet2;
        lodash2.join = join;
        lodash2.kebabCase = kebabCase;
        lodash2.last = last2;
        lodash2.lastIndexOf = lastIndexOf;
        lodash2.lowerCase = lowerCase;
        lodash2.lowerFirst = lowerFirst;
        lodash2.lt = lt2;
        lodash2.lte = lte;
        lodash2.max = max2;
        lodash2.maxBy = maxBy;
        lodash2.mean = mean;
        lodash2.meanBy = meanBy;
        lodash2.min = min2;
        lodash2.minBy = minBy;
        lodash2.stubArray = stubArray2;
        lodash2.stubFalse = stubFalse2;
        lodash2.stubObject = stubObject;
        lodash2.stubString = stubString;
        lodash2.stubTrue = stubTrue;
        lodash2.multiply = multiply;
        lodash2.nth = nth;
        lodash2.noConflict = noConflict;
        lodash2.noop = noop2;
        lodash2.now = now2;
        lodash2.pad = pad;
        lodash2.padEnd = padEnd;
        lodash2.padStart = padStart;
        lodash2.parseInt = parseInt2;
        lodash2.random = random;
        lodash2.reduce = reduce;
        lodash2.reduceRight = reduceRight;
        lodash2.repeat = repeat;
        lodash2.replace = replace2;
        lodash2.result = result;
        lodash2.round = round2;
        lodash2.runInContext = runInContext2;
        lodash2.sample = sample;
        lodash2.size = size;
        lodash2.snakeCase = snakeCase;
        lodash2.some = some;
        lodash2.sortedIndex = sortedIndex;
        lodash2.sortedIndexBy = sortedIndexBy;
        lodash2.sortedIndexOf = sortedIndexOf;
        lodash2.sortedLastIndex = sortedLastIndex;
        lodash2.sortedLastIndexBy = sortedLastIndexBy;
        lodash2.sortedLastIndexOf = sortedLastIndexOf;
        lodash2.startCase = startCase;
        lodash2.startsWith = startsWith2;
        lodash2.subtract = subtract;
        lodash2.sum = sum2;
        lodash2.sumBy = sumBy;
        lodash2.template = template;
        lodash2.times = times;
        lodash2.toFinite = toFinite2;
        lodash2.toInteger = toInteger2;
        lodash2.toLength = toLength;
        lodash2.toLower = toLower;
        lodash2.toNumber = toNumber2;
        lodash2.toSafeInteger = toSafeInteger;
        lodash2.toString = toString2;
        lodash2.toUpper = toUpper;
        lodash2.trim = trim;
        lodash2.trimEnd = trimEnd;
        lodash2.trimStart = trimStart;
        lodash2.truncate = truncate;
        lodash2.unescape = unescape2;
        lodash2.uniqueId = uniqueId;
        lodash2.upperCase = upperCase;
        lodash2.upperFirst = upperFirst;
        lodash2.each = forEach2;
        lodash2.eachRight = forEachRight;
        lodash2.first = head;
        mixin(lodash2, function() {
          var source = {};
          baseForOwn2(lodash2, function(func, methodName) {
            if (!hasOwnProperty2.call(lodash2.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { "chain": false });
        lodash2.VERSION = VERSION;
        arrayEach2(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash2[methodName].placeholder = lodash2;
        });
        arrayEach2(["drop", "take"], function(methodName, index) {
          LazyWrapper.prototype[methodName] = function(n2) {
            n2 = n2 === undefined$12 ? 1 : nativeMax2(toInteger2(n2), 0);
            var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin2(n2, result2.__takeCount__);
            } else {
              result2.__views__.push({
                "size": nativeMin2(n2, MAX_ARRAY_LENGTH),
                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
              });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n2) {
            return this.reverse()[methodName](n2).reverse();
          };
        });
        arrayEach2(["filter", "map", "takeWhile"], function(methodName, index) {
          var type3 = index + 1, isFilter = type3 == LAZY_FILTER_FLAG || type3 == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({
              "iteratee": getIteratee(iteratee2, 3),
              "type": type3
            });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach2(["head", "last"], function(methodName, index) {
          var takeName = "take" + (index ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach2(["initial", "tail"], function(methodName, index) {
          var dropName = "drop" + (index ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity2);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest2(function(path, args) {
          if (typeof path == "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end2) {
          start = toInteger2(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end2 < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end2 !== undefined$12) {
            end2 = toInteger2(end2);
            result2 = end2 < 0 ? result2.dropRight(-end2) : result2.take(end2 - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn2(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash2.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value);
            var interceptor = function(value2) {
              var result3 = lodashFunc.apply(lodash2, arrayPush2([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined$12 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach2(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto2[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash2.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray2(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray2(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn2(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash2[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "";
            if (!hasOwnProperty2.call(realNames, key)) {
              realNames[key] = [];
            }
            realNames[key].push({ "name": methodName, "func": lodashFunc });
          }
        });
        realNames[createHybrid(undefined$12, WRAP_BIND_KEY_FLAG).name] = [{
          "name": "wrapper",
          "func": undefined$12
        }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash2.prototype.at = wrapperAt;
        lodash2.prototype.chain = wrapperChain;
        lodash2.prototype.commit = wrapperCommit;
        lodash2.prototype.next = wrapperNext;
        lodash2.prototype.plant = wrapperPlant;
        lodash2.prototype.reverse = wrapperReverse;
        lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
        lodash2.prototype.first = lodash2.prototype.head;
        if (symIterator) {
          lodash2.prototype[symIterator] = wrapperToIterator;
        }
        return lodash2;
      };
      var _2 = runInContext();
      if (freeModule2) {
        (freeModule2.exports = _2)._ = _2;
        freeExports2._ = _2;
      } else {
        root2._ = _2;
      }
    }).call(commonjsGlobal);
  })(lodash, lodash.exports);
  var lodashExports = lodash.exports;
  const _sfc_main$2C = {
    data() {
      return {
        dialogVisible: false,
        currentTab: 0,
        loading: false,
        showSearch: false,
        searchInfo: {
          searchKeyword: "",
          data: [],
          page: 1,
          size: 10,
          loading: false,
          nomore: false
        },
        tabs: [
          {
            name: "推荐",
            select: "RECOMMEND",
            page: 1,
            nomore: false,
            data: []
          },
          {
            name: "车型",
            select: "MODEL",
            page: 1,
            nomore: false,
            data: []
          },
          {
            name: "兴趣",
            select: "HOBBY",
            page: 1,
            nomore: false,
            data: []
          },
          {
            name: "地区",
            select: "REGION",
            page: 1,
            nomore: false,
            data: []
          },
          {
            name: "品牌",
            select: "BRAND",
            page: 1,
            nomore: false,
            data: []
          }
        ]
      };
    },
    methods: {
      selectCircle(item) {
        this.$emit("circleSelect", item);
        this.dialogVisible = false;
      },
      getCircleList() {
        const tab = this.tabs[this.currentTab];
        if (tab.nomore) {
          return;
        }
        this.loading = true;
        const postData = {
          page: tab.page,
          size: 10,
          select: tab.select
        };
        getApp().$openApi.motoCms.getCircleList(postData).then((res) => {
          formatAppLog("log", "at components/moto-cms/pub-circle-select.vue:134", res);
          setTimeout(() => {
            this.loading = false;
            if (res.data.code === 200) {
              const data = res.data.data.dataList;
              if (data.length) {
                tab.data.push(...data);
              }
              if (!data.length || data.length < 10) {
                tab.nomore = true;
              }
            }
          }, 300);
        });
      },
      onTabChange(index) {
        this.currentTab = index;
        this.getCircleList();
      },
      onScrolltolower: lodashExports.throttle(function() {
        const tab = this.tabs[this.currentTab];
        tab.page++;
        this.getCircleList();
      }, 500),
      onSearchTolower: lodashExports.throttle(function() {
        this.searchInfo.page++;
        this.search();
      }, 500),
      confirmSearch() {
        this.searchInfo.page = 1;
        this.search();
      },
      search() {
        this.showSearch = true;
        if (this.searchInfo.nomore) {
          return;
        }
        this.searchInfo.loading = true;
        var params = {
          keyword: this.searchInfo.searchKeyword,
          searchClass: 4,
          page: this.searchInfo.page,
          size: this.searchInfo.size
        };
        getApp().$openApi.motoCms.globalSearch(params).then((res) => {
          this.searchInfo.loading = false;
          if (res.data.code === 200) {
            const data = res.data.data.circleList;
            if (data.length) {
              this.searchInfo.data.push(...data);
            }
            if (!data.length || data.length < this.searchInfo.size) {
              this.searchInfo.nomore = true;
            }
          }
        });
      },
      onDialogClose() {
        this.dialogVisible = false;
        this.showSearch = false;
        this.searchInfo = {
          searchKeyword: "",
          data: [],
          page: 1,
          size: 10,
          loading: false,
          nomore: false
        };
      },
      onSearchChange(e) {
        if (!e) {
          this.showSearch = false;
        }
      }
    }
  };
  function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_input = vue.resolveComponent("el-input");
    const _component_el_dialog = vue.resolveComponent("el-dialog");
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createVNode(_component_el_dialog, {
        style: { "padding-bottom": "0" },
        modelValue: $data.dialogVisible,
        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.dialogVisible = $event),
        title: "关联圈子",
        width: "500",
        "align-center": "",
        onClose: $options.onDialogClose
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", null, [
            vue.createElementVNode("view", {
              class: "moto-flex-row-left",
              style: { "margin-bottom": "10px" }
            }, [
              vue.createVNode(_component_el_input, {
                onInput: $options.onSearchChange,
                modelValue: $data.searchInfo.searchKeyword,
                "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.searchInfo.searchKeyword = $event),
                style: { "width": "400px" },
                placeholder: "搜索感兴趣的圈子"
              }, null, 8, ["onInput", "modelValue"]),
              vue.createElementVNode("view", {
                class: "search-btn",
                onClick: _cache[1] || (_cache[1] = (...args) => $options.confirmSearch && $options.confirmSearch(...args))
              }, "搜索")
            ]),
            $data.showSearch ? (vue.openBlock(), vue.createElementBlock(
              "scroll-view",
              {
                key: 0,
                onScrolltolower: _cache[2] || (_cache[2] = (...args) => $options.onSearchTolower && $options.onSearchTolower(...args)),
                "show-scrollbar": false,
                "scroll-y": "",
                class: "seach-container"
              },
              [
                vue.createElementVNode("view", { style: { "white-space": "nowrap" } }, [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList($data.searchInfo.data, (item) => {
                      return vue.openBlock(), vue.createElementBlock("view", {
                        class: "moto-flex-row-between",
                        style: { "margin-bottom": "10px" }
                      }, [
                        vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                          vue.createElementVNode("image", {
                            src: item.imageUrl,
                            mode: "aspectFit",
                            class: "card-circle-image"
                          }, null, 8, ["src"]),
                          vue.createElementVNode(
                            "view",
                            {
                              class: "moto-lines-1",
                              style: { "margin-left": "10px", "color": "#141E34" }
                            },
                            vue.toDisplayString(item.circleName),
                            1
                            /* TEXT */
                          )
                        ]),
                        vue.createElementVNode("view", {
                          class: "select-btn",
                          onClick: ($event) => $options.selectCircle(item)
                        }, "选择", 8, ["onClick"])
                      ]);
                    }),
                    256
                    /* UNKEYED_FRAGMENT */
                  )),
                  $data.searchInfo.loading ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    style: { "width": "450px" },
                    class: "status"
                  }, "加载中...")) : vue.createCommentVNode("v-if", true),
                  $data.searchInfo.nomore ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    style: { "width": "450px" },
                    class: "status"
                  }, "没有更多了")) : vue.createCommentVNode("v-if", true),
                  !$data.searchInfo.loading && !$data.searchInfo.nomore ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 2,
                    style: { "width": "450px" },
                    class: "status"
                  })) : vue.createCommentVNode("v-if", true)
                ])
              ],
              32
              /* NEED_HYDRATION */
            )) : (vue.openBlock(), vue.createElementBlock("view", {
              key: 1,
              class: "moto-flex-row-left"
            }, [
              vue.createElementVNode("view", { style: { "background-color": "#F8F9FB", "margin-left": "-16px", "height": "350px", "border-radius": "4px" } }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.tabs, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      onClick: ($event) => $options.onTabChange(index)
                    }, [
                      vue.createElementVNode(
                        "view",
                        {
                          class: vue.normalizeClass(["tab-item", { "tab-item-active": $data.currentTab === index }])
                        },
                        vue.toDisplayString(item.name),
                        3
                        /* TEXT, CLASS */
                      )
                    ], 8, ["onClick"]);
                  }),
                  256
                  /* UNKEYED_FRAGMENT */
                ))
              ]),
              vue.createElementVNode(
                "scroll-view",
                {
                  onScrolltolower: _cache[3] || (_cache[3] = (...args) => $options.onScrolltolower && $options.onScrolltolower(...args)),
                  "show-scrollbar": false,
                  "scroll-y": "",
                  style: { "height": "350px", "width": "350px", "margin-left": "20px" }
                },
                [
                  vue.createElementVNode("view", { style: {} }, [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList($data.tabs[$data.currentTab].data, (item) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          class: "moto-flex-row-between",
                          style: { "margin-bottom": "10px" }
                        }, [
                          vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                            vue.createElementVNode("image", {
                              src: item.imageUrl,
                              mode: "aspectFit",
                              class: "card-circle-image"
                            }, null, 8, ["src"]),
                            vue.createElementVNode(
                              "view",
                              {
                                class: "moto-lines-1",
                                style: { "margin-left": "10px", "color": "#141E34" }
                              },
                              vue.toDisplayString(item.circleName),
                              1
                              /* TEXT */
                            )
                          ]),
                          vue.createElementVNode("view", {
                            class: "select-btn",
                            onClick: ($event) => $options.selectCircle(item)
                          }, "选择", 8, ["onClick"])
                        ]);
                      }),
                      256
                      /* UNKEYED_FRAGMENT */
                    )),
                    $data.loading ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 0,
                      class: "status"
                    }, "加载中...")) : vue.createCommentVNode("v-if", true),
                    $data.tabs[$data.currentTab].nomore ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 1,
                      class: "status"
                    }, "没有更多了")) : vue.createCommentVNode("v-if", true),
                    !$data.loading && !$data.tabs[$data.currentTab].nomore ? (vue.openBlock(), vue.createElementBlock("view", {
                      key: 2,
                      class: "status"
                    })) : vue.createCommentVNode("v-if", true)
                  ])
                ],
                32
                /* NEED_HYDRATION */
              )
            ]))
          ])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["modelValue", "onClose"])
    ]);
  }
  const pubCircleSelect = /* @__PURE__ */ _export_sfc$1(_sfc_main$2C, [["render", _sfc_render$A], ["__scopeId", "data-v-6a62809f"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/components/moto-cms/pub-circle-select.vue"]]);
  const _imports_0 = "/static/image/marker.png";
  const _imports_1 = "/static/image/route_icon_location.png";
  const _imports_2 = "/static/image/location_icon_motorshop.png";
  const _imports_3 = "/static/image/location_icon_shop.png";
  const _imports_4 = "/static/image/location_icon_mark.png";
  const _sfc_main$2B = {
    data() {
      return {
        dialogVisible: false,
        latitude: "",
        longitude: "",
        listInfo: {
          page: 1,
          size: 20,
          loading: false,
          nomore: false,
          empty: false,
          data: []
        },
        searchInfo: {
          page: 1,
          size: 20,
          searchKeyword: "",
          loading: false,
          nomore: false,
          empty: false,
          data: []
        },
        nearbyList: [],
        mapContext: null,
        targetLocation: {
          latitude: "",
          longitude: ""
        },
        showSearch: false
      };
    },
    created() {
      this.mapContext = uni.createMapContext("map", this);
      uni.getLocation({
        type: "wgs84",
        success: (res) => {
          this.latitude = res.latitude;
          this.longitude = res.longitude;
          this.targetLocation.latitude = this.latitude;
          this.targetLocation.longitude = this.longitude;
        },
        fail: (err) => {
          formatAppLog("log", "at components/moto-cms/pub-location-select.vue:136", err);
        }
      });
    },
    methods: {
      selectLocation(item) {
        this.$emit("locationSelect", item);
        this.dialogVisible = false;
      },
      onDialogClose() {
        this.dialogVisible = false;
      },
      getNearbyPoiList() {
        if (this.listInfo.nomore) {
          return;
        }
        this.listInfo.loading = true;
        const params = {
          page: this.listInfo.page,
          size: this.listInfo.size,
          currentLatitude: this.latitude,
          currentLongitude: this.longitude,
          targetLatitude: this.targetLocation.latitude,
          targetLongitude: this.targetLocation.longitude
        };
        getApp().$openApi.motoCms.getNearbyPoiList(params).then((res) => {
          this.listInfo.loading = false;
          if (res.data.code === 200) {
            const data = res.data.data;
            if (data.length) {
              this.listInfo.data.push(...data);
            }
            if (this.listInfo.page === 1 && !data.length) {
              this.listInfo.empty = true;
              return;
            }
            if (!data.length || data.length < this.listInfo.size) {
              this.listInfo.nomore = true;
            }
          }
        });
      },
      onSearchChange(e) {
        if (!e) {
          this.showSearch = false;
        }
      },
      confirmSearch() {
        this.showSearch = true;
        this.searchInfo.page = 1;
        this.searchInfo.data = [];
        this.search();
      },
      onSeachLoadMore: lodashExports.throttle(function() {
        this.searchInfo.page++;
        this.search();
      }, 500),
      search() {
        if (this.searchInfo.nomore) {
          return;
        }
        const params = {
          page: this.searchInfo.page,
          size: this.searchInfo.size,
          currentLatitude: this.latitude,
          currentLongitude: this.longitude,
          targetLatitude: this.targetLocation.latitude,
          targetLongitude: this.targetLocation.longitude,
          key: this.searchInfo.searchKeyword
        };
        getApp().$openApi.motoCms.getNearbyPoiList(params).then((res) => {
          this.searchInfo.loading = false;
          if (res.data.code === 200) {
            const data = res.data.data;
            if (data.length) {
              this.searchInfo.data.push(...data);
            }
            if (this.searchInfo.page === 1 && !data.length) {
              this.searchInfo.empty = true;
              return;
            }
            if (!data.length || data.length < this.listInfo.size) {
              this.searchInfo.nomore = true;
            }
          }
        });
      },
      toCurrentLocation() {
        uni.getLocation({
          type: "gcj02",
          success: (res) => {
            this.mapContext.moveToLocation({
              longitude: res.longitude,
              latitude: res.latitude
            });
          }
        });
      },
      onRegionChange: lodashExports.debounce(function() {
        this.listInfo = {
          page: 1,
          size: 20,
          loading: false,
          nomore: false,
          data: []
        };
        this.getMapCenterLocation();
      }, 500),
      onScrolltolower: lodashExports.throttle(function() {
        this.listInfo.page++;
        this.getNearbyPoiList();
      }, 500),
      getMapCenterLocation() {
        this.mapContext.getCenterLocation({
          type: "gcj02",
          success: (res) => {
            this.targetLocation.latitude = res.latitude;
            this.targetLocation.longitude = res.longitude;
            this.getNearbyPoiList();
          },
          fail: (err) => {
            formatAppLog("log", "at components/moto-cms/pub-location-select.vue:257", err);
          }
        });
      }
    }
  };
  function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_input = vue.resolveComponent("el-input");
    const _component_el_dialog = vue.resolveComponent("el-dialog");
    return vue.openBlock(), vue.createBlock(_component_el_dialog, {
      style: { "padding-bottom": "0" },
      modelValue: $data.dialogVisible,
      "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.dialogVisible = $event),
      title: "关联位置/打卡点",
      width: "500",
      "align-center": "",
      onClose: $options.onDialogClose
    }, {
      default: vue.withCtx(() => [
        vue.createElementVNode("map", {
          class: "map moto-flex-row-center",
          id: "map",
          latitude: $data.latitude,
          longitude: $data.longitude,
          onRegionchange: _cache[1] || (_cache[1] = (...args) => $options.onRegionChange && $options.onRegionChange(...args))
        }, [
          vue.createElementVNode("cover-image", {
            src: _imports_0,
            class: "map-btn-center"
          }),
          vue.createElementVNode("cover-image", {
            src: _imports_1,
            class: "map-btn-my",
            onClick: _cache[0] || (_cache[0] = (...args) => $options.toCurrentLocation && $options.toCurrentLocation(...args))
          })
        ], 40, ["latitude", "longitude"]),
        vue.createElementVNode("view", {
          class: "moto-flex-row-left",
          style: { "margin": "10px 0" }
        }, [
          vue.createVNode(_component_el_input, {
            onInput: $options.onSearchChange,
            modelValue: $data.searchInfo.searchKeyword,
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.searchInfo.searchKeyword = $event),
            style: { "width": "400px" },
            placeholder: "搜索地点"
          }, null, 8, ["onInput", "modelValue"]),
          vue.createElementVNode("view", {
            class: "search-btn",
            onClick: _cache[3] || (_cache[3] = (...args) => $options.confirmSearch && $options.confirmSearch(...args))
          }, "搜索")
        ]),
        $data.showSearch ? (vue.openBlock(), vue.createElementBlock(
          "scroll-view",
          {
            key: 0,
            class: "list-scrollview",
            "show-scrollbar": false,
            "scroll-y": "",
            onScrolltolower: _cache[4] || (_cache[4] = (...args) => $options.onSeachLoadMore && $options.onSeachLoadMore(...args))
          },
          [
            vue.createElementVNode("view", { style: { "white-space": "nowrap" } }, [
              vue.createElementVNode("view", { style: { "white-space": "nowrap" } }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.searchInfo.data, (item) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "location-item",
                      onClick: ($event) => $options.selectLocation(item)
                    }, [
                      vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                        item.pointId ? (vue.openBlock(), vue.createElementBlock(
                          vue.Fragment,
                          { key: 0 },
                          [
                            item.pointType === "MOTO_SHOP" ? (vue.openBlock(), vue.createElementBlock("image", {
                              key: 0,
                              class: "point-icon",
                              src: _imports_2
                            })) : item.pointType === "SHOP" ? (vue.openBlock(), vue.createElementBlock("image", {
                              key: 1,
                              class: "point-icon",
                              src: _imports_3
                            })) : (vue.openBlock(), vue.createElementBlock("image", {
                              key: 2,
                              class: "point-icon",
                              src: _imports_4
                            }))
                          ],
                          64
                          /* STABLE_FRAGMENT */
                        )) : (vue.openBlock(), vue.createElementBlock("text", {
                          key: 1,
                          class: "iconv2 location-point"
                        }, "")),
                        vue.createElementVNode("view", null, [
                          vue.createElementVNode(
                            "view",
                            {
                              class: "location-name moto-lines-1",
                              style: { "max-width": "480px" }
                            },
                            vue.toDisplayString(item.name),
                            1
                            /* TEXT */
                          ),
                          vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                            vue.createElementVNode(
                              "view",
                              { class: "sub-info" },
                              vue.toDisplayString(item.distanceStr),
                              1
                              /* TEXT */
                            ),
                            item.address ? (vue.openBlock(), vue.createElementBlock(
                              vue.Fragment,
                              { key: 0 },
                              [
                                vue.createElementVNode("view", {
                                  class: "sub-info",
                                  style: { "margin": "0 10px" }
                                }, "|"),
                                vue.createElementVNode(
                                  "view",
                                  {
                                    class: "sub-info moto-lines-1",
                                    style: { "max-width": "400px" }
                                  },
                                  vue.toDisplayString(item.address),
                                  1
                                  /* TEXT */
                                )
                              ],
                              64
                              /* STABLE_FRAGMENT */
                            )) : vue.createCommentVNode("v-if", true)
                          ])
                        ])
                      ]),
                      vue.createElementVNode("view", { class: "line" })
                    ], 8, ["onClick"]);
                  }),
                  256
                  /* UNKEYED_FRAGMENT */
                )),
                vue.createElementVNode("view", { style: { "height": "50px" } }, [
                  $data.searchInfo.loading ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "status"
                  }, "加载中...")) : vue.createCommentVNode("v-if", true),
                  $data.searchInfo.nomore ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "status"
                  }, "没有更多了")) : vue.createCommentVNode("v-if", true),
                  $data.searchInfo.empty ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 2,
                    class: "status"
                  }, "暂无内容")) : vue.createCommentVNode("v-if", true)
                ])
              ])
            ])
          ],
          32
          /* NEED_HYDRATION */
        )) : (vue.openBlock(), vue.createElementBlock(
          "scroll-view",
          {
            key: 1,
            "show-scrollbar": false,
            "scroll-y": "",
            class: "list-scrollview",
            onScrolltolower: _cache[5] || (_cache[5] = (...args) => $options.onScrolltolower && $options.onScrolltolower(...args))
          },
          [
            vue.createElementVNode("view", { style: { "white-space": "nowrap" } }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.listInfo.data, (item) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "location-item",
                    onClick: ($event) => $options.selectLocation(item)
                  }, [
                    vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                      item.pointId ? (vue.openBlock(), vue.createElementBlock(
                        vue.Fragment,
                        { key: 0 },
                        [
                          item.pointType === "MOTO_SHOP" ? (vue.openBlock(), vue.createElementBlock("image", {
                            key: 0,
                            class: "point-icon",
                            src: _imports_2
                          })) : item.pointType === "SHOP" ? (vue.openBlock(), vue.createElementBlock("image", {
                            key: 1,
                            class: "point-icon",
                            src: _imports_3
                          })) : (vue.openBlock(), vue.createElementBlock("image", {
                            key: 2,
                            class: "point-icon",
                            src: _imports_4
                          }))
                        ],
                        64
                        /* STABLE_FRAGMENT */
                      )) : (vue.openBlock(), vue.createElementBlock("text", {
                        key: 1,
                        class: "iconv2 location-point"
                      }, "")),
                      vue.createElementVNode("view", null, [
                        vue.createElementVNode(
                          "view",
                          {
                            class: "location-name moto-lines-1",
                            style: { "max-width": "480px" }
                          },
                          vue.toDisplayString(item.name),
                          1
                          /* TEXT */
                        ),
                        vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                          vue.createElementVNode(
                            "view",
                            { class: "sub-info" },
                            vue.toDisplayString(item.distanceStr),
                            1
                            /* TEXT */
                          ),
                          item.address ? (vue.openBlock(), vue.createElementBlock(
                            vue.Fragment,
                            { key: 0 },
                            [
                              vue.createElementVNode("view", {
                                class: "sub-info",
                                style: { "margin": "0 10px" }
                              }, "|"),
                              vue.createElementVNode(
                                "view",
                                {
                                  class: "sub-info moto-lines-1",
                                  style: { "max-width": "400px" }
                                },
                                vue.toDisplayString(item.address),
                                1
                                /* TEXT */
                              )
                            ],
                            64
                            /* STABLE_FRAGMENT */
                          )) : vue.createCommentVNode("v-if", true)
                        ])
                      ])
                    ]),
                    vue.createElementVNode("view", { class: "line" })
                  ], 8, ["onClick"]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("view", { style: { "height": "50px" } }, [
                $data.listInfo.loading ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "status"
                }, "加载中...")) : vue.createCommentVNode("v-if", true),
                $data.listInfo.nomore ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 1,
                  class: "status"
                }, "没有更多了")) : vue.createCommentVNode("v-if", true),
                $data.listInfo.empty ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 2,
                  class: "status"
                }, "暂无内容")) : vue.createCommentVNode("v-if", true)
              ])
            ])
          ],
          32
          /* NEED_HYDRATION */
        ))
      ]),
      _: 1
      /* STABLE */
    }, 8, ["modelValue", "onClose"]);
  }
  const pubLocationSelect = /* @__PURE__ */ _export_sfc$1(_sfc_main$2B, [["render", _sfc_render$z], ["__scopeId", "data-v-a765c053"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/components/moto-cms/pub-location-select.vue"]]);
  const _sfc_main$2A = {
    data() {
      return {
        showSearch: false,
        dialogVisible: false,
        listInfo: {
          page: 1,
          size: 20,
          data: [],
          nomore: false,
          loading: false
        },
        searchInfo: {
          page: 1,
          size: 20,
          searchKeyword: "",
          data: [],
          nomore: false,
          loading: false,
          empty: false
        },
        awardTopicList: [],
        hotTopicList: []
      };
    },
    methods: {
      selectTopic(item) {
        this.$emit("topicSelect", item);
        this.dialogVisible = false;
      },
      getTopicList() {
        this.listInfo.loading = true;
        const params = {
          page: this.listInfo.page,
          size: this.listInfo.size
        };
        getApp().$openApi.motoCms.getTopicList(params).then((res) => {
          this.listInfo.loading = false;
          if (res.data.code === 200) {
            const data = res.data.data.dataList.filter((item) => item.topicType === 1);
            if (data.length) {
              this.listInfo.data.push(...data);
            }
            if (!data.length) {
              this.listInfo.nomore = true;
            }
          }
        });
      },
      getTagListAct() {
        getApp().$openApi.motoCms.getTagListAct().then((res) => {
          if (res.data.code === 200) {
            this.awardTopicList = res.data.data.filter((item) => item.topicType === 2);
            this.hotTopicList = res.data.data.filter((item) => item.topicType === 3);
          }
        });
      },
      onListLoadMore: lodashExports.throttle(function() {
        this.listInfo.page++;
        this.getTopicList();
      }, 500),
      onSearchChange: lodashExports.debounce(function() {
        this.searchInfo.page = 1;
        this.searchInfo.nomore = false;
        this.searchInfo.empty = false;
        if (!this.searchInfo.searchKeyword) {
          this.showSearch = false;
          return;
        }
        this.showSearch = true;
        this.search();
      }, 500),
      search() {
        const params = {
          keyword: this.searchInfo.searchKeyword,
          page: this.searchInfo.page,
          size: this.searchInfo.size
        };
        getApp().$openApi.motoCms.getTopicList(params).then((res) => {
          this.searchInfo.loading = false;
          if (res.data.code === 200) {
            const data = res.data.data.dataList.filter((item) => item.topicType === 1);
            if (data.length) {
              this.searchInfo.data.push(...data);
            }
            if (!data.length && this.searchInfo.page === 1) {
              this.searchInfo.empty = true;
              return;
            }
            if (!data.length) {
              this.searchInfo.nomore = true;
            }
          }
        });
      },
      createTopic() {
        getApp().$openApi.motoCms.createTopic({
          topicTagId: "",
          topicTagName: this.searchInfo.searchKeyword
        }).then((res) => {
          if (res.data.code === 200) {
            this.$emit("topicSelect", {
              topicId: res.data.data.topicTagId,
              topicName: this.searchInfo.searchKeyword
            });
            uni.showToast({
              icon: "none",
              title: "创建成功"
            });
            this.dialogVisible = false;
          }
        });
      },
      confirmSearch() {
        this.searchInfo.page = 1;
        this.searchInfo.nomore = false;
        this.searchInfo.empty = false;
        this.search();
      }
    }
  };
  function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_input = vue.resolveComponent("el-input");
    const _component_el_dialog = vue.resolveComponent("el-dialog");
    return vue.openBlock(), vue.createBlock(_component_el_dialog, {
      style: { "padding-bottom": "0" },
      modelValue: $data.dialogVisible,
      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.dialogVisible = $event),
      title: "关联话题",
      width: "500",
      "align-center": ""
    }, {
      default: vue.withCtx(() => [
        vue.createElementVNode("view", {
          class: "moto-flex-row-left",
          style: { "margin": "10px 0" }
        }, [
          vue.createVNode(_component_el_input, {
            onInput: $options.onSearchChange,
            modelValue: $data.searchInfo.searchKeyword,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.searchInfo.searchKeyword = $event),
            style: { "width": "400px" },
            placeholder: "搜索想添加的话题"
          }, null, 8, ["onInput", "modelValue"]),
          vue.createElementVNode("view", {
            class: "search-btn",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.confirmSearch && $options.confirmSearch(...args))
          }, "搜索")
        ]),
        $data.showSearch ? (vue.openBlock(), vue.createElementBlock("scroll-view", {
          key: 0,
          "show-scrollbar": false,
          "scroll-y": "",
          class: "scroll-container"
        }, [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.searchInfo.data, (item) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                style: { "margin-bottom": "8px" },
                class: "moto-flex-row-between",
                onClick: ($event) => $options.selectTopic(item)
              }, [
                vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                  vue.createElementVNode("view", {
                    class: "iconv2",
                    style: { "font-size": "16px", "color": "#FF6100" }
                  }, ""),
                  vue.createElementVNode(
                    "view",
                    { class: "topic-name" },
                    vue.toDisplayString(item.topicTagName),
                    1
                    /* TEXT */
                  ),
                  item.topicType === 3 ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 0,
                    class: "tag",
                    style: { "background": "linear-gradient( 223deg, #FEA732 0%, #FF6100 100%)" }
                  }, "热门")) : vue.createCommentVNode("v-if", true),
                  item.topicType === 2 ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "tag",
                    style: { "background": "linear-gradient( 226deg, #FFBEB7 0%, #FF4250 100%)" }
                  }, "有奖")) : vue.createCommentVNode("v-if", true)
                ]),
                vue.createElementVNode(
                  "view",
                  { style: { "color": "#848B9E", "font-size": "24rpx" } },
                  vue.toDisplayString(item.hotCount) + " 热度",
                  1
                  /* TEXT */
                )
              ], 8, ["onClick"]);
            }),
            256
            /* UNKEYED_FRAGMENT */
          )),
          $data.searchInfo.empty ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "moto-flex-row-between",
            onClick: _cache[2] || (_cache[2] = (...args) => $options.createTopic && $options.createTopic(...args))
          }, [
            vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
              vue.createElementVNode("view", {
                class: "iconv2",
                style: { "font-size": "16px", "color": "#FF6100" }
              }, ""),
              vue.createElementVNode(
                "view",
                { class: "topic-name" },
                vue.toDisplayString(this.searchInfo.searchKeyword),
                1
                /* TEXT */
              )
            ]),
            vue.createElementVNode("view", { style: { "font-size": "12px", "color": "#141E34" } }, "创建话题")
          ])) : vue.createCommentVNode("v-if", true)
        ])) : (vue.openBlock(), vue.createElementBlock(
          "scroll-view",
          {
            key: 1,
            "show-scrollbar": false,
            "scroll-y": "",
            class: "scroll-container",
            onScrolltolower: _cache[3] || (_cache[3] = (...args) => $options.onListLoadMore && $options.onListLoadMore(...args))
          },
          [
            vue.createElementVNode("view", { style: { "white-space": "nowrap" } }, [
              vue.createElementVNode("view", { class: "class-title" }, "有奖活动"),
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.awardTopicList, (item) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    style: { "margin-bottom": "8px" },
                    class: "moto-flex-row-between",
                    onClick: ($event) => $options.selectTopic(item)
                  }, [
                    vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                      vue.createElementVNode("view", {
                        class: "iconv2",
                        style: { "font-size": "16px", "color": "#FF6100" }
                      }, ""),
                      vue.createElementVNode(
                        "view",
                        { class: "topic-name" },
                        vue.toDisplayString(item.topicTagName),
                        1
                        /* TEXT */
                      ),
                      item.topicType === 3 ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "tag",
                        style: { "background": "linear-gradient( 223deg, #FEA732 0%, #FF6100 100%)" }
                      }, "热门")) : vue.createCommentVNode("v-if", true),
                      item.topicType === 2 ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 1,
                        class: "tag",
                        style: { "background": "linear-gradient( 226deg, #FFBEB7 0%, #FF4250 100%)" }
                      }, "有奖")) : vue.createCommentVNode("v-if", true)
                    ]),
                    vue.createElementVNode(
                      "view",
                      { style: { "color": "#848B9E", "font-size": "24rpx" } },
                      vue.toDisplayString(item.hotCount) + " 热度",
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("view", { class: "class-title" }, "热门话题"),
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.hotTopicList, (item) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    style: { "margin-bottom": "8px" },
                    class: "moto-flex-row-between",
                    onClick: ($event) => $options.selectTopic(item)
                  }, [
                    vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                      vue.createElementVNode("view", {
                        class: "iconv2",
                        style: { "font-size": "16px", "color": "#FF6100" }
                      }, ""),
                      vue.createElementVNode(
                        "view",
                        { class: "topic-name" },
                        vue.toDisplayString(item.topicTagName),
                        1
                        /* TEXT */
                      ),
                      item.topicType === 3 ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 0,
                        class: "tag",
                        style: { "background": "linear-gradient( 223deg, #FEA732 0%, #FF6100 100%)" }
                      }, "热门")) : vue.createCommentVNode("v-if", true),
                      item.topicType === 2 ? (vue.openBlock(), vue.createElementBlock("view", {
                        key: 1,
                        class: "tag",
                        style: { "background": "linear-gradient( 226deg, #FFBEB7 0%, #FF4250 100%)" }
                      }, "有奖")) : vue.createCommentVNode("v-if", true)
                    ]),
                    vue.createElementVNode(
                      "view",
                      { style: { "color": "#848B9E", "font-size": "24rpx" } },
                      vue.toDisplayString(item.hotCount) + " 热度",
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.listInfo.data, (item) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    style: { "margin-bottom": "8px" },
                    class: "moto-flex-row-between",
                    onClick: ($event) => $options.selectTopic(item)
                  }, [
                    vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                      vue.createElementVNode("view", {
                        class: "iconv2",
                        style: { "font-size": "16px", "color": "#FF6100" }
                      }, ""),
                      vue.createElementVNode(
                        "view",
                        { class: "topic-name" },
                        vue.toDisplayString(item.topicTagName),
                        1
                        /* TEXT */
                      )
                    ]),
                    vue.createElementVNode(
                      "view",
                      { style: { "color": "#848B9E", "font-size": "24rpx" } },
                      vue.toDisplayString(item.hotCount) + " 热度",
                      1
                      /* TEXT */
                    )
                  ], 8, ["onClick"]);
                }),
                256
                /* UNKEYED_FRAGMENT */
              )),
              vue.createElementVNode("view", { style: { "height": "50px" } }, [
                $data.listInfo.loading ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "status"
                }, "加载中...")) : vue.createCommentVNode("v-if", true),
                $data.listInfo.nomore ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 1,
                  class: "status"
                }, "没有更多了")) : vue.createCommentVNode("v-if", true),
                $data.listInfo.empty ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 2,
                  class: "status"
                }, "暂无内容")) : vue.createCommentVNode("v-if", true)
              ])
            ])
          ],
          32
          /* NEED_HYDRATION */
        ))
      ]),
      _: 1
      /* STABLE */
    }, 8, ["modelValue"]);
  }
  const pubTopicSelect = /* @__PURE__ */ _export_sfc$1(_sfc_main$2A, [["render", _sfc_render$y], ["__scopeId", "data-v-ec450750"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/components/moto-cms/pub-topic-select.vue"]]);
  const _sfc_main$2z = {
    data() {
      return {
        dialogVisible: true
      };
    },
    methods: {
      onDialogClose() {
      }
    }
  };
  function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_dialog = vue.resolveComponent("el-dialog");
    return vue.openBlock(), vue.createBlock(_component_el_dialog, {
      style: { "padding-bottom": "0" },
      modelValue: $data.dialogVisible,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.dialogVisible = $event),
      title: "关联分类",
      width: "500",
      "align-center": "",
      onClose: $options.onDialogClose
    }, null, 8, ["modelValue", "onClose"]);
  }
  const pubClassSelect = /* @__PURE__ */ _export_sfc$1(_sfc_main$2z, [["render", _sfc_render$x], ["__scopeId", "data-v-f9c8bc5f"], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/components/moto-cms/pub-class-select.vue"]]);
  const http$2 = request.http;
  const _sfc_main$2y = {
    components: {
      editorComponent,
      pubCircleSelect,
      pubLocationSelect,
      pubTopicSelect,
      pubClassSelect
    },
    data() {
      let formData = {
        "category_id": "",
        "title": "",
        "content": null,
        "excerpt": "",
        "is_sticky": null,
        "is_essence": null,
        "thumbnail": [{}],
        "publish_date": null
      };
      return {
        systemInfo: uni.getSystemInfoSync(),
        formData,
        wordCount: 0,
        articleId: null,
        recommendCircle: null,
        linkCircle: null,
        linkLocation: null,
        toolList: [
          {
            name: "话题",
            icon: "",
            type: "topic"
          },
          {
            name: "分类",
            icon: "",
            type: "class"
          },
          {
            name: "投票",
            icon: "",
            type: "vote"
          },
          {
            name: "清单",
            icon: "",
            type: "list"
          }
        ]
      };
    },
    onLoad(e) {
      if (e.id) {
        this.articleId = e.id;
        const id = e.id;
        this.getArticleDetail(id);
      }
      this.getCircleRecommend();
      uni.$on("openTitleInput", this.showImgTitleInput);
    },
    mounted() {
      uni.getSystemInfoSync();
      const html = "";
      this.$refs.editorComponents.parseHtml(html);
    },
    methods: {
      onToolsClick(item) {
        if (item.type === "topic") {
          this.$refs["topic-select"].dialogVisible = true;
          this.$refs["topic-select"].getTopicList();
          this.$refs["topic-select"].getTagListAct();
        }
      },
      onTopicSelect(item) {
        formatAppLog("log", "at pages/moto-cms/article-editor.vue:151", item);
      },
      openLocationSelect() {
        this.$refs["location-select"].dialogVisible = true;
        this.$refs["location-select"].getNearbyPoiList();
      },
      onLocatonSelect(item) {
        this.linkLocation = item;
      },
      onCircleSelect(item) {
        this.linkCircle = item;
      },
      openCicleSelect() {
        this.$refs["circle-select"].dialogVisible = true;
        this.$refs["circle-select"].getCircleList();
      },
      getCircleRecommend() {
        const postData = {
          page: 1,
          size: 10,
          select: "RECOMMEND"
        };
        getApp().$openApi.motoCms.getCircleList(postData).then((res) => {
          if (res.data.code === 200) {
            this.recommendCircle = res.data.data.dataList;
          }
        });
      },
      getArticleDetail(id) {
        getApp().$openApi.motoCms.getCircleArticleInfo({
          articleId: id
        }).then((res) => {
          if (res.data.code === 200) {
            this.formData.content = [];
            const data = res.data.data;
            this.formData.user_id = data.author.openId;
            this.formData.title = data.articleTitle;
            data.articleContextList[0].context.replaceAll(
              "<img",
              '<img crossorigin="anonymous"'
            );
            this.$refs.editorComponents.parseHtml(data.articleContextList[0].context);
          }
        });
      },
      onEditorReady(editorCtx) {
        if (!editorCtx)
          return;
        this.editorCtx = editorCtx;
        this.setContents();
      },
      setContents() {
        if (this.editorCtx && this.formData.content) {
          const content = this.formData.content;
          this.editorCtx.setContents({
            delta: content
          });
        }
      },
      submit(status) {
        if (!this.formData.title) {
          uni.hideLoading();
          return uni.showToast({
            icon: "none",
            title: "文章标题必填"
          });
        }
        return new Promise((resolve) => {
          this.$refs.form.validate().then((res) => {
            this.editorCtx.getContents({
              success: async (e) => {
                formatAppLog("log", "at pages/moto-cms/article-editor.vue:230", e.html);
                formatAppLog("log", "at pages/moto-cms/article-editor.vue:231", JSON.stringify(e));
                const contentList = translateOutputContent(e.delta.ops);
                formatAppLog("log", "at pages/moto-cms/article-editor.vue:233", JSON.stringify(contentList));
                let postData = {
                  type: 2,
                  contentList,
                  title: this.formData.title
                };
                if (this.articleId) {
                  postData.articleId = this.articleId;
                }
                formatAppLog("log", "at pages/moto-cms/article-editor.vue:242", postData);
                resolve();
              }
            });
          }).catch((e) => {
            formatAppLog("error", "at pages/moto-cms/article-editor.vue:261", e);
          });
        });
      },
      onTextChange(e) {
        this.wordCount = e.detail;
        this.autoSaveContent && this.autoSaveContent();
      },
      navigateBack() {
        const pages2 = getCurrentPages();
        if (pages2.length > 1) {
          uni.navigateBack(-1);
        } else {
          uni.redirectTo({
            url: "/uni_modules/uni-cms/pages/article/list/list"
          });
        }
      },
      async openImageUpload(index) {
        uni.chooseImage({
          count: 1,
          //默认9
          sizeType: ["original", "compressed"],
          //可以指定是原图还是压缩图，默认二者都有
          success: (res) => {
            this.formData.thumbnail[index].source = res.tempFilePaths[0];
            http$2.upload("common/imageUpload", {
              name: "file",
              filePath: res.tempFilePaths[0]
            }).then((res2) => {
              const result = JSON.parse(res2.data);
              if (result.code === 200) {
                this.formData.thumbnail[index].source = result.data.url;
              }
            });
          }
        });
      },
      async onInsertCover(selectMediaItems) {
        const coverIndex = this.coverIndex !== null ? this.coverIndex : 0;
        const image = selectMediaItems[0];
        const newThumbnail = [...this.formData.thumbnail];
        const parseImages = await parseImageUrl(image.src);
        newThumbnail[coverIndex] = parseImages[0];
        this.$refs.insertImageDrawer.close();
        this.formData.thumbnail = newThumbnail;
      },
      removeThumbnail(index) {
        const newThumbnail = [...this.formData.thumbnail];
        newThumbnail[index] = {};
        this.formData.thumbnail = newThumbnail;
        this.autoGetCover = false;
      },
      async previewArticle() {
      }
    }
  };
  function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_col = vue.resolveComponent("el-col");
    const _component_editor_component = vue.resolveComponent("editor-component");
    const _component_el_row = vue.resolveComponent("el-row");
    const _component_pub_circle_select = vue.resolveComponent("pub-circle-select");
    const _component_pub_location_select = vue.resolveComponent("pub-location-select");
    const _component_pub_topic_select = vue.resolveComponent("pub-topic-select");
    const _component_pub_class_select = vue.resolveComponent("pub-class-select");
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createVNode(_component_el_row, { gutter: 40 }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_el_col, { span: 6 }),
          vue.createVNode(_component_el_col, { span: 16 }, {
            default: vue.withCtx(() => [
              vue.createElementVNode("view", { class: "forms-container" }, [
                vue.createElementVNode("view", { style: { "padding": "30px 40px 0 40px" } }, [
                  vue.createElementVNode("view", { class: "title" }, [
                    vue.withDirectives(vue.createElementVNode(
                      "textarea",
                      {
                        style: { "font-size": "18px", "color": "#141E34", "font-weight": "400" },
                        "placeholder-style": "font-size: 18px",
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.formData.title = $event),
                        "auto-height": "",
                        placeholder: "请输入文章标题"
                      },
                      null,
                      512
                      /* NEED_PATCH */
                    ), [
                      [vue.vModelText, $data.formData.title]
                    ]),
                    vue.createElementVNode("view", { class: "line" })
                  ]),
                  vue.createVNode(_component_editor_component, {
                    ref: "editorComponents",
                    onTextchange: $options.onTextChange,
                    onReady: $options.onEditorReady
                  }, null, 8, ["onTextchange", "onReady"])
                ]),
                vue.createElementVNode("view", { class: "tool-container" }, [
                  vue.createElementVNode("view", { class: "moto-flex-row-between" }, [
                    vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                      vue.createElementVNode("view", {
                        class: "moto-flex-row-left",
                        onClick: _cache[1] || (_cache[1] = (...args) => $options.openLocationSelect && $options.openLocationSelect(...args))
                      }, [
                        vue.createElementVNode("view", { class: "iconv2 link-icon" }, ""),
                        vue.createElementVNode(
                          "view",
                          { class: "link-name" },
                          vue.toDisplayString($data.linkLocation ? $data.linkLocation.name : "关联位置"),
                          1
                          /* TEXT */
                        )
                      ]),
                      vue.createElementVNode("view", {
                        class: "moto-flex-row-left",
                        style: { "margin-left": "20px" },
                        onClick: _cache[2] || (_cache[2] = (...args) => $options.openCicleSelect && $options.openCicleSelect(...args))
                      }, [
                        vue.createElementVNode("view", { class: "iconv2 link-icon" }, ""),
                        vue.createElementVNode(
                          "view",
                          { class: "link-name" },
                          vue.toDisplayString($data.linkCircle ? $data.linkCircle.circleName : "关联圈子"),
                          1
                          /* TEXT */
                        )
                      ])
                    ]),
                    vue.createElementVNode(
                      "view",
                      { style: { "color": "#848B9E" } },
                      "正文字数: " + vue.toDisplayString($data.wordCount),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode("view", {
                    class: "moto-flex-row-between",
                    style: { "margin-top": "30px", "margin-left": "-10px" }
                  }, [
                    vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList($data.toolList, (item) => {
                          return vue.openBlock(), vue.createElementBlock("view", {
                            onClick: ($event) => $options.onToolsClick(item)
                          }, [
                            vue.createElementVNode("view", { class: "moto-flex-column-center tool-item" }, [
                              vue.createElementVNode(
                                "view",
                                { class: "iconv2 tool-icon" },
                                vue.toDisplayString(item.icon),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode(
                                "view",
                                { class: "tool-name" },
                                vue.toDisplayString(item.name),
                                1
                                /* TEXT */
                              )
                            ])
                          ], 8, ["onClick"]);
                        }),
                        256
                        /* UNKEYED_FRAGMENT */
                      ))
                    ]),
                    vue.createElementVNode("view", { class: "moto-flex-row-left" }, [
                      vue.createElementVNode("view", { class: "save-btn" }, "保存草稿"),
                      vue.createElementVNode("view", {
                        class: "pub-btn",
                        onClick: _cache[3] || (_cache[3] = (...args) => $options.submit && $options.submit(...args))
                      }, "发布")
                    ])
                  ])
                ])
              ])
            ]),
            _: 1
            /* STABLE */
          })
        ]),
        _: 1
        /* STABLE */
      }),
      vue.createVNode(_component_pub_circle_select, {
        onCircleSelect: $options.onCircleSelect,
        ref: "circle-select"
      }, null, 8, ["onCircleSelect"]),
      vue.createVNode(_component_pub_location_select, {
        onLocationSelect: $options.onLocatonSelect,
        ref: "location-select"
      }, null, 8, ["onLocationSelect"]),
      vue.createVNode(_component_pub_topic_select, {
        onTopicSelect: $options.onTopicSelect,
        ref: "topic-select"
      }, null, 8, ["onTopicSelect"]),
      vue.createVNode(
        _component_pub_class_select,
        { ref: "class-select" },
        null,
        512
        /* NEED_PATCH */
      )
    ]);
  }
  const PagesMotoCmsArticleEditor = /* @__PURE__ */ _export_sfc$1(_sfc_main$2y, [["render", _sfc_render$w], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/pages/moto-cms/article-editor.vue"]]);
  const _sfc_main$2x = {
    data() {
      return {
        systemInfo: uni.getSystemInfoSync(),
        qrCodeImg: "",
        timer: null,
        loginInterval: null,
        codeExpire: false
      };
    },
    onLoad() {
      this.getLoginQrCode();
    },
    methods: {
      ...mapMutations(["setUserInfo"]),
      getLoginQrCode() {
        getApp().$openApi.user.getLoginQrCode({
          deviceId: this.systemInfo.deviceId
        }).then((res) => {
          if (res.data.code === 200) {
            this.codeExpire = false;
            clearTimeout(this.timer);
            const expireTime = res.data.data.expireTime;
            this.qrCodeImg = res.data.data.qrCode;
            this.timer = setTimeout(() => {
              this.codeExpire = true;
              clearInterval(this.loginInterval);
            }, expireTime * 1e3);
            this.loginInterval = setInterval(() => {
              this.checkQrLogin(res.data.data.qrId);
            }, 1e3);
            this.checkQrLogin(res.data.data.qrId);
          }
        });
      },
      checkQrLogin(id) {
        getApp().$openApi.user.checkQrLogin({
          qrId: id
        }).then((res) => {
          if (res.data.code === 200) {
            const data = res.data.data;
            if (data.status === 2) {
              clearInterval(this.loginInterval);
              this.setUserInfo(res.data.data.userInfo);
              uni.showToast({
                title: "登录成功",
                icon: "none"
              });
              setTimeout(() => {
                uni.navigateTo({
                  url: "/pages/index"
                });
              }, 500);
            } else if (data.status === 3) {
              clearInterval(this.loginInterval);
              this.codeExpire = true;
            }
          }
        });
      }
    }
  };
  function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_card = vue.resolveComponent("el-card");
    return vue.openBlock(), vue.createElementBlock("view", { class: "moto-flex-row-center login-container" }, [
      vue.createVNode(_component_el_card, {
        style: { "width": "480px" },
        shadow: "always"
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", { class: "moto-flex-column-center" }, [
            vue.createElementVNode("view", { class: "title" }, "登录"),
            vue.createElementVNode("view", { class: "qr-code-box" }, [
              $data.qrCodeImg ? (vue.openBlock(), vue.createElementBlock("img", {
                key: 0,
                src: $data.qrCodeImg,
                class: "qr-code"
              }, null, 8, ["src"])) : vue.createCommentVNode("v-if", true)
            ]),
            $data.codeExpire ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "moto-flex-row-left",
              style: { "margin-left": "20px" },
              onClick: _cache[0] || (_cache[0] = (...args) => $options.getLoginQrCode && $options.getLoginQrCode(...args))
            }, [
              vue.createElementVNode("view", null, "二维码已过期，请"),
              vue.createElementVNode("view", { style: { "color": "blue" } }, "刷新")
            ])) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("text", null, "请使用机车圈app扫码登录")
          ])
        ]),
        _: 1
        /* STABLE */
      })
    ]);
  }
  const PagesLoginLogin = /* @__PURE__ */ _export_sfc$1(_sfc_main$2x, [["render", _sfc_render$v], ["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/pages/login/login.vue"]]);
  __definePage("pages/moto-cms/article-list", PagesMotoCmsArticleList);
  __definePage("pages/moto-cms/article-editor", PagesMotoCmsArticleEditor);
  __definePage("pages/login/login", PagesLoginLogin);
  const _sfc_main$2w = {
    onLaunch: function() {
      formatAppLog("log", "at App.vue:4", "App Launch");
    },
    onShow: function() {
      formatAppLog("log", "at App.vue:7", "App Show");
    },
    onHide: function() {
      formatAppLog("log", "at App.vue:10", "App Hide");
    }
  };
  const App = /* @__PURE__ */ _export_sfc$1(_sfc_main$2w, [["__file", "/Users/yuan/Desktop/study_ materials/moto-edit/App.vue"]]);
  var md5$1 = { exports: {} };
  const __viteBrowserExternal = new Proxy({}, {
    get(_2, key) {
      throw new Error(`Module "" has been externalized for browser compatibility. Cannot access ".${key}" in client code.  See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
    }
  });
  const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    default: __viteBrowserExternal
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
  /**
   * [js-md5]{@link https://github.com/emn178/js-md5}
   *
   * @namespace md5
   * @version 0.8.3
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2023
   * @license MIT
   */
  (function(module2) {
    (function() {
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root2 = WINDOW ? window : {};
      if (root2.JS_MD5_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root2.JS_MD5_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root2 = commonjsGlobal;
      } else if (WEB_WORKER) {
        root2 = self;
      }
      var COMMON_JS = !root2.JS_MD5_NO_COMMON_JS && true && module2.exports;
      var ARRAY_BUFFER = !root2.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var EXTRA = [128, 32768, 8388608, -2147483648];
      var SHIFT = [0, 8, 16, 24];
      var OUTPUT_TYPES = ["hex", "array", "digest", "buffer", "arrayBuffer", "base64"];
      var BASE64_ENCODE_CHAR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
      var blocks = [], buffer8;
      if (ARRAY_BUFFER) {
        var buffer = new ArrayBuffer(68);
        buffer8 = new Uint8Array(buffer);
        blocks = new Uint32Array(buffer);
      }
      var isArray2 = Array.isArray;
      if (root2.JS_MD5_NO_NODE_JS || !isArray2) {
        isArray2 = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      var isView = ArrayBuffer.isView;
      if (ARRAY_BUFFER && (root2.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !isView)) {
        isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var formatMessage2 = function(message2) {
        var type3 = typeof message2;
        if (type3 === "string") {
          return [message2, true];
        }
        if (type3 !== "object" || message2 === null) {
          throw new Error(INPUT_ERROR);
        }
        if (ARRAY_BUFFER && message2.constructor === ArrayBuffer) {
          return [new Uint8Array(message2), false];
        }
        if (!isArray2(message2) && !isView(message2)) {
          throw new Error(INPUT_ERROR);
        }
        return [message2, false];
      };
      var createOutputMethod = function(outputType) {
        return function(message2) {
          return new Md5(true).update(message2)[outputType]();
        };
      };
      var createMethod = function() {
        var method = createOutputMethod("hex");
        if (NODE_JS) {
          method = nodeWrap(method);
        }
        method.create = function() {
          return new Md5();
        };
        method.update = function(message2) {
          return method.create().update(message2);
        };
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type3 = OUTPUT_TYPES[i2];
          method[type3] = createOutputMethod(type3);
        }
        return method;
      };
      var nodeWrap = function(method) {
        var crypto = require$$0;
        var Buffer2 = require$$0.Buffer;
        var bufferFrom;
        if (Buffer2.from && !root2.JS_MD5_NO_BUFFER_FROM) {
          bufferFrom = Buffer2.from;
        } else {
          bufferFrom = function(message2) {
            return new Buffer2(message2);
          };
        }
        var nodeMethod = function(message2) {
          if (typeof message2 === "string") {
            return crypto.createHash("md5").update(message2, "utf8").digest("hex");
          } else {
            if (message2 === null || message2 === void 0) {
              throw new Error(INPUT_ERROR);
            } else if (message2.constructor === ArrayBuffer) {
              message2 = new Uint8Array(message2);
            }
          }
          if (isArray2(message2) || isView(message2) || message2.constructor === Buffer2) {
            return crypto.createHash("md5").update(bufferFrom(message2)).digest("hex");
          } else {
            return method(message2);
          }
        };
        return nodeMethod;
      };
      var createHmacOutputMethod = function(outputType) {
        return function(key, message2) {
          return new HmacMd5(key, true).update(message2)[outputType]();
        };
      };
      var createHmacMethod = function() {
        var method = createHmacOutputMethod("hex");
        method.create = function(key) {
          return new HmacMd5(key);
        };
        method.update = function(key, message2) {
          return method.create(key).update(message2);
        };
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type3 = OUTPUT_TYPES[i2];
          method[type3] = createHmacOutputMethod(type3);
        }
        return method;
      };
      function Md5(sharedMemory) {
        if (sharedMemory) {
          blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          this.blocks = blocks;
          this.buffer8 = buffer8;
        } else {
          if (ARRAY_BUFFER) {
            var buffer2 = new ArrayBuffer(68);
            this.buffer8 = new Uint8Array(buffer2);
            this.blocks = new Uint32Array(buffer2);
          } else {
            this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          }
        }
        this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;
        this.finalized = this.hashed = false;
        this.first = true;
      }
      Md5.prototype.update = function(message2) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var result = formatMessage2(message2);
        message2 = result[0];
        var isString2 = result[1];
        var code, index = 0, i2, length = message2.length, blocks2 = this.blocks;
        var buffer82 = this.buffer8;
        while (index < length) {
          if (this.hashed) {
            this.hashed = false;
            blocks2[0] = blocks2[16];
            blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
          }
          if (isString2) {
            if (ARRAY_BUFFER) {
              for (i2 = this.start; index < length && i2 < 64; ++index) {
                code = message2.charCodeAt(index);
                if (code < 128) {
                  buffer82[i2++] = code;
                } else if (code < 2048) {
                  buffer82[i2++] = 192 | code >>> 6;
                  buffer82[i2++] = 128 | code & 63;
                } else if (code < 55296 || code >= 57344) {
                  buffer82[i2++] = 224 | code >>> 12;
                  buffer82[i2++] = 128 | code >>> 6 & 63;
                  buffer82[i2++] = 128 | code & 63;
                } else {
                  code = 65536 + ((code & 1023) << 10 | message2.charCodeAt(++index) & 1023);
                  buffer82[i2++] = 240 | code >>> 18;
                  buffer82[i2++] = 128 | code >>> 12 & 63;
                  buffer82[i2++] = 128 | code >>> 6 & 63;
                  buffer82[i2++] = 128 | code & 63;
                }
              }
            } else {
              for (i2 = this.start; index < length && i2 < 64; ++index) {
                code = message2.charCodeAt(index);
                if (code < 128) {
                  blocks2[i2 >>> 2] |= code << SHIFT[i2++ & 3];
                } else if (code < 2048) {
                  blocks2[i2 >>> 2] |= (192 | code >>> 6) << SHIFT[i2++ & 3];
                  blocks2[i2 >>> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                } else if (code < 55296 || code >= 57344) {
                  blocks2[i2 >>> 2] |= (224 | code >>> 12) << SHIFT[i2++ & 3];
                  blocks2[i2 >>> 2] |= (128 | code >>> 6 & 63) << SHIFT[i2++ & 3];
                  blocks2[i2 >>> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                } else {
                  code = 65536 + ((code & 1023) << 10 | message2.charCodeAt(++index) & 1023);
                  blocks2[i2 >>> 2] |= (240 | code >>> 18) << SHIFT[i2++ & 3];
                  blocks2[i2 >>> 2] |= (128 | code >>> 12 & 63) << SHIFT[i2++ & 3];
                  blocks2[i2 >>> 2] |= (128 | code >>> 6 & 63) << SHIFT[i2++ & 3];
                  blocks2[i2 >>> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
                }
              }
            }
          } else {
            if (ARRAY_BUFFER) {
              for (i2 = this.start; index < length && i2 < 64; ++index) {
                buffer82[i2++] = message2[index];
              }
            } else {
              for (i2 = this.start; index < length && i2 < 64; ++index) {
                blocks2[i2 >>> 2] |= message2[index] << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          this.bytes += i2 - this.start;
          if (i2 >= 64) {
            this.start = i2 - 64;
            this.hash();
            this.hashed = true;
          } else {
            this.start = i2;
          }
        }
        if (this.bytes > 4294967295) {
          this.hBytes += this.bytes / 4294967296 << 0;
          this.bytes = this.bytes % 4294967296;
        }
        return this;
      };
      Md5.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks2 = this.blocks, i2 = this.lastByteIndex;
        blocks2[i2 >>> 2] |= EXTRA[i2 & 3];
        if (i2 >= 56) {
          if (!this.hashed) {
            this.hash();
          }
          blocks2[0] = blocks2[16];
          blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
        }
        blocks2[14] = this.bytes << 3;
        blocks2[15] = this.hBytes << 3 | this.bytes >>> 29;
        this.hash();
      };
      Md5.prototype.hash = function() {
        var a2, b2, c2, d2, bc, da, blocks2 = this.blocks;
        if (this.first) {
          a2 = blocks2[0] - 680876937;
          a2 = (a2 << 7 | a2 >>> 25) - 271733879 << 0;
          d2 = (-1732584194 ^ a2 & 2004318071) + blocks2[1] - 117830708;
          d2 = (d2 << 12 | d2 >>> 20) + a2 << 0;
          c2 = (-271733879 ^ d2 & (a2 ^ -271733879)) + blocks2[2] - 1126478375;
          c2 = (c2 << 17 | c2 >>> 15) + d2 << 0;
          b2 = (a2 ^ c2 & (d2 ^ a2)) + blocks2[3] - 1316259209;
          b2 = (b2 << 22 | b2 >>> 10) + c2 << 0;
        } else {
          a2 = this.h0;
          b2 = this.h1;
          c2 = this.h2;
          d2 = this.h3;
          a2 += (d2 ^ b2 & (c2 ^ d2)) + blocks2[0] - 680876936;
          a2 = (a2 << 7 | a2 >>> 25) + b2 << 0;
          d2 += (c2 ^ a2 & (b2 ^ c2)) + blocks2[1] - 389564586;
          d2 = (d2 << 12 | d2 >>> 20) + a2 << 0;
          c2 += (b2 ^ d2 & (a2 ^ b2)) + blocks2[2] + 606105819;
          c2 = (c2 << 17 | c2 >>> 15) + d2 << 0;
          b2 += (a2 ^ c2 & (d2 ^ a2)) + blocks2[3] - 1044525330;
          b2 = (b2 << 22 | b2 >>> 10) + c2 << 0;
        }
        a2 += (d2 ^ b2 & (c2 ^ d2)) + blocks2[4] - 176418897;
        a2 = (a2 << 7 | a2 >>> 25) + b2 << 0;
        d2 += (c2 ^ a2 & (b2 ^ c2)) + blocks2[5] + 1200080426;
        d2 = (d2 << 12 | d2 >>> 20) + a2 << 0;
        c2 += (b2 ^ d2 & (a2 ^ b2)) + blocks2[6] - 1473231341;
        c2 = (c2 << 17 | c2 >>> 15) + d2 << 0;
        b2 += (a2 ^ c2 & (d2 ^ a2)) + blocks2[7] - 45705983;
        b2 = (b2 << 22 | b2 >>> 10) + c2 << 0;
        a2 += (d2 ^ b2 & (c2 ^ d2)) + blocks2[8] + 1770035416;
        a2 = (a2 << 7 | a2 >>> 25) + b2 << 0;
        d2 += (c2 ^ a2 & (b2 ^ c2)) + blocks2[9] - 1958414417;
        d2 = (d2 << 12 | d2 >>> 20) + a2 << 0;
        c2 += (b2 ^ d2 & (a2 ^ b2)) + blocks2[10] - 42063;
        c2 = (c2 << 17 | c2 >>> 15) + d2 << 0;
        b2 += (a2 ^ c2 & (d2 ^ a2)) + blocks2[11] - 1990404162;
        b2 = (b2 << 22 | b2 >>> 10) + c2 << 0;
        a2 += (d2 ^ b2 & (c2 ^ d2)) + blocks2[12] + 1804603682;
        a2 = (a2 << 7 | a2 >>> 25) + b2 << 0;
        d2 += (c2 ^ a2 & (b2 ^ c2)) + blocks2[13] - 40341101;
        d2 = (d2 << 12 | d2 >>> 20) + a2 << 0;
        c2 += (b2 ^ d2 & (a2 ^ b2)) + blocks2[14] - 1502002290;
        c2 = (c2 << 17 | c2 >>> 15) + d2 << 0;
        b2 += (a2 ^ c2 & (d2 ^ a2)) + blocks2[15] + 1236535329;
        b2 = (b2 << 22 | b2 >>> 10) + c2 << 0;
        a2 += (c2 ^ d2 & (b2 ^ c2)) + blocks2[1] - 165796510;
        a2 = (a2 << 5 | a2 >>> 27) + b2 << 0;
        d2 += (b2 ^ c2 & (a2 ^ b2)) + blocks2[6] - 1069501632;
        d2 = (d2 << 9 | d2 >>> 23) + a2 << 0;
        c2 += (a2 ^ b2 & (d2 ^ a2)) + blocks2[11] + 643717713;
        c2 = (c2 << 14 | c2 >>> 18) + d2 << 0;
        b2 += (d2 ^ a2 & (c2 ^ d2)) + blocks2[0] - 373897302;
        b2 = (b2 << 20 | b2 >>> 12) + c2 << 0;
        a2 += (c2 ^ d2 & (b2 ^ c2)) + blocks2[5] - 701558691;
        a2 = (a2 << 5 | a2 >>> 27) + b2 << 0;
        d2 += (b2 ^ c2 & (a2 ^ b2)) + blocks2[10] + 38016083;
        d2 = (d2 << 9 | d2 >>> 23) + a2 << 0;
        c2 += (a2 ^ b2 & (d2 ^ a2)) + blocks2[15] - 660478335;
        c2 = (c2 << 14 | c2 >>> 18) + d2 << 0;
        b2 += (d2 ^ a2 & (c2 ^ d2)) + blocks2[4] - 405537848;
        b2 = (b2 << 20 | b2 >>> 12) + c2 << 0;
        a2 += (c2 ^ d2 & (b2 ^ c2)) + blocks2[9] + 568446438;
        a2 = (a2 << 5 | a2 >>> 27) + b2 << 0;
        d2 += (b2 ^ c2 & (a2 ^ b2)) + blocks2[14] - 1019803690;
        d2 = (d2 << 9 | d2 >>> 23) + a2 << 0;
        c2 += (a2 ^ b2 & (d2 ^ a2)) + blocks2[3] - 187363961;
        c2 = (c2 << 14 | c2 >>> 18) + d2 << 0;
        b2 += (d2 ^ a2 & (c2 ^ d2)) + blocks2[8] + 1163531501;
        b2 = (b2 << 20 | b2 >>> 12) + c2 << 0;
        a2 += (c2 ^ d2 & (b2 ^ c2)) + blocks2[13] - 1444681467;
        a2 = (a2 << 5 | a2 >>> 27) + b2 << 0;
        d2 += (b2 ^ c2 & (a2 ^ b2)) + blocks2[2] - 51403784;
        d2 = (d2 << 9 | d2 >>> 23) + a2 << 0;
        c2 += (a2 ^ b2 & (d2 ^ a2)) + blocks2[7] + 1735328473;
        c2 = (c2 << 14 | c2 >>> 18) + d2 << 0;
        b2 += (d2 ^ a2 & (c2 ^ d2)) + blocks2[12] - 1926607734;
        b2 = (b2 << 20 | b2 >>> 12) + c2 << 0;
        bc = b2 ^ c2;
        a2 += (bc ^ d2) + blocks2[5] - 378558;
        a2 = (a2 << 4 | a2 >>> 28) + b2 << 0;
        d2 += (bc ^ a2) + blocks2[8] - 2022574463;
        d2 = (d2 << 11 | d2 >>> 21) + a2 << 0;
        da = d2 ^ a2;
        c2 += (da ^ b2) + blocks2[11] + 1839030562;
        c2 = (c2 << 16 | c2 >>> 16) + d2 << 0;
        b2 += (da ^ c2) + blocks2[14] - 35309556;
        b2 = (b2 << 23 | b2 >>> 9) + c2 << 0;
        bc = b2 ^ c2;
        a2 += (bc ^ d2) + blocks2[1] - 1530992060;
        a2 = (a2 << 4 | a2 >>> 28) + b2 << 0;
        d2 += (bc ^ a2) + blocks2[4] + 1272893353;
        d2 = (d2 << 11 | d2 >>> 21) + a2 << 0;
        da = d2 ^ a2;
        c2 += (da ^ b2) + blocks2[7] - 155497632;
        c2 = (c2 << 16 | c2 >>> 16) + d2 << 0;
        b2 += (da ^ c2) + blocks2[10] - 1094730640;
        b2 = (b2 << 23 | b2 >>> 9) + c2 << 0;
        bc = b2 ^ c2;
        a2 += (bc ^ d2) + blocks2[13] + 681279174;
        a2 = (a2 << 4 | a2 >>> 28) + b2 << 0;
        d2 += (bc ^ a2) + blocks2[0] - 358537222;
        d2 = (d2 << 11 | d2 >>> 21) + a2 << 0;
        da = d2 ^ a2;
        c2 += (da ^ b2) + blocks2[3] - 722521979;
        c2 = (c2 << 16 | c2 >>> 16) + d2 << 0;
        b2 += (da ^ c2) + blocks2[6] + 76029189;
        b2 = (b2 << 23 | b2 >>> 9) + c2 << 0;
        bc = b2 ^ c2;
        a2 += (bc ^ d2) + blocks2[9] - 640364487;
        a2 = (a2 << 4 | a2 >>> 28) + b2 << 0;
        d2 += (bc ^ a2) + blocks2[12] - 421815835;
        d2 = (d2 << 11 | d2 >>> 21) + a2 << 0;
        da = d2 ^ a2;
        c2 += (da ^ b2) + blocks2[15] + 530742520;
        c2 = (c2 << 16 | c2 >>> 16) + d2 << 0;
        b2 += (da ^ c2) + blocks2[2] - 995338651;
        b2 = (b2 << 23 | b2 >>> 9) + c2 << 0;
        a2 += (c2 ^ (b2 | ~d2)) + blocks2[0] - 198630844;
        a2 = (a2 << 6 | a2 >>> 26) + b2 << 0;
        d2 += (b2 ^ (a2 | ~c2)) + blocks2[7] + 1126891415;
        d2 = (d2 << 10 | d2 >>> 22) + a2 << 0;
        c2 += (a2 ^ (d2 | ~b2)) + blocks2[14] - 1416354905;
        c2 = (c2 << 15 | c2 >>> 17) + d2 << 0;
        b2 += (d2 ^ (c2 | ~a2)) + blocks2[5] - 57434055;
        b2 = (b2 << 21 | b2 >>> 11) + c2 << 0;
        a2 += (c2 ^ (b2 | ~d2)) + blocks2[12] + 1700485571;
        a2 = (a2 << 6 | a2 >>> 26) + b2 << 0;
        d2 += (b2 ^ (a2 | ~c2)) + blocks2[3] - 1894986606;
        d2 = (d2 << 10 | d2 >>> 22) + a2 << 0;
        c2 += (a2 ^ (d2 | ~b2)) + blocks2[10] - 1051523;
        c2 = (c2 << 15 | c2 >>> 17) + d2 << 0;
        b2 += (d2 ^ (c2 | ~a2)) + blocks2[1] - 2054922799;
        b2 = (b2 << 21 | b2 >>> 11) + c2 << 0;
        a2 += (c2 ^ (b2 | ~d2)) + blocks2[8] + 1873313359;
        a2 = (a2 << 6 | a2 >>> 26) + b2 << 0;
        d2 += (b2 ^ (a2 | ~c2)) + blocks2[15] - 30611744;
        d2 = (d2 << 10 | d2 >>> 22) + a2 << 0;
        c2 += (a2 ^ (d2 | ~b2)) + blocks2[6] - 1560198380;
        c2 = (c2 << 15 | c2 >>> 17) + d2 << 0;
        b2 += (d2 ^ (c2 | ~a2)) + blocks2[13] + 1309151649;
        b2 = (b2 << 21 | b2 >>> 11) + c2 << 0;
        a2 += (c2 ^ (b2 | ~d2)) + blocks2[4] - 145523070;
        a2 = (a2 << 6 | a2 >>> 26) + b2 << 0;
        d2 += (b2 ^ (a2 | ~c2)) + blocks2[11] - 1120210379;
        d2 = (d2 << 10 | d2 >>> 22) + a2 << 0;
        c2 += (a2 ^ (d2 | ~b2)) + blocks2[2] + 718787259;
        c2 = (c2 << 15 | c2 >>> 17) + d2 << 0;
        b2 += (d2 ^ (c2 | ~a2)) + blocks2[9] - 343485551;
        b2 = (b2 << 21 | b2 >>> 11) + c2 << 0;
        if (this.first) {
          this.h0 = a2 + 1732584193 << 0;
          this.h1 = b2 - 271733879 << 0;
          this.h2 = c2 - 1732584194 << 0;
          this.h3 = d2 + 271733878 << 0;
          this.first = false;
        } else {
          this.h0 = this.h0 + a2 << 0;
          this.h1 = this.h1 + b2 << 0;
          this.h2 = this.h2 + c2 << 0;
          this.h3 = this.h3 + d2 << 0;
        }
      };
      Md5.prototype.hex = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
        return HEX_CHARS[h0 >>> 4 & 15] + HEX_CHARS[h0 & 15] + HEX_CHARS[h0 >>> 12 & 15] + HEX_CHARS[h0 >>> 8 & 15] + HEX_CHARS[h0 >>> 20 & 15] + HEX_CHARS[h0 >>> 16 & 15] + HEX_CHARS[h0 >>> 28 & 15] + HEX_CHARS[h0 >>> 24 & 15] + HEX_CHARS[h1 >>> 4 & 15] + HEX_CHARS[h1 & 15] + HEX_CHARS[h1 >>> 12 & 15] + HEX_CHARS[h1 >>> 8 & 15] + HEX_CHARS[h1 >>> 20 & 15] + HEX_CHARS[h1 >>> 16 & 15] + HEX_CHARS[h1 >>> 28 & 15] + HEX_CHARS[h1 >>> 24 & 15] + HEX_CHARS[h2 >>> 4 & 15] + HEX_CHARS[h2 & 15] + HEX_CHARS[h2 >>> 12 & 15] + HEX_CHARS[h2 >>> 8 & 15] + HEX_CHARS[h2 >>> 20 & 15] + HEX_CHARS[h2 >>> 16 & 15] + HEX_CHARS[h2 >>> 28 & 15] + HEX_CHARS[h2 >>> 24 & 15] + HEX_CHARS[h3 >>> 4 & 15] + HEX_CHARS[h3 & 15] + HEX_CHARS[h3 >>> 12 & 15] + HEX_CHARS[h3 >>> 8 & 15] + HEX_CHARS[h3 >>> 20 & 15] + HEX_CHARS[h3 >>> 16 & 15] + HEX_CHARS[h3 >>> 28 & 15] + HEX_CHARS[h3 >>> 24 & 15];
      };
      Md5.prototype.toString = Md5.prototype.hex;
      Md5.prototype.digest = function() {
        this.finalize();
        var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;
        return [
          h0 & 255,
          h0 >>> 8 & 255,
          h0 >>> 16 & 255,
          h0 >>> 24 & 255,
          h1 & 255,
          h1 >>> 8 & 255,
          h1 >>> 16 & 255,
          h1 >>> 24 & 255,
          h2 & 255,
          h2 >>> 8 & 255,
          h2 >>> 16 & 255,
          h2 >>> 24 & 255,
          h3 & 255,
          h3 >>> 8 & 255,
          h3 >>> 16 & 255,
          h3 >>> 24 & 255
        ];
      };
      Md5.prototype.array = Md5.prototype.digest;
      Md5.prototype.arrayBuffer = function() {
        this.finalize();
        var buffer2 = new ArrayBuffer(16);
        var blocks2 = new Uint32Array(buffer2);
        blocks2[0] = this.h0;
        blocks2[1] = this.h1;
        blocks2[2] = this.h2;
        blocks2[3] = this.h3;
        return buffer2;
      };
      Md5.prototype.buffer = Md5.prototype.arrayBuffer;
      Md5.prototype.base64 = function() {
        var v1, v2, v3, base64Str = "", bytes = this.array();
        for (var i2 = 0; i2 < 15; ) {
          v1 = bytes[i2++];
          v2 = bytes[i2++];
          v3 = bytes[i2++];
          base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] + BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] + BASE64_ENCODE_CHAR[v3 & 63];
        }
        v1 = bytes[i2];
        base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] + BASE64_ENCODE_CHAR[v1 << 4 & 63] + "==";
        return base64Str;
      };
      function HmacMd5(key, sharedMemory) {
        var i2, result = formatMessage2(key);
        key = result[0];
        if (result[1]) {
          var bytes = [], length = key.length, index = 0, code;
          for (i2 = 0; i2 < length; ++i2) {
            code = key.charCodeAt(i2);
            if (code < 128) {
              bytes[index++] = code;
            } else if (code < 2048) {
              bytes[index++] = 192 | code >>> 6;
              bytes[index++] = 128 | code & 63;
            } else if (code < 55296 || code >= 57344) {
              bytes[index++] = 224 | code >>> 12;
              bytes[index++] = 128 | code >>> 6 & 63;
              bytes[index++] = 128 | code & 63;
            } else {
              code = 65536 + ((code & 1023) << 10 | key.charCodeAt(++i2) & 1023);
              bytes[index++] = 240 | code >>> 18;
              bytes[index++] = 128 | code >>> 12 & 63;
              bytes[index++] = 128 | code >>> 6 & 63;
              bytes[index++] = 128 | code & 63;
            }
          }
          key = bytes;
        }
        if (key.length > 64) {
          key = new Md5(true).update(key).array();
        }
        var oKeyPad = [], iKeyPad = [];
        for (i2 = 0; i2 < 64; ++i2) {
          var b2 = key[i2] || 0;
          oKeyPad[i2] = 92 ^ b2;
          iKeyPad[i2] = 54 ^ b2;
        }
        Md5.call(this, sharedMemory);
        this.update(iKeyPad);
        this.oKeyPad = oKeyPad;
        this.inner = true;
        this.sharedMemory = sharedMemory;
      }
      HmacMd5.prototype = new Md5();
      HmacMd5.prototype.finalize = function() {
        Md5.prototype.finalize.call(this);
        if (this.inner) {
          this.inner = false;
          var innerHash = this.array();
          Md5.call(this, this.sharedMemory);
          this.update(this.oKeyPad);
          this.update(innerHash);
          Md5.prototype.finalize.call(this);
        }
      };
      var exports2 = createMethod();
      exports2.md5 = exports2;
      exports2.md5.hmac = createHmacMethod();
      if (COMMON_JS) {
        module2.exports = exports2;
      } else {
        root2.md5 = exports2;
      }
    })();
  })(md5$1);
  var md5Exports = md5$1.exports;
  const md5 = /* @__PURE__ */ getDefaultExportFromCjs(md5Exports);
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  function int2char(n2) {
    return BI_RM.charAt(n2);
  }
  function op_and(x2, y2) {
    return x2 & y2;
  }
  function op_or(x2, y2) {
    return x2 | y2;
  }
  function op_xor(x2, y2) {
    return x2 ^ y2;
  }
  function op_andnot(x2, y2) {
    return x2 & ~y2;
  }
  function lbit(x2) {
    if (x2 == 0) {
      return -1;
    }
    var r2 = 0;
    if ((x2 & 65535) == 0) {
      x2 >>= 16;
      r2 += 16;
    }
    if ((x2 & 255) == 0) {
      x2 >>= 8;
      r2 += 8;
    }
    if ((x2 & 15) == 0) {
      x2 >>= 4;
      r2 += 4;
    }
    if ((x2 & 3) == 0) {
      x2 >>= 2;
      r2 += 2;
    }
    if ((x2 & 1) == 0) {
      ++r2;
    }
    return r2;
  }
  function cbit(x2) {
    var r2 = 0;
    while (x2 != 0) {
      x2 &= x2 - 1;
      ++r2;
    }
    return r2;
  }
  var b64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var b64pad = "=";
  function hex2b64(h2) {
    var i2;
    var c2;
    var ret = "";
    for (i2 = 0; i2 + 3 <= h2.length; i2 += 3) {
      c2 = parseInt(h2.substring(i2, i2 + 3), 16);
      ret += b64map.charAt(c2 >> 6) + b64map.charAt(c2 & 63);
    }
    if (i2 + 1 == h2.length) {
      c2 = parseInt(h2.substring(i2, i2 + 1), 16);
      ret += b64map.charAt(c2 << 2);
    } else if (i2 + 2 == h2.length) {
      c2 = parseInt(h2.substring(i2, i2 + 2), 16);
      ret += b64map.charAt(c2 >> 2) + b64map.charAt((c2 & 3) << 4);
    }
    while ((ret.length & 3) > 0) {
      ret += b64pad;
    }
    return ret;
  }
  function b64tohex(s2) {
    var ret = "";
    var i2;
    var k = 0;
    var slop = 0;
    for (i2 = 0; i2 < s2.length; ++i2) {
      if (s2.charAt(i2) == b64pad) {
        break;
      }
      var v2 = b64map.indexOf(s2.charAt(i2));
      if (v2 < 0) {
        continue;
      }
      if (k == 0) {
        ret += int2char(v2 >> 2);
        slop = v2 & 3;
        k = 1;
      } else if (k == 1) {
        ret += int2char(slop << 2 | v2 >> 4);
        slop = v2 & 15;
        k = 2;
      } else if (k == 2) {
        ret += int2char(slop);
        ret += int2char(v2 >> 2);
        slop = v2 & 3;
        k = 3;
      } else {
        ret += int2char(slop << 2 | v2 >> 4);
        ret += int2char(v2 & 15);
        k = 0;
      }
    }
    if (k == 1) {
      ret += int2char(slop << 2);
    }
    return ret;
  }
  var decoder$1;
  var Hex = {
    decode: function(a2) {
      var i2;
      if (decoder$1 === void 0) {
        var hex = "0123456789ABCDEF";
        var ignore = " \f\n\r	 \u2028\u2029";
        decoder$1 = {};
        for (i2 = 0; i2 < 16; ++i2) {
          decoder$1[hex.charAt(i2)] = i2;
        }
        hex = hex.toLowerCase();
        for (i2 = 10; i2 < 16; ++i2) {
          decoder$1[hex.charAt(i2)] = i2;
        }
        for (i2 = 0; i2 < ignore.length; ++i2) {
          decoder$1[ignore.charAt(i2)] = -1;
        }
      }
      var out = [];
      var bits = 0;
      var char_count = 0;
      for (i2 = 0; i2 < a2.length; ++i2) {
        var c2 = a2.charAt(i2);
        if (c2 == "=") {
          break;
        }
        c2 = decoder$1[c2];
        if (c2 == -1) {
          continue;
        }
        if (c2 === void 0) {
          throw new Error("Illegal character at offset " + i2);
        }
        bits |= c2;
        if (++char_count >= 2) {
          out[out.length] = bits;
          bits = 0;
          char_count = 0;
        } else {
          bits <<= 4;
        }
      }
      if (char_count) {
        throw new Error("Hex encoding incomplete: 4 bits missing");
      }
      return out;
    }
  };
  var decoder;
  var Base64 = {
    decode: function(a2) {
      var i2;
      if (decoder === void 0) {
        var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var ignore = "= \f\n\r	 \u2028\u2029";
        decoder = /* @__PURE__ */ Object.create(null);
        for (i2 = 0; i2 < 64; ++i2) {
          decoder[b64.charAt(i2)] = i2;
        }
        decoder["-"] = 62;
        decoder["_"] = 63;
        for (i2 = 0; i2 < ignore.length; ++i2) {
          decoder[ignore.charAt(i2)] = -1;
        }
      }
      var out = [];
      var bits = 0;
      var char_count = 0;
      for (i2 = 0; i2 < a2.length; ++i2) {
        var c2 = a2.charAt(i2);
        if (c2 == "=") {
          break;
        }
        c2 = decoder[c2];
        if (c2 == -1) {
          continue;
        }
        if (c2 === void 0) {
          throw new Error("Illegal character at offset " + i2);
        }
        bits |= c2;
        if (++char_count >= 4) {
          out[out.length] = bits >> 16;
          out[out.length] = bits >> 8 & 255;
          out[out.length] = bits & 255;
          bits = 0;
          char_count = 0;
        } else {
          bits <<= 6;
        }
      }
      switch (char_count) {
        case 1:
          throw new Error("Base64 encoding incomplete: at least 2 bits missing");
        case 2:
          out[out.length] = bits >> 10;
          break;
        case 3:
          out[out.length] = bits >> 16;
          out[out.length] = bits >> 8 & 255;
          break;
      }
      return out;
    },
    re: /-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,
    unarmor: function(a2) {
      var m2 = Base64.re.exec(a2);
      if (m2) {
        if (m2[1]) {
          a2 = m2[1];
        } else if (m2[2]) {
          a2 = m2[2];
        } else {
          throw new Error("RegExp out of sync");
        }
      }
      return Base64.decode(a2);
    }
  };
  var max$3 = 1e13;
  var Int10 = (
    /** @class */
    function() {
      function Int102(value) {
        this.buf = [+value || 0];
      }
      Int102.prototype.mulAdd = function(m2, c2) {
        var b2 = this.buf;
        var l2 = b2.length;
        var i2;
        var t2;
        for (i2 = 0; i2 < l2; ++i2) {
          t2 = b2[i2] * m2 + c2;
          if (t2 < max$3) {
            c2 = 0;
          } else {
            c2 = 0 | t2 / max$3;
            t2 -= c2 * max$3;
          }
          b2[i2] = t2;
        }
        if (c2 > 0) {
          b2[i2] = c2;
        }
      };
      Int102.prototype.sub = function(c2) {
        var b2 = this.buf;
        var l2 = b2.length;
        var i2;
        var t2;
        for (i2 = 0; i2 < l2; ++i2) {
          t2 = b2[i2] - c2;
          if (t2 < 0) {
            t2 += max$3;
            c2 = 1;
          } else {
            c2 = 0;
          }
          b2[i2] = t2;
        }
        while (b2[b2.length - 1] === 0) {
          b2.pop();
        }
      };
      Int102.prototype.toString = function(base) {
        if ((base || 10) != 10) {
          throw new Error("only base 10 is supported");
        }
        var b2 = this.buf;
        var s2 = b2[b2.length - 1].toString();
        for (var i2 = b2.length - 2; i2 >= 0; --i2) {
          s2 += (max$3 + b2[i2]).toString().substring(1);
        }
        return s2;
      };
      Int102.prototype.valueOf = function() {
        var b2 = this.buf;
        var v2 = 0;
        for (var i2 = b2.length - 1; i2 >= 0; --i2) {
          v2 = v2 * max$3 + b2[i2];
        }
        return v2;
      };
      Int102.prototype.simplify = function() {
        var b2 = this.buf;
        return b2.length == 1 ? b2[0] : this;
      };
      return Int102;
    }()
  );
  var ellipsis = "…";
  var reTimeS = /^(\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;
  var reTimeL = /^(\d\d\d\d)(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])([01]\d|2[0-3])(?:([0-5]\d)(?:([0-5]\d)(?:[.,](\d{1,3}))?)?)?(Z|[-+](?:[0]\d|1[0-2])([0-5]\d)?)?$/;
  function stringCut(str, len) {
    if (str.length > len) {
      str = str.substring(0, len) + ellipsis;
    }
    return str;
  }
  var Stream = (
    /** @class */
    function() {
      function Stream2(enc, pos) {
        this.hexDigits = "0123456789ABCDEF";
        if (enc instanceof Stream2) {
          this.enc = enc.enc;
          this.pos = enc.pos;
        } else {
          this.enc = enc;
          this.pos = pos;
        }
      }
      Stream2.prototype.get = function(pos) {
        if (pos === void 0) {
          pos = this.pos++;
        }
        if (pos >= this.enc.length) {
          throw new Error("Requesting byte offset ".concat(pos, " on a stream of length ").concat(this.enc.length));
        }
        return "string" === typeof this.enc ? this.enc.charCodeAt(pos) : this.enc[pos];
      };
      Stream2.prototype.hexByte = function(b2) {
        return this.hexDigits.charAt(b2 >> 4 & 15) + this.hexDigits.charAt(b2 & 15);
      };
      Stream2.prototype.hexDump = function(start, end2, raw) {
        var s2 = "";
        for (var i2 = start; i2 < end2; ++i2) {
          s2 += this.hexByte(this.get(i2));
          if (raw !== true) {
            switch (i2 & 15) {
              case 7:
                s2 += "  ";
                break;
              case 15:
                s2 += "\n";
                break;
              default:
                s2 += " ";
            }
          }
        }
        return s2;
      };
      Stream2.prototype.isASCII = function(start, end2) {
        for (var i2 = start; i2 < end2; ++i2) {
          var c2 = this.get(i2);
          if (c2 < 32 || c2 > 176) {
            return false;
          }
        }
        return true;
      };
      Stream2.prototype.parseStringISO = function(start, end2) {
        var s2 = "";
        for (var i2 = start; i2 < end2; ++i2) {
          s2 += String.fromCharCode(this.get(i2));
        }
        return s2;
      };
      Stream2.prototype.parseStringUTF = function(start, end2) {
        var s2 = "";
        for (var i2 = start; i2 < end2; ) {
          var c2 = this.get(i2++);
          if (c2 < 128) {
            s2 += String.fromCharCode(c2);
          } else if (c2 > 191 && c2 < 224) {
            s2 += String.fromCharCode((c2 & 31) << 6 | this.get(i2++) & 63);
          } else {
            s2 += String.fromCharCode((c2 & 15) << 12 | (this.get(i2++) & 63) << 6 | this.get(i2++) & 63);
          }
        }
        return s2;
      };
      Stream2.prototype.parseStringBMP = function(start, end2) {
        var str = "";
        var hi;
        var lo;
        for (var i2 = start; i2 < end2; ) {
          hi = this.get(i2++);
          lo = this.get(i2++);
          str += String.fromCharCode(hi << 8 | lo);
        }
        return str;
      };
      Stream2.prototype.parseTime = function(start, end2, shortYear) {
        var s2 = this.parseStringISO(start, end2);
        var m2 = (shortYear ? reTimeS : reTimeL).exec(s2);
        if (!m2) {
          return "Unrecognized time: " + s2;
        }
        if (shortYear) {
          m2[1] = +m2[1];
          m2[1] += +m2[1] < 70 ? 2e3 : 1900;
        }
        s2 = m2[1] + "-" + m2[2] + "-" + m2[3] + " " + m2[4];
        if (m2[5]) {
          s2 += ":" + m2[5];
          if (m2[6]) {
            s2 += ":" + m2[6];
            if (m2[7]) {
              s2 += "." + m2[7];
            }
          }
        }
        if (m2[8]) {
          s2 += " UTC";
          if (m2[8] != "Z") {
            s2 += m2[8];
            if (m2[9]) {
              s2 += ":" + m2[9];
            }
          }
        }
        return s2;
      };
      Stream2.prototype.parseInteger = function(start, end2) {
        var v2 = this.get(start);
        var neg = v2 > 127;
        var pad = neg ? 255 : 0;
        var len;
        var s2 = "";
        while (v2 == pad && ++start < end2) {
          v2 = this.get(start);
        }
        len = end2 - start;
        if (len === 0) {
          return neg ? -1 : 0;
        }
        if (len > 4) {
          s2 = v2;
          len <<= 3;
          while (((+s2 ^ pad) & 128) == 0) {
            s2 = +s2 << 1;
            --len;
          }
          s2 = "(" + len + " bit)\n";
        }
        if (neg) {
          v2 = v2 - 256;
        }
        var n2 = new Int10(v2);
        for (var i2 = start + 1; i2 < end2; ++i2) {
          n2.mulAdd(256, this.get(i2));
        }
        return s2 + n2.toString();
      };
      Stream2.prototype.parseBitString = function(start, end2, maxLength) {
        var unusedBit = this.get(start);
        var lenBit = (end2 - start - 1 << 3) - unusedBit;
        var intro = "(" + lenBit + " bit)\n";
        var s2 = "";
        for (var i2 = start + 1; i2 < end2; ++i2) {
          var b2 = this.get(i2);
          var skip = i2 == end2 - 1 ? unusedBit : 0;
          for (var j2 = 7; j2 >= skip; --j2) {
            s2 += b2 >> j2 & 1 ? "1" : "0";
          }
          if (s2.length > maxLength) {
            return intro + stringCut(s2, maxLength);
          }
        }
        return intro + s2;
      };
      Stream2.prototype.parseOctetString = function(start, end2, maxLength) {
        if (this.isASCII(start, end2)) {
          return stringCut(this.parseStringISO(start, end2), maxLength);
        }
        var len = end2 - start;
        var s2 = "(" + len + " byte)\n";
        maxLength /= 2;
        if (len > maxLength) {
          end2 = start + maxLength;
        }
        for (var i2 = start; i2 < end2; ++i2) {
          s2 += this.hexByte(this.get(i2));
        }
        if (len > maxLength) {
          s2 += ellipsis;
        }
        return s2;
      };
      Stream2.prototype.parseOID = function(start, end2, maxLength) {
        var s2 = "";
        var n2 = new Int10();
        var bits = 0;
        for (var i2 = start; i2 < end2; ++i2) {
          var v2 = this.get(i2);
          n2.mulAdd(128, v2 & 127);
          bits += 7;
          if (!(v2 & 128)) {
            if (s2 === "") {
              n2 = n2.simplify();
              if (n2 instanceof Int10) {
                n2.sub(80);
                s2 = "2." + n2.toString();
              } else {
                var m2 = n2 < 80 ? n2 < 40 ? 0 : 1 : 2;
                s2 = m2 + "." + (n2 - m2 * 40);
              }
            } else {
              s2 += "." + n2.toString();
            }
            if (s2.length > maxLength) {
              return stringCut(s2, maxLength);
            }
            n2 = new Int10();
            bits = 0;
          }
        }
        if (bits > 0) {
          s2 += ".incomplete";
        }
        return s2;
      };
      return Stream2;
    }()
  );
  var ASN1 = (
    /** @class */
    function() {
      function ASN12(stream, header, length, tag, sub) {
        if (!(tag instanceof ASN1Tag)) {
          throw new Error("Invalid tag value.");
        }
        this.stream = stream;
        this.header = header;
        this.length = length;
        this.tag = tag;
        this.sub = sub;
      }
      ASN12.prototype.typeName = function() {
        switch (this.tag.tagClass) {
          case 0:
            switch (this.tag.tagNumber) {
              case 0:
                return "EOC";
              case 1:
                return "BOOLEAN";
              case 2:
                return "INTEGER";
              case 3:
                return "BIT_STRING";
              case 4:
                return "OCTET_STRING";
              case 5:
                return "NULL";
              case 6:
                return "OBJECT_IDENTIFIER";
              case 7:
                return "ObjectDescriptor";
              case 8:
                return "EXTERNAL";
              case 9:
                return "REAL";
              case 10:
                return "ENUMERATED";
              case 11:
                return "EMBEDDED_PDV";
              case 12:
                return "UTF8String";
              case 16:
                return "SEQUENCE";
              case 17:
                return "SET";
              case 18:
                return "NumericString";
              case 19:
                return "PrintableString";
              case 20:
                return "TeletexString";
              case 21:
                return "VideotexString";
              case 22:
                return "IA5String";
              case 23:
                return "UTCTime";
              case 24:
                return "GeneralizedTime";
              case 25:
                return "GraphicString";
              case 26:
                return "VisibleString";
              case 27:
                return "GeneralString";
              case 28:
                return "UniversalString";
              case 30:
                return "BMPString";
            }
            return "Universal_" + this.tag.tagNumber.toString();
          case 1:
            return "Application_" + this.tag.tagNumber.toString();
          case 2:
            return "[" + this.tag.tagNumber.toString() + "]";
          case 3:
            return "Private_" + this.tag.tagNumber.toString();
        }
      };
      ASN12.prototype.content = function(maxLength) {
        if (this.tag === void 0) {
          return null;
        }
        if (maxLength === void 0) {
          maxLength = Infinity;
        }
        var content = this.posContent();
        var len = Math.abs(this.length);
        if (!this.tag.isUniversal()) {
          if (this.sub !== null) {
            return "(" + this.sub.length + " elem)";
          }
          return this.stream.parseOctetString(content, content + len, maxLength);
        }
        switch (this.tag.tagNumber) {
          case 1:
            return this.stream.get(content) === 0 ? "false" : "true";
          case 2:
            return this.stream.parseInteger(content, content + len);
          case 3:
            return this.sub ? "(" + this.sub.length + " elem)" : this.stream.parseBitString(content, content + len, maxLength);
          case 4:
            return this.sub ? "(" + this.sub.length + " elem)" : this.stream.parseOctetString(content, content + len, maxLength);
          case 6:
            return this.stream.parseOID(content, content + len, maxLength);
          case 16:
          case 17:
            if (this.sub !== null) {
              return "(" + this.sub.length + " elem)";
            } else {
              return "(no elem)";
            }
          case 12:
            return stringCut(this.stream.parseStringUTF(content, content + len), maxLength);
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 26:
            return stringCut(this.stream.parseStringISO(content, content + len), maxLength);
          case 30:
            return stringCut(this.stream.parseStringBMP(content, content + len), maxLength);
          case 23:
          case 24:
            return this.stream.parseTime(content, content + len, this.tag.tagNumber == 23);
        }
        return null;
      };
      ASN12.prototype.toString = function() {
        return this.typeName() + "@" + this.stream.pos + "[header:" + this.header + ",length:" + this.length + ",sub:" + (this.sub === null ? "null" : this.sub.length) + "]";
      };
      ASN12.prototype.toPrettyString = function(indent) {
        if (indent === void 0) {
          indent = "";
        }
        var s2 = indent + this.typeName() + " @" + this.stream.pos;
        if (this.length >= 0) {
          s2 += "+";
        }
        s2 += this.length;
        if (this.tag.tagConstructed) {
          s2 += " (constructed)";
        } else if (this.tag.isUniversal() && (this.tag.tagNumber == 3 || this.tag.tagNumber == 4) && this.sub !== null) {
          s2 += " (encapsulates)";
        }
        s2 += "\n";
        if (this.sub !== null) {
          indent += "  ";
          for (var i2 = 0, max2 = this.sub.length; i2 < max2; ++i2) {
            s2 += this.sub[i2].toPrettyString(indent);
          }
        }
        return s2;
      };
      ASN12.prototype.posStart = function() {
        return this.stream.pos;
      };
      ASN12.prototype.posContent = function() {
        return this.stream.pos + this.header;
      };
      ASN12.prototype.posEnd = function() {
        return this.stream.pos + this.header + Math.abs(this.length);
      };
      ASN12.prototype.toHexString = function() {
        return this.stream.hexDump(this.posStart(), this.posEnd(), true);
      };
      ASN12.decodeLength = function(stream) {
        var buf = stream.get();
        var len = buf & 127;
        if (len == buf) {
          return len;
        }
        if (len > 6) {
          throw new Error("Length over 48 bits not supported at position " + (stream.pos - 1));
        }
        if (len === 0) {
          return null;
        }
        buf = 0;
        for (var i2 = 0; i2 < len; ++i2) {
          buf = buf * 256 + stream.get();
        }
        return buf;
      };
      ASN12.prototype.getHexStringValue = function() {
        var hexString = this.toHexString();
        var offset2 = this.header * 2;
        var length = this.length * 2;
        return hexString.substr(offset2, length);
      };
      ASN12.decode = function(str) {
        var stream;
        if (!(str instanceof Stream)) {
          stream = new Stream(str, 0);
        } else {
          stream = str;
        }
        var streamStart = new Stream(stream);
        var tag = new ASN1Tag(stream);
        var len = ASN12.decodeLength(stream);
        var start = stream.pos;
        var header = start - streamStart.pos;
        var sub = null;
        var getSub = function() {
          var ret = [];
          if (len !== null) {
            var end2 = start + len;
            while (stream.pos < end2) {
              ret[ret.length] = ASN12.decode(stream);
            }
            if (stream.pos != end2) {
              throw new Error("Content size is not correct for container starting at offset " + start);
            }
          } else {
            try {
              for (; ; ) {
                var s2 = ASN12.decode(stream);
                if (s2.tag.isEOC()) {
                  break;
                }
                ret[ret.length] = s2;
              }
              len = start - stream.pos;
            } catch (e) {
              throw new Error("Exception while decoding undefined length content: " + e);
            }
          }
          return ret;
        };
        if (tag.tagConstructed) {
          sub = getSub();
        } else if (tag.isUniversal() && (tag.tagNumber == 3 || tag.tagNumber == 4)) {
          try {
            if (tag.tagNumber == 3) {
              if (stream.get() != 0) {
                throw new Error("BIT STRINGs with unused bits cannot encapsulate.");
              }
            }
            sub = getSub();
            for (var i2 = 0; i2 < sub.length; ++i2) {
              if (sub[i2].tag.isEOC()) {
                throw new Error("EOC is not supposed to be actual content.");
              }
            }
          } catch (e) {
            sub = null;
          }
        }
        if (sub === null) {
          if (len === null) {
            throw new Error("We can't skip over an invalid tag with undefined length at offset " + start);
          }
          stream.pos = start + Math.abs(len);
        }
        return new ASN12(streamStart, header, len, tag, sub);
      };
      return ASN12;
    }()
  );
  var ASN1Tag = (
    /** @class */
    function() {
      function ASN1Tag2(stream) {
        var buf = stream.get();
        this.tagClass = buf >> 6;
        this.tagConstructed = (buf & 32) !== 0;
        this.tagNumber = buf & 31;
        if (this.tagNumber == 31) {
          var n2 = new Int10();
          do {
            buf = stream.get();
            n2.mulAdd(128, buf & 127);
          } while (buf & 128);
          this.tagNumber = n2.simplify();
        }
      }
      ASN1Tag2.prototype.isUniversal = function() {
        return this.tagClass === 0;
      };
      ASN1Tag2.prototype.isEOC = function() {
        return this.tagClass === 0 && this.tagNumber === 0;
      };
      return ASN1Tag2;
    }()
  );
  var dbits;
  var canary = 244837814094590;
  var j_lm = (canary & 16777215) == 15715070;
  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
  var BigInteger = (
    /** @class */
    function() {
      function BigInteger2(a2, b2, c2) {
        if (a2 != null) {
          if ("number" == typeof a2) {
            this.fromNumber(a2, b2, c2);
          } else if (b2 == null && "string" != typeof a2) {
            this.fromString(a2, 256);
          } else {
            this.fromString(a2, b2);
          }
        }
      }
      BigInteger2.prototype.toString = function(b2) {
        if (this.s < 0) {
          return "-" + this.negate().toString(b2);
        }
        var k;
        if (b2 == 16) {
          k = 4;
        } else if (b2 == 8) {
          k = 3;
        } else if (b2 == 2) {
          k = 1;
        } else if (b2 == 32) {
          k = 5;
        } else if (b2 == 4) {
          k = 2;
        } else {
          return this.toRadix(b2);
        }
        var km = (1 << k) - 1;
        var d2;
        var m2 = false;
        var r2 = "";
        var i2 = this.t;
        var p2 = this.DB - i2 * this.DB % k;
        if (i2-- > 0) {
          if (p2 < this.DB && (d2 = this[i2] >> p2) > 0) {
            m2 = true;
            r2 = int2char(d2);
          }
          while (i2 >= 0) {
            if (p2 < k) {
              d2 = (this[i2] & (1 << p2) - 1) << k - p2;
              d2 |= this[--i2] >> (p2 += this.DB - k);
            } else {
              d2 = this[i2] >> (p2 -= k) & km;
              if (p2 <= 0) {
                p2 += this.DB;
                --i2;
              }
            }
            if (d2 > 0) {
              m2 = true;
            }
            if (m2) {
              r2 += int2char(d2);
            }
          }
        }
        return m2 ? r2 : "0";
      };
      BigInteger2.prototype.negate = function() {
        var r2 = nbi();
        BigInteger2.ZERO.subTo(this, r2);
        return r2;
      };
      BigInteger2.prototype.abs = function() {
        return this.s < 0 ? this.negate() : this;
      };
      BigInteger2.prototype.compareTo = function(a2) {
        var r2 = this.s - a2.s;
        if (r2 != 0) {
          return r2;
        }
        var i2 = this.t;
        r2 = i2 - a2.t;
        if (r2 != 0) {
          return this.s < 0 ? -r2 : r2;
        }
        while (--i2 >= 0) {
          if ((r2 = this[i2] - a2[i2]) != 0) {
            return r2;
          }
        }
        return 0;
      };
      BigInteger2.prototype.bitLength = function() {
        if (this.t <= 0) {
          return 0;
        }
        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
      };
      BigInteger2.prototype.mod = function(a2) {
        var r2 = nbi();
        this.abs().divRemTo(a2, null, r2);
        if (this.s < 0 && r2.compareTo(BigInteger2.ZERO) > 0) {
          a2.subTo(r2, r2);
        }
        return r2;
      };
      BigInteger2.prototype.modPowInt = function(e, m2) {
        var z2;
        if (e < 256 || m2.isEven()) {
          z2 = new Classic(m2);
        } else {
          z2 = new Montgomery(m2);
        }
        return this.exp(e, z2);
      };
      BigInteger2.prototype.clone = function() {
        var r2 = nbi();
        this.copyTo(r2);
        return r2;
      };
      BigInteger2.prototype.intValue = function() {
        if (this.s < 0) {
          if (this.t == 1) {
            return this[0] - this.DV;
          } else if (this.t == 0) {
            return -1;
          }
        } else if (this.t == 1) {
          return this[0];
        } else if (this.t == 0) {
          return 0;
        }
        return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
      };
      BigInteger2.prototype.byteValue = function() {
        return this.t == 0 ? this.s : this[0] << 24 >> 24;
      };
      BigInteger2.prototype.shortValue = function() {
        return this.t == 0 ? this.s : this[0] << 16 >> 16;
      };
      BigInteger2.prototype.signum = function() {
        if (this.s < 0) {
          return -1;
        } else if (this.t <= 0 || this.t == 1 && this[0] <= 0) {
          return 0;
        } else {
          return 1;
        }
      };
      BigInteger2.prototype.toByteArray = function() {
        var i2 = this.t;
        var r2 = [];
        r2[0] = this.s;
        var p2 = this.DB - i2 * this.DB % 8;
        var d2;
        var k = 0;
        if (i2-- > 0) {
          if (p2 < this.DB && (d2 = this[i2] >> p2) != (this.s & this.DM) >> p2) {
            r2[k++] = d2 | this.s << this.DB - p2;
          }
          while (i2 >= 0) {
            if (p2 < 8) {
              d2 = (this[i2] & (1 << p2) - 1) << 8 - p2;
              d2 |= this[--i2] >> (p2 += this.DB - 8);
            } else {
              d2 = this[i2] >> (p2 -= 8) & 255;
              if (p2 <= 0) {
                p2 += this.DB;
                --i2;
              }
            }
            if ((d2 & 128) != 0) {
              d2 |= -256;
            }
            if (k == 0 && (this.s & 128) != (d2 & 128)) {
              ++k;
            }
            if (k > 0 || d2 != this.s) {
              r2[k++] = d2;
            }
          }
        }
        return r2;
      };
      BigInteger2.prototype.equals = function(a2) {
        return this.compareTo(a2) == 0;
      };
      BigInteger2.prototype.min = function(a2) {
        return this.compareTo(a2) < 0 ? this : a2;
      };
      BigInteger2.prototype.max = function(a2) {
        return this.compareTo(a2) > 0 ? this : a2;
      };
      BigInteger2.prototype.and = function(a2) {
        var r2 = nbi();
        this.bitwiseTo(a2, op_and, r2);
        return r2;
      };
      BigInteger2.prototype.or = function(a2) {
        var r2 = nbi();
        this.bitwiseTo(a2, op_or, r2);
        return r2;
      };
      BigInteger2.prototype.xor = function(a2) {
        var r2 = nbi();
        this.bitwiseTo(a2, op_xor, r2);
        return r2;
      };
      BigInteger2.prototype.andNot = function(a2) {
        var r2 = nbi();
        this.bitwiseTo(a2, op_andnot, r2);
        return r2;
      };
      BigInteger2.prototype.not = function() {
        var r2 = nbi();
        for (var i2 = 0; i2 < this.t; ++i2) {
          r2[i2] = this.DM & ~this[i2];
        }
        r2.t = this.t;
        r2.s = ~this.s;
        return r2;
      };
      BigInteger2.prototype.shiftLeft = function(n2) {
        var r2 = nbi();
        if (n2 < 0) {
          this.rShiftTo(-n2, r2);
        } else {
          this.lShiftTo(n2, r2);
        }
        return r2;
      };
      BigInteger2.prototype.shiftRight = function(n2) {
        var r2 = nbi();
        if (n2 < 0) {
          this.lShiftTo(-n2, r2);
        } else {
          this.rShiftTo(n2, r2);
        }
        return r2;
      };
      BigInteger2.prototype.getLowestSetBit = function() {
        for (var i2 = 0; i2 < this.t; ++i2) {
          if (this[i2] != 0) {
            return i2 * this.DB + lbit(this[i2]);
          }
        }
        if (this.s < 0) {
          return this.t * this.DB;
        }
        return -1;
      };
      BigInteger2.prototype.bitCount = function() {
        var r2 = 0;
        var x2 = this.s & this.DM;
        for (var i2 = 0; i2 < this.t; ++i2) {
          r2 += cbit(this[i2] ^ x2);
        }
        return r2;
      };
      BigInteger2.prototype.testBit = function(n2) {
        var j2 = Math.floor(n2 / this.DB);
        if (j2 >= this.t) {
          return this.s != 0;
        }
        return (this[j2] & 1 << n2 % this.DB) != 0;
      };
      BigInteger2.prototype.setBit = function(n2) {
        return this.changeBit(n2, op_or);
      };
      BigInteger2.prototype.clearBit = function(n2) {
        return this.changeBit(n2, op_andnot);
      };
      BigInteger2.prototype.flipBit = function(n2) {
        return this.changeBit(n2, op_xor);
      };
      BigInteger2.prototype.add = function(a2) {
        var r2 = nbi();
        this.addTo(a2, r2);
        return r2;
      };
      BigInteger2.prototype.subtract = function(a2) {
        var r2 = nbi();
        this.subTo(a2, r2);
        return r2;
      };
      BigInteger2.prototype.multiply = function(a2) {
        var r2 = nbi();
        this.multiplyTo(a2, r2);
        return r2;
      };
      BigInteger2.prototype.divide = function(a2) {
        var r2 = nbi();
        this.divRemTo(a2, r2, null);
        return r2;
      };
      BigInteger2.prototype.remainder = function(a2) {
        var r2 = nbi();
        this.divRemTo(a2, null, r2);
        return r2;
      };
      BigInteger2.prototype.divideAndRemainder = function(a2) {
        var q2 = nbi();
        var r2 = nbi();
        this.divRemTo(a2, q2, r2);
        return [q2, r2];
      };
      BigInteger2.prototype.modPow = function(e, m2) {
        var i2 = e.bitLength();
        var k;
        var r2 = nbv(1);
        var z2;
        if (i2 <= 0) {
          return r2;
        } else if (i2 < 18) {
          k = 1;
        } else if (i2 < 48) {
          k = 3;
        } else if (i2 < 144) {
          k = 4;
        } else if (i2 < 768) {
          k = 5;
        } else {
          k = 6;
        }
        if (i2 < 8) {
          z2 = new Classic(m2);
        } else if (m2.isEven()) {
          z2 = new Barrett(m2);
        } else {
          z2 = new Montgomery(m2);
        }
        var g2 = [];
        var n2 = 3;
        var k1 = k - 1;
        var km = (1 << k) - 1;
        g2[1] = z2.convert(this);
        if (k > 1) {
          var g22 = nbi();
          z2.sqrTo(g2[1], g22);
          while (n2 <= km) {
            g2[n2] = nbi();
            z2.mulTo(g22, g2[n2 - 2], g2[n2]);
            n2 += 2;
          }
        }
        var j2 = e.t - 1;
        var w2;
        var is1 = true;
        var r22 = nbi();
        var t2;
        i2 = nbits(e[j2]) - 1;
        while (j2 >= 0) {
          if (i2 >= k1) {
            w2 = e[j2] >> i2 - k1 & km;
          } else {
            w2 = (e[j2] & (1 << i2 + 1) - 1) << k1 - i2;
            if (j2 > 0) {
              w2 |= e[j2 - 1] >> this.DB + i2 - k1;
            }
          }
          n2 = k;
          while ((w2 & 1) == 0) {
            w2 >>= 1;
            --n2;
          }
          if ((i2 -= n2) < 0) {
            i2 += this.DB;
            --j2;
          }
          if (is1) {
            g2[w2].copyTo(r2);
            is1 = false;
          } else {
            while (n2 > 1) {
              z2.sqrTo(r2, r22);
              z2.sqrTo(r22, r2);
              n2 -= 2;
            }
            if (n2 > 0) {
              z2.sqrTo(r2, r22);
            } else {
              t2 = r2;
              r2 = r22;
              r22 = t2;
            }
            z2.mulTo(r22, g2[w2], r2);
          }
          while (j2 >= 0 && (e[j2] & 1 << i2) == 0) {
            z2.sqrTo(r2, r22);
            t2 = r2;
            r2 = r22;
            r22 = t2;
            if (--i2 < 0) {
              i2 = this.DB - 1;
              --j2;
            }
          }
        }
        return z2.revert(r2);
      };
      BigInteger2.prototype.modInverse = function(m2) {
        var ac = m2.isEven();
        if (this.isEven() && ac || m2.signum() == 0) {
          return BigInteger2.ZERO;
        }
        var u2 = m2.clone();
        var v2 = this.clone();
        var a2 = nbv(1);
        var b2 = nbv(0);
        var c2 = nbv(0);
        var d2 = nbv(1);
        while (u2.signum() != 0) {
          while (u2.isEven()) {
            u2.rShiftTo(1, u2);
            if (ac) {
              if (!a2.isEven() || !b2.isEven()) {
                a2.addTo(this, a2);
                b2.subTo(m2, b2);
              }
              a2.rShiftTo(1, a2);
            } else if (!b2.isEven()) {
              b2.subTo(m2, b2);
            }
            b2.rShiftTo(1, b2);
          }
          while (v2.isEven()) {
            v2.rShiftTo(1, v2);
            if (ac) {
              if (!c2.isEven() || !d2.isEven()) {
                c2.addTo(this, c2);
                d2.subTo(m2, d2);
              }
              c2.rShiftTo(1, c2);
            } else if (!d2.isEven()) {
              d2.subTo(m2, d2);
            }
            d2.rShiftTo(1, d2);
          }
          if (u2.compareTo(v2) >= 0) {
            u2.subTo(v2, u2);
            if (ac) {
              a2.subTo(c2, a2);
            }
            b2.subTo(d2, b2);
          } else {
            v2.subTo(u2, v2);
            if (ac) {
              c2.subTo(a2, c2);
            }
            d2.subTo(b2, d2);
          }
        }
        if (v2.compareTo(BigInteger2.ONE) != 0) {
          return BigInteger2.ZERO;
        }
        if (d2.compareTo(m2) >= 0) {
          return d2.subtract(m2);
        }
        if (d2.signum() < 0) {
          d2.addTo(m2, d2);
        } else {
          return d2;
        }
        if (d2.signum() < 0) {
          return d2.add(m2);
        } else {
          return d2;
        }
      };
      BigInteger2.prototype.pow = function(e) {
        return this.exp(e, new NullExp());
      };
      BigInteger2.prototype.gcd = function(a2) {
        var x2 = this.s < 0 ? this.negate() : this.clone();
        var y2 = a2.s < 0 ? a2.negate() : a2.clone();
        if (x2.compareTo(y2) < 0) {
          var t2 = x2;
          x2 = y2;
          y2 = t2;
        }
        var i2 = x2.getLowestSetBit();
        var g2 = y2.getLowestSetBit();
        if (g2 < 0) {
          return x2;
        }
        if (i2 < g2) {
          g2 = i2;
        }
        if (g2 > 0) {
          x2.rShiftTo(g2, x2);
          y2.rShiftTo(g2, y2);
        }
        while (x2.signum() > 0) {
          if ((i2 = x2.getLowestSetBit()) > 0) {
            x2.rShiftTo(i2, x2);
          }
          if ((i2 = y2.getLowestSetBit()) > 0) {
            y2.rShiftTo(i2, y2);
          }
          if (x2.compareTo(y2) >= 0) {
            x2.subTo(y2, x2);
            x2.rShiftTo(1, x2);
          } else {
            y2.subTo(x2, y2);
            y2.rShiftTo(1, y2);
          }
        }
        if (g2 > 0) {
          y2.lShiftTo(g2, y2);
        }
        return y2;
      };
      BigInteger2.prototype.isProbablePrime = function(t2) {
        var i2;
        var x2 = this.abs();
        if (x2.t == 1 && x2[0] <= lowprimes[lowprimes.length - 1]) {
          for (i2 = 0; i2 < lowprimes.length; ++i2) {
            if (x2[0] == lowprimes[i2]) {
              return true;
            }
          }
          return false;
        }
        if (x2.isEven()) {
          return false;
        }
        i2 = 1;
        while (i2 < lowprimes.length) {
          var m2 = lowprimes[i2];
          var j2 = i2 + 1;
          while (j2 < lowprimes.length && m2 < lplim) {
            m2 *= lowprimes[j2++];
          }
          m2 = x2.modInt(m2);
          while (i2 < j2) {
            if (m2 % lowprimes[i2++] == 0) {
              return false;
            }
          }
        }
        return x2.millerRabin(t2);
      };
      BigInteger2.prototype.copyTo = function(r2) {
        for (var i2 = this.t - 1; i2 >= 0; --i2) {
          r2[i2] = this[i2];
        }
        r2.t = this.t;
        r2.s = this.s;
      };
      BigInteger2.prototype.fromInt = function(x2) {
        this.t = 1;
        this.s = x2 < 0 ? -1 : 0;
        if (x2 > 0) {
          this[0] = x2;
        } else if (x2 < -1) {
          this[0] = x2 + this.DV;
        } else {
          this.t = 0;
        }
      };
      BigInteger2.prototype.fromString = function(s2, b2) {
        var k;
        if (b2 == 16) {
          k = 4;
        } else if (b2 == 8) {
          k = 3;
        } else if (b2 == 256) {
          k = 8;
        } else if (b2 == 2) {
          k = 1;
        } else if (b2 == 32) {
          k = 5;
        } else if (b2 == 4) {
          k = 2;
        } else {
          this.fromRadix(s2, b2);
          return;
        }
        this.t = 0;
        this.s = 0;
        var i2 = s2.length;
        var mi = false;
        var sh = 0;
        while (--i2 >= 0) {
          var x2 = k == 8 ? +s2[i2] & 255 : intAt(s2, i2);
          if (x2 < 0) {
            if (s2.charAt(i2) == "-") {
              mi = true;
            }
            continue;
          }
          mi = false;
          if (sh == 0) {
            this[this.t++] = x2;
          } else if (sh + k > this.DB) {
            this[this.t - 1] |= (x2 & (1 << this.DB - sh) - 1) << sh;
            this[this.t++] = x2 >> this.DB - sh;
          } else {
            this[this.t - 1] |= x2 << sh;
          }
          sh += k;
          if (sh >= this.DB) {
            sh -= this.DB;
          }
        }
        if (k == 8 && (+s2[0] & 128) != 0) {
          this.s = -1;
          if (sh > 0) {
            this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
          }
        }
        this.clamp();
        if (mi) {
          BigInteger2.ZERO.subTo(this, this);
        }
      };
      BigInteger2.prototype.clamp = function() {
        var c2 = this.s & this.DM;
        while (this.t > 0 && this[this.t - 1] == c2) {
          --this.t;
        }
      };
      BigInteger2.prototype.dlShiftTo = function(n2, r2) {
        var i2;
        for (i2 = this.t - 1; i2 >= 0; --i2) {
          r2[i2 + n2] = this[i2];
        }
        for (i2 = n2 - 1; i2 >= 0; --i2) {
          r2[i2] = 0;
        }
        r2.t = this.t + n2;
        r2.s = this.s;
      };
      BigInteger2.prototype.drShiftTo = function(n2, r2) {
        for (var i2 = n2; i2 < this.t; ++i2) {
          r2[i2 - n2] = this[i2];
        }
        r2.t = Math.max(this.t - n2, 0);
        r2.s = this.s;
      };
      BigInteger2.prototype.lShiftTo = function(n2, r2) {
        var bs2 = n2 % this.DB;
        var cbs = this.DB - bs2;
        var bm = (1 << cbs) - 1;
        var ds2 = Math.floor(n2 / this.DB);
        var c2 = this.s << bs2 & this.DM;
        for (var i2 = this.t - 1; i2 >= 0; --i2) {
          r2[i2 + ds2 + 1] = this[i2] >> cbs | c2;
          c2 = (this[i2] & bm) << bs2;
        }
        for (var i2 = ds2 - 1; i2 >= 0; --i2) {
          r2[i2] = 0;
        }
        r2[ds2] = c2;
        r2.t = this.t + ds2 + 1;
        r2.s = this.s;
        r2.clamp();
      };
      BigInteger2.prototype.rShiftTo = function(n2, r2) {
        r2.s = this.s;
        var ds2 = Math.floor(n2 / this.DB);
        if (ds2 >= this.t) {
          r2.t = 0;
          return;
        }
        var bs2 = n2 % this.DB;
        var cbs = this.DB - bs2;
        var bm = (1 << bs2) - 1;
        r2[0] = this[ds2] >> bs2;
        for (var i2 = ds2 + 1; i2 < this.t; ++i2) {
          r2[i2 - ds2 - 1] |= (this[i2] & bm) << cbs;
          r2[i2 - ds2] = this[i2] >> bs2;
        }
        if (bs2 > 0) {
          r2[this.t - ds2 - 1] |= (this.s & bm) << cbs;
        }
        r2.t = this.t - ds2;
        r2.clamp();
      };
      BigInteger2.prototype.subTo = function(a2, r2) {
        var i2 = 0;
        var c2 = 0;
        var m2 = Math.min(a2.t, this.t);
        while (i2 < m2) {
          c2 += this[i2] - a2[i2];
          r2[i2++] = c2 & this.DM;
          c2 >>= this.DB;
        }
        if (a2.t < this.t) {
          c2 -= a2.s;
          while (i2 < this.t) {
            c2 += this[i2];
            r2[i2++] = c2 & this.DM;
            c2 >>= this.DB;
          }
          c2 += this.s;
        } else {
          c2 += this.s;
          while (i2 < a2.t) {
            c2 -= a2[i2];
            r2[i2++] = c2 & this.DM;
            c2 >>= this.DB;
          }
          c2 -= a2.s;
        }
        r2.s = c2 < 0 ? -1 : 0;
        if (c2 < -1) {
          r2[i2++] = this.DV + c2;
        } else if (c2 > 0) {
          r2[i2++] = c2;
        }
        r2.t = i2;
        r2.clamp();
      };
      BigInteger2.prototype.multiplyTo = function(a2, r2) {
        var x2 = this.abs();
        var y2 = a2.abs();
        var i2 = x2.t;
        r2.t = i2 + y2.t;
        while (--i2 >= 0) {
          r2[i2] = 0;
        }
        for (i2 = 0; i2 < y2.t; ++i2) {
          r2[i2 + x2.t] = x2.am(0, y2[i2], r2, i2, 0, x2.t);
        }
        r2.s = 0;
        r2.clamp();
        if (this.s != a2.s) {
          BigInteger2.ZERO.subTo(r2, r2);
        }
      };
      BigInteger2.prototype.squareTo = function(r2) {
        var x2 = this.abs();
        var i2 = r2.t = 2 * x2.t;
        while (--i2 >= 0) {
          r2[i2] = 0;
        }
        for (i2 = 0; i2 < x2.t - 1; ++i2) {
          var c2 = x2.am(i2, x2[i2], r2, 2 * i2, 0, 1);
          if ((r2[i2 + x2.t] += x2.am(i2 + 1, 2 * x2[i2], r2, 2 * i2 + 1, c2, x2.t - i2 - 1)) >= x2.DV) {
            r2[i2 + x2.t] -= x2.DV;
            r2[i2 + x2.t + 1] = 1;
          }
        }
        if (r2.t > 0) {
          r2[r2.t - 1] += x2.am(i2, x2[i2], r2, 2 * i2, 0, 1);
        }
        r2.s = 0;
        r2.clamp();
      };
      BigInteger2.prototype.divRemTo = function(m2, q2, r2) {
        var pm = m2.abs();
        if (pm.t <= 0) {
          return;
        }
        var pt2 = this.abs();
        if (pt2.t < pm.t) {
          if (q2 != null) {
            q2.fromInt(0);
          }
          if (r2 != null) {
            this.copyTo(r2);
          }
          return;
        }
        if (r2 == null) {
          r2 = nbi();
        }
        var y2 = nbi();
        var ts2 = this.s;
        var ms2 = m2.s;
        var nsh = this.DB - nbits(pm[pm.t - 1]);
        if (nsh > 0) {
          pm.lShiftTo(nsh, y2);
          pt2.lShiftTo(nsh, r2);
        } else {
          pm.copyTo(y2);
          pt2.copyTo(r2);
        }
        var ys2 = y2.t;
        var y0 = y2[ys2 - 1];
        if (y0 == 0) {
          return;
        }
        var yt2 = y0 * (1 << this.F1) + (ys2 > 1 ? y2[ys2 - 2] >> this.F2 : 0);
        var d1 = this.FV / yt2;
        var d2 = (1 << this.F1) / yt2;
        var e = 1 << this.F2;
        var i2 = r2.t;
        var j2 = i2 - ys2;
        var t2 = q2 == null ? nbi() : q2;
        y2.dlShiftTo(j2, t2);
        if (r2.compareTo(t2) >= 0) {
          r2[r2.t++] = 1;
          r2.subTo(t2, r2);
        }
        BigInteger2.ONE.dlShiftTo(ys2, t2);
        t2.subTo(y2, y2);
        while (y2.t < ys2) {
          y2[y2.t++] = 0;
        }
        while (--j2 >= 0) {
          var qd = r2[--i2] == y0 ? this.DM : Math.floor(r2[i2] * d1 + (r2[i2 - 1] + e) * d2);
          if ((r2[i2] += y2.am(0, qd, r2, j2, 0, ys2)) < qd) {
            y2.dlShiftTo(j2, t2);
            r2.subTo(t2, r2);
            while (r2[i2] < --qd) {
              r2.subTo(t2, r2);
            }
          }
        }
        if (q2 != null) {
          r2.drShiftTo(ys2, q2);
          if (ts2 != ms2) {
            BigInteger2.ZERO.subTo(q2, q2);
          }
        }
        r2.t = ys2;
        r2.clamp();
        if (nsh > 0) {
          r2.rShiftTo(nsh, r2);
        }
        if (ts2 < 0) {
          BigInteger2.ZERO.subTo(r2, r2);
        }
      };
      BigInteger2.prototype.invDigit = function() {
        if (this.t < 1) {
          return 0;
        }
        var x2 = this[0];
        if ((x2 & 1) == 0) {
          return 0;
        }
        var y2 = x2 & 3;
        y2 = y2 * (2 - (x2 & 15) * y2) & 15;
        y2 = y2 * (2 - (x2 & 255) * y2) & 255;
        y2 = y2 * (2 - ((x2 & 65535) * y2 & 65535)) & 65535;
        y2 = y2 * (2 - x2 * y2 % this.DV) % this.DV;
        return y2 > 0 ? this.DV - y2 : -y2;
      };
      BigInteger2.prototype.isEven = function() {
        return (this.t > 0 ? this[0] & 1 : this.s) == 0;
      };
      BigInteger2.prototype.exp = function(e, z2) {
        if (e > 4294967295 || e < 1) {
          return BigInteger2.ONE;
        }
        var r2 = nbi();
        var r22 = nbi();
        var g2 = z2.convert(this);
        var i2 = nbits(e) - 1;
        g2.copyTo(r2);
        while (--i2 >= 0) {
          z2.sqrTo(r2, r22);
          if ((e & 1 << i2) > 0) {
            z2.mulTo(r22, g2, r2);
          } else {
            var t2 = r2;
            r2 = r22;
            r22 = t2;
          }
        }
        return z2.revert(r2);
      };
      BigInteger2.prototype.chunkSize = function(r2) {
        return Math.floor(Math.LN2 * this.DB / Math.log(r2));
      };
      BigInteger2.prototype.toRadix = function(b2) {
        if (b2 == null) {
          b2 = 10;
        }
        if (this.signum() == 0 || b2 < 2 || b2 > 36) {
          return "0";
        }
        var cs2 = this.chunkSize(b2);
        var a2 = Math.pow(b2, cs2);
        var d2 = nbv(a2);
        var y2 = nbi();
        var z2 = nbi();
        var r2 = "";
        this.divRemTo(d2, y2, z2);
        while (y2.signum() > 0) {
          r2 = (a2 + z2.intValue()).toString(b2).substr(1) + r2;
          y2.divRemTo(d2, y2, z2);
        }
        return z2.intValue().toString(b2) + r2;
      };
      BigInteger2.prototype.fromRadix = function(s2, b2) {
        this.fromInt(0);
        if (b2 == null) {
          b2 = 10;
        }
        var cs2 = this.chunkSize(b2);
        var d2 = Math.pow(b2, cs2);
        var mi = false;
        var j2 = 0;
        var w2 = 0;
        for (var i2 = 0; i2 < s2.length; ++i2) {
          var x2 = intAt(s2, i2);
          if (x2 < 0) {
            if (s2.charAt(i2) == "-" && this.signum() == 0) {
              mi = true;
            }
            continue;
          }
          w2 = b2 * w2 + x2;
          if (++j2 >= cs2) {
            this.dMultiply(d2);
            this.dAddOffset(w2, 0);
            j2 = 0;
            w2 = 0;
          }
        }
        if (j2 > 0) {
          this.dMultiply(Math.pow(b2, j2));
          this.dAddOffset(w2, 0);
        }
        if (mi) {
          BigInteger2.ZERO.subTo(this, this);
        }
      };
      BigInteger2.prototype.fromNumber = function(a2, b2, c2) {
        if ("number" == typeof b2) {
          if (a2 < 2) {
            this.fromInt(1);
          } else {
            this.fromNumber(a2, c2);
            if (!this.testBit(a2 - 1)) {
              this.bitwiseTo(BigInteger2.ONE.shiftLeft(a2 - 1), op_or, this);
            }
            if (this.isEven()) {
              this.dAddOffset(1, 0);
            }
            while (!this.isProbablePrime(b2)) {
              this.dAddOffset(2, 0);
              if (this.bitLength() > a2) {
                this.subTo(BigInteger2.ONE.shiftLeft(a2 - 1), this);
              }
            }
          }
        } else {
          var x2 = [];
          var t2 = a2 & 7;
          x2.length = (a2 >> 3) + 1;
          b2.nextBytes(x2);
          if (t2 > 0) {
            x2[0] &= (1 << t2) - 1;
          } else {
            x2[0] = 0;
          }
          this.fromString(x2, 256);
        }
      };
      BigInteger2.prototype.bitwiseTo = function(a2, op, r2) {
        var i2;
        var f2;
        var m2 = Math.min(a2.t, this.t);
        for (i2 = 0; i2 < m2; ++i2) {
          r2[i2] = op(this[i2], a2[i2]);
        }
        if (a2.t < this.t) {
          f2 = a2.s & this.DM;
          for (i2 = m2; i2 < this.t; ++i2) {
            r2[i2] = op(this[i2], f2);
          }
          r2.t = this.t;
        } else {
          f2 = this.s & this.DM;
          for (i2 = m2; i2 < a2.t; ++i2) {
            r2[i2] = op(f2, a2[i2]);
          }
          r2.t = a2.t;
        }
        r2.s = op(this.s, a2.s);
        r2.clamp();
      };
      BigInteger2.prototype.changeBit = function(n2, op) {
        var r2 = BigInteger2.ONE.shiftLeft(n2);
        this.bitwiseTo(r2, op, r2);
        return r2;
      };
      BigInteger2.prototype.addTo = function(a2, r2) {
        var i2 = 0;
        var c2 = 0;
        var m2 = Math.min(a2.t, this.t);
        while (i2 < m2) {
          c2 += this[i2] + a2[i2];
          r2[i2++] = c2 & this.DM;
          c2 >>= this.DB;
        }
        if (a2.t < this.t) {
          c2 += a2.s;
          while (i2 < this.t) {
            c2 += this[i2];
            r2[i2++] = c2 & this.DM;
            c2 >>= this.DB;
          }
          c2 += this.s;
        } else {
          c2 += this.s;
          while (i2 < a2.t) {
            c2 += a2[i2];
            r2[i2++] = c2 & this.DM;
            c2 >>= this.DB;
          }
          c2 += a2.s;
        }
        r2.s = c2 < 0 ? -1 : 0;
        if (c2 > 0) {
          r2[i2++] = c2;
        } else if (c2 < -1) {
          r2[i2++] = this.DV + c2;
        }
        r2.t = i2;
        r2.clamp();
      };
      BigInteger2.prototype.dMultiply = function(n2) {
        this[this.t] = this.am(0, n2 - 1, this, 0, 0, this.t);
        ++this.t;
        this.clamp();
      };
      BigInteger2.prototype.dAddOffset = function(n2, w2) {
        if (n2 == 0) {
          return;
        }
        while (this.t <= w2) {
          this[this.t++] = 0;
        }
        this[w2] += n2;
        while (this[w2] >= this.DV) {
          this[w2] -= this.DV;
          if (++w2 >= this.t) {
            this[this.t++] = 0;
          }
          ++this[w2];
        }
      };
      BigInteger2.prototype.multiplyLowerTo = function(a2, n2, r2) {
        var i2 = Math.min(this.t + a2.t, n2);
        r2.s = 0;
        r2.t = i2;
        while (i2 > 0) {
          r2[--i2] = 0;
        }
        for (var j2 = r2.t - this.t; i2 < j2; ++i2) {
          r2[i2 + this.t] = this.am(0, a2[i2], r2, i2, 0, this.t);
        }
        for (var j2 = Math.min(a2.t, n2); i2 < j2; ++i2) {
          this.am(0, a2[i2], r2, i2, 0, n2 - i2);
        }
        r2.clamp();
      };
      BigInteger2.prototype.multiplyUpperTo = function(a2, n2, r2) {
        --n2;
        var i2 = r2.t = this.t + a2.t - n2;
        r2.s = 0;
        while (--i2 >= 0) {
          r2[i2] = 0;
        }
        for (i2 = Math.max(n2 - this.t, 0); i2 < a2.t; ++i2) {
          r2[this.t + i2 - n2] = this.am(n2 - i2, a2[i2], r2, 0, 0, this.t + i2 - n2);
        }
        r2.clamp();
        r2.drShiftTo(1, r2);
      };
      BigInteger2.prototype.modInt = function(n2) {
        if (n2 <= 0) {
          return 0;
        }
        var d2 = this.DV % n2;
        var r2 = this.s < 0 ? n2 - 1 : 0;
        if (this.t > 0) {
          if (d2 == 0) {
            r2 = this[0] % n2;
          } else {
            for (var i2 = this.t - 1; i2 >= 0; --i2) {
              r2 = (d2 * r2 + this[i2]) % n2;
            }
          }
        }
        return r2;
      };
      BigInteger2.prototype.millerRabin = function(t2) {
        var n1 = this.subtract(BigInteger2.ONE);
        var k = n1.getLowestSetBit();
        if (k <= 0) {
          return false;
        }
        var r2 = n1.shiftRight(k);
        t2 = t2 + 1 >> 1;
        if (t2 > lowprimes.length) {
          t2 = lowprimes.length;
        }
        var a2 = nbi();
        for (var i2 = 0; i2 < t2; ++i2) {
          a2.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
          var y2 = a2.modPow(r2, this);
          if (y2.compareTo(BigInteger2.ONE) != 0 && y2.compareTo(n1) != 0) {
            var j2 = 1;
            while (j2++ < k && y2.compareTo(n1) != 0) {
              y2 = y2.modPowInt(2, this);
              if (y2.compareTo(BigInteger2.ONE) == 0) {
                return false;
              }
            }
            if (y2.compareTo(n1) != 0) {
              return false;
            }
          }
        }
        return true;
      };
      BigInteger2.prototype.square = function() {
        var r2 = nbi();
        this.squareTo(r2);
        return r2;
      };
      BigInteger2.prototype.gcda = function(a2, callback) {
        var x2 = this.s < 0 ? this.negate() : this.clone();
        var y2 = a2.s < 0 ? a2.negate() : a2.clone();
        if (x2.compareTo(y2) < 0) {
          var t2 = x2;
          x2 = y2;
          y2 = t2;
        }
        var i2 = x2.getLowestSetBit();
        var g2 = y2.getLowestSetBit();
        if (g2 < 0) {
          callback(x2);
          return;
        }
        if (i2 < g2) {
          g2 = i2;
        }
        if (g2 > 0) {
          x2.rShiftTo(g2, x2);
          y2.rShiftTo(g2, y2);
        }
        var gcda1 = function() {
          if ((i2 = x2.getLowestSetBit()) > 0) {
            x2.rShiftTo(i2, x2);
          }
          if ((i2 = y2.getLowestSetBit()) > 0) {
            y2.rShiftTo(i2, y2);
          }
          if (x2.compareTo(y2) >= 0) {
            x2.subTo(y2, x2);
            x2.rShiftTo(1, x2);
          } else {
            y2.subTo(x2, y2);
            y2.rShiftTo(1, y2);
          }
          if (!(x2.signum() > 0)) {
            if (g2 > 0) {
              y2.lShiftTo(g2, y2);
            }
            setTimeout(function() {
              callback(y2);
            }, 0);
          } else {
            setTimeout(gcda1, 0);
          }
        };
        setTimeout(gcda1, 10);
      };
      BigInteger2.prototype.fromNumberAsync = function(a2, b2, c2, callback) {
        if ("number" == typeof b2) {
          if (a2 < 2) {
            this.fromInt(1);
          } else {
            this.fromNumber(a2, c2);
            if (!this.testBit(a2 - 1)) {
              this.bitwiseTo(BigInteger2.ONE.shiftLeft(a2 - 1), op_or, this);
            }
            if (this.isEven()) {
              this.dAddOffset(1, 0);
            }
            var bnp_1 = this;
            var bnpfn1_1 = function() {
              bnp_1.dAddOffset(2, 0);
              if (bnp_1.bitLength() > a2) {
                bnp_1.subTo(BigInteger2.ONE.shiftLeft(a2 - 1), bnp_1);
              }
              if (bnp_1.isProbablePrime(b2)) {
                setTimeout(function() {
                  callback();
                }, 0);
              } else {
                setTimeout(bnpfn1_1, 0);
              }
            };
            setTimeout(bnpfn1_1, 0);
          }
        } else {
          var x2 = [];
          var t2 = a2 & 7;
          x2.length = (a2 >> 3) + 1;
          b2.nextBytes(x2);
          if (t2 > 0) {
            x2[0] &= (1 << t2) - 1;
          } else {
            x2[0] = 0;
          }
          this.fromString(x2, 256);
        }
      };
      return BigInteger2;
    }()
  );
  var NullExp = (
    /** @class */
    function() {
      function NullExp2() {
      }
      NullExp2.prototype.convert = function(x2) {
        return x2;
      };
      NullExp2.prototype.revert = function(x2) {
        return x2;
      };
      NullExp2.prototype.mulTo = function(x2, y2, r2) {
        x2.multiplyTo(y2, r2);
      };
      NullExp2.prototype.sqrTo = function(x2, r2) {
        x2.squareTo(r2);
      };
      return NullExp2;
    }()
  );
  var Classic = (
    /** @class */
    function() {
      function Classic2(m2) {
        this.m = m2;
      }
      Classic2.prototype.convert = function(x2) {
        if (x2.s < 0 || x2.compareTo(this.m) >= 0) {
          return x2.mod(this.m);
        } else {
          return x2;
        }
      };
      Classic2.prototype.revert = function(x2) {
        return x2;
      };
      Classic2.prototype.reduce = function(x2) {
        x2.divRemTo(this.m, null, x2);
      };
      Classic2.prototype.mulTo = function(x2, y2, r2) {
        x2.multiplyTo(y2, r2);
        this.reduce(r2);
      };
      Classic2.prototype.sqrTo = function(x2, r2) {
        x2.squareTo(r2);
        this.reduce(r2);
      };
      return Classic2;
    }()
  );
  var Montgomery = (
    /** @class */
    function() {
      function Montgomery2(m2) {
        this.m = m2;
        this.mp = m2.invDigit();
        this.mpl = this.mp & 32767;
        this.mph = this.mp >> 15;
        this.um = (1 << m2.DB - 15) - 1;
        this.mt2 = 2 * m2.t;
      }
      Montgomery2.prototype.convert = function(x2) {
        var r2 = nbi();
        x2.abs().dlShiftTo(this.m.t, r2);
        r2.divRemTo(this.m, null, r2);
        if (x2.s < 0 && r2.compareTo(BigInteger.ZERO) > 0) {
          this.m.subTo(r2, r2);
        }
        return r2;
      };
      Montgomery2.prototype.revert = function(x2) {
        var r2 = nbi();
        x2.copyTo(r2);
        this.reduce(r2);
        return r2;
      };
      Montgomery2.prototype.reduce = function(x2) {
        while (x2.t <= this.mt2) {
          x2[x2.t++] = 0;
        }
        for (var i2 = 0; i2 < this.m.t; ++i2) {
          var j2 = x2[i2] & 32767;
          var u0 = j2 * this.mpl + ((j2 * this.mph + (x2[i2] >> 15) * this.mpl & this.um) << 15) & x2.DM;
          j2 = i2 + this.m.t;
          x2[j2] += this.m.am(0, u0, x2, i2, 0, this.m.t);
          while (x2[j2] >= x2.DV) {
            x2[j2] -= x2.DV;
            x2[++j2]++;
          }
        }
        x2.clamp();
        x2.drShiftTo(this.m.t, x2);
        if (x2.compareTo(this.m) >= 0) {
          x2.subTo(this.m, x2);
        }
      };
      Montgomery2.prototype.mulTo = function(x2, y2, r2) {
        x2.multiplyTo(y2, r2);
        this.reduce(r2);
      };
      Montgomery2.prototype.sqrTo = function(x2, r2) {
        x2.squareTo(r2);
        this.reduce(r2);
      };
      return Montgomery2;
    }()
  );
  var Barrett = (
    /** @class */
    function() {
      function Barrett2(m2) {
        this.m = m2;
        this.r2 = nbi();
        this.q3 = nbi();
        BigInteger.ONE.dlShiftTo(2 * m2.t, this.r2);
        this.mu = this.r2.divide(m2);
      }
      Barrett2.prototype.convert = function(x2) {
        if (x2.s < 0 || x2.t > 2 * this.m.t) {
          return x2.mod(this.m);
        } else if (x2.compareTo(this.m) < 0) {
          return x2;
        } else {
          var r2 = nbi();
          x2.copyTo(r2);
          this.reduce(r2);
          return r2;
        }
      };
      Barrett2.prototype.revert = function(x2) {
        return x2;
      };
      Barrett2.prototype.reduce = function(x2) {
        x2.drShiftTo(this.m.t - 1, this.r2);
        if (x2.t > this.m.t + 1) {
          x2.t = this.m.t + 1;
          x2.clamp();
        }
        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
        while (x2.compareTo(this.r2) < 0) {
          x2.dAddOffset(1, this.m.t + 1);
        }
        x2.subTo(this.r2, x2);
        while (x2.compareTo(this.m) >= 0) {
          x2.subTo(this.m, x2);
        }
      };
      Barrett2.prototype.mulTo = function(x2, y2, r2) {
        x2.multiplyTo(y2, r2);
        this.reduce(r2);
      };
      Barrett2.prototype.sqrTo = function(x2, r2) {
        x2.squareTo(r2);
        this.reduce(r2);
      };
      return Barrett2;
    }()
  );
  function nbi() {
    return new BigInteger(null);
  }
  function parseBigInt(str, r2) {
    return new BigInteger(str, r2);
  }
  var inBrowser = typeof navigator !== "undefined";
  if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
    BigInteger.prototype.am = function am2(i2, x2, w2, j2, c2, n2) {
      var xl = x2 & 32767;
      var xh = x2 >> 15;
      while (--n2 >= 0) {
        var l2 = this[i2] & 32767;
        var h2 = this[i2++] >> 15;
        var m2 = xh * l2 + h2 * xl;
        l2 = xl * l2 + ((m2 & 32767) << 15) + w2[j2] + (c2 & 1073741823);
        c2 = (l2 >>> 30) + (m2 >>> 15) + xh * h2 + (c2 >>> 30);
        w2[j2++] = l2 & 1073741823;
      }
      return c2;
    };
    dbits = 30;
  } else if (inBrowser && j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = function am1(i2, x2, w2, j2, c2, n2) {
      while (--n2 >= 0) {
        var v2 = x2 * this[i2++] + w2[j2] + c2;
        c2 = Math.floor(v2 / 67108864);
        w2[j2++] = v2 & 67108863;
      }
      return c2;
    };
    dbits = 26;
  } else {
    BigInteger.prototype.am = function am3(i2, x2, w2, j2, c2, n2) {
      var xl = x2 & 16383;
      var xh = x2 >> 14;
      while (--n2 >= 0) {
        var l2 = this[i2] & 16383;
        var h2 = this[i2++] >> 14;
        var m2 = xh * l2 + h2 * xl;
        l2 = xl * l2 + ((m2 & 16383) << 14) + w2[j2] + c2;
        c2 = (l2 >> 28) + (m2 >> 14) + xh * h2;
        w2[j2++] = l2 & 268435455;
      }
      return c2;
    };
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = (1 << dbits) - 1;
  BigInteger.prototype.DV = 1 << dbits;
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2, BI_FP);
  BigInteger.prototype.F1 = BI_FP - dbits;
  BigInteger.prototype.F2 = 2 * dbits - BI_FP;
  var BI_RC = [];
  var rr;
  var vv;
  rr = "0".charCodeAt(0);
  for (vv = 0; vv <= 9; ++vv) {
    BI_RC[rr++] = vv;
  }
  rr = "a".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) {
    BI_RC[rr++] = vv;
  }
  rr = "A".charCodeAt(0);
  for (vv = 10; vv < 36; ++vv) {
    BI_RC[rr++] = vv;
  }
  function intAt(s2, i2) {
    var c2 = BI_RC[s2.charCodeAt(i2)];
    return c2 == null ? -1 : c2;
  }
  function nbv(i2) {
    var r2 = nbi();
    r2.fromInt(i2);
    return r2;
  }
  function nbits(x2) {
    var r2 = 1;
    var t2;
    if ((t2 = x2 >>> 16) != 0) {
      x2 = t2;
      r2 += 16;
    }
    if ((t2 = x2 >> 8) != 0) {
      x2 = t2;
      r2 += 8;
    }
    if ((t2 = x2 >> 4) != 0) {
      x2 = t2;
      r2 += 4;
    }
    if ((t2 = x2 >> 2) != 0) {
      x2 = t2;
      r2 += 2;
    }
    if ((t2 = x2 >> 1) != 0) {
      x2 = t2;
      r2 += 1;
    }
    return r2;
  }
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  var lookup = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    62,
    0,
    62,
    0,
    63,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    0,
    0,
    0,
    0,
    63,
    0,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51
  ];
  function base64Decode(source, target) {
    var sourceLength = source.length;
    var paddingLength = source[sourceLength - 2] === "=" ? 2 : source[sourceLength - 1] === "=" ? 1 : 0;
    var tmp;
    var byteIndex = 0;
    var baseLength = sourceLength - paddingLength & 4294967292;
    for (var i2 = 0; i2 < baseLength; i2 += 4) {
      tmp = lookup[source.charCodeAt(i2)] << 18 | lookup[source.charCodeAt(i2 + 1)] << 12 | lookup[source.charCodeAt(i2 + 2)] << 6 | lookup[source.charCodeAt(i2 + 3)];
      target[byteIndex++] = tmp >> 16 & 255;
      target[byteIndex++] = tmp >> 8 & 255;
      target[byteIndex++] = tmp & 255;
    }
    if (paddingLength === 1) {
      tmp = lookup[source.charCodeAt(i2)] << 10 | lookup[source.charCodeAt(i2 + 1)] << 4 | lookup[source.charCodeAt(i2 + 2)] >> 2;
      target[byteIndex++] = tmp >> 8 & 255;
      target[byteIndex++] = tmp & 255;
    }
    if (paddingLength === 2) {
      tmp = lookup[source.charCodeAt(i2)] << 2 | lookup[source.charCodeAt(i2 + 1)] >> 4;
      target[byteIndex++] = tmp & 255;
    }
  }
  const $inject_window_crypto = {
    getRandomValues(arr) {
      if (!(arr instanceof Int8Array || arr instanceof Uint8Array || arr instanceof Int16Array || arr instanceof Uint16Array || arr instanceof Int32Array || arr instanceof Uint32Array || arr instanceof Uint8ClampedArray)) {
        throw new Error("Expected an integer array");
      }
      if (arr.byteLength > 65536) {
        throw new Error("Can only request a maximum of 65536 bytes");
      }
      var crypto = requireNativePlugin("DCloud-Crypto");
      base64Decode(crypto.getRandomValues(arr.byteLength), new Uint8Array(
        arr.buffer,
        arr.byteOffset,
        arr.byteLength
      ));
      return arr;
    }
  };
  var Arcfour = (
    /** @class */
    function() {
      function Arcfour2() {
        this.i = 0;
        this.j = 0;
        this.S = [];
      }
      Arcfour2.prototype.init = function(key) {
        var i2;
        var j2;
        var t2;
        for (i2 = 0; i2 < 256; ++i2) {
          this.S[i2] = i2;
        }
        j2 = 0;
        for (i2 = 0; i2 < 256; ++i2) {
          j2 = j2 + this.S[i2] + key[i2 % key.length] & 255;
          t2 = this.S[i2];
          this.S[i2] = this.S[j2];
          this.S[j2] = t2;
        }
        this.i = 0;
        this.j = 0;
      };
      Arcfour2.prototype.next = function() {
        var t2;
        this.i = this.i + 1 & 255;
        this.j = this.j + this.S[this.i] & 255;
        t2 = this.S[this.i];
        this.S[this.i] = this.S[this.j];
        this.S[this.j] = t2;
        return this.S[t2 + this.S[this.i] & 255];
      };
      return Arcfour2;
    }()
  );
  function prng_newstate() {
    return new Arcfour();
  }
  var rng_psize = 256;
  var rng_state;
  var rng_pool = null;
  var rng_pptr;
  if (rng_pool == null) {
    rng_pool = [];
    rng_pptr = 0;
    var t = void 0;
    if (typeof window !== "undefined" && $inject_window_crypto && $inject_window_crypto.getRandomValues) {
      var z = new Uint32Array(256);
      $inject_window_crypto.getRandomValues(z);
      for (t = 0; t < z.length; ++t) {
        rng_pool[rng_pptr++] = z[t] & 255;
      }
    }
    var count = 0;
    var onMouseMoveListener_1 = function(ev) {
      count = count || 0;
      if (count >= 256 || rng_pptr >= rng_psize) {
        if (window.removeEventListener) {
          window.removeEventListener("mousemove", onMouseMoveListener_1, false);
        } else if (window.detachEvent) {
          window.detachEvent("onmousemove", onMouseMoveListener_1);
        }
        return;
      }
      try {
        var mouseCoordinates = ev.x + ev.y;
        rng_pool[rng_pptr++] = mouseCoordinates & 255;
        count += 1;
      } catch (e) {
      }
    };
    if (typeof window !== "undefined") {
      if (window.addEventListener) {
        window.addEventListener("mousemove", onMouseMoveListener_1, false);
      } else if (window.attachEvent) {
        window.attachEvent("onmousemove", onMouseMoveListener_1);
      }
    }
  }
  function rng_get_byte() {
    if (rng_state == null) {
      rng_state = prng_newstate();
      while (rng_pptr < rng_psize) {
        var random = Math.floor(65536 * Math.random());
        rng_pool[rng_pptr++] = random & 255;
      }
      rng_state.init(rng_pool);
      for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
        rng_pool[rng_pptr] = 0;
      }
      rng_pptr = 0;
    }
    return rng_state.next();
  }
  var SecureRandom = (
    /** @class */
    function() {
      function SecureRandom2() {
      }
      SecureRandom2.prototype.nextBytes = function(ba) {
        for (var i2 = 0; i2 < ba.length; ++i2) {
          ba[i2] = rng_get_byte();
        }
      };
      return SecureRandom2;
    }()
  );
  function pkcs1pad1(s2, n2) {
    if (n2 < s2.length + 22) {
      formatAppLog("error", "at node_modules/jsencrypt/lib/lib/jsbn/rsa.js:23", "Message too long for RSA");
      return null;
    }
    var len = n2 - s2.length - 6;
    var filler = "";
    for (var f2 = 0; f2 < len; f2 += 2) {
      filler += "ff";
    }
    var m2 = "0001" + filler + "00" + s2;
    return parseBigInt(m2, 16);
  }
  function pkcs1pad2(s2, n2) {
    if (n2 < s2.length + 11) {
      formatAppLog("error", "at node_modules/jsencrypt/lib/lib/jsbn/rsa.js:37", "Message too long for RSA");
      return null;
    }
    var ba = [];
    var i2 = s2.length - 1;
    while (i2 >= 0 && n2 > 0) {
      var c2 = s2.charCodeAt(i2--);
      if (c2 < 128) {
        ba[--n2] = c2;
      } else if (c2 > 127 && c2 < 2048) {
        ba[--n2] = c2 & 63 | 128;
        ba[--n2] = c2 >> 6 | 192;
      } else {
        ba[--n2] = c2 & 63 | 128;
        ba[--n2] = c2 >> 6 & 63 | 128;
        ba[--n2] = c2 >> 12 | 224;
      }
    }
    ba[--n2] = 0;
    var rng = new SecureRandom();
    var x2 = [];
    while (n2 > 2) {
      x2[0] = 0;
      while (x2[0] == 0) {
        rng.nextBytes(x2);
      }
      ba[--n2] = x2[0];
    }
    ba[--n2] = 2;
    ba[--n2] = 0;
    return new BigInteger(ba);
  }
  var RSAKey = (
    /** @class */
    function() {
      function RSAKey2() {
        this.n = null;
        this.e = 0;
        this.d = null;
        this.p = null;
        this.q = null;
        this.dmp1 = null;
        this.dmq1 = null;
        this.coeff = null;
      }
      RSAKey2.prototype.doPublic = function(x2) {
        return x2.modPowInt(this.e, this.n);
      };
      RSAKey2.prototype.doPrivate = function(x2) {
        if (this.p == null || this.q == null) {
          return x2.modPow(this.d, this.n);
        }
        var xp = x2.mod(this.p).modPow(this.dmp1, this.p);
        var xq = x2.mod(this.q).modPow(this.dmq1, this.q);
        while (xp.compareTo(xq) < 0) {
          xp = xp.add(this.p);
        }
        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);
      };
      RSAKey2.prototype.setPublic = function(N2, E2) {
        if (N2 != null && E2 != null && N2.length > 0 && E2.length > 0) {
          this.n = parseBigInt(N2, 16);
          this.e = parseInt(E2, 16);
        } else {
          formatAppLog("error", "at node_modules/jsencrypt/lib/lib/jsbn/rsa.js:114", "Invalid RSA public key");
        }
      };
      RSAKey2.prototype.encrypt = function(text) {
        var maxLength = this.n.bitLength() + 7 >> 3;
        var m2 = pkcs1pad2(text, maxLength);
        if (m2 == null) {
          return null;
        }
        var c2 = this.doPublic(m2);
        if (c2 == null) {
          return null;
        }
        var h2 = c2.toString(16);
        var length = h2.length;
        for (var i2 = 0; i2 < maxLength * 2 - length; i2++) {
          h2 = "0" + h2;
        }
        return h2;
      };
      RSAKey2.prototype.setPrivate = function(N2, E2, D2) {
        if (N2 != null && E2 != null && N2.length > 0 && E2.length > 0) {
          this.n = parseBigInt(N2, 16);
          this.e = parseInt(E2, 16);
          this.d = parseBigInt(D2, 16);
        } else {
          formatAppLog("error", "at node_modules/jsencrypt/lib/lib/jsbn/rsa.js:146", "Invalid RSA private key");
        }
      };
      RSAKey2.prototype.setPrivateEx = function(N2, E2, D2, P2, Q2, DP, DQ, C2) {
        if (N2 != null && E2 != null && N2.length > 0 && E2.length > 0) {
          this.n = parseBigInt(N2, 16);
          this.e = parseInt(E2, 16);
          this.d = parseBigInt(D2, 16);
          this.p = parseBigInt(P2, 16);
          this.q = parseBigInt(Q2, 16);
          this.dmp1 = parseBigInt(DP, 16);
          this.dmq1 = parseBigInt(DQ, 16);
          this.coeff = parseBigInt(C2, 16);
        } else {
          formatAppLog("error", "at node_modules/jsencrypt/lib/lib/jsbn/rsa.js:163", "Invalid RSA private key");
        }
      };
      RSAKey2.prototype.generate = function(B2, E2) {
        var rng = new SecureRandom();
        var qs2 = B2 >> 1;
        this.e = parseInt(E2, 16);
        var ee2 = new BigInteger(E2, 16);
        for (; ; ) {
          for (; ; ) {
            this.p = new BigInteger(B2 - qs2, 1, rng);
            if (this.p.subtract(BigInteger.ONE).gcd(ee2).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) {
              break;
            }
          }
          for (; ; ) {
            this.q = new BigInteger(qs2, 1, rng);
            if (this.q.subtract(BigInteger.ONE).gcd(ee2).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) {
              break;
            }
          }
          if (this.p.compareTo(this.q) <= 0) {
            var t2 = this.p;
            this.p = this.q;
            this.q = t2;
          }
          var p1 = this.p.subtract(BigInteger.ONE);
          var q1 = this.q.subtract(BigInteger.ONE);
          var phi = p1.multiply(q1);
          if (phi.gcd(ee2).compareTo(BigInteger.ONE) == 0) {
            this.n = this.p.multiply(this.q);
            this.d = ee2.modInverse(phi);
            this.dmp1 = this.d.mod(p1);
            this.dmq1 = this.d.mod(q1);
            this.coeff = this.q.modInverse(this.p);
            break;
          }
        }
      };
      RSAKey2.prototype.decrypt = function(ctext) {
        var c2 = parseBigInt(ctext, 16);
        var m2 = this.doPrivate(c2);
        if (m2 == null) {
          return null;
        }
        return pkcs1unpad2(m2, this.n.bitLength() + 7 >> 3);
      };
      RSAKey2.prototype.generateAsync = function(B2, E2, callback) {
        var rng = new SecureRandom();
        var qs2 = B2 >> 1;
        this.e = parseInt(E2, 16);
        var ee2 = new BigInteger(E2, 16);
        var rsa = this;
        var loop1 = function() {
          var loop4 = function() {
            if (rsa.p.compareTo(rsa.q) <= 0) {
              var t2 = rsa.p;
              rsa.p = rsa.q;
              rsa.q = t2;
            }
            var p1 = rsa.p.subtract(BigInteger.ONE);
            var q1 = rsa.q.subtract(BigInteger.ONE);
            var phi = p1.multiply(q1);
            if (phi.gcd(ee2).compareTo(BigInteger.ONE) == 0) {
              rsa.n = rsa.p.multiply(rsa.q);
              rsa.d = ee2.modInverse(phi);
              rsa.dmp1 = rsa.d.mod(p1);
              rsa.dmq1 = rsa.d.mod(q1);
              rsa.coeff = rsa.q.modInverse(rsa.p);
              setTimeout(function() {
                callback();
              }, 0);
            } else {
              setTimeout(loop1, 0);
            }
          };
          var loop3 = function() {
            rsa.q = nbi();
            rsa.q.fromNumberAsync(qs2, 1, rng, function() {
              rsa.q.subtract(BigInteger.ONE).gcda(ee2, function(r2) {
                if (r2.compareTo(BigInteger.ONE) == 0 && rsa.q.isProbablePrime(10)) {
                  setTimeout(loop4, 0);
                } else {
                  setTimeout(loop3, 0);
                }
              });
            });
          };
          var loop2 = function() {
            rsa.p = nbi();
            rsa.p.fromNumberAsync(B2 - qs2, 1, rng, function() {
              rsa.p.subtract(BigInteger.ONE).gcda(ee2, function(r2) {
                if (r2.compareTo(BigInteger.ONE) == 0 && rsa.p.isProbablePrime(10)) {
                  setTimeout(loop3, 0);
                } else {
                  setTimeout(loop2, 0);
                }
              });
            });
          };
          setTimeout(loop2, 0);
        };
        setTimeout(loop1, 0);
      };
      RSAKey2.prototype.sign = function(text, digestMethod, digestName) {
        var header = getDigestHeader(digestName);
        var digest = header + digestMethod(text).toString();
        var m2 = pkcs1pad1(digest, this.n.bitLength() / 4);
        if (m2 == null) {
          return null;
        }
        var c2 = this.doPrivate(m2);
        if (c2 == null) {
          return null;
        }
        var h2 = c2.toString(16);
        if ((h2.length & 1) == 0) {
          return h2;
        } else {
          return "0" + h2;
        }
      };
      RSAKey2.prototype.verify = function(text, signature, digestMethod) {
        var c2 = parseBigInt(signature, 16);
        var m2 = this.doPublic(c2);
        if (m2 == null) {
          return null;
        }
        var unpadded = m2.toString(16).replace(/^1f+00/, "");
        var digest = removeDigestHeader(unpadded);
        return digest == digestMethod(text).toString();
      };
      return RSAKey2;
    }()
  );
  function pkcs1unpad2(d2, n2) {
    var b2 = d2.toByteArray();
    var i2 = 0;
    while (i2 < b2.length && b2[i2] == 0) {
      ++i2;
    }
    if (b2.length - i2 != n2 - 1 || b2[i2] != 2) {
      return null;
    }
    ++i2;
    while (b2[i2] != 0) {
      if (++i2 >= b2.length) {
        return null;
      }
    }
    var ret = "";
    while (++i2 < b2.length) {
      var c2 = b2[i2] & 255;
      if (c2 < 128) {
        ret += String.fromCharCode(c2);
      } else if (c2 > 191 && c2 < 224) {
        ret += String.fromCharCode((c2 & 31) << 6 | b2[i2 + 1] & 63);
        ++i2;
      } else {
        ret += String.fromCharCode((c2 & 15) << 12 | (b2[i2 + 1] & 63) << 6 | b2[i2 + 2] & 63);
        i2 += 2;
      }
    }
    return ret;
  }
  var DIGEST_HEADERS = {
    md2: "3020300c06082a864886f70d020205000410",
    md5: "3020300c06082a864886f70d020505000410",
    sha1: "3021300906052b0e03021a05000414",
    sha224: "302d300d06096086480165030402040500041c",
    sha256: "3031300d060960864801650304020105000420",
    sha384: "3041300d060960864801650304020205000430",
    sha512: "3051300d060960864801650304020305000440",
    ripemd160: "3021300906052b2403020105000414"
  };
  function getDigestHeader(name) {
    return DIGEST_HEADERS[name] || "";
  }
  function removeDigestHeader(str) {
    for (var name_1 in DIGEST_HEADERS) {
      if (DIGEST_HEADERS.hasOwnProperty(name_1)) {
        var header = DIGEST_HEADERS[name_1];
        var len = header.length;
        if (str.substr(0, len) == header) {
          return str.substr(len);
        }
      }
    }
    return str;
  }
  /*!
  Copyright (c) 2011, Yahoo! Inc. All rights reserved.
  Code licensed under the BSD License:
  http://developer.yahoo.com/yui/license.html
  version: 2.9.0
  */
  var YAHOO = {};
  YAHOO.lang = {
    /**
     * Utility to set up the prototype, constructor and superclass properties to
     * support an inheritance strategy that can chain constructors and methods.
     * Static members will not be inherited.
     *
     * @method extend
     * @static
     * @param {Function} subc   the object to modify
     * @param {Function} superc the object to inherit
     * @param {Object} overrides  additional properties/methods to add to the
     *                              subclass prototype.  These will override the
     *                              matching items obtained from the superclass
     *                              if present.
     */
    extend: function(subc, superc, overrides) {
      if (!superc || !subc) {
        throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");
      }
      var F2 = function() {
      };
      F2.prototype = superc.prototype;
      subc.prototype = new F2();
      subc.prototype.constructor = subc;
      subc.superclass = superc.prototype;
      if (superc.prototype.constructor == Object.prototype.constructor) {
        superc.prototype.constructor = superc;
      }
      if (overrides) {
        var i2;
        for (i2 in overrides) {
          subc.prototype[i2] = overrides[i2];
        }
        var _IEEnumFix = function() {
        }, ADD = ["toString", "valueOf"];
        try {
          if (/MSIE/.test(navigator.userAgent)) {
            _IEEnumFix = function(r2, s2) {
              for (i2 = 0; i2 < ADD.length; i2 = i2 + 1) {
                var fname = ADD[i2], f2 = s2[fname];
                if (typeof f2 === "function" && f2 != Object.prototype[fname]) {
                  r2[fname] = f2;
                }
              }
            };
          }
        } catch (ex) {
        }
        _IEEnumFix(subc.prototype, overrides);
      }
    }
  };
  /**
   * @fileOverview
   * @name asn1-1.0.js
   * @author Kenji Urushima kenji.urushima@gmail.com
   * @version asn1 1.0.13 (2017-Jun-02)
   * @since jsrsasign 2.1
   * @license <a href="https://kjur.github.io/jsrsasign/license/">MIT License</a>
   */
  var KJUR = {};
  if (typeof KJUR.asn1 == "undefined" || !KJUR.asn1)
    KJUR.asn1 = {};
  KJUR.asn1.ASN1Util = new function() {
    this.integerToByteHex = function(i2) {
      var h2 = i2.toString(16);
      if (h2.length % 2 == 1)
        h2 = "0" + h2;
      return h2;
    };
    this.bigIntToMinTwosComplementsHex = function(bigIntegerValue) {
      var h2 = bigIntegerValue.toString(16);
      if (h2.substr(0, 1) != "-") {
        if (h2.length % 2 == 1) {
          h2 = "0" + h2;
        } else {
          if (!h2.match(/^[0-7]/)) {
            h2 = "00" + h2;
          }
        }
      } else {
        var hPos = h2.substr(1);
        var xorLen = hPos.length;
        if (xorLen % 2 == 1) {
          xorLen += 1;
        } else {
          if (!h2.match(/^[0-7]/)) {
            xorLen += 2;
          }
        }
        var hMask = "";
        for (var i2 = 0; i2 < xorLen; i2++) {
          hMask += "f";
        }
        var biMask = new BigInteger(hMask, 16);
        var biNeg = biMask.xor(bigIntegerValue).add(BigInteger.ONE);
        h2 = biNeg.toString(16).replace(/^-/, "");
      }
      return h2;
    };
    this.getPEMStringFromHex = function(dataHex, pemHeader) {
      return hextopem(dataHex, pemHeader);
    };
    this.newObject = function(param) {
      var _KJUR = KJUR, _KJUR_asn1 = _KJUR.asn1, _DERBoolean = _KJUR_asn1.DERBoolean, _DERInteger = _KJUR_asn1.DERInteger, _DERBitString = _KJUR_asn1.DERBitString, _DEROctetString = _KJUR_asn1.DEROctetString, _DERNull = _KJUR_asn1.DERNull, _DERObjectIdentifier = _KJUR_asn1.DERObjectIdentifier, _DEREnumerated = _KJUR_asn1.DEREnumerated, _DERUTF8String = _KJUR_asn1.DERUTF8String, _DERNumericString = _KJUR_asn1.DERNumericString, _DERPrintableString = _KJUR_asn1.DERPrintableString, _DERTeletexString = _KJUR_asn1.DERTeletexString, _DERIA5String = _KJUR_asn1.DERIA5String, _DERUTCTime = _KJUR_asn1.DERUTCTime, _DERGeneralizedTime = _KJUR_asn1.DERGeneralizedTime, _DERSequence = _KJUR_asn1.DERSequence, _DERSet = _KJUR_asn1.DERSet, _DERTaggedObject = _KJUR_asn1.DERTaggedObject, _newObject = _KJUR_asn1.ASN1Util.newObject;
      var keys2 = Object.keys(param);
      if (keys2.length != 1)
        throw "key of param shall be only one.";
      var key = keys2[0];
      if (":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:".indexOf(":" + key + ":") == -1)
        throw "undefined key: " + key;
      if (key == "bool")
        return new _DERBoolean(param[key]);
      if (key == "int")
        return new _DERInteger(param[key]);
      if (key == "bitstr")
        return new _DERBitString(param[key]);
      if (key == "octstr")
        return new _DEROctetString(param[key]);
      if (key == "null")
        return new _DERNull(param[key]);
      if (key == "oid")
        return new _DERObjectIdentifier(param[key]);
      if (key == "enum")
        return new _DEREnumerated(param[key]);
      if (key == "utf8str")
        return new _DERUTF8String(param[key]);
      if (key == "numstr")
        return new _DERNumericString(param[key]);
      if (key == "prnstr")
        return new _DERPrintableString(param[key]);
      if (key == "telstr")
        return new _DERTeletexString(param[key]);
      if (key == "ia5str")
        return new _DERIA5String(param[key]);
      if (key == "utctime")
        return new _DERUTCTime(param[key]);
      if (key == "gentime")
        return new _DERGeneralizedTime(param[key]);
      if (key == "seq") {
        var paramList = param[key];
        var a2 = [];
        for (var i2 = 0; i2 < paramList.length; i2++) {
          var asn1Obj = _newObject(paramList[i2]);
          a2.push(asn1Obj);
        }
        return new _DERSequence({ "array": a2 });
      }
      if (key == "set") {
        var paramList = param[key];
        var a2 = [];
        for (var i2 = 0; i2 < paramList.length; i2++) {
          var asn1Obj = _newObject(paramList[i2]);
          a2.push(asn1Obj);
        }
        return new _DERSet({ "array": a2 });
      }
      if (key == "tag") {
        var tagParam = param[key];
        if (Object.prototype.toString.call(tagParam) === "[object Array]" && tagParam.length == 3) {
          var obj = _newObject(tagParam[2]);
          return new _DERTaggedObject({
            tag: tagParam[0],
            explicit: tagParam[1],
            obj
          });
        } else {
          var newParam = {};
          if (tagParam.explicit !== void 0)
            newParam.explicit = tagParam.explicit;
          if (tagParam.tag !== void 0)
            newParam.tag = tagParam.tag;
          if (tagParam.obj === void 0)
            throw "obj shall be specified for 'tag'.";
          newParam.obj = _newObject(tagParam.obj);
          return new _DERTaggedObject(newParam);
        }
      }
    };
    this.jsonToASN1HEX = function(param) {
      var asn1Obj = this.newObject(param);
      return asn1Obj.getEncodedHex();
    };
  }();
  KJUR.asn1.ASN1Util.oidHexToInt = function(hex) {
    var s2 = "";
    var i01 = parseInt(hex.substr(0, 2), 16);
    var i0 = Math.floor(i01 / 40);
    var i1 = i01 % 40;
    var s2 = i0 + "." + i1;
    var binbuf = "";
    for (var i2 = 2; i2 < hex.length; i2 += 2) {
      var value = parseInt(hex.substr(i2, 2), 16);
      var bin = ("00000000" + value.toString(2)).slice(-8);
      binbuf = binbuf + bin.substr(1, 7);
      if (bin.substr(0, 1) == "0") {
        var bi = new BigInteger(binbuf, 2);
        s2 = s2 + "." + bi.toString(10);
        binbuf = "";
      }
    }
    return s2;
  };
  KJUR.asn1.ASN1Util.oidIntToHex = function(oidString) {
    var itox = function(i3) {
      var h3 = i3.toString(16);
      if (h3.length == 1)
        h3 = "0" + h3;
      return h3;
    };
    var roidtox = function(roid) {
      var h3 = "";
      var bi = new BigInteger(roid, 10);
      var b2 = bi.toString(2);
      var padLen = 7 - b2.length % 7;
      if (padLen == 7)
        padLen = 0;
      var bPad = "";
      for (var i3 = 0; i3 < padLen; i3++)
        bPad += "0";
      b2 = bPad + b2;
      for (var i3 = 0; i3 < b2.length - 1; i3 += 7) {
        var b8 = b2.substr(i3, 7);
        if (i3 != b2.length - 7)
          b8 = "1" + b8;
        h3 += itox(parseInt(b8, 2));
      }
      return h3;
    };
    if (!oidString.match(/^[0-9.]+$/)) {
      throw "malformed oid string: " + oidString;
    }
    var h2 = "";
    var a2 = oidString.split(".");
    var i0 = parseInt(a2[0]) * 40 + parseInt(a2[1]);
    h2 += itox(i0);
    a2.splice(0, 2);
    for (var i2 = 0; i2 < a2.length; i2++) {
      h2 += roidtox(a2[i2]);
    }
    return h2;
  };
  KJUR.asn1.ASN1Object = function() {
    var hV = "";
    this.getLengthHexFromValue = function() {
      if (typeof this.hV == "undefined" || this.hV == null) {
        throw "this.hV is null or undefined.";
      }
      if (this.hV.length % 2 == 1) {
        throw "value hex must be even length: n=" + hV.length + ",v=" + this.hV;
      }
      var n2 = this.hV.length / 2;
      var hN = n2.toString(16);
      if (hN.length % 2 == 1) {
        hN = "0" + hN;
      }
      if (n2 < 128) {
        return hN;
      } else {
        var hNlen = hN.length / 2;
        if (hNlen > 15) {
          throw "ASN.1 length too long to represent by 8x: n = " + n2.toString(16);
        }
        var head = 128 + hNlen;
        return head.toString(16) + hN;
      }
    };
    this.getEncodedHex = function() {
      if (this.hTLV == null || this.isModified) {
        this.hV = this.getFreshValueHex();
        this.hL = this.getLengthHexFromValue();
        this.hTLV = this.hT + this.hL + this.hV;
        this.isModified = false;
      }
      return this.hTLV;
    };
    this.getValueHex = function() {
      this.getEncodedHex();
      return this.hV;
    };
    this.getFreshValueHex = function() {
      return "";
    };
  };
  KJUR.asn1.DERAbstractString = function(params) {
    KJUR.asn1.DERAbstractString.superclass.constructor.call(this);
    this.getString = function() {
      return this.s;
    };
    this.setString = function(newS) {
      this.hTLV = null;
      this.isModified = true;
      this.s = newS;
      this.hV = stohex(this.s);
    };
    this.setStringHex = function(newHexString) {
      this.hTLV = null;
      this.isModified = true;
      this.s = null;
      this.hV = newHexString;
    };
    this.getFreshValueHex = function() {
      return this.hV;
    };
    if (typeof params != "undefined") {
      if (typeof params == "string") {
        this.setString(params);
      } else if (typeof params["str"] != "undefined") {
        this.setString(params["str"]);
      } else if (typeof params["hex"] != "undefined") {
        this.setStringHex(params["hex"]);
      }
    }
  };
  YAHOO.lang.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);
  KJUR.asn1.DERAbstractTime = function(params) {
    KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);
    this.localDateToUTC = function(d2) {
      utc = d2.getTime() + d2.getTimezoneOffset() * 6e4;
      var utcDate = new Date(utc);
      return utcDate;
    };
    this.formatDate = function(dateObject, type3, withMillis) {
      var pad = this.zeroPadding;
      var d2 = this.localDateToUTC(dateObject);
      var year = String(d2.getFullYear());
      if (type3 == "utc")
        year = year.substr(2, 2);
      var month = pad(String(d2.getMonth() + 1), 2);
      var day = pad(String(d2.getDate()), 2);
      var hour = pad(String(d2.getHours()), 2);
      var min2 = pad(String(d2.getMinutes()), 2);
      var sec = pad(String(d2.getSeconds()), 2);
      var s2 = year + month + day + hour + min2 + sec;
      if (withMillis === true) {
        var millis = d2.getMilliseconds();
        if (millis != 0) {
          var sMillis = pad(String(millis), 3);
          sMillis = sMillis.replace(/[0]+$/, "");
          s2 = s2 + "." + sMillis;
        }
      }
      return s2 + "Z";
    };
    this.zeroPadding = function(s2, len) {
      if (s2.length >= len)
        return s2;
      return new Array(len - s2.length + 1).join("0") + s2;
    };
    this.getString = function() {
      return this.s;
    };
    this.setString = function(newS) {
      this.hTLV = null;
      this.isModified = true;
      this.s = newS;
      this.hV = stohex(newS);
    };
    this.setByDateValue = function(year, month, day, hour, min2, sec) {
      var dateObject = new Date(Date.UTC(year, month - 1, day, hour, min2, sec, 0));
      this.setByDate(dateObject);
    };
    this.getFreshValueHex = function() {
      return this.hV;
    };
  };
  YAHOO.lang.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);
  KJUR.asn1.DERAbstractStructured = function(params) {
    KJUR.asn1.DERAbstractString.superclass.constructor.call(this);
    this.setByASN1ObjectArray = function(asn1ObjectArray) {
      this.hTLV = null;
      this.isModified = true;
      this.asn1Array = asn1ObjectArray;
    };
    this.appendASN1Object = function(asn1Object) {
      this.hTLV = null;
      this.isModified = true;
      this.asn1Array.push(asn1Object);
    };
    this.asn1Array = new Array();
    if (typeof params != "undefined") {
      if (typeof params["array"] != "undefined") {
        this.asn1Array = params["array"];
      }
    }
  };
  YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);
  KJUR.asn1.DERBoolean = function() {
    KJUR.asn1.DERBoolean.superclass.constructor.call(this);
    this.hT = "01";
    this.hTLV = "0101ff";
  };
  YAHOO.lang.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);
  KJUR.asn1.DERInteger = function(params) {
    KJUR.asn1.DERInteger.superclass.constructor.call(this);
    this.hT = "02";
    this.setByBigInteger = function(bigIntegerValue) {
      this.hTLV = null;
      this.isModified = true;
      this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(bigIntegerValue);
    };
    this.setByInteger = function(intValue) {
      var bi = new BigInteger(String(intValue), 10);
      this.setByBigInteger(bi);
    };
    this.setValueHex = function(newHexString) {
      this.hV = newHexString;
    };
    this.getFreshValueHex = function() {
      return this.hV;
    };
    if (typeof params != "undefined") {
      if (typeof params["bigint"] != "undefined") {
        this.setByBigInteger(params["bigint"]);
      } else if (typeof params["int"] != "undefined") {
        this.setByInteger(params["int"]);
      } else if (typeof params == "number") {
        this.setByInteger(params);
      } else if (typeof params["hex"] != "undefined") {
        this.setValueHex(params["hex"]);
      }
    }
  };
  YAHOO.lang.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);
  KJUR.asn1.DERBitString = function(params) {
    if (params !== void 0 && typeof params.obj !== "undefined") {
      var o2 = KJUR.asn1.ASN1Util.newObject(params.obj);
      params.hex = "00" + o2.getEncodedHex();
    }
    KJUR.asn1.DERBitString.superclass.constructor.call(this);
    this.hT = "03";
    this.setHexValueIncludingUnusedBits = function(newHexStringIncludingUnusedBits) {
      this.hTLV = null;
      this.isModified = true;
      this.hV = newHexStringIncludingUnusedBits;
    };
    this.setUnusedBitsAndHexValue = function(unusedBits, hValue) {
      if (unusedBits < 0 || 7 < unusedBits) {
        throw "unused bits shall be from 0 to 7: u = " + unusedBits;
      }
      var hUnusedBits = "0" + unusedBits;
      this.hTLV = null;
      this.isModified = true;
      this.hV = hUnusedBits + hValue;
    };
    this.setByBinaryString = function(binaryString) {
      binaryString = binaryString.replace(/0+$/, "");
      var unusedBits = 8 - binaryString.length % 8;
      if (unusedBits == 8)
        unusedBits = 0;
      for (var i2 = 0; i2 <= unusedBits; i2++) {
        binaryString += "0";
      }
      var h2 = "";
      for (var i2 = 0; i2 < binaryString.length - 1; i2 += 8) {
        var b2 = binaryString.substr(i2, 8);
        var x2 = parseInt(b2, 2).toString(16);
        if (x2.length == 1)
          x2 = "0" + x2;
        h2 += x2;
      }
      this.hTLV = null;
      this.isModified = true;
      this.hV = "0" + unusedBits + h2;
    };
    this.setByBooleanArray = function(booleanArray) {
      var s2 = "";
      for (var i2 = 0; i2 < booleanArray.length; i2++) {
        if (booleanArray[i2] == true) {
          s2 += "1";
        } else {
          s2 += "0";
        }
      }
      this.setByBinaryString(s2);
    };
    this.newFalseArray = function(nLength) {
      var a2 = new Array(nLength);
      for (var i2 = 0; i2 < nLength; i2++) {
        a2[i2] = false;
      }
      return a2;
    };
    this.getFreshValueHex = function() {
      return this.hV;
    };
    if (typeof params != "undefined") {
      if (typeof params == "string" && params.toLowerCase().match(/^[0-9a-f]+$/)) {
        this.setHexValueIncludingUnusedBits(params);
      } else if (typeof params["hex"] != "undefined") {
        this.setHexValueIncludingUnusedBits(params["hex"]);
      } else if (typeof params["bin"] != "undefined") {
        this.setByBinaryString(params["bin"]);
      } else if (typeof params["array"] != "undefined") {
        this.setByBooleanArray(params["array"]);
      }
    }
  };
  YAHOO.lang.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);
  KJUR.asn1.DEROctetString = function(params) {
    if (params !== void 0 && typeof params.obj !== "undefined") {
      var o2 = KJUR.asn1.ASN1Util.newObject(params.obj);
      params.hex = o2.getEncodedHex();
    }
    KJUR.asn1.DEROctetString.superclass.constructor.call(this, params);
    this.hT = "04";
  };
  YAHOO.lang.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);
  KJUR.asn1.DERNull = function() {
    KJUR.asn1.DERNull.superclass.constructor.call(this);
    this.hT = "05";
    this.hTLV = "0500";
  };
  YAHOO.lang.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);
  KJUR.asn1.DERObjectIdentifier = function(params) {
    var itox = function(i2) {
      var h2 = i2.toString(16);
      if (h2.length == 1)
        h2 = "0" + h2;
      return h2;
    };
    var roidtox = function(roid) {
      var h2 = "";
      var bi = new BigInteger(roid, 10);
      var b2 = bi.toString(2);
      var padLen = 7 - b2.length % 7;
      if (padLen == 7)
        padLen = 0;
      var bPad = "";
      for (var i2 = 0; i2 < padLen; i2++)
        bPad += "0";
      b2 = bPad + b2;
      for (var i2 = 0; i2 < b2.length - 1; i2 += 7) {
        var b8 = b2.substr(i2, 7);
        if (i2 != b2.length - 7)
          b8 = "1" + b8;
        h2 += itox(parseInt(b8, 2));
      }
      return h2;
    };
    KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);
    this.hT = "06";
    this.setValueHex = function(newHexString) {
      this.hTLV = null;
      this.isModified = true;
      this.s = null;
      this.hV = newHexString;
    };
    this.setValueOidString = function(oidString) {
      if (!oidString.match(/^[0-9.]+$/)) {
        throw "malformed oid string: " + oidString;
      }
      var h2 = "";
      var a2 = oidString.split(".");
      var i0 = parseInt(a2[0]) * 40 + parseInt(a2[1]);
      h2 += itox(i0);
      a2.splice(0, 2);
      for (var i2 = 0; i2 < a2.length; i2++) {
        h2 += roidtox(a2[i2]);
      }
      this.hTLV = null;
      this.isModified = true;
      this.s = null;
      this.hV = h2;
    };
    this.setValueName = function(oidName) {
      var oid = KJUR.asn1.x509.OID.name2oid(oidName);
      if (oid !== "") {
        this.setValueOidString(oid);
      } else {
        throw "DERObjectIdentifier oidName undefined: " + oidName;
      }
    };
    this.getFreshValueHex = function() {
      return this.hV;
    };
    if (params !== void 0) {
      if (typeof params === "string") {
        if (params.match(/^[0-2].[0-9.]+$/)) {
          this.setValueOidString(params);
        } else {
          this.setValueName(params);
        }
      } else if (params.oid !== void 0) {
        this.setValueOidString(params.oid);
      } else if (params.hex !== void 0) {
        this.setValueHex(params.hex);
      } else if (params.name !== void 0) {
        this.setValueName(params.name);
      }
    }
  };
  YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);
  KJUR.asn1.DEREnumerated = function(params) {
    KJUR.asn1.DEREnumerated.superclass.constructor.call(this);
    this.hT = "0a";
    this.setByBigInteger = function(bigIntegerValue) {
      this.hTLV = null;
      this.isModified = true;
      this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(bigIntegerValue);
    };
    this.setByInteger = function(intValue) {
      var bi = new BigInteger(String(intValue), 10);
      this.setByBigInteger(bi);
    };
    this.setValueHex = function(newHexString) {
      this.hV = newHexString;
    };
    this.getFreshValueHex = function() {
      return this.hV;
    };
    if (typeof params != "undefined") {
      if (typeof params["int"] != "undefined") {
        this.setByInteger(params["int"]);
      } else if (typeof params == "number") {
        this.setByInteger(params);
      } else if (typeof params["hex"] != "undefined") {
        this.setValueHex(params["hex"]);
      }
    }
  };
  YAHOO.lang.extend(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);
  KJUR.asn1.DERUTF8String = function(params) {
    KJUR.asn1.DERUTF8String.superclass.constructor.call(this, params);
    this.hT = "0c";
  };
  YAHOO.lang.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);
  KJUR.asn1.DERNumericString = function(params) {
    KJUR.asn1.DERNumericString.superclass.constructor.call(this, params);
    this.hT = "12";
  };
  YAHOO.lang.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);
  KJUR.asn1.DERPrintableString = function(params) {
    KJUR.asn1.DERPrintableString.superclass.constructor.call(this, params);
    this.hT = "13";
  };
  YAHOO.lang.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);
  KJUR.asn1.DERTeletexString = function(params) {
    KJUR.asn1.DERTeletexString.superclass.constructor.call(this, params);
    this.hT = "14";
  };
  YAHOO.lang.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);
  KJUR.asn1.DERIA5String = function(params) {
    KJUR.asn1.DERIA5String.superclass.constructor.call(this, params);
    this.hT = "16";
  };
  YAHOO.lang.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);
  KJUR.asn1.DERUTCTime = function(params) {
    KJUR.asn1.DERUTCTime.superclass.constructor.call(this, params);
    this.hT = "17";
    this.setByDate = function(dateObject) {
      this.hTLV = null;
      this.isModified = true;
      this.date = dateObject;
      this.s = this.formatDate(this.date, "utc");
      this.hV = stohex(this.s);
    };
    this.getFreshValueHex = function() {
      if (typeof this.date == "undefined" && typeof this.s == "undefined") {
        this.date = /* @__PURE__ */ new Date();
        this.s = this.formatDate(this.date, "utc");
        this.hV = stohex(this.s);
      }
      return this.hV;
    };
    if (params !== void 0) {
      if (params.str !== void 0) {
        this.setString(params.str);
      } else if (typeof params == "string" && params.match(/^[0-9]{12}Z$/)) {
        this.setString(params);
      } else if (params.hex !== void 0) {
        this.setStringHex(params.hex);
      } else if (params.date !== void 0) {
        this.setByDate(params.date);
      }
    }
  };
  YAHOO.lang.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);
  KJUR.asn1.DERGeneralizedTime = function(params) {
    KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, params);
    this.hT = "18";
    this.withMillis = false;
    this.setByDate = function(dateObject) {
      this.hTLV = null;
      this.isModified = true;
      this.date = dateObject;
      this.s = this.formatDate(this.date, "gen", this.withMillis);
      this.hV = stohex(this.s);
    };
    this.getFreshValueHex = function() {
      if (this.date === void 0 && this.s === void 0) {
        this.date = /* @__PURE__ */ new Date();
        this.s = this.formatDate(this.date, "gen", this.withMillis);
        this.hV = stohex(this.s);
      }
      return this.hV;
    };
    if (params !== void 0) {
      if (params.str !== void 0) {
        this.setString(params.str);
      } else if (typeof params == "string" && params.match(/^[0-9]{14}Z$/)) {
        this.setString(params);
      } else if (params.hex !== void 0) {
        this.setStringHex(params.hex);
      } else if (params.date !== void 0) {
        this.setByDate(params.date);
      }
      if (params.millis === true) {
        this.withMillis = true;
      }
    }
  };
  YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);
  KJUR.asn1.DERSequence = function(params) {
    KJUR.asn1.DERSequence.superclass.constructor.call(this, params);
    this.hT = "30";
    this.getFreshValueHex = function() {
      var h2 = "";
      for (var i2 = 0; i2 < this.asn1Array.length; i2++) {
        var asn1Obj = this.asn1Array[i2];
        h2 += asn1Obj.getEncodedHex();
      }
      this.hV = h2;
      return this.hV;
    };
  };
  YAHOO.lang.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);
  KJUR.asn1.DERSet = function(params) {
    KJUR.asn1.DERSet.superclass.constructor.call(this, params);
    this.hT = "31";
    this.sortFlag = true;
    this.getFreshValueHex = function() {
      var a2 = new Array();
      for (var i2 = 0; i2 < this.asn1Array.length; i2++) {
        var asn1Obj = this.asn1Array[i2];
        a2.push(asn1Obj.getEncodedHex());
      }
      if (this.sortFlag == true)
        a2.sort();
      this.hV = a2.join("");
      return this.hV;
    };
    if (typeof params != "undefined") {
      if (typeof params.sortflag != "undefined" && params.sortflag == false)
        this.sortFlag = false;
    }
  };
  YAHOO.lang.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);
  KJUR.asn1.DERTaggedObject = function(params) {
    KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);
    this.hT = "a0";
    this.hV = "";
    this.isExplicit = true;
    this.asn1Object = null;
    this.setASN1Object = function(isExplicitFlag, tagNoHex, asn1Object) {
      this.hT = tagNoHex;
      this.isExplicit = isExplicitFlag;
      this.asn1Object = asn1Object;
      if (this.isExplicit) {
        this.hV = this.asn1Object.getEncodedHex();
        this.hTLV = null;
        this.isModified = true;
      } else {
        this.hV = null;
        this.hTLV = asn1Object.getEncodedHex();
        this.hTLV = this.hTLV.replace(/^../, tagNoHex);
        this.isModified = false;
      }
    };
    this.getFreshValueHex = function() {
      return this.hV;
    };
    if (typeof params != "undefined") {
      if (typeof params["tag"] != "undefined") {
        this.hT = params["tag"];
      }
      if (typeof params["explicit"] != "undefined") {
        this.isExplicit = params["explicit"];
      }
      if (typeof params["obj"] != "undefined") {
        this.asn1Object = params["obj"];
        this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);
      }
    }
  };
  YAHOO.lang.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);
  var __extends = /* @__PURE__ */ function() {
    var extendStatics = function(d2, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d3[p2] = b3[p2];
      };
      return extendStatics(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 !== "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  var JSEncryptRSAKey = (
    /** @class */
    function(_super) {
      __extends(JSEncryptRSAKey2, _super);
      function JSEncryptRSAKey2(key) {
        var _this = _super.call(this) || this;
        if (key) {
          if (typeof key === "string") {
            _this.parseKey(key);
          } else if (JSEncryptRSAKey2.hasPrivateKeyProperty(key) || JSEncryptRSAKey2.hasPublicKeyProperty(key)) {
            _this.parsePropertiesFrom(key);
          }
        }
        return _this;
      }
      JSEncryptRSAKey2.prototype.parseKey = function(pem) {
        try {
          var modulus = 0;
          var public_exponent = 0;
          var reHex = /^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/;
          var der = reHex.test(pem) ? Hex.decode(pem) : Base64.unarmor(pem);
          var asn1 = ASN1.decode(der);
          if (asn1.sub.length === 3) {
            asn1 = asn1.sub[2].sub[0];
          }
          if (asn1.sub.length === 9) {
            modulus = asn1.sub[1].getHexStringValue();
            this.n = parseBigInt(modulus, 16);
            public_exponent = asn1.sub[2].getHexStringValue();
            this.e = parseInt(public_exponent, 16);
            var private_exponent = asn1.sub[3].getHexStringValue();
            this.d = parseBigInt(private_exponent, 16);
            var prime1 = asn1.sub[4].getHexStringValue();
            this.p = parseBigInt(prime1, 16);
            var prime2 = asn1.sub[5].getHexStringValue();
            this.q = parseBigInt(prime2, 16);
            var exponent1 = asn1.sub[6].getHexStringValue();
            this.dmp1 = parseBigInt(exponent1, 16);
            var exponent2 = asn1.sub[7].getHexStringValue();
            this.dmq1 = parseBigInt(exponent2, 16);
            var coefficient = asn1.sub[8].getHexStringValue();
            this.coeff = parseBigInt(coefficient, 16);
          } else if (asn1.sub.length === 2) {
            if (asn1.sub[0].sub) {
              var bit_string = asn1.sub[1];
              var sequence = bit_string.sub[0];
              modulus = sequence.sub[0].getHexStringValue();
              this.n = parseBigInt(modulus, 16);
              public_exponent = sequence.sub[1].getHexStringValue();
              this.e = parseInt(public_exponent, 16);
            } else {
              modulus = asn1.sub[0].getHexStringValue();
              this.n = parseBigInt(modulus, 16);
              public_exponent = asn1.sub[1].getHexStringValue();
              this.e = parseInt(public_exponent, 16);
            }
          } else {
            return false;
          }
          return true;
        } catch (ex) {
          return false;
        }
      };
      JSEncryptRSAKey2.prototype.getPrivateBaseKey = function() {
        var options = {
          array: [
            new KJUR.asn1.DERInteger({ int: 0 }),
            new KJUR.asn1.DERInteger({ bigint: this.n }),
            new KJUR.asn1.DERInteger({ int: this.e }),
            new KJUR.asn1.DERInteger({ bigint: this.d }),
            new KJUR.asn1.DERInteger({ bigint: this.p }),
            new KJUR.asn1.DERInteger({ bigint: this.q }),
            new KJUR.asn1.DERInteger({ bigint: this.dmp1 }),
            new KJUR.asn1.DERInteger({ bigint: this.dmq1 }),
            new KJUR.asn1.DERInteger({ bigint: this.coeff })
          ]
        };
        var seq = new KJUR.asn1.DERSequence(options);
        return seq.getEncodedHex();
      };
      JSEncryptRSAKey2.prototype.getPrivateBaseKeyB64 = function() {
        return hex2b64(this.getPrivateBaseKey());
      };
      JSEncryptRSAKey2.prototype.getPublicBaseKey = function() {
        var first_sequence = new KJUR.asn1.DERSequence({
          array: [
            new KJUR.asn1.DERObjectIdentifier({ oid: "1.2.840.113549.1.1.1" }),
            new KJUR.asn1.DERNull()
          ]
        });
        var second_sequence = new KJUR.asn1.DERSequence({
          array: [
            new KJUR.asn1.DERInteger({ bigint: this.n }),
            new KJUR.asn1.DERInteger({ int: this.e })
          ]
        });
        var bit_string = new KJUR.asn1.DERBitString({
          hex: "00" + second_sequence.getEncodedHex()
        });
        var seq = new KJUR.asn1.DERSequence({
          array: [first_sequence, bit_string]
        });
        return seq.getEncodedHex();
      };
      JSEncryptRSAKey2.prototype.getPublicBaseKeyB64 = function() {
        return hex2b64(this.getPublicBaseKey());
      };
      JSEncryptRSAKey2.wordwrap = function(str, width) {
        width = width || 64;
        if (!str) {
          return str;
        }
        var regex = "(.{1," + width + "})( +|$\n?)|(.{1," + width + "})";
        return str.match(RegExp(regex, "g")).join("\n");
      };
      JSEncryptRSAKey2.prototype.getPrivateKey = function() {
        var key = "-----BEGIN RSA PRIVATE KEY-----\n";
        key += JSEncryptRSAKey2.wordwrap(this.getPrivateBaseKeyB64()) + "\n";
        key += "-----END RSA PRIVATE KEY-----";
        return key;
      };
      JSEncryptRSAKey2.prototype.getPublicKey = function() {
        var key = "-----BEGIN PUBLIC KEY-----\n";
        key += JSEncryptRSAKey2.wordwrap(this.getPublicBaseKeyB64()) + "\n";
        key += "-----END PUBLIC KEY-----";
        return key;
      };
      JSEncryptRSAKey2.hasPublicKeyProperty = function(obj) {
        obj = obj || {};
        return obj.hasOwnProperty("n") && obj.hasOwnProperty("e");
      };
      JSEncryptRSAKey2.hasPrivateKeyProperty = function(obj) {
        obj = obj || {};
        return obj.hasOwnProperty("n") && obj.hasOwnProperty("e") && obj.hasOwnProperty("d") && obj.hasOwnProperty("p") && obj.hasOwnProperty("q") && obj.hasOwnProperty("dmp1") && obj.hasOwnProperty("dmq1") && obj.hasOwnProperty("coeff");
      };
      JSEncryptRSAKey2.prototype.parsePropertiesFrom = function(obj) {
        this.n = obj.n;
        this.e = obj.e;
        if (obj.hasOwnProperty("d")) {
          this.d = obj.d;
          this.p = obj.p;
          this.q = obj.q;
          this.dmp1 = obj.dmp1;
          this.dmq1 = obj.dmq1;
          this.coeff = obj.coeff;
        }
      };
      return JSEncryptRSAKey2;
    }(RSAKey)
  );
  var define_process_env_default$1 = {};
  var _a$1;
  var version$1 = typeof process !== "undefined" ? (_a$1 = define_process_env_default$1) === null || _a$1 === void 0 ? void 0 : _a$1.npm_package_version : void 0;
  var JSEncrypt = (
    /** @class */
    function() {
      function JSEncrypt2(options) {
        if (options === void 0) {
          options = {};
        }
        options = options || {};
        this.default_key_size = options.default_key_size ? parseInt(options.default_key_size, 10) : 1024;
        this.default_public_exponent = options.default_public_exponent || "010001";
        this.log = options.log || false;
        this.key = null;
      }
      JSEncrypt2.prototype.setKey = function(key) {
        if (this.log && this.key) {
          formatAppLog("warn", "at node_modules/jsencrypt/lib/JSEncrypt.js:37", "A key was already set, overriding existing.");
        }
        this.key = new JSEncryptRSAKey(key);
      };
      JSEncrypt2.prototype.setPrivateKey = function(privkey) {
        this.setKey(privkey);
      };
      JSEncrypt2.prototype.setPublicKey = function(pubkey) {
        this.setKey(pubkey);
      };
      JSEncrypt2.prototype.decrypt = function(str) {
        try {
          return this.getKey().decrypt(b64tohex(str));
        } catch (ex) {
          return false;
        }
      };
      JSEncrypt2.prototype.encrypt = function(str) {
        try {
          return hex2b64(this.getKey().encrypt(str));
        } catch (ex) {
          return false;
        }
      };
      JSEncrypt2.prototype.sign = function(str, digestMethod, digestName) {
        try {
          return hex2b64(this.getKey().sign(str, digestMethod, digestName));
        } catch (ex) {
          return false;
        }
      };
      JSEncrypt2.prototype.verify = function(str, signature, digestMethod) {
        try {
          return this.getKey().verify(str, b64tohex(signature), digestMethod);
        } catch (ex) {
          return false;
        }
      };
      JSEncrypt2.prototype.getKey = function(cb) {
        if (!this.key) {
          this.key = new JSEncryptRSAKey();
          if (cb && {}.toString.call(cb) === "[object Function]") {
            this.key.generateAsync(this.default_key_size, this.default_public_exponent, cb);
            return;
          }
          this.key.generate(this.default_key_size, this.default_public_exponent);
        }
        return this.key;
      };
      JSEncrypt2.prototype.getPrivateKey = function() {
        return this.getKey().getPrivateKey();
      };
      JSEncrypt2.prototype.getPrivateKeyB64 = function() {
        return this.getKey().getPrivateBaseKeyB64();
      };
      JSEncrypt2.prototype.getPublicKey = function() {
        return this.getKey().getPublicKey();
      };
      JSEncrypt2.prototype.getPublicKeyB64 = function() {
        return this.getKey().getPublicBaseKeyB64();
      };
      JSEncrypt2.version = version$1;
      return JSEncrypt2;
    }()
  );
  const PROJECT_2_KEY_LIST = [
    "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCbRIs0unclDk/t/q9apZR",
    "pamtdnxJn8npFcIu44Sc6pI+Upcu6zI8xx3hgqj33d17JzE1zYb1X+hvR/1",
    "IboxdcBiVUE758tlhN/gvIS7v6mYhoHk0+8cJb8oauVkHlhi/qt4hhYEkHy4Fb48diVdLuElFabGuigFC3loiZcHGd4wIDAQAB",
    "unclDk/t/q9apZRpamtdnxJn8npFcIu44Sc6pI+Upcu6zI8xx3"
  ];
  function getKeyType() {
    {
      return renderKey2(PROJECT_2_KEY_LIST);
    }
  }
  function renderKey2(list) {
    let key = "";
    list.forEach((item, index) => {
      if (index === 0) {
        key = "";
      }
      if (index % 3 === 0) {
        item.split("").map((item2) => {
        });
      } else {
        item.split("").map((item2) => {
        });
      }
      if (index < 3) {
        key += item;
      }
    });
    return key;
  }
  function paramsEncryption(data) {
    getKeyType();
    const sortData2 = order(data);
    let objectStr = "";
    let dataStr = "";
    for (let key in sortData2) {
      if (typeof sortData2[key] === "object" && !isArray$6(sortData2[key])) {
        const objectData = order(sortData2[key]);
        objectStr = "body=" + JSON.stringify(objectData) + "&";
      } else if (typeof sortData2[key] === "object" && isArray$6(sortData2[key])) {
        dataStr += key + "=" + JSON.stringify(sortData2[key]) + "&";
      } else {
        if (sortData2[key]) {
          dataStr += key + "=" + sortData2[key] + "&";
        }
      }
    }
    if (objectStr) {
      dataStr += objectStr;
    }
    let tmp = Date.parse(/* @__PURE__ */ new Date()).toString();
    tmp = tmp.substr(0, 10);
    var paramsStr = "timestamp=" + tmp;
    if (dataStr) {
      paramsStr += "&" + dataStr.substr(0, dataStr.length - 1);
    }
    var md5Text = md5(paramsStr);
    let encryptor = new JSEncrypt();
    encryptor.setPublicKey(getKeyType());
    let rsaPassWord = encryptor.encrypt(md5Text);
    return {
      timestamp: tmp,
      signature: rsaPassWord
    };
  }
  function order(obj) {
    const data = {};
    for (let key in obj) {
      if (isArray$6(obj[key]) && !obj[key].length) {
        continue;
      }
      if ((obj[key] || obj[key] == 0) && obj[key] !== "") {
        data[key] = obj[key];
      }
    }
    var newKey = Object.keys(data).sort();
    var newObj = {};
    for (var i2 = 0; i2 < newKey.length; i2++) {
      newObj[newKey[i2]] = data[newKey[i2]];
    }
    return newObj;
  }
  const http$1 = request.http;
  function getPubArticleList(data) {
    return http$1.get("common/getReleaseListV2", {
      params: data
    });
  }
  function getCircleArticleInfo(data) {
    const {
      timestamp,
      signature
    } = paramsEncryption(data);
    data.timestamp = timestamp;
    data.signature = signature;
    return http$1.get("motorCircle/getCircleArticleV2", {
      params: data
    });
  }
  function pushCircleArticle(data) {
    return http$1.post("motorCircle/pubArticleV3", data);
  }
  function uploadImg(data) {
    return http$1.upload("common/imageUpload", {
      name: "file",
      filePath: data
    });
  }
  function getCircleList(data) {
    return http$1.get("/motorCircle/getCircleListV2", {
      params: data
    });
  }
  function globalSearch(data) {
    let {
      timestamp,
      signature
    } = paramsEncryption({
      data
    });
    signature = signature.replace(/\+/g, "%2B");
    return http$1.post(`search/globalSearchV3?timestamp=${timestamp}&signature=${signature}`, data);
  }
  function getNearbyPoiList(data) {
    return http$1.get("location/getNearbyPoiListV2", {
      params: data
    });
  }
  function getTopicList(data) {
    return http$1.get("/motorCircle/getTopicTagList", {
      params: data
    });
  }
  function getTagListAct(data) {
    return http$1.get("/motorCircle/getTagListAct", {
      params: data
    });
  }
  function createTopic(data) {
    return http$1.post("/motorCircle/createTopicTag", data);
  }
  const motoCms = {
    getPubArticleList,
    getCircleArticleInfo,
    pushCircleArticle,
    uploadImg,
    getCircleList,
    globalSearch,
    getNearbyPoiList,
    getTopicList,
    getTagListAct,
    createTopic
  };
  const http = request.http;
  function getLoginQrCode(deviceId) {
    let {
      timestamp,
      signature
    } = paramsEncryption({
      deviceId
    });
    signature = signature.replace(/\+/g, "%2B");
    return http.post(`/user/createLoginQrCode?timestamp=${timestamp}&signature=${signature}`, deviceId);
  }
  function checkQrLogin(data) {
    let {
      timestamp,
      signature
    } = paramsEncryption(data);
    data.timestamp = timestamp;
    data.signature = signature;
    return http.get("/user/checkQrLogin", {
      params: data
    });
  }
  const user = {
    getLoginQrCode,
    checkQrLogin
  };
  const openApi = {
    motoCms,
    user
  };
  const FOCUSABLE_ELEMENT_SELECTORS = `a[href],button:not([disabled]),button:not([hidden]),:not([tabindex="-1"]),input:not([disabled]),input:not([type="hidden"]),select:not([disabled]),textarea:not([disabled])`;
  const isVisible = (element) => {
    const computed = getComputedStyle(element);
    return computed.position === "fixed" ? false : element.offsetParent !== null;
  };
  const obtainAllFocusableElements$1 = (element) => {
    return Array.from(element.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)).filter((item) => isFocusable(item) && isVisible(item));
  };
  const isFocusable = (element) => {
    if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
      return true;
    }
    if (element.disabled) {
      return false;
    }
    switch (element.nodeName) {
      case "A": {
        return !!element.href && element.rel !== "ignore";
      }
      case "INPUT": {
        return !(element.type === "hidden" || element.type === "file");
      }
      case "BUTTON":
      case "SELECT":
      case "TEXTAREA": {
        return true;
      }
      default: {
        return false;
      }
    }
  };
  const triggerEvent = function(elm, name, ...opts) {
    let eventName;
    if (name.includes("mouse") || name.includes("click")) {
      eventName = "MouseEvents";
    } else if (name.includes("key")) {
      eventName = "KeyboardEvent";
    } else {
      eventName = "HTMLEvents";
    }
    const evt = document.createEvent(eventName);
    evt.initEvent(name, ...opts);
    elm.dispatchEvent(evt);
    return elm;
  };
  const isLeaf = (el) => !el.getAttribute("aria-owns");
  const getSibling = (el, distance, elClass) => {
    const { parentNode } = el;
    if (!parentNode)
      return null;
    const siblings = parentNode.querySelectorAll(elClass);
    const index = Array.prototype.indexOf.call(siblings, el);
    return siblings[index + distance] || null;
  };
  const focusNode = (el) => {
    if (!el)
      return;
    el.focus();
    !isLeaf(el) && el.click();
  };
  const composeEventHandlers = (theirsHandler, oursHandler, { checkForDefaultPrevented = true } = {}) => {
    const handleEvent = (event) => {
      const shouldPrevent = theirsHandler == null ? void 0 : theirsHandler(event);
      if (checkForDefaultPrevented === false || !shouldPrevent) {
        return oursHandler == null ? void 0 : oursHandler(event);
      }
    };
    return handleEvent;
  };
  const whenMouse = (handler) => {
    return (e) => e.pointerType === "mouse" ? handler(e) : void 0;
  };
  var __defProp$9 = Object.defineProperty;
  var __defProps$6 = Object.defineProperties;
  var __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols$b = Object.getOwnPropertySymbols;
  var __hasOwnProp$b = Object.prototype.hasOwnProperty;
  var __propIsEnum$b = Object.prototype.propertyIsEnumerable;
  var __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues$9 = (a2, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp$b.call(b2, prop))
        __defNormalProp$9(a2, prop, b2[prop]);
    if (__getOwnPropSymbols$b)
      for (var prop of __getOwnPropSymbols$b(b2)) {
        if (__propIsEnum$b.call(b2, prop))
          __defNormalProp$9(a2, prop, b2[prop]);
      }
    return a2;
  };
  var __spreadProps$6 = (a2, b2) => __defProps$6(a2, __getOwnPropDescs$6(b2));
  function computedEager(fn2, options) {
    var _a2;
    const result = vue.shallowRef();
    vue.watchEffect(() => {
      result.value = fn2();
    }, __spreadProps$6(__spreadValues$9({}, options), {
      flush: (_a2 = options == null ? void 0 : options.flush) != null ? _a2 : "sync"
    }));
    return vue.readonly(result);
  }
  var _a;
  const isClient = typeof window !== "undefined";
  const isDef = (val) => typeof val !== "undefined";
  const isFunction$1 = (val) => typeof val === "function";
  const isString$2 = (val) => typeof val === "string";
  const noop$1 = () => {
  };
  const isIOS = isClient && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
  function resolveUnref(r2) {
    return typeof r2 === "function" ? r2() : vue.unref(r2);
  }
  function createFilterWrapper(filter, fn2) {
    function wrapper(...args) {
      return new Promise((resolve, reject) => {
        Promise.resolve(filter(() => fn2.apply(this, args), { fn: fn2, thisArg: this, args })).then(resolve).catch(reject);
      });
    }
    return wrapper;
  }
  function debounceFilter(ms2, options = {}) {
    let timer;
    let maxTimer;
    let lastRejector = noop$1;
    const _clearTimeout = (timer2) => {
      clearTimeout(timer2);
      lastRejector();
      lastRejector = noop$1;
    };
    const filter = (invoke2) => {
      const duration = resolveUnref(ms2);
      const maxDuration = resolveUnref(options.maxWait);
      if (timer)
        _clearTimeout(timer);
      if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {
        if (maxTimer) {
          _clearTimeout(maxTimer);
          maxTimer = null;
        }
        return Promise.resolve(invoke2());
      }
      return new Promise((resolve, reject) => {
        lastRejector = options.rejectOnCancel ? reject : resolve;
        if (maxDuration && !maxTimer) {
          maxTimer = setTimeout(() => {
            if (timer)
              _clearTimeout(timer);
            maxTimer = null;
            resolve(invoke2());
          }, maxDuration);
        }
        timer = setTimeout(() => {
          if (maxTimer)
            _clearTimeout(maxTimer);
          maxTimer = null;
          resolve(invoke2());
        }, duration);
      });
    };
    return filter;
  }
  function throttleFilter(ms2, trailing = true, leading = true, rejectOnCancel = false) {
    let lastExec = 0;
    let timer;
    let isLeading = true;
    let lastRejector = noop$1;
    let lastValue;
    const clear = () => {
      if (timer) {
        clearTimeout(timer);
        timer = void 0;
        lastRejector();
        lastRejector = noop$1;
      }
    };
    const filter = (_invoke) => {
      const duration = resolveUnref(ms2);
      const elapsed = Date.now() - lastExec;
      const invoke2 = () => {
        return lastValue = _invoke();
      };
      clear();
      if (duration <= 0) {
        lastExec = Date.now();
        return invoke2();
      }
      if (elapsed > duration && (leading || !isLeading)) {
        lastExec = Date.now();
        invoke2();
      } else if (trailing) {
        lastValue = new Promise((resolve, reject) => {
          lastRejector = rejectOnCancel ? reject : resolve;
          timer = setTimeout(() => {
            lastExec = Date.now();
            isLeading = true;
            resolve(invoke2());
            clear();
          }, Math.max(0, duration - elapsed));
        });
      }
      if (!leading && !timer)
        timer = setTimeout(() => isLeading = true, duration);
      isLeading = false;
      return lastValue;
    };
    return filter;
  }
  function identity$1(arg) {
    return arg;
  }
  function computedWithControl(source, fn2) {
    let v2 = void 0;
    let track;
    let trigger;
    const dirty = vue.ref(true);
    const update = () => {
      dirty.value = true;
      trigger();
    };
    vue.watch(source, update, { flush: "sync" });
    const get2 = isFunction$1(fn2) ? fn2 : fn2.get;
    const set2 = isFunction$1(fn2) ? void 0 : fn2.set;
    const result = vue.customRef((_track, _trigger) => {
      track = _track;
      trigger = _trigger;
      return {
        get() {
          if (dirty.value) {
            v2 = get2();
            dirty.value = false;
          }
          track();
          return v2;
        },
        set(v22) {
          set2 == null ? void 0 : set2(v22);
        }
      };
    });
    if (Object.isExtensible(result))
      result.trigger = update;
    return result;
  }
  function tryOnScopeDispose(fn2) {
    if (vue.getCurrentScope()) {
      vue.onScopeDispose(fn2);
      return true;
    }
    return false;
  }
  function useDebounceFn(fn2, ms2 = 200, options = {}) {
    return createFilterWrapper(debounceFilter(ms2, options), fn2);
  }
  function refDebounced(value, ms2 = 200, options = {}) {
    const debounced = vue.ref(value.value);
    const updater = useDebounceFn(() => {
      debounced.value = value.value;
    }, ms2, options);
    vue.watch(value, () => updater());
    return debounced;
  }
  function useThrottleFn(fn2, ms2 = 200, trailing = false, leading = true, rejectOnCancel = false) {
    return createFilterWrapper(throttleFilter(ms2, trailing, leading, rejectOnCancel), fn2);
  }
  function tryOnMounted(fn2, sync = true) {
    if (vue.getCurrentInstance())
      vue.onMounted(fn2);
    else if (sync)
      fn2();
    else
      vue.nextTick(fn2);
  }
  function useTimeoutFn(cb, interval, options = {}) {
    const {
      immediate = true
    } = options;
    const isPending = vue.ref(false);
    let timer = null;
    function clear() {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
    }
    function stop() {
      isPending.value = false;
      clear();
    }
    function start(...args) {
      clear();
      isPending.value = true;
      timer = setTimeout(() => {
        isPending.value = false;
        timer = null;
        cb(...args);
      }, resolveUnref(interval));
    }
    if (immediate) {
      isPending.value = true;
      if (isClient)
        start();
    }
    tryOnScopeDispose(stop);
    return {
      isPending: vue.readonly(isPending),
      start,
      stop
    };
  }
  function unrefElement(elRef) {
    var _a2;
    const plain = resolveUnref(elRef);
    return (_a2 = plain == null ? void 0 : plain.$el) != null ? _a2 : plain;
  }
  const defaultWindow = isClient ? window : void 0;
  const defaultDocument = isClient ? window.document : void 0;
  function useEventListener(...args) {
    let target;
    let events2;
    let listeners;
    let options;
    if (isString$2(args[0]) || Array.isArray(args[0])) {
      [events2, listeners, options] = args;
      target = defaultWindow;
    } else {
      [target, events2, listeners, options] = args;
    }
    if (!target)
      return noop$1;
    if (!Array.isArray(events2))
      events2 = [events2];
    if (!Array.isArray(listeners))
      listeners = [listeners];
    const cleanups = [];
    const cleanup = () => {
      cleanups.forEach((fn2) => fn2());
      cleanups.length = 0;
    };
    const register = (el, event, listener, options2) => {
      el.addEventListener(event, listener, options2);
      return () => el.removeEventListener(event, listener, options2);
    };
    const stopWatch = vue.watch(() => [unrefElement(target), resolveUnref(options)], ([el, options2]) => {
      cleanup();
      if (!el)
        return;
      cleanups.push(...events2.flatMap((event) => {
        return listeners.map((listener) => register(el, event, listener, options2));
      }));
    }, { immediate: true, flush: "post" });
    const stop = () => {
      stopWatch();
      cleanup();
    };
    tryOnScopeDispose(stop);
    return stop;
  }
  let _iOSWorkaround = false;
  function onClickOutside(target, handler, options = {}) {
    const { window: window2 = defaultWindow, ignore = [], capture = true, detectIframe = false } = options;
    if (!window2)
      return;
    if (isIOS && !_iOSWorkaround) {
      _iOSWorkaround = true;
      Array.from(window2.document.body.children).forEach((el) => el.addEventListener("click", noop$1));
    }
    let shouldListen = true;
    const shouldIgnore = (event) => {
      return ignore.some((target2) => {
        if (typeof target2 === "string") {
          return Array.from(window2.document.querySelectorAll(target2)).some((el) => el === event.target || event.composedPath().includes(el));
        } else {
          const el = unrefElement(target2);
          return el && (event.target === el || event.composedPath().includes(el));
        }
      });
    };
    const listener = (event) => {
      const el = unrefElement(target);
      if (!el || el === event.target || event.composedPath().includes(el))
        return;
      if (event.detail === 0)
        shouldListen = !shouldIgnore(event);
      if (!shouldListen) {
        shouldListen = true;
        return;
      }
      handler(event);
    };
    const cleanup = [
      useEventListener(window2, "click", listener, { passive: true, capture }),
      useEventListener(window2, "pointerdown", (e) => {
        const el = unrefElement(target);
        if (el)
          shouldListen = !e.composedPath().includes(el) && !shouldIgnore(e);
      }, { passive: true }),
      detectIframe && useEventListener(window2, "blur", (event) => {
        var _a2;
        const el = unrefElement(target);
        if (((_a2 = window2.document.activeElement) == null ? void 0 : _a2.tagName) === "IFRAME" && !(el == null ? void 0 : el.contains(window2.document.activeElement)))
          handler(event);
      })
    ].filter(Boolean);
    const stop = () => cleanup.forEach((fn2) => fn2());
    return stop;
  }
  function useActiveElement(options = {}) {
    var _a2;
    const { window: window2 = defaultWindow } = options;
    const document2 = (_a2 = options.document) != null ? _a2 : window2 == null ? void 0 : window2.document;
    const activeElement = computedWithControl(() => null, () => document2 == null ? void 0 : document2.activeElement);
    if (window2) {
      useEventListener(window2, "blur", (event) => {
        if (event.relatedTarget !== null)
          return;
        activeElement.trigger();
      }, true);
      useEventListener(window2, "focus", activeElement.trigger, true);
    }
    return activeElement;
  }
  function useSupported(callback, sync = false) {
    const isSupported = vue.ref();
    const update = () => isSupported.value = Boolean(callback());
    update();
    tryOnMounted(update, sync);
    return isSupported;
  }
  function cloneFnJSON(source) {
    return JSON.parse(JSON.stringify(source));
  }
  const _global = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  const globalKey = "__vueuse_ssr_handlers__";
  _global[globalKey] = _global[globalKey] || {};
  function useCssVar(prop, target, { window: window2 = defaultWindow, initialValue = "" } = {}) {
    const variable = vue.ref(initialValue);
    const elRef = vue.computed(() => {
      var _a2;
      return unrefElement(target) || ((_a2 = window2 == null ? void 0 : window2.document) == null ? void 0 : _a2.documentElement);
    });
    vue.watch([elRef, () => resolveUnref(prop)], ([el, prop2]) => {
      var _a2;
      if (el && window2) {
        const value = (_a2 = window2.getComputedStyle(el).getPropertyValue(prop2)) == null ? void 0 : _a2.trim();
        variable.value = value || initialValue;
      }
    }, { immediate: true });
    vue.watch(variable, (val) => {
      var _a2;
      if ((_a2 = elRef.value) == null ? void 0 : _a2.style)
        elRef.value.style.setProperty(resolveUnref(prop), val);
    });
    return variable;
  }
  function useDocumentVisibility({ document: document2 = defaultDocument } = {}) {
    if (!document2)
      return vue.ref("visible");
    const visibility = vue.ref(document2.visibilityState);
    useEventListener(document2, "visibilitychange", () => {
      visibility.value = document2.visibilityState;
    });
    return visibility;
  }
  var __getOwnPropSymbols$g = Object.getOwnPropertySymbols;
  var __hasOwnProp$g = Object.prototype.hasOwnProperty;
  var __propIsEnum$g = Object.prototype.propertyIsEnumerable;
  var __objRest$2 = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp$g.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols$g)
      for (var prop of __getOwnPropSymbols$g(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum$g.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  function useResizeObserver(target, callback, options = {}) {
    const _a2 = options, { window: window2 = defaultWindow } = _a2, observerOptions = __objRest$2(_a2, ["window"]);
    let observer;
    const isSupported = useSupported(() => window2 && "ResizeObserver" in window2);
    const cleanup = () => {
      if (observer) {
        observer.disconnect();
        observer = void 0;
      }
    };
    const stopWatch = vue.watch(() => unrefElement(target), (el) => {
      cleanup();
      if (isSupported.value && window2 && el) {
        observer = new ResizeObserver(callback);
        observer.observe(el, observerOptions);
      }
    }, { immediate: true, flush: "post" });
    const stop = () => {
      cleanup();
      stopWatch();
    };
    tryOnScopeDispose(stop);
    return {
      isSupported,
      stop
    };
  }
  function useElementBounding(target, options = {}) {
    const {
      reset = true,
      windowResize = true,
      windowScroll = true,
      immediate = true
    } = options;
    const height = vue.ref(0);
    const bottom = vue.ref(0);
    const left2 = vue.ref(0);
    const right2 = vue.ref(0);
    const top = vue.ref(0);
    const width = vue.ref(0);
    const x2 = vue.ref(0);
    const y2 = vue.ref(0);
    function update() {
      const el = unrefElement(target);
      if (!el) {
        if (reset) {
          height.value = 0;
          bottom.value = 0;
          left2.value = 0;
          right2.value = 0;
          top.value = 0;
          width.value = 0;
          x2.value = 0;
          y2.value = 0;
        }
        return;
      }
      const rect = el.getBoundingClientRect();
      height.value = rect.height;
      bottom.value = rect.bottom;
      left2.value = rect.left;
      right2.value = rect.right;
      top.value = rect.top;
      width.value = rect.width;
      x2.value = rect.x;
      y2.value = rect.y;
    }
    useResizeObserver(target, update);
    vue.watch(() => unrefElement(target), (ele) => !ele && update());
    if (windowScroll)
      useEventListener("scroll", update, { capture: true, passive: true });
    if (windowResize)
      useEventListener("resize", update, { passive: true });
    tryOnMounted(() => {
      if (immediate)
        update();
    });
    return {
      height,
      bottom,
      left: left2,
      right: right2,
      top,
      width,
      x: x2,
      y: y2,
      update
    };
  }
  var __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;
  var __hasOwnProp$8 = Object.prototype.hasOwnProperty;
  var __propIsEnum$8 = Object.prototype.propertyIsEnumerable;
  var __objRest$1 = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp$8.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols$8)
      for (var prop of __getOwnPropSymbols$8(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum$8.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  function useMutationObserver(target, callback, options = {}) {
    const _a2 = options, { window: window2 = defaultWindow } = _a2, mutationOptions = __objRest$1(_a2, ["window"]);
    let observer;
    const isSupported = useSupported(() => window2 && "MutationObserver" in window2);
    const cleanup = () => {
      if (observer) {
        observer.disconnect();
        observer = void 0;
      }
    };
    const stopWatch = vue.watch(() => unrefElement(target), (el) => {
      cleanup();
      if (isSupported.value && window2 && el) {
        observer = new MutationObserver(callback);
        observer.observe(el, mutationOptions);
      }
    }, { immediate: true });
    const stop = () => {
      cleanup();
      stopWatch();
    };
    tryOnScopeDispose(stop);
    return {
      isSupported,
      stop
    };
  }
  var SwipeDirection;
  (function(SwipeDirection2) {
    SwipeDirection2["UP"] = "UP";
    SwipeDirection2["RIGHT"] = "RIGHT";
    SwipeDirection2["DOWN"] = "DOWN";
    SwipeDirection2["LEFT"] = "LEFT";
    SwipeDirection2["NONE"] = "NONE";
  })(SwipeDirection || (SwipeDirection = {}));
  var __defProp2 = Object.defineProperty;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a2, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp.call(b2, prop))
        __defNormalProp2(a2, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop))
          __defNormalProp2(a2, prop, b2[prop]);
      }
    return a2;
  };
  const _TransitionPresets = {
    easeInSine: [0.12, 0, 0.39, 0],
    easeOutSine: [0.61, 1, 0.88, 1],
    easeInOutSine: [0.37, 0, 0.63, 1],
    easeInQuad: [0.11, 0, 0.5, 0],
    easeOutQuad: [0.5, 1, 0.89, 1],
    easeInOutQuad: [0.45, 0, 0.55, 1],
    easeInCubic: [0.32, 0, 0.67, 0],
    easeOutCubic: [0.33, 1, 0.68, 1],
    easeInOutCubic: [0.65, 0, 0.35, 1],
    easeInQuart: [0.5, 0, 0.75, 0],
    easeOutQuart: [0.25, 1, 0.5, 1],
    easeInOutQuart: [0.76, 0, 0.24, 1],
    easeInQuint: [0.64, 0, 0.78, 0],
    easeOutQuint: [0.22, 1, 0.36, 1],
    easeInOutQuint: [0.83, 0, 0.17, 1],
    easeInExpo: [0.7, 0, 0.84, 0],
    easeOutExpo: [0.16, 1, 0.3, 1],
    easeInOutExpo: [0.87, 0, 0.13, 1],
    easeInCirc: [0.55, 0, 1, 0.45],
    easeOutCirc: [0, 0.55, 0.45, 1],
    easeInOutCirc: [0.85, 0, 0.15, 1],
    easeInBack: [0.36, 0, 0.66, -0.56],
    easeOutBack: [0.34, 1.56, 0.64, 1],
    easeInOutBack: [0.68, -0.6, 0.32, 1.6]
  };
  __spreadValues({
    linear: identity$1
  }, _TransitionPresets);
  function useVModel(props2, key, emit, options = {}) {
    var _a2, _b, _c;
    const {
      clone: clone2 = false,
      passive = false,
      eventName,
      deep = false,
      defaultValue
    } = options;
    const vm = vue.getCurrentInstance();
    const _emit = emit || (vm == null ? void 0 : vm.emit) || ((_a2 = vm == null ? void 0 : vm.$emit) == null ? void 0 : _a2.bind(vm)) || ((_c = (_b = vm == null ? void 0 : vm.proxy) == null ? void 0 : _b.$emit) == null ? void 0 : _c.bind(vm == null ? void 0 : vm.proxy));
    let event = eventName;
    if (!key) {
      {
        key = "modelValue";
      }
    }
    event = eventName || event || `update:${key.toString()}`;
    const cloneFn = (val) => !clone2 ? val : isFunction$1(clone2) ? clone2(val) : cloneFnJSON(val);
    const getValue2 = () => isDef(props2[key]) ? cloneFn(props2[key]) : defaultValue;
    if (passive) {
      const initialValue = getValue2();
      const proxy = vue.ref(initialValue);
      vue.watch(() => props2[key], (v2) => proxy.value = cloneFn(v2));
      vue.watch(proxy, (v2) => {
        if (v2 !== props2[key] || deep)
          _emit(event, v2);
      }, { deep });
      return proxy;
    } else {
      return vue.computed({
        get() {
          return getValue2();
        },
        set(value) {
          _emit(event, value);
        }
      });
    }
  }
  function useWindowFocus({ window: window2 = defaultWindow } = {}) {
    if (!window2)
      return vue.ref(false);
    const focused = vue.ref(window2.document.hasFocus());
    useEventListener(window2, "blur", () => {
      focused.value = false;
    });
    useEventListener(window2, "focus", () => {
      focused.value = true;
    });
    return focused;
  }
  function useWindowSize(options = {}) {
    const {
      window: window2 = defaultWindow,
      initialWidth = Infinity,
      initialHeight = Infinity,
      listenOrientation = true,
      includeScrollbar = true
    } = options;
    const width = vue.ref(initialWidth);
    const height = vue.ref(initialHeight);
    const update = () => {
      if (window2) {
        if (includeScrollbar) {
          width.value = window2.innerWidth;
          height.value = window2.innerHeight;
        } else {
          width.value = window2.document.documentElement.clientWidth;
          height.value = window2.document.documentElement.clientHeight;
        }
      }
    };
    update();
    tryOnMounted(update);
    useEventListener("resize", update, { passive: true });
    if (listenOrientation)
      useEventListener("orientationchange", update, { passive: true });
    return { width, height };
  }
  const isFirefox = () => isClient && /firefox/i.test(window.navigator.userAgent);
  const isInContainer = (el, container) => {
    if (!isClient || !el || !container)
      return false;
    const elRect = el.getBoundingClientRect();
    let containerRect;
    if (container instanceof Element) {
      containerRect = container.getBoundingClientRect();
    } else {
      containerRect = {
        top: 0,
        right: window.innerWidth,
        bottom: window.innerHeight,
        left: 0
      };
    }
    return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
  };
  const getOffsetTop = (el) => {
    let offset2 = 0;
    let parent2 = el;
    while (parent2) {
      offset2 += parent2.offsetTop;
      parent2 = parent2.offsetParent;
    }
    return offset2;
  };
  const getOffsetTopDistance = (el, containerEl) => {
    return Math.abs(getOffsetTop(el) - getOffsetTop(containerEl));
  };
  const getClientXY = (event) => {
    let clientX;
    let clientY;
    if (event.type === "touchend") {
      clientY = event.changedTouches[0].clientY;
      clientX = event.changedTouches[0].clientX;
    } else if (event.type.startsWith("touch")) {
      clientY = event.touches[0].clientY;
      clientX = event.touches[0].clientX;
    } else {
      clientY = event.clientY;
      clientX = event.clientX;
    }
    return {
      clientX,
      clientY
    };
  };
  function easeInOutCubic(t2, b2, c2, d2) {
    const cc = c2 - b2;
    t2 /= d2 / 2;
    if (t2 < 1) {
      return cc / 2 * t2 * t2 * t2 + b2;
    }
    return cc / 2 * ((t2 -= 2) * t2 * t2 + 2) + b2;
  }
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var Symbol$1 = root.Symbol;
  var objectProto$f = Object.prototype;
  var hasOwnProperty$c = objectProto$f.hasOwnProperty;
  var nativeObjectToString$1 = objectProto$f.toString;
  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
  function getRawTag(value) {
    var isOwn = hasOwnProperty$c.call(value, symToStringTag$1), tag = value[symToStringTag$1];
    try {
      value[symToStringTag$1] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString$1.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }
    return result;
  }
  var objectProto$e = Object.prototype;
  var nativeObjectToString = objectProto$e.toString;
  function objectToString$1(value) {
    return nativeObjectToString.call(value);
  }
  var nullTag = "[object Null]", undefinedTag = "[object Undefined]";
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString$1(value);
  }
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  var symbolTag$3 = "[object Symbol]";
  function isSymbol$1(value) {
    return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag$3;
  }
  function arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  var isArray$4 = Array.isArray;
  var INFINITY$4 = 1 / 0;
  var symbolProto$2 = Symbol$1 ? Symbol$1.prototype : void 0, symbolToString = symbolProto$2 ? symbolProto$2.toString : void 0;
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isArray$4(value)) {
      return arrayMap(value, baseToString) + "";
    }
    if (isSymbol$1(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY$4 ? "-0" : result;
  }
  var reWhitespace = /\s/;
  function trimmedEndIndex(string2) {
    var index = string2.length;
    while (index-- && reWhitespace.test(string2.charAt(index))) {
    }
    return index;
  }
  var reTrimStart = /^\s+/;
  function baseTrim(string2) {
    return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
  }
  function isObject$1(value) {
    var type3 = typeof value;
    return value != null && (type3 == "object" || type3 == "function");
  }
  var NAN = 0 / 0;
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  var reIsBinary = /^0b[01]+$/i;
  var reIsOctal = /^0o[0-7]+$/i;
  var freeParseInt = parseInt;
  function toNumber(value) {
    if (typeof value == "number") {
      return value;
    }
    if (isSymbol$1(value)) {
      return NAN;
    }
    if (isObject$1(value)) {
      var other = typeof value.valueOf == "function" ? value.valueOf() : value;
      value = isObject$1(other) ? other + "" : other;
    }
    if (typeof value != "string") {
      return value === 0 ? value : +value;
    }
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }
  var INFINITY$3 = 1 / 0, MAX_INTEGER = 17976931348623157e292;
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY$3 || value === -INFINITY$3) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }
  function toInteger(value) {
    var result = toFinite(value), remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }
  function identity(value) {
    return value;
  }
  var asyncTag = "[object AsyncFunction]", funcTag$2 = "[object Function]", genTag$1 = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
  function isFunction(value) {
    if (!isObject$1(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid2 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid2 ? "Symbol(src)_1." + uid2 : "";
  }();
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  var funcProto$2 = Function.prototype;
  var funcToString$2 = funcProto$2.toString;
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var funcProto$1 = Function.prototype, objectProto$d = Object.prototype;
  var funcToString$1 = funcProto$1.toString;
  var hasOwnProperty$b = objectProto$d.hasOwnProperty;
  var reIsNative = RegExp(
    "^" + funcToString$1.call(hasOwnProperty$b).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  );
  function baseIsNative(value) {
    if (!isObject$1(value) || isMasked(value)) {
      return false;
    }
    var pattern3 = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern3.test(toSource(value));
  }
  function getValue$1(object, key) {
    return object == null ? void 0 : object[key];
  }
  function getNative(object, key) {
    var value = getValue$1(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  var WeakMap$1 = getNative(root, "WeakMap");
  var objectCreate = Object.create;
  var baseCreate = /* @__PURE__ */ function() {
    function object() {
    }
    return function(proto) {
      if (!isObject$1(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = void 0;
      return result;
    };
  }();
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }
  function noop() {
  }
  function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var nativeNow = Date.now;
  function shortOut(func) {
    var count2 = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count2 >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count2 = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  function constant(value) {
    return function() {
      return value;
    };
  }
  var defineProperty = function() {
    try {
      var func = getNative(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e) {
    }
  }();
  var baseSetToString = !defineProperty ? identity : function(func, string2) {
    return defineProperty(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant(string2),
      "writable": true
    });
  };
  const baseSetToString$1 = baseSetToString;
  var setToString = shortOut(baseSetToString$1);
  function arrayEach(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  function baseIsNaN(value) {
    return value !== value;
  }
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1, length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  function baseIndexOf(array, value, fromIndex) {
    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
  }
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }
  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function isIndex(value, length) {
    var type3 = typeof value;
    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length && (type3 == "number" || type3 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function baseAssignValue(object, key, value) {
    if (key == "__proto__" && defineProperty) {
      defineProperty(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object[key] = value;
    }
  }
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  var objectProto$c = Object.prototype;
  var hasOwnProperty$a = objectProto$c.hasOwnProperty;
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$a.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }
  function copyObject(source, props2, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props2.length;
    while (++index < length) {
      var key = props2[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }
  var nativeMax$2 = Math.max;
  function overRest(func, start, transform) {
    start = nativeMax$2(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args = arguments, index = -1, length = nativeMax$2(args.length - start, 0), array = Array(length);
      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + "");
  }
  var MAX_SAFE_INTEGER = 9007199254740991;
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  function isIterateeCall(value, index, object) {
    if (!isObject$1(object)) {
      return false;
    }
    var type3 = typeof index;
    if (type3 == "number" ? isArrayLike(object) && isIndex(index, object.length) : type3 == "string" && index in object) {
      return eq(object[index], value);
    }
    return false;
  }
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? void 0 : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }
  var objectProto$b = Object.prototype;
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$b;
    return value === proto;
  }
  function baseTimes(n2, iteratee) {
    var index = -1, result = Array(n2);
    while (++index < n2) {
      result[index] = iteratee(index);
    }
    return result;
  }
  var argsTag$3 = "[object Arguments]";
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag$3;
  }
  var objectProto$a = Object.prototype;
  var hasOwnProperty$9 = objectProto$a.hasOwnProperty;
  var propertyIsEnumerable$1 = objectProto$a.propertyIsEnumerable;
  var isArguments = baseIsArguments(/* @__PURE__ */ function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty$9.call(value, "callee") && !propertyIsEnumerable$1.call(value, "callee");
  };
  function stubFalse() {
    return false;
  }
  var freeExports$2 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule$2 = freeExports$2 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;
  var Buffer$2 = moduleExports$2 ? root.Buffer : void 0;
  var nativeIsBuffer = Buffer$2 ? Buffer$2.isBuffer : void 0;
  var isBuffer$1 = nativeIsBuffer || stubFalse;
  var argsTag$2 = "[object Arguments]", arrayTag$2 = "[object Array]", boolTag$3 = "[object Boolean]", dateTag$3 = "[object Date]", errorTag$2 = "[object Error]", funcTag$1 = "[object Function]", mapTag$5 = "[object Map]", numberTag$3 = "[object Number]", objectTag$4 = "[object Object]", regexpTag$3 = "[object RegExp]", setTag$5 = "[object Set]", stringTag$3 = "[object String]", weakMapTag$2 = "[object WeakMap]";
  var arrayBufferTag$3 = "[object ArrayBuffer]", dataViewTag$4 = "[object DataView]", float32Tag$2 = "[object Float32Array]", float64Tag$2 = "[object Float64Array]", int8Tag$2 = "[object Int8Array]", int16Tag$2 = "[object Int16Array]", int32Tag$2 = "[object Int32Array]", uint8Tag$2 = "[object Uint8Array]", uint8ClampedTag$2 = "[object Uint8ClampedArray]", uint16Tag$2 = "[object Uint16Array]", uint32Tag$2 = "[object Uint32Array]";
  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$5] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$5] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$2] = false;
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  var freeExports$1 = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule$1 = freeExports$1 && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
  var freeProcess = moduleExports$1 && freeGlobal.process;
  var nodeUtil = function() {
    try {
      var types2 = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
      if (types2) {
        return types2;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  var objectProto$9 = Object.prototype;
  var hasOwnProperty$8 = objectProto$9.hasOwnProperty;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray$4(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer$1(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty$8.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
      (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
      isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  var nativeKeys = overArg(Object.keys, Object);
  var objectProto$8 = Object.prototype;
  var hasOwnProperty$7 = objectProto$8.hasOwnProperty;
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  var objectProto$7 = Object.prototype;
  var hasOwnProperty$6 = objectProto$7.hasOwnProperty;
  function baseKeysIn(object) {
    if (!isObject$1(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object), result = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty$6.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/;
  function isKey(value, object) {
    if (isArray$4(value)) {
      return false;
    }
    var type3 = typeof value;
    if (type3 == "number" || type3 == "symbol" || type3 == "boolean" || value == null || isSymbol$1(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }
  var nativeCreate = getNative(Object, "create");
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  var HASH_UNDEFINED$2 = "__lodash_hash_undefined__";
  var objectProto$6 = Object.prototype;
  var hasOwnProperty$5 = objectProto$6.hasOwnProperty;
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? void 0 : result;
    }
    return hasOwnProperty$5.call(data, key) ? data[key] : void 0;
  }
  var objectProto$5 = Object.prototype;
  var hasOwnProperty$4 = objectProto$5.hasOwnProperty;
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty$4.call(data, key);
  }
  var HASH_UNDEFINED$1 = "__lodash_hash_undefined__";
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED$1 : value;
    return this;
  }
  function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  var arrayProto = Array.prototype;
  var splice = arrayProto.splice;
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  var Map$1 = getNative(root, "Map");
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map$1 || ListCache)(),
      "string": new Hash()
    };
  }
  function isKeyable(value) {
    var type3 = typeof value;
    return type3 == "string" || type3 == "number" || type3 == "symbol" || type3 == "boolean" ? value !== "__proto__" : value === null;
  }
  function getMapData(map2, key) {
    var data = map2.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }
  function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  var FUNC_ERROR_TEXT$2 = "Expected a function";
  function memoize(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }
    var memoized = function() {
      var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
      if (cache2.has(key)) {
        return cache2.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache2.set(key, result) || cache2;
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }
  memoize.Cache = MapCache;
  var MAX_MEMOIZE_SIZE = 500;
  function memoizeCapped(func) {
    var result = memoize(func, function(key) {
      if (cache2.size === MAX_MEMOIZE_SIZE) {
        cache2.clear();
      }
      return key;
    });
    var cache2 = result.cache;
    return result;
  }
  var rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reEscapeChar$1 = /\\(\\)?/g;
  var stringToPath$1 = memoizeCapped(function(string2) {
    var result = [];
    if (string2.charCodeAt(0) === 46) {
      result.push("");
    }
    string2.replace(rePropName$1, function(match, number, quote2, subString) {
      result.push(quote2 ? subString.replace(reEscapeChar$1, "$1") : number || match);
    });
    return result;
  });
  function toString$1(value) {
    return value == null ? "" : baseToString(value);
  }
  function castPath(value, object) {
    if (isArray$4(value)) {
      return value;
    }
    return isKey(value, object) ? [value] : stringToPath$1(toString$1(value));
  }
  var INFINITY$2 = 1 / 0;
  function toKey(value) {
    if (typeof value == "string" || isSymbol$1(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY$2 ? "-0" : result;
  }
  function baseGet(object, path) {
    path = castPath(path, object);
    var index = 0, length = path.length;
    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return index && index == length ? object : void 0;
  }
  function get(object, path, defaultValue) {
    var result = object == null ? void 0 : baseGet(object, path);
    return result === void 0 ? defaultValue : result;
  }
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset2 = array.length;
    while (++index < length) {
      array[offset2 + index] = values[index];
    }
    return array;
  }
  var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : void 0;
  function isFlattenable(value) {
    return isArray$4(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }
  function flatRest(func) {
    return setToString(overRest(func, void 0, flatten), func + "");
  }
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  const getPrototype$1 = getPrototype;
  var objectTag$3 = "[object Object]";
  var funcProto = Function.prototype, objectProto$4 = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);
  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag$3) {
      return false;
    }
    var proto = getPrototype$1(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$3.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  function baseSlice(array, start, end2) {
    var index = -1, length = array.length;
    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }
    end2 = end2 > length ? length : end2;
    if (end2 < 0) {
      end2 += length;
    }
    length = start > end2 ? 0 : end2 - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }
  function castArray$1() {
    if (!arguments.length) {
      return [];
    }
    var value = arguments[0];
    return isArray$4(value) ? value : [value];
  }
  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }
  function stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
  }
  function stackGet(key) {
    return this.__data__.get(key);
  }
  function stackHas(key) {
    return this.__data__.has(key);
  }
  var LARGE_ARRAY_SIZE$1 = 200;
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map$1 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }
  function baseAssignIn(object, source) {
    return object && copyObject(source, keysIn(source), object);
  }
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var Buffer$1 = moduleExports ? root.Buffer : void 0, allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : void 0;
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
  }
  function arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }
  function stubArray() {
    return [];
  }
  var objectProto$3 = Object.prototype;
  var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
  var getSymbols = !nativeGetSymbols$1 ? stubArray : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols$1(object), function(symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
    var result = [];
    while (object) {
      arrayPush(result, getSymbols(object));
      object = getPrototype$1(object);
    }
    return result;
  };
  function copySymbolsIn(source, object) {
    return copyObject(source, getSymbolsIn(source), object);
  }
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray$4(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }
  function getAllKeysIn(object) {
    return baseGetAllKeys(object, keysIn, getSymbolsIn);
  }
  var DataView$1 = getNative(root, "DataView");
  var Promise$1 = getNative(root, "Promise");
  var Set$1 = getNative(root, "Set");
  var mapTag$4 = "[object Map]", objectTag$2 = "[object Object]", promiseTag = "[object Promise]", setTag$4 = "[object Set]", weakMapTag$1 = "[object WeakMap]";
  var dataViewTag$3 = "[object DataView]";
  var dataViewCtorString = toSource(DataView$1), mapCtorString = toSource(Map$1), promiseCtorString = toSource(Promise$1), setCtorString = toSource(Set$1), weakMapCtorString = toSource(WeakMap$1);
  var getTag = baseGetTag;
  if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3 || Map$1 && getTag(new Map$1()) != mapTag$4 || Promise$1 && getTag(Promise$1.resolve()) != promiseTag || Set$1 && getTag(new Set$1()) != setTag$4 || WeakMap$1 && getTag(new WeakMap$1()) != weakMapTag$1) {
    getTag = function(value) {
      var result = baseGetTag(value), Ctor = result == objectTag$2 ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$3;
          case mapCtorString:
            return mapTag$4;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag$4;
          case weakMapCtorString:
            return weakMapTag$1;
        }
      }
      return result;
    };
  }
  const getTag$1 = getTag;
  var objectProto$2 = Object.prototype;
  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;
  function initCloneArray(array) {
    var length = array.length, result = new array.constructor(length);
    if (length && typeof array[0] == "string" && hasOwnProperty$2.call(array, "index")) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  var Uint8Array$1 = root.Uint8Array;
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
    return result;
  }
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  var reFlags = /\w*$/;
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : void 0;
  function cloneSymbol(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  var boolTag$2 = "[object Boolean]", dateTag$2 = "[object Date]", mapTag$3 = "[object Map]", numberTag$2 = "[object Number]", regexpTag$2 = "[object RegExp]", setTag$3 = "[object Set]", stringTag$2 = "[object String]", symbolTag$2 = "[object Symbol]";
  var arrayBufferTag$2 = "[object ArrayBuffer]", dataViewTag$2 = "[object DataView]", float32Tag$1 = "[object Float32Array]", float64Tag$1 = "[object Float64Array]", int8Tag$1 = "[object Int8Array]", int16Tag$1 = "[object Int16Array]", int32Tag$1 = "[object Int32Array]", uint8Tag$1 = "[object Uint8Array]", uint8ClampedTag$1 = "[object Uint8ClampedArray]", uint16Tag$1 = "[object Uint16Array]", uint32Tag$1 = "[object Uint32Array]";
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$2:
        return cloneArrayBuffer(object);
      case boolTag$2:
      case dateTag$2:
        return new Ctor(+object);
      case dataViewTag$2:
        return cloneDataView(object, isDeep);
      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return cloneTypedArray(object, isDeep);
      case mapTag$3:
        return new Ctor();
      case numberTag$2:
      case stringTag$2:
        return new Ctor(object);
      case regexpTag$2:
        return cloneRegExp(object);
      case setTag$3:
        return new Ctor();
      case symbolTag$2:
        return cloneSymbol(object);
    }
  }
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype$1(object)) : {};
  }
  var mapTag$2 = "[object Map]";
  function baseIsMap(value) {
    return isObjectLike(value) && getTag$1(value) == mapTag$2;
  }
  var nodeIsMap = nodeUtil && nodeUtil.isMap;
  var isMap$1 = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  var setTag$2 = "[object Set]";
  function baseIsSet(value) {
    return isObjectLike(value) && getTag$1(value) == setTag$2;
  }
  var nodeIsSet = nodeUtil && nodeUtil.isSet;
  var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  var CLONE_DEEP_FLAG$2 = 1, CLONE_FLAT_FLAG$1 = 2, CLONE_SYMBOLS_FLAG$3 = 4;
  var argsTag$1 = "[object Arguments]", arrayTag$1 = "[object Array]", boolTag$1 = "[object Boolean]", dateTag$1 = "[object Date]", errorTag$1 = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag$1 = "[object Map]", numberTag$1 = "[object Number]", objectTag$1 = "[object Object]", regexpTag$1 = "[object RegExp]", setTag$1 = "[object Set]", stringTag$1 = "[object String]", symbolTag$1 = "[object Symbol]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag$1 = "[object ArrayBuffer]", dataViewTag$1 = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var cloneableTags = {};
  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & CLONE_DEEP_FLAG$2, isFlat = bitmask & CLONE_FLAT_FLAG$1, isFull = bitmask & CLONE_SYMBOLS_FLAG$3;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject$1(value)) {
      return value;
    }
    var isArr = isArray$4(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag$1(value), isFunc = tag == funcTag || tag == genTag;
      if (isBuffer$1(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object) {
        result = isFlat || isFunc ? {} : initCloneObject(value);
        if (!isDeep) {
          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, isDeep);
      }
    }
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (isSet$1(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap$1(value)) {
      value.forEach(function(subValue, key2) {
        result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
    }
    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    var props2 = isArr ? void 0 : keysFunc(value);
    arrayEach(props2 || value, function(subValue, key2) {
      if (props2) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
    });
    return result;
  }
  var CLONE_SYMBOLS_FLAG$2 = 4;
  function clone(value) {
    return baseClone(value, CLONE_SYMBOLS_FLAG$2);
  }
  var CLONE_DEEP_FLAG$1 = 1, CLONE_SYMBOLS_FLAG$1 = 4;
  function cloneDeep(value) {
    return baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  function SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new MapCache();
    while (++index < length) {
      this.add(values[index]);
    }
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  function arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }
  function cacheHas(cache2, key) {
    return cache2.has(key);
  }
  var COMPARE_PARTIAL_FLAG$5 = 1, COMPARE_UNORDERED_FLAG$3 = 2;
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;
    stack.set(array, other);
    stack.set(other, array);
    while (++index < arrLength) {
      var arrValue = array[index], othValue = other[index];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== void 0) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      if (seen) {
        if (!arraySome(other, function(othValue2, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
  }
  function mapToArray(map2) {
    var index = -1, result = Array(map2.size);
    map2.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  function setToArray(set2) {
    var index = -1, result = Array(set2.size);
    set2.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  var COMPARE_PARTIAL_FLAG$4 = 1, COMPARE_UNORDERED_FLAG$2 = 2;
  var boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", mapTag = "[object Map]", numberTag = "[object Number]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]";
  var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;
      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
          return false;
        }
        return true;
      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);
      case errorTag:
        return object.name == other.name && object.message == other.message;
      case regexpTag:
      case stringTag:
        return object == other + "";
      case mapTag:
        var convert = mapToArray;
      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
        convert || (convert = setToArray);
        if (object.size != other.size && !isPartial) {
          return false;
        }
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$2;
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["delete"](object);
        return result;
      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }
  var COMPARE_PARTIAL_FLAG$3 = 1;
  var objectProto$1 = Object.prototype;
  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$1.call(other, key))) {
        return false;
      }
    }
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key], othValue = other[key];
      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor, othCtor = other.constructor;
      if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
  }
  var COMPARE_PARTIAL_FLAG$2 = 1;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", objectTag = "[object Object]";
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray$4(object), othIsArr = isArray$4(other), objTag = objIsArr ? arrayTag : getTag$1(object), othTag = othIsArr ? arrayTag : getTag$1(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
    if (isSameTag && isBuffer$1(object)) {
      if (!isBuffer$1(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }
  var COMPARE_PARTIAL_FLAG$1 = 1, COMPARE_UNORDERED_FLAG$1 = 2;
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length, length = index, noCustomizer = !customizer;
    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0], objValue = object[key], srcValue = data[1];
      if (noCustomizer && data[2]) {
        if (objValue === void 0 && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }
  function isStrictComparable(value) {
    return value === value && !isObject$1(value);
  }
  function getMatchData(object) {
    var result = keys(object), length = result.length;
    while (length--) {
      var key = result[length], value = object[key];
      result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
  }
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
    };
  }
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }
  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);
    var index = -1, length = path.length, result = false;
    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray$4(object) || isArguments(object));
  }
  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }
  var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get(object, path);
      return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }
  function baseProperty(key) {
    return function(object) {
      return object == null ? void 0 : object[key];
    };
  }
  function basePropertyDeep(path) {
    return function(object) {
      return baseGet(object, path);
    };
  }
  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }
  function baseIteratee(value) {
    if (typeof value == "function") {
      return value;
    }
    if (value == null) {
      return identity;
    }
    if (typeof value == "object") {
      return isArray$4(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }
    return property(value);
  }
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1, iterable = Object(object), props2 = keysFunc(object), length = props2.length;
      while (length--) {
        var key = props2[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }
  var baseFor = createBaseFor();
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }
  var baseEach = createBaseEach(baseForOwn);
  var now = function() {
    return root.Date.now();
  };
  var FUNC_ERROR_TEXT$1 = "Expected a function";
  var nativeMax$1 = Math.max, nativeMin$1 = Math.min;
  function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }
    wait = toNumber(wait) || 0;
    if (isObject$1(options)) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      maxWait = maxing ? nativeMax$1(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
      var args = lastArgs, thisArg = lastThis;
      lastArgs = lastThis = void 0;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }
    function leadingEdge(time) {
      lastInvokeTime = time;
      timerId = setTimeout(timerExpired, wait);
      return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush() {
      return timerId === void 0 ? result : trailingEdge(now());
    }
    function debounced() {
      var time = now(), isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }
  function assignMergeValue(object, key, value) {
    if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  function safeGet(object, key) {
    if (key === "constructor" && typeof object[key] === "function") {
      return;
    }
    if (key == "__proto__") {
      return;
    }
    return object[key];
  }
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray$4(srcValue), isBuff = !isArr && isBuffer$1(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray$4(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject$1(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function(srcValue, key) {
      stack || (stack = new Stack());
      if (isObject$1(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn);
  }
  function arrayIncludesWith(array, value, comparator) {
    var index = -1, length = array == null ? 0 : array.length;
    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : void 0;
  }
  var nativeMax = Math.max, nativeMin = Math.min;
  function findLastIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = length - 1;
    if (fromIndex !== void 0) {
      index = toInteger(fromIndex);
      index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
    }
    return baseFindIndex(array, baseIteratee(predicate), index, true);
  }
  function baseMap(collection, iteratee) {
    var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
    baseEach(collection, function(value, key, collection2) {
      result[++index] = iteratee(value, key, collection2);
    });
    return result;
  }
  function map(collection, iteratee) {
    var func = isArray$4(collection) ? arrayMap : baseMap;
    return func(collection, baseIteratee(iteratee));
  }
  function flatMap(collection, iteratee) {
    return baseFlatten(map(collection, iteratee), 1);
  }
  var INFINITY$1 = 1 / 0;
  function flattenDeep(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, INFINITY$1) : [];
  }
  function fromPairs(pairs) {
    var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
    while (++index < length) {
      var pair = pairs[index];
      result[pair[0]] = pair[1];
    }
    return result;
  }
  function parent(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
  }
  function isEqual$1(value, other) {
    return baseIsEqual(value, other);
  }
  function isNil(value) {
    return value == null;
  }
  function isUndefined$1(value) {
    return value === void 0;
  }
  var merge$1 = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });
  const merge$2 = merge$1;
  function baseUnset(object, path) {
    path = castPath(path, object);
    object = parent(object, path);
    return object == null || delete object[toKey(last(path))];
  }
  function customOmitClone(value) {
    return isPlainObject(value) ? void 0 : value;
  }
  var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
  var omit = flatRest(function(object, paths) {
    var result = {};
    if (object == null) {
      return result;
    }
    var isDeep = false;
    paths = arrayMap(paths, function(path) {
      path = castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    copyObject(object, getAllKeysIn(object), result);
    if (isDeep) {
      result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
    }
    var length = paths.length;
    while (length--) {
      baseUnset(result, paths[length]);
    }
    return result;
  });
  function baseSet(object, path, value, customizer) {
    if (!isObject$1(object)) {
      return object;
    }
    path = castPath(path, object);
    var index = -1, length = path.length, lastIndex = length - 1, nested = object;
    while (nested != null && ++index < length) {
      var key = toKey(path[index]), newValue = value;
      if (key === "__proto__" || key === "constructor" || key === "prototype") {
        return object;
      }
      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : void 0;
        if (newValue === void 0) {
          newValue = isObject$1(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }
      assignValue(nested, key, newValue);
      nested = nested[key];
    }
    return object;
  }
  function basePickBy(object, paths, predicate) {
    var index = -1, length = paths.length, result = {};
    while (++index < length) {
      var path = paths[index], value = baseGet(object, path);
      if (predicate(value, path)) {
        baseSet(result, castPath(path, object), value);
      }
    }
    return result;
  }
  function basePick(object, paths) {
    return basePickBy(object, paths, function(value, path) {
      return hasIn(object, path);
    });
  }
  var pick = flatRest(function(object, paths) {
    return object == null ? {} : basePick(object, paths);
  });
  function set(object, path, value) {
    return object == null ? object : baseSet(object, path, value);
  }
  var FUNC_ERROR_TEXT = "Expected a function";
  function throttle(func, wait, options) {
    var leading = true, trailing = true;
    if (typeof func != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject$1(options)) {
      leading = "leading" in options ? !!options.leading : leading;
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
      "leading": leading,
      "maxWait": wait,
      "trailing": trailing
    });
  }
  var INFINITY = 1 / 0;
  var createSet = !(Set$1 && 1 / setToArray(new Set$1([, -0]))[1] == INFINITY) ? noop : function(values) {
    return new Set$1(values);
  };
  var LARGE_ARRAY_SIZE = 200;
  function baseUniq(array, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    } else if (length >= LARGE_ARRAY_SIZE) {
      var set2 = iteratee ? null : createSet(array);
      if (set2) {
        return setToArray(set2);
      }
      isCommon = false;
      includes = cacheHas;
      seen = new SetCache();
    } else {
      seen = iteratee ? [] : result;
    }
    outer:
      while (++index < length) {
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
    return result;
  }
  var union = baseRest(function(arrays) {
    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
  });
  const isUndefined = (val) => val === void 0;
  const isBoolean$1 = (val) => typeof val === "boolean";
  const isNumber$2 = (val) => typeof val === "number";
  const isEmpty = (val) => !val && val !== 0 || shared.isArray(val) && val.length === 0 || shared.isObject(val) && !Object.keys(val).length;
  const isElement$2 = (e) => {
    if (typeof Element === "undefined")
      return false;
    return e instanceof Element;
  };
  const isPropAbsent = (prop) => {
    return isNil(prop);
  };
  const isStringNumber = (val) => {
    if (!shared.isString(val)) {
      return false;
    }
    return !Number.isNaN(Number(val));
  };
  const isWindow = (val) => {
    return val === window;
  };
  const rAF = (fn2) => isClient ? window.requestAnimationFrame(fn2) : setTimeout(fn2, 16);
  const cAF = (handle) => isClient ? window.cancelAnimationFrame(handle) : clearTimeout(handle);
  const escapeStringRegexp = (string2 = "") => string2.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
  const capitalize = (str) => shared.capitalize(str);
  const keysOf = (arr) => Object.keys(arr);
  const entriesOf = (arr) => Object.entries(arr);
  const getProp = (obj, path, defaultValue) => {
    return {
      get value() {
        return get(obj, path, defaultValue);
      },
      set value(val) {
        set(obj, path, val);
      }
    };
  };
  class ElementPlusError extends Error {
    constructor(m2) {
      super(m2);
      this.name = "ElementPlusError";
    }
  }
  function throwError(scope, m2) {
    throw new ElementPlusError(`[${scope}] ${m2}`);
  }
  function debugWarn(scope, message2) {
    {
      const error = shared.isString(scope) ? new ElementPlusError(`[${scope}] ${message2}`) : scope;
      formatAppLog("warn", "at node_modules/element-plus/es/utils/error.mjs:16", error);
    }
  }
  const SCOPE$9 = "utils/dom/style";
  const classNameToArray = (cls = "") => cls.split(" ").filter((item) => !!item.trim());
  const hasClass = (el, cls) => {
    if (!el || !cls)
      return false;
    if (cls.includes(" "))
      throw new Error("className should not contain space.");
    return el.classList.contains(cls);
  };
  const addClass = (el, cls) => {
    if (!el || !cls.trim())
      return;
    el.classList.add(...classNameToArray(cls));
  };
  const removeClass = (el, cls) => {
    if (!el || !cls.trim())
      return;
    el.classList.remove(...classNameToArray(cls));
  };
  const getStyle = (element, styleName) => {
    var _a2;
    if (!isClient || !element || !styleName)
      return "";
    let key = shared.camelize(styleName);
    if (key === "float")
      key = "cssFloat";
    try {
      const style = element.style[key];
      if (style)
        return style;
      const computed = (_a2 = document.defaultView) == null ? void 0 : _a2.getComputedStyle(element, "");
      return computed ? computed[key] : "";
    } catch (e) {
      return element.style[key];
    }
  };
  function addUnit(value, defaultUnit = "px") {
    if (!value)
      return "";
    if (isNumber$2(value) || isStringNumber(value)) {
      return `${value}${defaultUnit}`;
    } else if (shared.isString(value)) {
      return value;
    }
    debugWarn(SCOPE$9, "binding value must be a string or number");
  }
  const isScroll = (el, isVertical) => {
    if (!isClient)
      return false;
    const key = {
      undefined: "overflow",
      true: "overflow-y",
      false: "overflow-x"
    }[String(isVertical)];
    const overflow = getStyle(el, key);
    return ["scroll", "auto", "overlay"].some((s2) => overflow.includes(s2));
  };
  const getScrollContainer = (el, isVertical) => {
    if (!isClient)
      return;
    let parent2 = el;
    while (parent2) {
      if ([window, document, document.documentElement].includes(parent2))
        return window;
      if (isScroll(parent2, isVertical))
        return parent2;
      parent2 = parent2.parentNode;
    }
    return parent2;
  };
  let scrollBarWidth;
  const getScrollBarWidth = (namespace) => {
    var _a2;
    if (!isClient)
      return 0;
    if (scrollBarWidth !== void 0)
      return scrollBarWidth;
    const outer = document.createElement("div");
    outer.className = `${namespace}-scrollbar__wrap`;
    outer.style.visibility = "hidden";
    outer.style.width = "100px";
    outer.style.position = "absolute";
    outer.style.top = "-9999px";
    document.body.appendChild(outer);
    const widthNoScroll = outer.offsetWidth;
    outer.style.overflow = "scroll";
    const inner = document.createElement("div");
    inner.style.width = "100%";
    outer.appendChild(inner);
    const widthWithScroll = inner.offsetWidth;
    (_a2 = outer.parentNode) == null ? void 0 : _a2.removeChild(outer);
    scrollBarWidth = widthNoScroll - widthWithScroll;
    return scrollBarWidth;
  };
  function scrollIntoView(container, selected) {
    if (!isClient)
      return;
    if (!selected) {
      container.scrollTop = 0;
      return;
    }
    const offsetParents = [];
    let pointer = selected.offsetParent;
    while (pointer !== null && container !== pointer && container.contains(pointer)) {
      offsetParents.push(pointer);
      pointer = pointer.offsetParent;
    }
    const top = selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);
    const bottom = top + selected.offsetHeight;
    const viewRectTop = container.scrollTop;
    const viewRectBottom = viewRectTop + container.clientHeight;
    if (top < viewRectTop) {
      container.scrollTop = top;
    } else if (bottom > viewRectBottom) {
      container.scrollTop = bottom - container.clientHeight;
    }
  }
  function animateScrollTo(container, from, to, duration, callback) {
    const startTime = Date.now();
    let handle;
    const scroll = () => {
      const timestamp = Date.now();
      const time = timestamp - startTime;
      const nextScrollTop = easeInOutCubic(time > duration ? duration : time, from, to, duration);
      if (isWindow(container)) {
        container.scrollTo(window.pageXOffset, nextScrollTop);
      } else {
        container.scrollTop = nextScrollTop;
      }
      if (time < duration) {
        handle = rAF(scroll);
      } else if (typeof callback === "function") {
        callback();
      }
    };
    scroll();
    return () => {
      handle && cAF(handle);
    };
  }
  const getScrollElement = (target, container) => {
    if (isWindow(container)) {
      return target.ownerDocument.documentElement;
    }
    return container;
  };
  const getScrollTop = (container) => {
    if (isWindow(container)) {
      return window.scrollY;
    }
    return container.scrollTop;
  };
  const getElement = (target) => {
    if (!isClient || target === "")
      return null;
    if (shared.isString(target)) {
      try {
        return document.querySelector(target);
      } catch (e) {
        return null;
      }
    }
    return target;
  };
  /*! Element Plus Icons Vue v2.3.1 */
  var arrow_down_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "ArrowDown",
    __name: "arrow-down",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M831.872 340.864 512 652.672 192.128 340.864a30.592 30.592 0 0 0-42.752 0 29.12 29.12 0 0 0 0 41.6L489.664 714.24a32 32 0 0 0 44.672 0l340.288-331.712a29.12 29.12 0 0 0 0-41.728 30.592 30.592 0 0 0-42.752 0z"
        })
      ]));
    }
  });
  var arrow_down_default = arrow_down_vue_vue_type_script_setup_true_lang_default;
  var arrow_left_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "ArrowLeft",
    __name: "arrow-left",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M609.408 149.376 277.76 489.6a32 32 0 0 0 0 44.672l331.648 340.352a29.12 29.12 0 0 0 41.728 0 30.592 30.592 0 0 0 0-42.752L339.264 511.936l311.872-319.872a30.592 30.592 0 0 0 0-42.688 29.12 29.12 0 0 0-41.728 0z"
        })
      ]));
    }
  });
  var arrow_left_default = arrow_left_vue_vue_type_script_setup_true_lang_default;
  var arrow_right_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "ArrowRight",
    __name: "arrow-right",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M340.864 149.312a30.592 30.592 0 0 0 0 42.752L652.736 512 340.864 831.872a30.592 30.592 0 0 0 0 42.752 29.12 29.12 0 0 0 41.728 0L714.24 534.336a32 32 0 0 0 0-44.672L382.592 149.376a29.12 29.12 0 0 0-41.728 0z"
        })
      ]));
    }
  });
  var arrow_right_default = arrow_right_vue_vue_type_script_setup_true_lang_default;
  var arrow_up_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "ArrowUp",
    __name: "arrow-up",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "m488.832 344.32-339.84 356.672a32 32 0 0 0 0 44.16l.384.384a29.44 29.44 0 0 0 42.688 0l320-335.872 319.872 335.872a29.44 29.44 0 0 0 42.688 0l.384-.384a32 32 0 0 0 0-44.16L535.168 344.32a32 32 0 0 0-46.336 0"
        })
      ]));
    }
  });
  var arrow_up_default = arrow_up_vue_vue_type_script_setup_true_lang_default;
  var back_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Back",
    __name: "back",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64"
        }),
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312z"
        })
      ]));
    }
  });
  var back_default = back_vue_vue_type_script_setup_true_lang_default;
  var calendar_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Calendar",
    __name: "calendar",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M128 384v512h768V192H768v32a32 32 0 1 1-64 0v-32H320v32a32 32 0 0 1-64 0v-32H128v128h768v64zm192-256h384V96a32 32 0 1 1 64 0v32h160a32 32 0 0 1 32 32v768a32 32 0 0 1-32 32H96a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32h160V96a32 32 0 0 1 64 0zm-32 384h64a32 32 0 0 1 0 64h-64a32 32 0 0 1 0-64m0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64m192-192h64a32 32 0 0 1 0 64h-64a32 32 0 0 1 0-64m0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64m192-192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64m0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64"
        })
      ]));
    }
  });
  var calendar_default = calendar_vue_vue_type_script_setup_true_lang_default;
  var caret_right_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "CaretRight",
    __name: "caret-right",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M384 192v640l384-320.064z"
        })
      ]));
    }
  });
  var caret_right_default = caret_right_vue_vue_type_script_setup_true_lang_default;
  var caret_top_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "CaretTop",
    __name: "caret-top",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 320 192 704h639.936z"
        })
      ]));
    }
  });
  var caret_top_default = caret_top_vue_vue_type_script_setup_true_lang_default;
  var check_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Check",
    __name: "check",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M406.656 706.944 195.84 496.256a32 32 0 1 0-45.248 45.248l256 256 512-512a32 32 0 0 0-45.248-45.248L406.592 706.944z"
        })
      ]));
    }
  });
  var check_default = check_vue_vue_type_script_setup_true_lang_default;
  var circle_check_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "CircleCheckFilled",
    __name: "circle-check-filled",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m-55.808 536.384-99.52-99.584a38.4 38.4 0 1 0-54.336 54.336l126.72 126.72a38.272 38.272 0 0 0 54.336 0l262.4-262.464a38.4 38.4 0 1 0-54.272-54.336z"
        })
      ]));
    }
  });
  var circle_check_filled_default = circle_check_filled_vue_vue_type_script_setup_true_lang_default;
  var circle_check_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "CircleCheck",
    __name: "circle-check",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
        }),
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M745.344 361.344a32 32 0 0 1 45.312 45.312l-288 288a32 32 0 0 1-45.312 0l-160-160a32 32 0 1 1 45.312-45.312L480 626.752l265.344-265.408z"
        })
      ]));
    }
  });
  var circle_check_default = circle_check_vue_vue_type_script_setup_true_lang_default;
  var circle_close_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "CircleCloseFilled",
    __name: "circle-close-filled",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m0 393.664L407.936 353.6a38.4 38.4 0 1 0-54.336 54.336L457.664 512 353.6 616.064a38.4 38.4 0 1 0 54.336 54.336L512 566.336 616.064 670.4a38.4 38.4 0 1 0 54.336-54.336L566.336 512 670.4 407.936a38.4 38.4 0 1 0-54.336-54.336z"
        })
      ]));
    }
  });
  var circle_close_filled_default = circle_close_filled_vue_vue_type_script_setup_true_lang_default;
  var circle_close_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "CircleClose",
    __name: "circle-close",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "m466.752 512-90.496-90.496a32 32 0 0 1 45.248-45.248L512 466.752l90.496-90.496a32 32 0 1 1 45.248 45.248L557.248 512l90.496 90.496a32 32 0 1 1-45.248 45.248L512 557.248l-90.496 90.496a32 32 0 0 1-45.248-45.248z"
        }),
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
        })
      ]));
    }
  });
  var circle_close_default = circle_close_vue_vue_type_script_setup_true_lang_default;
  var clock_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Clock",
    __name: "clock",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
        }),
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M480 256a32 32 0 0 1 32 32v256a32 32 0 0 1-64 0V288a32 32 0 0 1 32-32"
        }),
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M480 512h256q32 0 32 32t-32 32H480q-32 0-32-32t32-32"
        })
      ]));
    }
  });
  var clock_default = clock_vue_vue_type_script_setup_true_lang_default;
  var close_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Close",
    __name: "close",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M764.288 214.592 512 466.88 259.712 214.592a31.936 31.936 0 0 0-45.12 45.12L466.752 512 214.528 764.224a31.936 31.936 0 1 0 45.12 45.184L512 557.184l252.288 252.288a31.936 31.936 0 0 0 45.12-45.12L557.12 512.064l252.288-252.352a31.936 31.936 0 1 0-45.12-45.184z"
        })
      ]));
    }
  });
  var close_default = close_vue_vue_type_script_setup_true_lang_default;
  var d_arrow_left_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "DArrowLeft",
    __name: "d-arrow-left",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M529.408 149.376a29.12 29.12 0 0 1 41.728 0 30.592 30.592 0 0 1 0 42.688L259.264 511.936l311.872 319.936a30.592 30.592 0 0 1-.512 43.264 29.12 29.12 0 0 1-41.216-.512L197.76 534.272a32 32 0 0 1 0-44.672l331.648-340.224zm256 0a29.12 29.12 0 0 1 41.728 0 30.592 30.592 0 0 1 0 42.688L515.264 511.936l311.872 319.936a30.592 30.592 0 0 1-.512 43.264 29.12 29.12 0 0 1-41.216-.512L453.76 534.272a32 32 0 0 1 0-44.672l331.648-340.224z"
        })
      ]));
    }
  });
  var d_arrow_left_default = d_arrow_left_vue_vue_type_script_setup_true_lang_default;
  var d_arrow_right_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "DArrowRight",
    __name: "d-arrow-right",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M452.864 149.312a29.12 29.12 0 0 1 41.728.064L826.24 489.664a32 32 0 0 1 0 44.672L494.592 874.624a29.12 29.12 0 0 1-41.728 0 30.592 30.592 0 0 1 0-42.752L764.736 512 452.864 192a30.592 30.592 0 0 1 0-42.688m-256 0a29.12 29.12 0 0 1 41.728.064L570.24 489.664a32 32 0 0 1 0 44.672L238.592 874.624a29.12 29.12 0 0 1-41.728 0 30.592 30.592 0 0 1 0-42.752L508.736 512 196.864 192a30.592 30.592 0 0 1 0-42.688z"
        })
      ]));
    }
  });
  var d_arrow_right_default = d_arrow_right_vue_vue_type_script_setup_true_lang_default;
  var delete_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Delete",
    __name: "delete",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M160 256H96a32 32 0 0 1 0-64h256V95.936a32 32 0 0 1 32-32h256a32 32 0 0 1 32 32V192h256a32 32 0 1 1 0 64h-64v672a32 32 0 0 1-32 32H192a32 32 0 0 1-32-32zm448-64v-64H416v64zM224 896h576V256H224zm192-128a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32m192 0a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32"
        })
      ]));
    }
  });
  var delete_default = delete_vue_vue_type_script_setup_true_lang_default;
  var document_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Document",
    __name: "document",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M832 384H576V128H192v768h640zm-26.496-64L640 154.496V320zM160 64h480l256 256v608a32 32 0 0 1-32 32H160a32 32 0 0 1-32-32V96a32 32 0 0 1 32-32m160 448h384v64H320zm0-192h160v64H320zm0 384h384v64H320z"
        })
      ]));
    }
  });
  var document_default = document_vue_vue_type_script_setup_true_lang_default;
  var full_screen_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "FullScreen",
    __name: "full-screen",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "m160 96.064 192 .192a32 32 0 0 1 0 64l-192-.192V352a32 32 0 0 1-64 0V96h64zm0 831.872V928H96V672a32 32 0 1 1 64 0v191.936l192-.192a32 32 0 1 1 0 64zM864 96.064V96h64v256a32 32 0 1 1-64 0V160.064l-192 .192a32 32 0 1 1 0-64l192-.192zm0 831.872-192-.192a32 32 0 0 1 0-64l192 .192V672a32 32 0 1 1 64 0v256h-64z"
        })
      ]));
    }
  });
  var full_screen_default = full_screen_vue_vue_type_script_setup_true_lang_default;
  var hide_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Hide",
    __name: "hide",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M876.8 156.8c0-9.6-3.2-16-9.6-22.4-6.4-6.4-12.8-9.6-22.4-9.6-9.6 0-16 3.2-22.4 9.6L736 220.8c-64-32-137.6-51.2-224-60.8-160 16-288 73.6-377.6 176C44.8 438.4 0 496 0 512s48 73.6 134.4 176c22.4 25.6 44.8 48 73.6 67.2l-86.4 89.6c-6.4 6.4-9.6 12.8-9.6 22.4 0 9.6 3.2 16 9.6 22.4 6.4 6.4 12.8 9.6 22.4 9.6 9.6 0 16-3.2 22.4-9.6l704-710.4c3.2-6.4 6.4-12.8 6.4-22.4Zm-646.4 528c-76.8-70.4-128-128-153.6-172.8 28.8-48 80-105.6 153.6-172.8C304 272 400 230.4 512 224c64 3.2 124.8 19.2 176 44.8l-54.4 54.4C598.4 300.8 560 288 512 288c-64 0-115.2 22.4-160 64s-64 96-64 160c0 48 12.8 89.6 35.2 124.8L256 707.2c-9.6-6.4-19.2-16-25.6-22.4Zm140.8-96c-12.8-22.4-19.2-48-19.2-76.8 0-44.8 16-83.2 48-112 32-28.8 67.2-48 112-48 28.8 0 54.4 6.4 73.6 19.2zM889.599 336c-12.8-16-28.8-28.8-41.6-41.6l-48 48c73.6 67.2 124.8 124.8 150.4 169.6-28.8 48-80 105.6-153.6 172.8-73.6 67.2-172.8 108.8-284.8 115.2-51.2-3.2-99.2-12.8-140.8-28.8l-48 48c57.6 22.4 118.4 38.4 188.8 44.8 160-16 288-73.6 377.6-176C979.199 585.6 1024 528 1024 512s-48.001-73.6-134.401-176Z"
        }),
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M511.998 672c-12.8 0-25.6-3.2-38.4-6.4l-51.2 51.2c28.8 12.8 57.6 19.2 89.6 19.2 64 0 115.2-22.4 160-64 41.6-41.6 64-96 64-160 0-32-6.4-64-19.2-89.6l-51.2 51.2c3.2 12.8 6.4 25.6 6.4 38.4 0 44.8-16 83.2-48 112-32 28.8-67.2 48-112 48Z"
        })
      ]));
    }
  });
  var hide_default = hide_vue_vue_type_script_setup_true_lang_default;
  var info_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "InfoFilled",
    __name: "info-filled",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 64a448 448 0 1 1 0 896.064A448 448 0 0 1 512 64m67.2 275.072c33.28 0 60.288-23.104 60.288-57.344s-27.072-57.344-60.288-57.344c-33.28 0-60.16 23.104-60.16 57.344s26.88 57.344 60.16 57.344M590.912 699.2c0-6.848 2.368-24.64 1.024-34.752l-52.608 60.544c-10.88 11.456-24.512 19.392-30.912 17.28a12.992 12.992 0 0 1-8.256-14.72l87.68-276.992c7.168-35.136-12.544-67.2-54.336-71.296-44.096 0-108.992 44.736-148.48 101.504 0 6.784-1.28 23.68.064 33.792l52.544-60.608c10.88-11.328 23.552-19.328 29.952-17.152a12.8 12.8 0 0 1 7.808 16.128L388.48 728.576c-10.048 32.256 8.96 63.872 55.04 71.04 67.84 0 107.904-43.648 147.456-100.416z"
        })
      ]));
    }
  });
  var info_filled_default = info_filled_vue_vue_type_script_setup_true_lang_default;
  var loading_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Loading",
    __name: "loading",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 64a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V96a32 32 0 0 1 32-32m0 640a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V736a32 32 0 0 1 32-32m448-192a32 32 0 0 1-32 32H736a32 32 0 1 1 0-64h192a32 32 0 0 1 32 32m-640 0a32 32 0 0 1-32 32H96a32 32 0 0 1 0-64h192a32 32 0 0 1 32 32M195.2 195.2a32 32 0 0 1 45.248 0L376.32 331.008a32 32 0 0 1-45.248 45.248L195.2 240.448a32 32 0 0 1 0-45.248zm452.544 452.544a32 32 0 0 1 45.248 0L828.8 783.552a32 32 0 0 1-45.248 45.248L647.744 692.992a32 32 0 0 1 0-45.248zM828.8 195.264a32 32 0 0 1 0 45.184L692.992 376.32a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0m-452.544 452.48a32 32 0 0 1 0 45.248L240.448 828.8a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0z"
        })
      ]));
    }
  });
  var loading_default = loading_vue_vue_type_script_setup_true_lang_default;
  var minus_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Minus",
    __name: "minus",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M128 544h768a32 32 0 1 0 0-64H128a32 32 0 0 0 0 64"
        })
      ]));
    }
  });
  var minus_default = minus_vue_vue_type_script_setup_true_lang_default;
  var more_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "MoreFilled",
    __name: "more-filled",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M176 416a112 112 0 1 1 0 224 112 112 0 0 1 0-224m336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224m336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224"
        })
      ]));
    }
  });
  var more_filled_default = more_filled_vue_vue_type_script_setup_true_lang_default;
  var more_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "More",
    __name: "more",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M176 416a112 112 0 1 0 0 224 112 112 0 0 0 0-224m0 64a48 48 0 1 1 0 96 48 48 0 0 1 0-96m336-64a112 112 0 1 1 0 224 112 112 0 0 1 0-224m0 64a48 48 0 1 0 0 96 48 48 0 0 0 0-96m336-64a112 112 0 1 1 0 224 112 112 0 0 1 0-224m0 64a48 48 0 1 0 0 96 48 48 0 0 0 0-96"
        })
      ]));
    }
  });
  var more_default = more_vue_vue_type_script_setup_true_lang_default;
  var picture_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "PictureFilled",
    __name: "picture-filled",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M96 896a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32h832a32 32 0 0 1 32 32v704a32 32 0 0 1-32 32zm315.52-228.48-68.928-68.928a32 32 0 0 0-45.248 0L128 768.064h778.688l-242.112-290.56a32 32 0 0 0-49.216 0L458.752 665.408a32 32 0 0 1-47.232 2.112M256 384a96 96 0 1 0 192.064-.064A96 96 0 0 0 256 384"
        })
      ]));
    }
  });
  var picture_filled_default = picture_filled_vue_vue_type_script_setup_true_lang_default;
  var plus_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Plus",
    __name: "plus",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M480 480V128a32 32 0 0 1 64 0v352h352a32 32 0 1 1 0 64H544v352a32 32 0 1 1-64 0V544H128a32 32 0 0 1 0-64z"
        })
      ]));
    }
  });
  var plus_default = plus_vue_vue_type_script_setup_true_lang_default;
  var question_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "QuestionFilled",
    __name: "question-filled",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m23.744 191.488c-52.096 0-92.928 14.784-123.2 44.352-30.976 29.568-45.76 70.4-45.76 122.496h80.256c0-29.568 5.632-52.8 17.6-68.992 13.376-19.712 35.2-28.864 66.176-28.864 23.936 0 42.944 6.336 56.32 19.712 12.672 13.376 19.712 31.68 19.712 54.912 0 17.6-6.336 34.496-19.008 49.984l-8.448 9.856c-45.76 40.832-73.216 70.4-82.368 89.408-9.856 19.008-14.08 42.24-14.08 68.992v9.856h80.96v-9.856c0-16.896 3.52-31.68 10.56-45.76 6.336-12.672 15.488-24.64 28.16-35.2 33.792-29.568 54.208-48.576 60.544-55.616 16.896-22.528 26.048-51.392 26.048-86.592 0-42.944-14.08-76.736-42.24-101.376-28.16-25.344-65.472-37.312-111.232-37.312zm-12.672 406.208a54.272 54.272 0 0 0-38.72 14.784 49.408 49.408 0 0 0-15.488 38.016c0 15.488 4.928 28.16 15.488 38.016A54.848 54.848 0 0 0 523.072 768c15.488 0 28.16-4.928 38.72-14.784a51.52 51.52 0 0 0 16.192-38.72 51.968 51.968 0 0 0-15.488-38.016 55.936 55.936 0 0 0-39.424-14.784z"
        })
      ]));
    }
  });
  var question_filled_default = question_filled_vue_vue_type_script_setup_true_lang_default;
  var refresh_left_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "RefreshLeft",
    __name: "refresh-left",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M289.088 296.704h92.992a32 32 0 0 1 0 64H232.96a32 32 0 0 1-32-32V179.712a32 32 0 0 1 64 0v50.56a384 384 0 0 1 643.84 282.88 384 384 0 0 1-383.936 384 384 384 0 0 1-384-384h64a320 320 0 1 0 640 0 320 320 0 0 0-555.712-216.448z"
        })
      ]));
    }
  });
  var refresh_left_default = refresh_left_vue_vue_type_script_setup_true_lang_default;
  var refresh_right_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "RefreshRight",
    __name: "refresh-right",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M784.512 230.272v-50.56a32 32 0 1 1 64 0v149.056a32 32 0 0 1-32 32H667.52a32 32 0 1 1 0-64h92.992A320 320 0 1 0 524.8 833.152a320 320 0 0 0 320-320h64a384 384 0 0 1-384 384 384 384 0 0 1-384-384 384 384 0 0 1 643.712-282.88z"
        })
      ]));
    }
  });
  var refresh_right_default = refresh_right_vue_vue_type_script_setup_true_lang_default;
  var scale_to_original_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "ScaleToOriginal",
    __name: "scale-to-original",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M813.176 180.706a60.235 60.235 0 0 1 60.236 60.235v481.883a60.235 60.235 0 0 1-60.236 60.235H210.824a60.235 60.235 0 0 1-60.236-60.235V240.94a60.235 60.235 0 0 1 60.236-60.235h602.352zm0-60.235H210.824A120.47 120.47 0 0 0 90.353 240.94v481.883a120.47 120.47 0 0 0 120.47 120.47h602.353a120.47 120.47 0 0 0 120.471-120.47V240.94a120.47 120.47 0 0 0-120.47-120.47zm-120.47 180.705a30.118 30.118 0 0 0-30.118 30.118v301.177a30.118 30.118 0 0 0 60.236 0V331.294a30.118 30.118 0 0 0-30.118-30.118zm-361.412 0a30.118 30.118 0 0 0-30.118 30.118v301.177a30.118 30.118 0 1 0 60.236 0V331.294a30.118 30.118 0 0 0-30.118-30.118M512 361.412a30.118 30.118 0 0 0-30.118 30.117v30.118a30.118 30.118 0 0 0 60.236 0V391.53A30.118 30.118 0 0 0 512 361.412M512 512a30.118 30.118 0 0 0-30.118 30.118v30.117a30.118 30.118 0 0 0 60.236 0v-30.117A30.118 30.118 0 0 0 512 512"
        })
      ]));
    }
  });
  var scale_to_original_default = scale_to_original_vue_vue_type_script_setup_true_lang_default;
  var search_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Search",
    __name: "search",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704"
        })
      ]));
    }
  });
  var search_default = search_vue_vue_type_script_setup_true_lang_default;
  var sort_down_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "SortDown",
    __name: "sort-down",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M576 96v709.568L333.312 562.816A32 32 0 1 0 288 608l297.408 297.344A32 32 0 0 0 640 882.688V96a32 32 0 0 0-64 0"
        })
      ]));
    }
  });
  var sort_down_default = sort_down_vue_vue_type_script_setup_true_lang_default;
  var sort_up_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "SortUp",
    __name: "sort-up",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M384 141.248V928a32 32 0 1 0 64 0V218.56l242.688 242.688A32 32 0 1 0 736 416L438.592 118.656A32 32 0 0 0 384 141.248"
        })
      ]));
    }
  });
  var sort_up_default = sort_up_vue_vue_type_script_setup_true_lang_default;
  var star_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "StarFilled",
    __name: "star-filled",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M283.84 867.84 512 747.776l228.16 119.936a6.4 6.4 0 0 0 9.28-6.72l-43.52-254.08 184.512-179.904a6.4 6.4 0 0 0-3.52-10.88l-255.104-37.12L517.76 147.904a6.4 6.4 0 0 0-11.52 0L392.192 379.072l-255.104 37.12a6.4 6.4 0 0 0-3.52 10.88L318.08 606.976l-43.584 254.08a6.4 6.4 0 0 0 9.28 6.72z"
        })
      ]));
    }
  });
  var star_filled_default = star_filled_vue_vue_type_script_setup_true_lang_default;
  var star_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Star",
    __name: "star",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "m512 747.84 228.16 119.936a6.4 6.4 0 0 0 9.28-6.72l-43.52-254.08 184.512-179.904a6.4 6.4 0 0 0-3.52-10.88l-255.104-37.12L517.76 147.904a6.4 6.4 0 0 0-11.52 0L392.192 379.072l-255.104 37.12a6.4 6.4 0 0 0-3.52 10.88L318.08 606.976l-43.584 254.08a6.4 6.4 0 0 0 9.28 6.72zM313.6 924.48a70.4 70.4 0 0 1-102.144-74.24l37.888-220.928L88.96 472.96A70.4 70.4 0 0 1 128 352.896l221.76-32.256 99.2-200.96a70.4 70.4 0 0 1 126.208 0l99.2 200.96 221.824 32.256a70.4 70.4 0 0 1 39.04 120.064L774.72 629.376l37.888 220.928a70.4 70.4 0 0 1-102.144 74.24L512 820.096l-198.4 104.32z"
        })
      ]));
    }
  });
  var star_default = star_vue_vue_type_script_setup_true_lang_default;
  var success_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "SuccessFilled",
    __name: "success-filled",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m-55.808 536.384-99.52-99.584a38.4 38.4 0 1 0-54.336 54.336l126.72 126.72a38.272 38.272 0 0 0 54.336 0l262.4-262.464a38.4 38.4 0 1 0-54.272-54.336z"
        })
      ]));
    }
  });
  var success_filled_default = success_filled_vue_vue_type_script_setup_true_lang_default;
  var view_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "View",
    __name: "view",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 160c320 0 512 352 512 352S832 864 512 864 0 512 0 512s192-352 512-352m0 64c-225.28 0-384.128 208.064-436.8 288 52.608 79.872 211.456 288 436.8 288 225.28 0 384.128-208.064 436.8-288-52.608-79.872-211.456-288-436.8-288zm0 64a224 224 0 1 1 0 448 224 224 0 0 1 0-448m0 64a160.192 160.192 0 0 0-160 160c0 88.192 71.744 160 160 160s160-71.808 160-160-71.744-160-160-160"
        })
      ]));
    }
  });
  var view_default = view_vue_vue_type_script_setup_true_lang_default;
  var warning_filled_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "WarningFilled",
    __name: "warning-filled",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m0 192a58.432 58.432 0 0 0-58.24 63.744l23.36 256.384a35.072 35.072 0 0 0 69.76 0l23.296-256.384A58.432 58.432 0 0 0 512 256m0 512a51.2 51.2 0 1 0 0-102.4 51.2 51.2 0 0 0 0 102.4"
        })
      ]));
    }
  });
  var warning_filled_default = warning_filled_vue_vue_type_script_setup_true_lang_default;
  var zoom_in_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "ZoomIn",
    __name: "zoom-in",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704m-32-384v-96a32 32 0 0 1 64 0v96h96a32 32 0 0 1 0 64h-96v96a32 32 0 0 1-64 0v-96h-96a32 32 0 0 1 0-64z"
        })
      ]));
    }
  });
  var zoom_in_default = zoom_in_vue_vue_type_script_setup_true_lang_default;
  var zoom_out_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "ZoomOut",
    __name: "zoom-out",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704M352 448h256a32 32 0 0 1 0 64H352a32 32 0 0 1 0-64"
        })
      ]));
    }
  });
  var zoom_out_default = zoom_out_vue_vue_type_script_setup_true_lang_default;
  const epPropKey = "__epPropKey";
  const definePropType = (val) => val;
  const isEpProp = (val) => shared.isObject(val) && !!val[epPropKey];
  const buildProp = (prop, key) => {
    if (!shared.isObject(prop) || isEpProp(prop))
      return prop;
    const { values, required, default: defaultValue, type: type3, validator } = prop;
    const _validator = values || validator ? (val) => {
      let valid = false;
      let allowedValues = [];
      if (values) {
        allowedValues = Array.from(values);
        if (shared.hasOwn(prop, "default")) {
          allowedValues.push(defaultValue);
        }
        valid || (valid = allowedValues.includes(val));
      }
      if (validator)
        valid || (valid = validator(val));
      if (!valid && allowedValues.length > 0) {
        const allowValuesText = [...new Set(allowedValues)].map((value) => JSON.stringify(value)).join(", ");
        vue.warn(`Invalid prop: validation failed${key ? ` for prop "${key}"` : ""}. Expected one of [${allowValuesText}], got value ${JSON.stringify(val)}.`);
      }
      return valid;
    } : void 0;
    const epProp = {
      type: type3,
      required: !!required,
      validator: _validator,
      [epPropKey]: true
    };
    if (shared.hasOwn(prop, "default"))
      epProp.default = defaultValue;
    return epProp;
  };
  const buildProps = (props2) => fromPairs(Object.entries(props2).map(([key, option]) => [
    key,
    buildProp(option, key)
  ]));
  const iconPropType = definePropType([
    String,
    Object,
    Function
  ]);
  const CloseComponents = {
    Close: close_default
  };
  const TypeComponents = {
    Close: close_default,
    SuccessFilled: success_filled_default,
    InfoFilled: info_filled_default,
    WarningFilled: warning_filled_default,
    CircleCloseFilled: circle_close_filled_default
  };
  const TypeComponentsMap = {
    success: success_filled_default,
    warning: warning_filled_default,
    error: circle_close_filled_default,
    info: info_filled_default
  };
  const ValidateComponentsMap = {
    validating: loading_default,
    success: circle_check_default,
    error: circle_close_default
  };
  const withInstall = (main, extra) => {
    main.install = (app) => {
      for (const comp of [main, ...Object.values(extra != null ? extra : {})]) {
        app.component(comp.name, comp);
      }
    };
    if (extra) {
      for (const [key, comp] of Object.entries(extra)) {
        main[key] = comp;
      }
    }
    return main;
  };
  const withInstallFunction = (fn2, name) => {
    fn2.install = (app) => {
      fn2._context = app._context;
      app.config.globalProperties[name] = fn2;
    };
    return fn2;
  };
  const withInstallDirective = (directive, name) => {
    directive.install = (app) => {
      app.directive(name, directive);
    };
    return directive;
  };
  const withNoopInstall = (component2) => {
    component2.install = shared.NOOP;
    return component2;
  };
  const composeRefs = (...refs) => {
    return (el) => {
      refs.forEach((ref2) => {
        if (shared.isFunction(ref2)) {
          ref2(el);
        } else {
          ref2.value = el;
        }
      });
    };
  };
  const EVENT_CODE = {
    tab: "Tab",
    enter: "Enter",
    space: "Space",
    left: "ArrowLeft",
    up: "ArrowUp",
    right: "ArrowRight",
    down: "ArrowDown",
    esc: "Escape",
    delete: "Delete",
    backspace: "Backspace",
    numpadEnter: "NumpadEnter",
    pageUp: "PageUp",
    pageDown: "PageDown",
    home: "Home",
    end: "End"
  };
  const datePickTypes = [
    "year",
    "years",
    "month",
    "months",
    "date",
    "dates",
    "week",
    "datetime",
    "datetimerange",
    "daterange",
    "monthrange",
    "yearrange"
  ];
  const WEEK_DAYS = [
    "sun",
    "mon",
    "tue",
    "wed",
    "thu",
    "fri",
    "sat"
  ];
  const UPDATE_MODEL_EVENT = "update:modelValue";
  const CHANGE_EVENT = "change";
  const INPUT_EVENT = "input";
  const INSTALLED_KEY = Symbol("INSTALLED_KEY");
  const componentSizes = ["", "default", "small", "large"];
  const isValidComponentSize = (val) => ["", ...componentSizes].includes(val);
  const SCOPE$8 = "utils/vue/vnode";
  var PatchFlags = /* @__PURE__ */ ((PatchFlags2) => {
    PatchFlags2[PatchFlags2["TEXT"] = 1] = "TEXT";
    PatchFlags2[PatchFlags2["CLASS"] = 2] = "CLASS";
    PatchFlags2[PatchFlags2["STYLE"] = 4] = "STYLE";
    PatchFlags2[PatchFlags2["PROPS"] = 8] = "PROPS";
    PatchFlags2[PatchFlags2["FULL_PROPS"] = 16] = "FULL_PROPS";
    PatchFlags2[PatchFlags2["HYDRATE_EVENTS"] = 32] = "HYDRATE_EVENTS";
    PatchFlags2[PatchFlags2["STABLE_FRAGMENT"] = 64] = "STABLE_FRAGMENT";
    PatchFlags2[PatchFlags2["KEYED_FRAGMENT"] = 128] = "KEYED_FRAGMENT";
    PatchFlags2[PatchFlags2["UNKEYED_FRAGMENT"] = 256] = "UNKEYED_FRAGMENT";
    PatchFlags2[PatchFlags2["NEED_PATCH"] = 512] = "NEED_PATCH";
    PatchFlags2[PatchFlags2["DYNAMIC_SLOTS"] = 1024] = "DYNAMIC_SLOTS";
    PatchFlags2[PatchFlags2["HOISTED"] = -1] = "HOISTED";
    PatchFlags2[PatchFlags2["BAIL"] = -2] = "BAIL";
    return PatchFlags2;
  })(PatchFlags || {});
  function isFragment(node) {
    return vue.isVNode(node) && node.type === vue.Fragment;
  }
  function isComment(node) {
    return vue.isVNode(node) && node.type === vue.Comment;
  }
  function isValidElementNode(node) {
    return vue.isVNode(node) && !isFragment(node) && !isComment(node);
  }
  const getNormalizedProps = (node) => {
    if (!vue.isVNode(node)) {
      debugWarn(SCOPE$8, "[getNormalizedProps] must be a VNode");
      return {};
    }
    const raw = node.props || {};
    const type3 = (vue.isVNode(node.type) ? node.type.props : void 0) || {};
    const props2 = {};
    Object.keys(type3).forEach((key) => {
      if (shared.hasOwn(type3[key], "default")) {
        props2[key] = type3[key].default;
      }
    });
    Object.keys(raw).forEach((key) => {
      props2[shared.camelize(key)] = raw[key];
    });
    return props2;
  };
  const ensureOnlyChild = (children) => {
    if (!shared.isArray(children) || children.length > 1) {
      throw new Error("expect to receive a single Vue element child");
    }
    return children[0];
  };
  const flattedChildren = (children) => {
    const vNodes = shared.isArray(children) ? children : [children];
    const result = [];
    vNodes.forEach((child) => {
      var _a2;
      if (shared.isArray(child)) {
        result.push(...flattedChildren(child));
      } else if (vue.isVNode(child) && shared.isArray(child.children)) {
        result.push(...flattedChildren(child.children));
      } else {
        result.push(child);
        if (vue.isVNode(child) && ((_a2 = child.component) == null ? void 0 : _a2.subTree)) {
          result.push(...flattedChildren(child.component.subTree));
        }
      }
    });
    return result;
  };
  const unique = (arr) => [...new Set(arr)];
  const castArray = (arr) => {
    if (!arr && arr !== 0)
      return [];
    return Array.isArray(arr) ? arr : [arr];
  };
  const isKorean = (text) => /([\uAC00-\uD7AF\u3130-\u318F])+/gi.test(text);
  const mutable = (val) => val;
  function throttleByRaf(cb) {
    let timer = 0;
    const throttle2 = (...args) => {
      if (timer) {
        cAF(timer);
      }
      timer = rAF(() => {
        cb(...args);
        timer = 0;
      });
    };
    throttle2.cancel = () => {
      cAF(timer);
      timer = 0;
    };
    return throttle2;
  }
  const DEFAULT_EXCLUDE_KEYS = ["class", "style"];
  const LISTENER_PREFIX = /^on[A-Z]/;
  const useAttrs = (params = {}) => {
    const { excludeListeners = false, excludeKeys } = params;
    const allExcludeKeys = vue.computed(() => {
      return ((excludeKeys == null ? void 0 : excludeKeys.value) || []).concat(DEFAULT_EXCLUDE_KEYS);
    });
    const instance = vue.getCurrentInstance();
    if (!instance) {
      debugWarn("use-attrs", "getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function");
      return vue.computed(() => ({}));
    }
    return vue.computed(() => {
      var _a2;
      return fromPairs(Object.entries((_a2 = instance.proxy) == null ? void 0 : _a2.$attrs).filter(([key]) => !allExcludeKeys.value.includes(key) && !(excludeListeners && LISTENER_PREFIX.test(key))));
    });
  };
  const useDeprecated = ({ from, replacement, scope, version: version2, ref: ref2, type: type3 = "API" }, condition) => {
    vue.watch(() => vue.unref(condition), (val) => {
      if (val) {
        debugWarn(scope, `[${type3}] ${from} is about to be deprecated in version ${version2}, please use ${replacement} instead.
For more detail, please visit: ${ref2}
`);
      }
    }, {
      immediate: true
    });
  };
  const useDraggable = (targetRef, dragRef, draggable2, overflow) => {
    let transform = {
      offsetX: 0,
      offsetY: 0
    };
    const onMousedown = (e) => {
      const downX = e.clientX;
      const downY = e.clientY;
      const { offsetX, offsetY } = transform;
      const targetRect = targetRef.value.getBoundingClientRect();
      const targetLeft = targetRect.left;
      const targetTop = targetRect.top;
      const targetWidth = targetRect.width;
      const targetHeight = targetRect.height;
      const clientWidth = document.documentElement.clientWidth;
      const clientHeight = document.documentElement.clientHeight;
      const minLeft = -targetLeft + offsetX;
      const minTop = -targetTop + offsetY;
      const maxLeft = clientWidth - targetLeft - targetWidth + offsetX;
      const maxTop = clientHeight - targetTop - targetHeight + offsetY;
      const onMousemove = (e2) => {
        let moveX = offsetX + e2.clientX - downX;
        let moveY = offsetY + e2.clientY - downY;
        if (!(overflow == null ? void 0 : overflow.value)) {
          moveX = Math.min(Math.max(moveX, minLeft), maxLeft);
          moveY = Math.min(Math.max(moveY, minTop), maxTop);
        }
        transform = {
          offsetX: moveX,
          offsetY: moveY
        };
        if (targetRef.value) {
          targetRef.value.style.transform = `translate(${addUnit(moveX)}, ${addUnit(moveY)})`;
        }
      };
      const onMouseup = () => {
        document.removeEventListener("mousemove", onMousemove);
        document.removeEventListener("mouseup", onMouseup);
      };
      document.addEventListener("mousemove", onMousemove);
      document.addEventListener("mouseup", onMouseup);
    };
    const onDraggable = () => {
      if (dragRef.value && targetRef.value) {
        dragRef.value.addEventListener("mousedown", onMousedown);
      }
    };
    const offDraggable = () => {
      if (dragRef.value && targetRef.value) {
        dragRef.value.removeEventListener("mousedown", onMousedown);
      }
    };
    const resetPosition = () => {
      transform = {
        offsetX: 0,
        offsetY: 0
      };
      if (targetRef.value) {
        targetRef.value.style.transform = "none";
      }
    };
    vue.onMounted(() => {
      vue.watchEffect(() => {
        if (draggable2.value) {
          onDraggable();
        } else {
          offDraggable();
        }
      });
    });
    vue.onBeforeUnmount(() => {
      offDraggable();
    });
    return {
      resetPosition
    };
  };
  var English = {
    name: "en",
    el: {
      breadcrumb: {
        label: "Breadcrumb"
      },
      colorpicker: {
        confirm: "OK",
        clear: "Clear",
        defaultLabel: "color picker",
        description: "current color is {color}. press enter to select a new color.",
        alphaLabel: "pick alpha value"
      },
      datepicker: {
        now: "Now",
        today: "Today",
        cancel: "Cancel",
        clear: "Clear",
        confirm: "OK",
        dateTablePrompt: "Use the arrow keys and enter to select the day of the month",
        monthTablePrompt: "Use the arrow keys and enter to select the month",
        yearTablePrompt: "Use the arrow keys and enter to select the year",
        selectedDate: "Selected date",
        selectDate: "Select date",
        selectTime: "Select time",
        startDate: "Start Date",
        startTime: "Start Time",
        endDate: "End Date",
        endTime: "End Time",
        prevYear: "Previous Year",
        nextYear: "Next Year",
        prevMonth: "Previous Month",
        nextMonth: "Next Month",
        year: "",
        month1: "January",
        month2: "February",
        month3: "March",
        month4: "April",
        month5: "May",
        month6: "June",
        month7: "July",
        month8: "August",
        month9: "September",
        month10: "October",
        month11: "November",
        month12: "December",
        week: "week",
        weeks: {
          sun: "Sun",
          mon: "Mon",
          tue: "Tue",
          wed: "Wed",
          thu: "Thu",
          fri: "Fri",
          sat: "Sat"
        },
        weeksFull: {
          sun: "Sunday",
          mon: "Monday",
          tue: "Tuesday",
          wed: "Wednesday",
          thu: "Thursday",
          fri: "Friday",
          sat: "Saturday"
        },
        months: {
          jan: "Jan",
          feb: "Feb",
          mar: "Mar",
          apr: "Apr",
          may: "May",
          jun: "Jun",
          jul: "Jul",
          aug: "Aug",
          sep: "Sep",
          oct: "Oct",
          nov: "Nov",
          dec: "Dec"
        }
      },
      inputNumber: {
        decrease: "decrease number",
        increase: "increase number"
      },
      select: {
        loading: "Loading",
        noMatch: "No matching data",
        noData: "No data",
        placeholder: "Select"
      },
      mention: {
        loading: "Loading"
      },
      dropdown: {
        toggleDropdown: "Toggle Dropdown"
      },
      cascader: {
        noMatch: "No matching data",
        loading: "Loading",
        placeholder: "Select",
        noData: "No data"
      },
      pagination: {
        goto: "Go to",
        pagesize: "/page",
        total: "Total {total}",
        pageClassifier: "",
        page: "Page",
        prev: "Go to previous page",
        next: "Go to next page",
        currentPage: "page {pager}",
        prevPages: "Previous {pager} pages",
        nextPages: "Next {pager} pages",
        deprecationWarning: "Deprecated usages detected, please refer to the el-pagination documentation for more details"
      },
      dialog: {
        close: "Close this dialog"
      },
      drawer: {
        close: "Close this dialog"
      },
      messagebox: {
        title: "Message",
        confirm: "OK",
        cancel: "Cancel",
        error: "Illegal input",
        close: "Close this dialog"
      },
      upload: {
        deleteTip: "press delete to remove",
        delete: "Delete",
        preview: "Preview",
        continue: "Continue"
      },
      slider: {
        defaultLabel: "slider between {min} and {max}",
        defaultRangeStartLabel: "pick start value",
        defaultRangeEndLabel: "pick end value"
      },
      table: {
        emptyText: "No Data",
        confirmFilter: "Confirm",
        resetFilter: "Reset",
        clearFilter: "All",
        sumText: "Sum"
      },
      tour: {
        next: "Next",
        previous: "Previous",
        finish: "Finish"
      },
      tree: {
        emptyText: "No Data"
      },
      transfer: {
        noMatch: "No matching data",
        noData: "No data",
        titles: ["List 1", "List 2"],
        filterPlaceholder: "Enter keyword",
        noCheckedFormat: "{total} items",
        hasCheckedFormat: "{checked}/{total} checked"
      },
      image: {
        error: "FAILED"
      },
      pageHeader: {
        title: "Back"
      },
      popconfirm: {
        confirmButtonText: "Yes",
        cancelButtonText: "No"
      },
      carousel: {
        leftArrow: "Carousel arrow left",
        rightArrow: "Carousel arrow right",
        indicator: "Carousel switch to index {index}"
      }
    }
  };
  const buildTranslator = (locale) => (path, option) => translate(path, option, vue.unref(locale));
  const translate = (path, option, locale) => get(locale, path, path).replace(/\{(\w+)\}/g, (_2, key) => {
    var _a2;
    return `${(_a2 = option == null ? void 0 : option[key]) != null ? _a2 : `{${key}}`}`;
  });
  const buildLocaleContext = (locale) => {
    const lang = vue.computed(() => vue.unref(locale).name);
    const localeRef = vue.isRef(locale) ? locale : vue.ref(locale);
    return {
      lang,
      locale: localeRef,
      t: buildTranslator(locale)
    };
  };
  const localeContextKey = Symbol("localeContextKey");
  const useLocale = (localeOverrides) => {
    const locale = localeOverrides || vue.inject(localeContextKey, vue.ref());
    return buildLocaleContext(vue.computed(() => locale.value || English));
  };
  const defaultNamespace = "el";
  const statePrefix = "is-";
  const _bem = (namespace, block, blockSuffix, element, modifier) => {
    let cls = `${namespace}-${block}`;
    if (blockSuffix) {
      cls += `-${blockSuffix}`;
    }
    if (element) {
      cls += `__${element}`;
    }
    if (modifier) {
      cls += `--${modifier}`;
    }
    return cls;
  };
  const namespaceContextKey = Symbol("namespaceContextKey");
  const useGetDerivedNamespace = (namespaceOverrides) => {
    const derivedNamespace = namespaceOverrides || (vue.getCurrentInstance() ? vue.inject(namespaceContextKey, vue.ref(defaultNamespace)) : vue.ref(defaultNamespace));
    const namespace = vue.computed(() => {
      return vue.unref(derivedNamespace) || defaultNamespace;
    });
    return namespace;
  };
  const useNamespace = (block, namespaceOverrides) => {
    const namespace = useGetDerivedNamespace(namespaceOverrides);
    const b2 = (blockSuffix = "") => _bem(namespace.value, block, blockSuffix, "", "");
    const e = (element) => element ? _bem(namespace.value, block, "", element, "") : "";
    const m2 = (modifier) => modifier ? _bem(namespace.value, block, "", "", modifier) : "";
    const be2 = (blockSuffix, element) => blockSuffix && element ? _bem(namespace.value, block, blockSuffix, element, "") : "";
    const em = (element, modifier) => element && modifier ? _bem(namespace.value, block, "", element, modifier) : "";
    const bm = (blockSuffix, modifier) => blockSuffix && modifier ? _bem(namespace.value, block, blockSuffix, "", modifier) : "";
    const bem = (blockSuffix, element, modifier) => blockSuffix && element && modifier ? _bem(namespace.value, block, blockSuffix, element, modifier) : "";
    const is2 = (name, ...args) => {
      const state2 = args.length >= 1 ? args[0] : true;
      return name && state2 ? `${statePrefix}${name}` : "";
    };
    const cssVar = (object) => {
      const styles = {};
      for (const key in object) {
        if (object[key]) {
          styles[`--${namespace.value}-${key}`] = object[key];
        }
      }
      return styles;
    };
    const cssVarBlock = (object) => {
      const styles = {};
      for (const key in object) {
        if (object[key]) {
          styles[`--${namespace.value}-${block}-${key}`] = object[key];
        }
      }
      return styles;
    };
    const cssVarName = (name) => `--${namespace.value}-${name}`;
    const cssVarBlockName = (name) => `--${namespace.value}-${block}-${name}`;
    return {
      namespace,
      b: b2,
      e,
      m: m2,
      be: be2,
      em,
      bm,
      bem,
      is: is2,
      cssVar,
      cssVarName,
      cssVarBlock,
      cssVarBlockName
    };
  };
  const useLockscreen = (trigger, options = {}) => {
    if (!vue.isRef(trigger)) {
      throwError("[useLockscreen]", "You need to pass a ref param to this function");
    }
    const ns2 = options.ns || useNamespace("popup");
    const hiddenCls = vue.computed(() => ns2.bm("parent", "hidden"));
    if (!isClient || hasClass(document.body, hiddenCls.value)) {
      return;
    }
    let scrollBarWidth2 = 0;
    let withoutHiddenClass = false;
    let bodyWidth = "0";
    const cleanup = () => {
      setTimeout(() => {
        if (typeof document === "undefined")
          return;
        removeClass(document == null ? void 0 : document.body, hiddenCls.value);
        if (withoutHiddenClass && document) {
          document.body.style.width = bodyWidth;
        }
      }, 200);
    };
    vue.watch(trigger, (val) => {
      if (!val) {
        cleanup();
        return;
      }
      withoutHiddenClass = !hasClass(document.body, hiddenCls.value);
      if (withoutHiddenClass) {
        bodyWidth = document.body.style.width;
      }
      scrollBarWidth2 = getScrollBarWidth(ns2.namespace.value);
      const bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;
      const bodyOverflowY = getStyle(document.body, "overflowY");
      if (scrollBarWidth2 > 0 && (bodyHasOverflow || bodyOverflowY === "scroll") && withoutHiddenClass) {
        document.body.style.width = `calc(100% - ${scrollBarWidth2}px)`;
      }
      addClass(document.body, hiddenCls.value);
    });
    vue.onScopeDispose(() => cleanup());
  };
  const _prop = buildProp({
    type: definePropType(Boolean),
    default: null
  });
  const _event = buildProp({
    type: definePropType(Function)
  });
  const createModelToggleComposable = (name) => {
    const updateEventKey = `update:${name}`;
    const updateEventKeyRaw2 = `onUpdate:${name}`;
    const useModelToggleEmits2 = [updateEventKey];
    const useModelToggleProps2 = {
      [name]: _prop,
      [updateEventKeyRaw2]: _event
    };
    const useModelToggle2 = ({
      indicator,
      toggleReason,
      shouldHideWhenRouteChanges,
      shouldProceed,
      onShow,
      onHide
    }) => {
      const instance = vue.getCurrentInstance();
      const { emit } = instance;
      const props2 = instance.props;
      const hasUpdateHandler = vue.computed(() => shared.isFunction(props2[updateEventKeyRaw2]));
      const isModelBindingAbsent = vue.computed(() => props2[name] === null);
      const doShow = (event) => {
        if (indicator.value === true) {
          return;
        }
        indicator.value = true;
        if (toggleReason) {
          toggleReason.value = event;
        }
        if (shared.isFunction(onShow)) {
          onShow(event);
        }
      };
      const doHide = (event) => {
        if (indicator.value === false) {
          return;
        }
        indicator.value = false;
        if (toggleReason) {
          toggleReason.value = event;
        }
        if (shared.isFunction(onHide)) {
          onHide(event);
        }
      };
      const show = (event) => {
        if (props2.disabled === true || shared.isFunction(shouldProceed) && !shouldProceed())
          return;
        const shouldEmit = hasUpdateHandler.value && isClient;
        if (shouldEmit) {
          emit(updateEventKey, true);
        }
        if (isModelBindingAbsent.value || !shouldEmit) {
          doShow(event);
        }
      };
      const hide = (event) => {
        if (props2.disabled === true || !isClient)
          return;
        const shouldEmit = hasUpdateHandler.value && isClient;
        if (shouldEmit) {
          emit(updateEventKey, false);
        }
        if (isModelBindingAbsent.value || !shouldEmit) {
          doHide(event);
        }
      };
      const onChange = (val) => {
        if (!isBoolean$1(val))
          return;
        if (props2.disabled && val) {
          if (hasUpdateHandler.value) {
            emit(updateEventKey, false);
          }
        } else if (indicator.value !== val) {
          if (val) {
            doShow();
          } else {
            doHide();
          }
        }
      };
      const toggle = () => {
        if (indicator.value) {
          hide();
        } else {
          show();
        }
      };
      vue.watch(() => props2[name], onChange);
      if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {
        vue.watch(() => ({
          ...instance.proxy.$route
        }), () => {
          if (shouldHideWhenRouteChanges.value && indicator.value) {
            hide();
          }
        });
      }
      vue.onMounted(() => {
        onChange(props2[name]);
      });
      return {
        hide,
        show,
        toggle,
        hasUpdateHandler
      };
    };
    return {
      useModelToggle: useModelToggle2,
      useModelToggleProps: useModelToggleProps2,
      useModelToggleEmits: useModelToggleEmits2
    };
  };
  createModelToggleComposable("modelValue");
  const useProp = (name) => {
    const vm = vue.getCurrentInstance();
    return vue.computed(() => {
      var _a2, _b;
      return (_b = (_a2 = vm == null ? void 0 : vm.proxy) == null ? void 0 : _a2.$props) == null ? void 0 : _b[name];
    });
  };
  var E$1 = "top", R = "bottom", W = "right", P$1 = "left", me = "auto", G = [E$1, R, W, P$1], U$1 = "start", J = "end", Xe = "clippingParents", je = "viewport", K = "popper", Ye = "reference", De = G.reduce(function(t2, e) {
    return t2.concat([e + "-" + U$1, e + "-" + J]);
  }, []), Ee = [].concat(G, [me]).reduce(function(t2, e) {
    return t2.concat([e, e + "-" + U$1, e + "-" + J]);
  }, []), Ge = "beforeRead", Je = "read", Ke = "afterRead", Qe = "beforeMain", Ze = "main", et = "afterMain", tt = "beforeWrite", nt = "write", rt = "afterWrite", ot = [Ge, Je, Ke, Qe, Ze, et, tt, nt, rt];
  function C(t2) {
    return t2 ? (t2.nodeName || "").toLowerCase() : null;
  }
  function H(t2) {
    if (t2 == null)
      return window;
    if (t2.toString() !== "[object Window]") {
      var e = t2.ownerDocument;
      return e && e.defaultView || window;
    }
    return t2;
  }
  function Q(t2) {
    var e = H(t2).Element;
    return t2 instanceof e || t2 instanceof Element;
  }
  function B(t2) {
    var e = H(t2).HTMLElement;
    return t2 instanceof e || t2 instanceof HTMLElement;
  }
  function Pe(t2) {
    if (typeof ShadowRoot == "undefined")
      return false;
    var e = H(t2).ShadowRoot;
    return t2 instanceof e || t2 instanceof ShadowRoot;
  }
  function Mt(t2) {
    var e = t2.state;
    Object.keys(e.elements).forEach(function(n2) {
      var r2 = e.styles[n2] || {}, o2 = e.attributes[n2] || {}, i2 = e.elements[n2];
      !B(i2) || !C(i2) || (Object.assign(i2.style, r2), Object.keys(o2).forEach(function(a2) {
        var s2 = o2[a2];
        s2 === false ? i2.removeAttribute(a2) : i2.setAttribute(a2, s2 === true ? "" : s2);
      }));
    });
  }
  function Rt(t2) {
    var e = t2.state, n2 = { popper: { position: e.options.strategy, left: "0", top: "0", margin: "0" }, arrow: { position: "absolute" }, reference: {} };
    return Object.assign(e.elements.popper.style, n2.popper), e.styles = n2, e.elements.arrow && Object.assign(e.elements.arrow.style, n2.arrow), function() {
      Object.keys(e.elements).forEach(function(r2) {
        var o2 = e.elements[r2], i2 = e.attributes[r2] || {}, a2 = Object.keys(e.styles.hasOwnProperty(r2) ? e.styles[r2] : n2[r2]), s2 = a2.reduce(function(f2, c2) {
          return f2[c2] = "", f2;
        }, {});
        !B(o2) || !C(o2) || (Object.assign(o2.style, s2), Object.keys(i2).forEach(function(f2) {
          o2.removeAttribute(f2);
        }));
      });
    };
  }
  var Ae = { name: "applyStyles", enabled: true, phase: "write", fn: Mt, effect: Rt, requires: ["computeStyles"] };
  function q(t2) {
    return t2.split("-")[0];
  }
  var X$1 = Math.max, ve = Math.min, Z = Math.round;
  function ee(t2, e) {
    e === void 0 && (e = false);
    var n2 = t2.getBoundingClientRect(), r2 = 1, o2 = 1;
    if (B(t2) && e) {
      var i2 = t2.offsetHeight, a2 = t2.offsetWidth;
      a2 > 0 && (r2 = Z(n2.width) / a2 || 1), i2 > 0 && (o2 = Z(n2.height) / i2 || 1);
    }
    return { width: n2.width / r2, height: n2.height / o2, top: n2.top / o2, right: n2.right / r2, bottom: n2.bottom / o2, left: n2.left / r2, x: n2.left / r2, y: n2.top / o2 };
  }
  function ke(t2) {
    var e = ee(t2), n2 = t2.offsetWidth, r2 = t2.offsetHeight;
    return Math.abs(e.width - n2) <= 1 && (n2 = e.width), Math.abs(e.height - r2) <= 1 && (r2 = e.height), { x: t2.offsetLeft, y: t2.offsetTop, width: n2, height: r2 };
  }
  function it(t2, e) {
    var n2 = e.getRootNode && e.getRootNode();
    if (t2.contains(e))
      return true;
    if (n2 && Pe(n2)) {
      var r2 = e;
      do {
        if (r2 && t2.isSameNode(r2))
          return true;
        r2 = r2.parentNode || r2.host;
      } while (r2);
    }
    return false;
  }
  function N$1(t2) {
    return H(t2).getComputedStyle(t2);
  }
  function Wt(t2) {
    return ["table", "td", "th"].indexOf(C(t2)) >= 0;
  }
  function I$1(t2) {
    return ((Q(t2) ? t2.ownerDocument : t2.document) || window.document).documentElement;
  }
  function ge(t2) {
    return C(t2) === "html" ? t2 : t2.assignedSlot || t2.parentNode || (Pe(t2) ? t2.host : null) || I$1(t2);
  }
  function at(t2) {
    return !B(t2) || N$1(t2).position === "fixed" ? null : t2.offsetParent;
  }
  function Bt(t2) {
    var e = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1, n2 = navigator.userAgent.indexOf("Trident") !== -1;
    if (n2 && B(t2)) {
      var r2 = N$1(t2);
      if (r2.position === "fixed")
        return null;
    }
    var o2 = ge(t2);
    for (Pe(o2) && (o2 = o2.host); B(o2) && ["html", "body"].indexOf(C(o2)) < 0; ) {
      var i2 = N$1(o2);
      if (i2.transform !== "none" || i2.perspective !== "none" || i2.contain === "paint" || ["transform", "perspective"].indexOf(i2.willChange) !== -1 || e && i2.willChange === "filter" || e && i2.filter && i2.filter !== "none")
        return o2;
      o2 = o2.parentNode;
    }
    return null;
  }
  function se(t2) {
    for (var e = H(t2), n2 = at(t2); n2 && Wt(n2) && N$1(n2).position === "static"; )
      n2 = at(n2);
    return n2 && (C(n2) === "html" || C(n2) === "body" && N$1(n2).position === "static") ? e : n2 || Bt(t2) || e;
  }
  function Le(t2) {
    return ["top", "bottom"].indexOf(t2) >= 0 ? "x" : "y";
  }
  function fe(t2, e, n2) {
    return X$1(t2, ve(e, n2));
  }
  function St(t2, e, n2) {
    var r2 = fe(t2, e, n2);
    return r2 > n2 ? n2 : r2;
  }
  function st() {
    return { top: 0, right: 0, bottom: 0, left: 0 };
  }
  function ft(t2) {
    return Object.assign({}, st(), t2);
  }
  function ct(t2, e) {
    return e.reduce(function(n2, r2) {
      return n2[r2] = t2, n2;
    }, {});
  }
  var Tt = function(t2, e) {
    return t2 = typeof t2 == "function" ? t2(Object.assign({}, e.rects, { placement: e.placement })) : t2, ft(typeof t2 != "number" ? t2 : ct(t2, G));
  };
  function Ht(t2) {
    var e, n2 = t2.state, r2 = t2.name, o2 = t2.options, i2 = n2.elements.arrow, a2 = n2.modifiersData.popperOffsets, s2 = q(n2.placement), f2 = Le(s2), c2 = [P$1, W].indexOf(s2) >= 0, u2 = c2 ? "height" : "width";
    if (!(!i2 || !a2)) {
      var m2 = Tt(o2.padding, n2), v2 = ke(i2), l2 = f2 === "y" ? E$1 : P$1, h2 = f2 === "y" ? R : W, p2 = n2.rects.reference[u2] + n2.rects.reference[f2] - a2[f2] - n2.rects.popper[u2], g2 = a2[f2] - n2.rects.reference[f2], x2 = se(i2), y2 = x2 ? f2 === "y" ? x2.clientHeight || 0 : x2.clientWidth || 0 : 0, $2 = p2 / 2 - g2 / 2, d2 = m2[l2], b2 = y2 - v2[u2] - m2[h2], w2 = y2 / 2 - v2[u2] / 2 + $2, O2 = fe(d2, w2, b2), j2 = f2;
      n2.modifiersData[r2] = (e = {}, e[j2] = O2, e.centerOffset = O2 - w2, e);
    }
  }
  function Ct(t2) {
    var e = t2.state, n2 = t2.options, r2 = n2.element, o2 = r2 === void 0 ? "[data-popper-arrow]" : r2;
    o2 != null && (typeof o2 == "string" && (o2 = e.elements.popper.querySelector(o2), !o2) || !it(e.elements.popper, o2) || (e.elements.arrow = o2));
  }
  var pt = { name: "arrow", enabled: true, phase: "main", fn: Ht, effect: Ct, requires: ["popperOffsets"], requiresIfExists: ["preventOverflow"] };
  function te(t2) {
    return t2.split("-")[1];
  }
  var qt = { top: "auto", right: "auto", bottom: "auto", left: "auto" };
  function Vt(t2) {
    var e = t2.x, n2 = t2.y, r2 = window, o2 = r2.devicePixelRatio || 1;
    return { x: Z(e * o2) / o2 || 0, y: Z(n2 * o2) / o2 || 0 };
  }
  function ut(t2) {
    var e, n2 = t2.popper, r2 = t2.popperRect, o2 = t2.placement, i2 = t2.variation, a2 = t2.offsets, s2 = t2.position, f2 = t2.gpuAcceleration, c2 = t2.adaptive, u2 = t2.roundOffsets, m2 = t2.isFixed, v2 = a2.x, l2 = v2 === void 0 ? 0 : v2, h2 = a2.y, p2 = h2 === void 0 ? 0 : h2, g2 = typeof u2 == "function" ? u2({ x: l2, y: p2 }) : { x: l2, y: p2 };
    l2 = g2.x, p2 = g2.y;
    var x2 = a2.hasOwnProperty("x"), y2 = a2.hasOwnProperty("y"), $2 = P$1, d2 = E$1, b2 = window;
    if (c2) {
      var w2 = se(n2), O2 = "clientHeight", j2 = "clientWidth";
      if (w2 === H(n2) && (w2 = I$1(n2), N$1(w2).position !== "static" && s2 === "absolute" && (O2 = "scrollHeight", j2 = "scrollWidth")), w2 = w2, o2 === E$1 || (o2 === P$1 || o2 === W) && i2 === J) {
        d2 = R;
        var A2 = m2 && w2 === b2 && b2.visualViewport ? b2.visualViewport.height : w2[O2];
        p2 -= A2 - r2.height, p2 *= f2 ? 1 : -1;
      }
      if (o2 === P$1 || (o2 === E$1 || o2 === R) && i2 === J) {
        $2 = W;
        var k = m2 && w2 === b2 && b2.visualViewport ? b2.visualViewport.width : w2[j2];
        l2 -= k - r2.width, l2 *= f2 ? 1 : -1;
      }
    }
    var D2 = Object.assign({ position: s2 }, c2 && qt), S2 = u2 === true ? Vt({ x: l2, y: p2 }) : { x: l2, y: p2 };
    if (l2 = S2.x, p2 = S2.y, f2) {
      var L2;
      return Object.assign({}, D2, (L2 = {}, L2[d2] = y2 ? "0" : "", L2[$2] = x2 ? "0" : "", L2.transform = (b2.devicePixelRatio || 1) <= 1 ? "translate(" + l2 + "px, " + p2 + "px)" : "translate3d(" + l2 + "px, " + p2 + "px, 0)", L2));
    }
    return Object.assign({}, D2, (e = {}, e[d2] = y2 ? p2 + "px" : "", e[$2] = x2 ? l2 + "px" : "", e.transform = "", e));
  }
  function Nt(t2) {
    var e = t2.state, n2 = t2.options, r2 = n2.gpuAcceleration, o2 = r2 === void 0 ? true : r2, i2 = n2.adaptive, a2 = i2 === void 0 ? true : i2, s2 = n2.roundOffsets, f2 = s2 === void 0 ? true : s2, c2 = { placement: q(e.placement), variation: te(e.placement), popper: e.elements.popper, popperRect: e.rects.popper, gpuAcceleration: o2, isFixed: e.options.strategy === "fixed" };
    e.modifiersData.popperOffsets != null && (e.styles.popper = Object.assign({}, e.styles.popper, ut(Object.assign({}, c2, { offsets: e.modifiersData.popperOffsets, position: e.options.strategy, adaptive: a2, roundOffsets: f2 })))), e.modifiersData.arrow != null && (e.styles.arrow = Object.assign({}, e.styles.arrow, ut(Object.assign({}, c2, { offsets: e.modifiersData.arrow, position: "absolute", adaptive: false, roundOffsets: f2 })))), e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-placement": e.placement });
  }
  var Me = { name: "computeStyles", enabled: true, phase: "beforeWrite", fn: Nt, data: {} }, ye = { passive: true };
  function It(t2) {
    var e = t2.state, n2 = t2.instance, r2 = t2.options, o2 = r2.scroll, i2 = o2 === void 0 ? true : o2, a2 = r2.resize, s2 = a2 === void 0 ? true : a2, f2 = H(e.elements.popper), c2 = [].concat(e.scrollParents.reference, e.scrollParents.popper);
    return i2 && c2.forEach(function(u2) {
      u2.addEventListener("scroll", n2.update, ye);
    }), s2 && f2.addEventListener("resize", n2.update, ye), function() {
      i2 && c2.forEach(function(u2) {
        u2.removeEventListener("scroll", n2.update, ye);
      }), s2 && f2.removeEventListener("resize", n2.update, ye);
    };
  }
  var Re = { name: "eventListeners", enabled: true, phase: "write", fn: function() {
  }, effect: It, data: {} }, _t = { left: "right", right: "left", bottom: "top", top: "bottom" };
  function be(t2) {
    return t2.replace(/left|right|bottom|top/g, function(e) {
      return _t[e];
    });
  }
  var zt = { start: "end", end: "start" };
  function lt(t2) {
    return t2.replace(/start|end/g, function(e) {
      return zt[e];
    });
  }
  function We(t2) {
    var e = H(t2), n2 = e.pageXOffset, r2 = e.pageYOffset;
    return { scrollLeft: n2, scrollTop: r2 };
  }
  function Be(t2) {
    return ee(I$1(t2)).left + We(t2).scrollLeft;
  }
  function Ft(t2) {
    var e = H(t2), n2 = I$1(t2), r2 = e.visualViewport, o2 = n2.clientWidth, i2 = n2.clientHeight, a2 = 0, s2 = 0;
    return r2 && (o2 = r2.width, i2 = r2.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (a2 = r2.offsetLeft, s2 = r2.offsetTop)), { width: o2, height: i2, x: a2 + Be(t2), y: s2 };
  }
  function Ut(t2) {
    var e, n2 = I$1(t2), r2 = We(t2), o2 = (e = t2.ownerDocument) == null ? void 0 : e.body, i2 = X$1(n2.scrollWidth, n2.clientWidth, o2 ? o2.scrollWidth : 0, o2 ? o2.clientWidth : 0), a2 = X$1(n2.scrollHeight, n2.clientHeight, o2 ? o2.scrollHeight : 0, o2 ? o2.clientHeight : 0), s2 = -r2.scrollLeft + Be(t2), f2 = -r2.scrollTop;
    return N$1(o2 || n2).direction === "rtl" && (s2 += X$1(n2.clientWidth, o2 ? o2.clientWidth : 0) - i2), { width: i2, height: a2, x: s2, y: f2 };
  }
  function Se(t2) {
    var e = N$1(t2), n2 = e.overflow, r2 = e.overflowX, o2 = e.overflowY;
    return /auto|scroll|overlay|hidden/.test(n2 + o2 + r2);
  }
  function dt(t2) {
    return ["html", "body", "#document"].indexOf(C(t2)) >= 0 ? t2.ownerDocument.body : B(t2) && Se(t2) ? t2 : dt(ge(t2));
  }
  function ce(t2, e) {
    var n2;
    e === void 0 && (e = []);
    var r2 = dt(t2), o2 = r2 === ((n2 = t2.ownerDocument) == null ? void 0 : n2.body), i2 = H(r2), a2 = o2 ? [i2].concat(i2.visualViewport || [], Se(r2) ? r2 : []) : r2, s2 = e.concat(a2);
    return o2 ? s2 : s2.concat(ce(ge(a2)));
  }
  function Te(t2) {
    return Object.assign({}, t2, { left: t2.x, top: t2.y, right: t2.x + t2.width, bottom: t2.y + t2.height });
  }
  function Xt(t2) {
    var e = ee(t2);
    return e.top = e.top + t2.clientTop, e.left = e.left + t2.clientLeft, e.bottom = e.top + t2.clientHeight, e.right = e.left + t2.clientWidth, e.width = t2.clientWidth, e.height = t2.clientHeight, e.x = e.left, e.y = e.top, e;
  }
  function ht(t2, e) {
    return e === je ? Te(Ft(t2)) : Q(e) ? Xt(e) : Te(Ut(I$1(t2)));
  }
  function Yt(t2) {
    var e = ce(ge(t2)), n2 = ["absolute", "fixed"].indexOf(N$1(t2).position) >= 0, r2 = n2 && B(t2) ? se(t2) : t2;
    return Q(r2) ? e.filter(function(o2) {
      return Q(o2) && it(o2, r2) && C(o2) !== "body";
    }) : [];
  }
  function Gt(t2, e, n2) {
    var r2 = e === "clippingParents" ? Yt(t2) : [].concat(e), o2 = [].concat(r2, [n2]), i2 = o2[0], a2 = o2.reduce(function(s2, f2) {
      var c2 = ht(t2, f2);
      return s2.top = X$1(c2.top, s2.top), s2.right = ve(c2.right, s2.right), s2.bottom = ve(c2.bottom, s2.bottom), s2.left = X$1(c2.left, s2.left), s2;
    }, ht(t2, i2));
    return a2.width = a2.right - a2.left, a2.height = a2.bottom - a2.top, a2.x = a2.left, a2.y = a2.top, a2;
  }
  function mt(t2) {
    var e = t2.reference, n2 = t2.element, r2 = t2.placement, o2 = r2 ? q(r2) : null, i2 = r2 ? te(r2) : null, a2 = e.x + e.width / 2 - n2.width / 2, s2 = e.y + e.height / 2 - n2.height / 2, f2;
    switch (o2) {
      case E$1:
        f2 = { x: a2, y: e.y - n2.height };
        break;
      case R:
        f2 = { x: a2, y: e.y + e.height };
        break;
      case W:
        f2 = { x: e.x + e.width, y: s2 };
        break;
      case P$1:
        f2 = { x: e.x - n2.width, y: s2 };
        break;
      default:
        f2 = { x: e.x, y: e.y };
    }
    var c2 = o2 ? Le(o2) : null;
    if (c2 != null) {
      var u2 = c2 === "y" ? "height" : "width";
      switch (i2) {
        case U$1:
          f2[c2] = f2[c2] - (e[u2] / 2 - n2[u2] / 2);
          break;
        case J:
          f2[c2] = f2[c2] + (e[u2] / 2 - n2[u2] / 2);
          break;
      }
    }
    return f2;
  }
  function ne(t2, e) {
    e === void 0 && (e = {});
    var n2 = e, r2 = n2.placement, o2 = r2 === void 0 ? t2.placement : r2, i2 = n2.boundary, a2 = i2 === void 0 ? Xe : i2, s2 = n2.rootBoundary, f2 = s2 === void 0 ? je : s2, c2 = n2.elementContext, u2 = c2 === void 0 ? K : c2, m2 = n2.altBoundary, v2 = m2 === void 0 ? false : m2, l2 = n2.padding, h2 = l2 === void 0 ? 0 : l2, p2 = ft(typeof h2 != "number" ? h2 : ct(h2, G)), g2 = u2 === K ? Ye : K, x2 = t2.rects.popper, y2 = t2.elements[v2 ? g2 : u2], $2 = Gt(Q(y2) ? y2 : y2.contextElement || I$1(t2.elements.popper), a2, f2), d2 = ee(t2.elements.reference), b2 = mt({ reference: d2, element: x2, strategy: "absolute", placement: o2 }), w2 = Te(Object.assign({}, x2, b2)), O2 = u2 === K ? w2 : d2, j2 = { top: $2.top - O2.top + p2.top, bottom: O2.bottom - $2.bottom + p2.bottom, left: $2.left - O2.left + p2.left, right: O2.right - $2.right + p2.right }, A2 = t2.modifiersData.offset;
    if (u2 === K && A2) {
      var k = A2[o2];
      Object.keys(j2).forEach(function(D2) {
        var S2 = [W, R].indexOf(D2) >= 0 ? 1 : -1, L2 = [E$1, R].indexOf(D2) >= 0 ? "y" : "x";
        j2[D2] += k[L2] * S2;
      });
    }
    return j2;
  }
  function Jt(t2, e) {
    e === void 0 && (e = {});
    var n2 = e, r2 = n2.placement, o2 = n2.boundary, i2 = n2.rootBoundary, a2 = n2.padding, s2 = n2.flipVariations, f2 = n2.allowedAutoPlacements, c2 = f2 === void 0 ? Ee : f2, u2 = te(r2), m2 = u2 ? s2 ? De : De.filter(function(h2) {
      return te(h2) === u2;
    }) : G, v2 = m2.filter(function(h2) {
      return c2.indexOf(h2) >= 0;
    });
    v2.length === 0 && (v2 = m2);
    var l2 = v2.reduce(function(h2, p2) {
      return h2[p2] = ne(t2, { placement: p2, boundary: o2, rootBoundary: i2, padding: a2 })[q(p2)], h2;
    }, {});
    return Object.keys(l2).sort(function(h2, p2) {
      return l2[h2] - l2[p2];
    });
  }
  function Kt(t2) {
    if (q(t2) === me)
      return [];
    var e = be(t2);
    return [lt(t2), e, lt(e)];
  }
  function Qt(t2) {
    var e = t2.state, n2 = t2.options, r2 = t2.name;
    if (!e.modifiersData[r2]._skip) {
      for (var o2 = n2.mainAxis, i2 = o2 === void 0 ? true : o2, a2 = n2.altAxis, s2 = a2 === void 0 ? true : a2, f2 = n2.fallbackPlacements, c2 = n2.padding, u2 = n2.boundary, m2 = n2.rootBoundary, v2 = n2.altBoundary, l2 = n2.flipVariations, h2 = l2 === void 0 ? true : l2, p2 = n2.allowedAutoPlacements, g2 = e.options.placement, x2 = q(g2), y2 = x2 === g2, $2 = f2 || (y2 || !h2 ? [be(g2)] : Kt(g2)), d2 = [g2].concat($2).reduce(function(z2, V2) {
        return z2.concat(q(V2) === me ? Jt(e, { placement: V2, boundary: u2, rootBoundary: m2, padding: c2, flipVariations: h2, allowedAutoPlacements: p2 }) : V2);
      }, []), b2 = e.rects.reference, w2 = e.rects.popper, O2 = /* @__PURE__ */ new Map(), j2 = true, A2 = d2[0], k = 0; k < d2.length; k++) {
        var D2 = d2[k], S2 = q(D2), L2 = te(D2) === U$1, re2 = [E$1, R].indexOf(S2) >= 0, oe2 = re2 ? "width" : "height", M2 = ne(e, { placement: D2, boundary: u2, rootBoundary: m2, altBoundary: v2, padding: c2 }), T2 = re2 ? L2 ? W : P$1 : L2 ? R : E$1;
        b2[oe2] > w2[oe2] && (T2 = be(T2));
        var pe2 = be(T2), _2 = [];
        if (i2 && _2.push(M2[S2] <= 0), s2 && _2.push(M2[T2] <= 0, M2[pe2] <= 0), _2.every(function(z2) {
          return z2;
        })) {
          A2 = D2, j2 = false;
          break;
        }
        O2.set(D2, _2);
      }
      if (j2)
        for (var ue2 = h2 ? 3 : 1, xe2 = function(z2) {
          var V2 = d2.find(function(de2) {
            var ae2 = O2.get(de2);
            if (ae2)
              return ae2.slice(0, z2).every(function(Y2) {
                return Y2;
              });
          });
          if (V2)
            return A2 = V2, "break";
        }, ie2 = ue2; ie2 > 0; ie2--) {
          var le2 = xe2(ie2);
          if (le2 === "break")
            break;
        }
      e.placement !== A2 && (e.modifiersData[r2]._skip = true, e.placement = A2, e.reset = true);
    }
  }
  var vt = { name: "flip", enabled: true, phase: "main", fn: Qt, requiresIfExists: ["offset"], data: { _skip: false } };
  function gt(t2, e, n2) {
    return n2 === void 0 && (n2 = { x: 0, y: 0 }), { top: t2.top - e.height - n2.y, right: t2.right - e.width + n2.x, bottom: t2.bottom - e.height + n2.y, left: t2.left - e.width - n2.x };
  }
  function yt(t2) {
    return [E$1, W, R, P$1].some(function(e) {
      return t2[e] >= 0;
    });
  }
  function Zt(t2) {
    var e = t2.state, n2 = t2.name, r2 = e.rects.reference, o2 = e.rects.popper, i2 = e.modifiersData.preventOverflow, a2 = ne(e, { elementContext: "reference" }), s2 = ne(e, { altBoundary: true }), f2 = gt(a2, r2), c2 = gt(s2, o2, i2), u2 = yt(f2), m2 = yt(c2);
    e.modifiersData[n2] = { referenceClippingOffsets: f2, popperEscapeOffsets: c2, isReferenceHidden: u2, hasPopperEscaped: m2 }, e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-reference-hidden": u2, "data-popper-escaped": m2 });
  }
  var bt = { name: "hide", enabled: true, phase: "main", requiresIfExists: ["preventOverflow"], fn: Zt };
  function en(t2, e, n2) {
    var r2 = q(t2), o2 = [P$1, E$1].indexOf(r2) >= 0 ? -1 : 1, i2 = typeof n2 == "function" ? n2(Object.assign({}, e, { placement: t2 })) : n2, a2 = i2[0], s2 = i2[1];
    return a2 = a2 || 0, s2 = (s2 || 0) * o2, [P$1, W].indexOf(r2) >= 0 ? { x: s2, y: a2 } : { x: a2, y: s2 };
  }
  function tn(t2) {
    var e = t2.state, n2 = t2.options, r2 = t2.name, o2 = n2.offset, i2 = o2 === void 0 ? [0, 0] : o2, a2 = Ee.reduce(function(u2, m2) {
      return u2[m2] = en(m2, e.rects, i2), u2;
    }, {}), s2 = a2[e.placement], f2 = s2.x, c2 = s2.y;
    e.modifiersData.popperOffsets != null && (e.modifiersData.popperOffsets.x += f2, e.modifiersData.popperOffsets.y += c2), e.modifiersData[r2] = a2;
  }
  var wt = { name: "offset", enabled: true, phase: "main", requires: ["popperOffsets"], fn: tn };
  function nn(t2) {
    var e = t2.state, n2 = t2.name;
    e.modifiersData[n2] = mt({ reference: e.rects.reference, element: e.rects.popper, strategy: "absolute", placement: e.placement });
  }
  var He = { name: "popperOffsets", enabled: true, phase: "read", fn: nn, data: {} };
  function rn(t2) {
    return t2 === "x" ? "y" : "x";
  }
  function on(t2) {
    var e = t2.state, n2 = t2.options, r2 = t2.name, o2 = n2.mainAxis, i2 = o2 === void 0 ? true : o2, a2 = n2.altAxis, s2 = a2 === void 0 ? false : a2, f2 = n2.boundary, c2 = n2.rootBoundary, u2 = n2.altBoundary, m2 = n2.padding, v2 = n2.tether, l2 = v2 === void 0 ? true : v2, h2 = n2.tetherOffset, p2 = h2 === void 0 ? 0 : h2, g2 = ne(e, { boundary: f2, rootBoundary: c2, padding: m2, altBoundary: u2 }), x2 = q(e.placement), y2 = te(e.placement), $2 = !y2, d2 = Le(x2), b2 = rn(d2), w2 = e.modifiersData.popperOffsets, O2 = e.rects.reference, j2 = e.rects.popper, A2 = typeof p2 == "function" ? p2(Object.assign({}, e.rects, { placement: e.placement })) : p2, k = typeof A2 == "number" ? { mainAxis: A2, altAxis: A2 } : Object.assign({ mainAxis: 0, altAxis: 0 }, A2), D2 = e.modifiersData.offset ? e.modifiersData.offset[e.placement] : null, S2 = { x: 0, y: 0 };
    if (w2) {
      if (i2) {
        var L2, re2 = d2 === "y" ? E$1 : P$1, oe2 = d2 === "y" ? R : W, M2 = d2 === "y" ? "height" : "width", T2 = w2[d2], pe2 = T2 + g2[re2], _2 = T2 - g2[oe2], ue2 = l2 ? -j2[M2] / 2 : 0, xe2 = y2 === U$1 ? O2[M2] : j2[M2], ie2 = y2 === U$1 ? -j2[M2] : -O2[M2], le2 = e.elements.arrow, z2 = l2 && le2 ? ke(le2) : { width: 0, height: 0 }, V2 = e.modifiersData["arrow#persistent"] ? e.modifiersData["arrow#persistent"].padding : st(), de2 = V2[re2], ae2 = V2[oe2], Y2 = fe(0, O2[M2], z2[M2]), jt2 = $2 ? O2[M2] / 2 - ue2 - Y2 - de2 - k.mainAxis : xe2 - Y2 - de2 - k.mainAxis, Dt2 = $2 ? -O2[M2] / 2 + ue2 + Y2 + ae2 + k.mainAxis : ie2 + Y2 + ae2 + k.mainAxis, Oe2 = e.elements.arrow && se(e.elements.arrow), Et2 = Oe2 ? d2 === "y" ? Oe2.clientTop || 0 : Oe2.clientLeft || 0 : 0, Ce2 = (L2 = D2 == null ? void 0 : D2[d2]) != null ? L2 : 0, Pt2 = T2 + jt2 - Ce2 - Et2, At2 = T2 + Dt2 - Ce2, qe2 = fe(l2 ? ve(pe2, Pt2) : pe2, T2, l2 ? X$1(_2, At2) : _2);
        w2[d2] = qe2, S2[d2] = qe2 - T2;
      }
      if (s2) {
        var Ve2, kt2 = d2 === "x" ? E$1 : P$1, Lt2 = d2 === "x" ? R : W, F2 = w2[b2], he2 = b2 === "y" ? "height" : "width", Ne2 = F2 + g2[kt2], Ie2 = F2 - g2[Lt2], $e2 = [E$1, P$1].indexOf(x2) !== -1, _e2 = (Ve2 = D2 == null ? void 0 : D2[b2]) != null ? Ve2 : 0, ze2 = $e2 ? Ne2 : F2 - O2[he2] - j2[he2] - _e2 + k.altAxis, Fe2 = $e2 ? F2 + O2[he2] + j2[he2] - _e2 - k.altAxis : Ie2, Ue2 = l2 && $e2 ? St(ze2, F2, Fe2) : fe(l2 ? ze2 : Ne2, F2, l2 ? Fe2 : Ie2);
        w2[b2] = Ue2, S2[b2] = Ue2 - F2;
      }
      e.modifiersData[r2] = S2;
    }
  }
  var xt = { name: "preventOverflow", enabled: true, phase: "main", fn: on, requiresIfExists: ["offset"] };
  function an(t2) {
    return { scrollLeft: t2.scrollLeft, scrollTop: t2.scrollTop };
  }
  function sn(t2) {
    return t2 === H(t2) || !B(t2) ? We(t2) : an(t2);
  }
  function fn(t2) {
    var e = t2.getBoundingClientRect(), n2 = Z(e.width) / t2.offsetWidth || 1, r2 = Z(e.height) / t2.offsetHeight || 1;
    return n2 !== 1 || r2 !== 1;
  }
  function cn(t2, e, n2) {
    n2 === void 0 && (n2 = false);
    var r2 = B(e), o2 = B(e) && fn(e), i2 = I$1(e), a2 = ee(t2, o2), s2 = { scrollLeft: 0, scrollTop: 0 }, f2 = { x: 0, y: 0 };
    return (r2 || !r2 && !n2) && ((C(e) !== "body" || Se(i2)) && (s2 = sn(e)), B(e) ? (f2 = ee(e, true), f2.x += e.clientLeft, f2.y += e.clientTop) : i2 && (f2.x = Be(i2))), { x: a2.left + s2.scrollLeft - f2.x, y: a2.top + s2.scrollTop - f2.y, width: a2.width, height: a2.height };
  }
  function pn(t2) {
    var e = /* @__PURE__ */ new Map(), n2 = /* @__PURE__ */ new Set(), r2 = [];
    t2.forEach(function(i2) {
      e.set(i2.name, i2);
    });
    function o2(i2) {
      n2.add(i2.name);
      var a2 = [].concat(i2.requires || [], i2.requiresIfExists || []);
      a2.forEach(function(s2) {
        if (!n2.has(s2)) {
          var f2 = e.get(s2);
          f2 && o2(f2);
        }
      }), r2.push(i2);
    }
    return t2.forEach(function(i2) {
      n2.has(i2.name) || o2(i2);
    }), r2;
  }
  function un(t2) {
    var e = pn(t2);
    return ot.reduce(function(n2, r2) {
      return n2.concat(e.filter(function(o2) {
        return o2.phase === r2;
      }));
    }, []);
  }
  function ln(t2) {
    var e;
    return function() {
      return e || (e = new Promise(function(n2) {
        Promise.resolve().then(function() {
          e = void 0, n2(t2());
        });
      })), e;
    };
  }
  function dn(t2) {
    var e = t2.reduce(function(n2, r2) {
      var o2 = n2[r2.name];
      return n2[r2.name] = o2 ? Object.assign({}, o2, r2, { options: Object.assign({}, o2.options, r2.options), data: Object.assign({}, o2.data, r2.data) }) : r2, n2;
    }, {});
    return Object.keys(e).map(function(n2) {
      return e[n2];
    });
  }
  var Ot = { placement: "bottom", modifiers: [], strategy: "absolute" };
  function $t() {
    for (var t2 = arguments.length, e = new Array(t2), n2 = 0; n2 < t2; n2++)
      e[n2] = arguments[n2];
    return !e.some(function(r2) {
      return !(r2 && typeof r2.getBoundingClientRect == "function");
    });
  }
  function we(t2) {
    t2 === void 0 && (t2 = {});
    var e = t2, n2 = e.defaultModifiers, r2 = n2 === void 0 ? [] : n2, o2 = e.defaultOptions, i2 = o2 === void 0 ? Ot : o2;
    return function(a2, s2, f2) {
      f2 === void 0 && (f2 = i2);
      var c2 = { placement: "bottom", orderedModifiers: [], options: Object.assign({}, Ot, i2), modifiersData: {}, elements: { reference: a2, popper: s2 }, attributes: {}, styles: {} }, u2 = [], m2 = false, v2 = { state: c2, setOptions: function(p2) {
        var g2 = typeof p2 == "function" ? p2(c2.options) : p2;
        h2(), c2.options = Object.assign({}, i2, c2.options, g2), c2.scrollParents = { reference: Q(a2) ? ce(a2) : a2.contextElement ? ce(a2.contextElement) : [], popper: ce(s2) };
        var x2 = un(dn([].concat(r2, c2.options.modifiers)));
        return c2.orderedModifiers = x2.filter(function(y2) {
          return y2.enabled;
        }), l2(), v2.update();
      }, forceUpdate: function() {
        if (!m2) {
          var p2 = c2.elements, g2 = p2.reference, x2 = p2.popper;
          if ($t(g2, x2)) {
            c2.rects = { reference: cn(g2, se(x2), c2.options.strategy === "fixed"), popper: ke(x2) }, c2.reset = false, c2.placement = c2.options.placement, c2.orderedModifiers.forEach(function(j2) {
              return c2.modifiersData[j2.name] = Object.assign({}, j2.data);
            });
            for (var y2 = 0; y2 < c2.orderedModifiers.length; y2++) {
              if (c2.reset === true) {
                c2.reset = false, y2 = -1;
                continue;
              }
              var $2 = c2.orderedModifiers[y2], d2 = $2.fn, b2 = $2.options, w2 = b2 === void 0 ? {} : b2, O2 = $2.name;
              typeof d2 == "function" && (c2 = d2({ state: c2, options: w2, name: O2, instance: v2 }) || c2);
            }
          }
        }
      }, update: ln(function() {
        return new Promise(function(p2) {
          v2.forceUpdate(), p2(c2);
        });
      }), destroy: function() {
        h2(), m2 = true;
      } };
      if (!$t(a2, s2))
        return v2;
      v2.setOptions(f2).then(function(p2) {
        !m2 && f2.onFirstUpdate && f2.onFirstUpdate(p2);
      });
      function l2() {
        c2.orderedModifiers.forEach(function(p2) {
          var g2 = p2.name, x2 = p2.options, y2 = x2 === void 0 ? {} : x2, $2 = p2.effect;
          if (typeof $2 == "function") {
            var d2 = $2({ state: c2, name: g2, instance: v2, options: y2 }), b2 = function() {
            };
            u2.push(d2 || b2);
          }
        });
      }
      function h2() {
        u2.forEach(function(p2) {
          return p2();
        }), u2 = [];
      }
      return v2;
    };
  }
  we();
  var mn = [Re, He, Me, Ae];
  we({ defaultModifiers: mn });
  var gn = [Re, He, Me, Ae, wt, vt, xt, pt, bt], yn = we({ defaultModifiers: gn });
  const usePopper = (referenceElementRef, popperElementRef, opts = {}) => {
    const stateUpdater = {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: ({ state: state2 }) => {
        const derivedState = deriveState(state2);
        Object.assign(states.value, derivedState);
      },
      requires: ["computeStyles"]
    };
    const options = vue.computed(() => {
      const { onFirstUpdate, placement, strategy, modifiers } = vue.unref(opts);
      return {
        onFirstUpdate,
        placement: placement || "bottom",
        strategy: strategy || "absolute",
        modifiers: [
          ...modifiers || [],
          stateUpdater,
          { name: "applyStyles", enabled: false }
        ]
      };
    });
    const instanceRef = vue.shallowRef();
    const states = vue.ref({
      styles: {
        popper: {
          position: vue.unref(options).strategy,
          left: "0",
          top: "0"
        },
        arrow: {
          position: "absolute"
        }
      },
      attributes: {}
    });
    const destroy = () => {
      if (!instanceRef.value)
        return;
      instanceRef.value.destroy();
      instanceRef.value = void 0;
    };
    vue.watch(options, (newOptions) => {
      const instance = vue.unref(instanceRef);
      if (instance) {
        instance.setOptions(newOptions);
      }
    }, {
      deep: true
    });
    vue.watch([referenceElementRef, popperElementRef], ([referenceElement, popperElement]) => {
      destroy();
      if (!referenceElement || !popperElement)
        return;
      instanceRef.value = yn(referenceElement, popperElement, vue.unref(options));
    });
    vue.onBeforeUnmount(() => {
      destroy();
    });
    return {
      state: vue.computed(() => {
        var _a2;
        return { ...((_a2 = vue.unref(instanceRef)) == null ? void 0 : _a2.state) || {} };
      }),
      styles: vue.computed(() => vue.unref(states).styles),
      attributes: vue.computed(() => vue.unref(states).attributes),
      update: () => {
        var _a2;
        return (_a2 = vue.unref(instanceRef)) == null ? void 0 : _a2.update();
      },
      forceUpdate: () => {
        var _a2;
        return (_a2 = vue.unref(instanceRef)) == null ? void 0 : _a2.forceUpdate();
      },
      instanceRef: vue.computed(() => vue.unref(instanceRef))
    };
  };
  function deriveState(state2) {
    const elements = Object.keys(state2.elements);
    const styles = fromPairs(elements.map((element) => [element, state2.styles[element] || {}]));
    const attributes2 = fromPairs(elements.map((element) => [element, state2.attributes[element]]));
    return {
      styles,
      attributes: attributes2
    };
  }
  const useSameTarget = (handleClick) => {
    if (!handleClick) {
      return { onClick: shared.NOOP, onMousedown: shared.NOOP, onMouseup: shared.NOOP };
    }
    let mousedownTarget = false;
    let mouseupTarget = false;
    const onClick = (e) => {
      if (mousedownTarget && mouseupTarget) {
        handleClick(e);
      }
      mousedownTarget = mouseupTarget = false;
    };
    const onMousedown = (e) => {
      mousedownTarget = e.target === e.currentTarget;
    };
    const onMouseup = (e) => {
      mouseupTarget = e.target === e.currentTarget;
    };
    return { onClick, onMousedown, onMouseup };
  };
  const useThrottleRender = (loading, throttle2 = 0) => {
    if (throttle2 === 0)
      return loading;
    const throttled = vue.ref(false);
    let timeoutHandle = null;
    const dispatchThrottling = () => {
      if (timeoutHandle) {
        clearTimeout(timeoutHandle);
      }
      timeoutHandle = setTimeout(() => {
        throttled.value = loading.value;
      }, throttle2);
    };
    vue.onMounted(dispatchThrottling);
    vue.watch(() => loading.value, (val) => {
      if (val) {
        dispatchThrottling();
      } else {
        throttled.value = val;
      }
    });
    return throttled;
  };
  function useTimeout() {
    let timeoutHandle;
    const registerTimeout = (fn2, delay) => {
      cancelTimeout();
      timeoutHandle = window.setTimeout(fn2, delay);
    };
    const cancelTimeout = () => window.clearTimeout(timeoutHandle);
    tryOnScopeDispose(() => cancelTimeout());
    return {
      registerTimeout,
      cancelTimeout
    };
  }
  const defaultIdInjection = {
    prefix: Math.floor(Math.random() * 1e4),
    current: 0
  };
  const ID_INJECTION_KEY = Symbol("elIdInjection");
  const useIdInjection = () => {
    return vue.getCurrentInstance() ? vue.inject(ID_INJECTION_KEY, defaultIdInjection) : defaultIdInjection;
  };
  const useId = (deterministicId) => {
    const idInjection = useIdInjection();
    if (!isClient && idInjection === defaultIdInjection) {
      debugWarn("IdInjection", `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed
usage: app.provide(ID_INJECTION_KEY, {
  prefix: number,
  current: number,
})`);
    }
    const namespace = useGetDerivedNamespace();
    const idRef = vue.computed(() => vue.unref(deterministicId) || `${namespace.value}-id-${idInjection.prefix}-${idInjection.current++}`);
    return idRef;
  };
  let registeredEscapeHandlers = [];
  const cachedHandler = (e) => {
    const event = e;
    if (event.key === EVENT_CODE.esc) {
      registeredEscapeHandlers.forEach((registeredHandler) => registeredHandler(event));
    }
  };
  const useEscapeKeydown = (handler) => {
    vue.onMounted(() => {
      if (registeredEscapeHandlers.length === 0) {
        document.addEventListener("keydown", cachedHandler);
      }
      if (isClient)
        registeredEscapeHandlers.push(handler);
    });
    vue.onBeforeUnmount(() => {
      registeredEscapeHandlers = registeredEscapeHandlers.filter((registeredHandler) => registeredHandler !== handler);
      if (registeredEscapeHandlers.length === 0) {
        if (isClient)
          document.removeEventListener("keydown", cachedHandler);
      }
    });
  };
  const usePopperContainerId = () => {
    const namespace = useGetDerivedNamespace();
    const idInjection = useIdInjection();
    const id = vue.computed(() => {
      return `${namespace.value}-popper-container-${idInjection.prefix}`;
    });
    const selector = vue.computed(() => `#${id.value}`);
    return {
      id,
      selector
    };
  };
  const createContainer = (id) => {
    const container = document.createElement("div");
    container.id = id;
    document.body.appendChild(container);
    return container;
  };
  const usePopperContainer = () => {
    const { id, selector } = usePopperContainerId();
    vue.onBeforeMount(() => {
      if (!isClient)
        return;
      if (!document.body.querySelector(selector.value)) {
        createContainer(id.value);
      }
    });
    return {
      id,
      selector
    };
  };
  const useDelayedToggleProps = buildProps({
    showAfter: {
      type: Number,
      default: 0
    },
    hideAfter: {
      type: Number,
      default: 200
    },
    autoClose: {
      type: Number,
      default: 0
    }
  });
  const useDelayedToggle = ({
    showAfter,
    hideAfter,
    autoClose,
    open,
    close: close2
  }) => {
    const { registerTimeout } = useTimeout();
    const {
      registerTimeout: registerTimeoutForAutoClose,
      cancelTimeout: cancelTimeoutForAutoClose
    } = useTimeout();
    const onOpen = (event) => {
      registerTimeout(() => {
        open(event);
        const _autoClose = vue.unref(autoClose);
        if (isNumber$2(_autoClose) && _autoClose > 0) {
          registerTimeoutForAutoClose(() => {
            close2(event);
          }, _autoClose);
        }
      }, vue.unref(showAfter));
    };
    const onClose = (event) => {
      cancelTimeoutForAutoClose();
      registerTimeout(() => {
        close2(event);
      }, vue.unref(hideAfter));
    };
    return {
      onOpen,
      onClose
    };
  };
  const FORWARD_REF_INJECTION_KEY = Symbol("elForwardRef");
  const useForwardRef = (forwardRef) => {
    const setForwardRef = (el) => {
      forwardRef.value = el;
    };
    vue.provide(FORWARD_REF_INJECTION_KEY, {
      setForwardRef
    });
  };
  const useForwardRefDirective = (setForwardRef) => {
    return {
      mounted(el) {
        setForwardRef(el);
      },
      updated(el) {
        setForwardRef(el);
      },
      unmounted() {
        setForwardRef(null);
      }
    };
  };
  const initial = {
    current: 0
  };
  const zIndex = vue.ref(0);
  const defaultInitialZIndex = 2e3;
  const ZINDEX_INJECTION_KEY = Symbol("elZIndexContextKey");
  const zIndexContextKey = Symbol("zIndexContextKey");
  const useZIndex = (zIndexOverrides) => {
    const increasingInjection = vue.getCurrentInstance() ? vue.inject(ZINDEX_INJECTION_KEY, initial) : initial;
    const zIndexInjection = zIndexOverrides || (vue.getCurrentInstance() ? vue.inject(zIndexContextKey, void 0) : void 0);
    const initialZIndex = vue.computed(() => {
      const zIndexFromInjection = vue.unref(zIndexInjection);
      return isNumber$2(zIndexFromInjection) ? zIndexFromInjection : defaultInitialZIndex;
    });
    const currentZIndex = vue.computed(() => initialZIndex.value + zIndex.value);
    const nextZIndex = () => {
      increasingInjection.current++;
      zIndex.value = increasingInjection.current;
      return currentZIndex.value;
    };
    if (!isClient && !vue.inject(ZINDEX_INJECTION_KEY)) {
      debugWarn("ZIndexInjection", `Looks like you are using server rendering, you must provide a z-index provider to ensure the hydration process to be succeed
usage: app.provide(ZINDEX_INJECTION_KEY, { current: 0 })`);
    }
    return {
      initialZIndex,
      currentZIndex,
      nextZIndex
    };
  };
  const min$1 = Math.min;
  const max$2 = Math.max;
  const round = Math.round;
  const floor$1 = Math.floor;
  const createCoords = (v2) => ({
    x: v2,
    y: v2
  });
  const oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  const oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function clamp(start, value, end2) {
    return max$2(start, min$1(value, end2));
  }
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  function getSideAxis(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length] > rects.floating[length]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  function getSideList(side, isStart, rtl) {
    const lr = ["left", "right"];
    const rl = ["right", "left"];
    const tb = ["top", "bottom"];
    const bt2 = ["bottom", "top"];
    switch (side) {
      case "top":
      case "bottom":
        if (rtl)
          return isStart ? rl : lr;
        return isStart ? lr : rl;
      case "left":
      case "right":
        return isStart ? tb : bt2;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction2, rtl) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction2 === "start", rtl);
    if (alignment) {
      list = list.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list = list.concat(list.map(getOppositeAlignmentPlacement));
      }
    }
    return list;
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  function expandPaddingObject(padding) {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding
    };
  }
  function getPaddingObject(padding) {
    return typeof padding !== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  function rectToClientRect(rect) {
    const {
      x: x2,
      y: y2,
      width,
      height
    } = rect;
    return {
      width,
      height,
      top: y2,
      left: x2,
      right: x2 + width,
      bottom: y2 + height,
      x: x2,
      y: y2
    };
  }
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  const computePosition$1 = async (reference, floating, config) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2
    } = config;
    const validMiddleware = middleware.filter(Boolean);
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x: x2,
      y: y2
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i2 = 0; i2 < validMiddleware.length; i2++) {
      const {
        name,
        fn: fn2
      } = validMiddleware[i2];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = await fn2({
        x: x2,
        y: y2,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x2 = nextX != null ? nextX : x2;
      y2 = nextY != null ? nextY : y2;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data
        }
      };
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x: x2,
            y: y2
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i2 = -1;
      }
    }
    return {
      x: x2,
      y: y2,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  async function detectOverflow$1(state2, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x: x2,
      y: y2,
      platform: platform2,
      rects,
      elements,
      strategy
    } = state2;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding = 0
    } = evaluate(options, state2);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
      element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? {
      x: x2,
      y: y2,
      width: rects.floating.width,
      height: rects.floating.height
    } : rects.reference;
    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      elements,
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }
  const arrow$1 = (options) => ({
    name: "arrow",
    options,
    async fn(state2) {
      const {
        x: x2,
        y: y2,
        placement,
        rects,
        platform: platform2,
        elements,
        middlewareData
      } = state2;
      const {
        element,
        padding = 0
      } = evaluate(options, state2) || {};
      if (element == null) {
        return {};
      }
      const paddingObject = getPaddingObject(padding);
      const coords = {
        x: x2,
        y: y2
      };
      const axis = getAlignmentAxis(placement);
      const length = getAxisLength(axis);
      const arrowDimensions = await platform2.getDimensions(element);
      const isYAxis = axis === "y";
      const minProp = isYAxis ? "top" : "left";
      const maxProp = isYAxis ? "bottom" : "right";
      const clientProp = isYAxis ? "clientHeight" : "clientWidth";
      const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
      if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
        clientSize = elements.floating[clientProp] || rects.floating[length];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;
      const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
      const minPadding = min$1(paddingObject[minProp], largestPossiblePadding);
      const maxPadding = min$1(paddingObject[maxProp], largestPossiblePadding);
      const min$1$1 = minPadding;
      const max2 = clientSize - arrowDimensions[length] - maxPadding;
      const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
      const offset2 = clamp(min$1$1, center, max2);
      const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset2 && rects.reference[length] / 2 - (center < min$1$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min$1$1 ? center - min$1$1 : center - max2 : 0;
      return {
        [axis]: coords[axis] + alignmentOffset,
        data: {
          [axis]: offset2,
          centerOffset: center - offset2 - alignmentOffset,
          ...shouldAddOffset && {
            alignmentOffset
          }
        },
        reset: shouldAddOffset
      };
    }
  });
  const flip$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      async fn(state2) {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements
        } = state2;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true,
          ...detectOverflowOptions
        } = evaluate(options, state2);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const initialSideAxis = getSideAxis(initialPlacement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
        if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow$1(state2, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const sides = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[sides[0]], overflow[sides[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements[nextIndex];
          if (nextPlacement) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d2) => d2.overflows[0] <= 0).sort((a2, b2) => a2.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$filter2;
                const placement2 = (_overflowsData$filter2 = overflowsData.filter((d2) => {
                  if (hasFallbackAxisSideDirection) {
                    const currentSideAxis = getSideAxis(d2.placement);
                    return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                    // reading directions favoring greater width.
                    currentSideAxis === "y";
                  }
                  return true;
                }).map((d2) => [d2.placement, d2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b2) => a2[1] - b2[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  };
  async function convertValueToCoords(state2, options) {
    const {
      placement,
      platform: platform2,
      elements
    } = state2;
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state2);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: rawValue.mainAxis || 0,
      crossAxis: rawValue.crossAxis || 0,
      alignmentAxis: rawValue.alignmentAxis
    };
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  const offset$1 = function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      async fn(state2) {
        var _middlewareData$offse, _middlewareData$arrow;
        const {
          x: x2,
          y: y2,
          placement,
          middlewareData
        } = state2;
        const diffCoords = await convertValueToCoords(state2, options);
        if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        return {
          x: x2 + diffCoords.x,
          y: y2 + diffCoords.y,
          data: {
            ...diffCoords,
            placement
          }
        };
      }
    };
  };
  const shift$1 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "shift",
      options,
      async fn(state2) {
        const {
          x: x2,
          y: y2,
          placement
        } = state2;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = false,
          limiter = {
            fn: (_ref) => {
              let {
                x: x3,
                y: y3
              } = _ref;
              return {
                x: x3,
                y: y3
              };
            }
          },
          ...detectOverflowOptions
        } = evaluate(options, state2);
        const coords = {
          x: x2,
          y: y2
        };
        const overflow = await detectOverflow$1(state2, detectOverflowOptions);
        const crossAxis = getSideAxis(getSide(placement));
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === "y" ? "top" : "left";
          const maxSide = mainAxis === "y" ? "bottom" : "right";
          const min2 = mainAxisCoord + overflow[minSide];
          const max2 = mainAxisCoord - overflow[maxSide];
          mainAxisCoord = clamp(min2, mainAxisCoord, max2);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === "y" ? "top" : "left";
          const maxSide = crossAxis === "y" ? "bottom" : "right";
          const min2 = crossAxisCoord + overflow[minSide];
          const max2 = crossAxisCoord - overflow[maxSide];
          crossAxisCoord = clamp(min2, crossAxisCoord, max2);
        }
        const limitedCoords = limiter.fn({
          ...state2,
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        });
        return {
          ...limitedCoords,
          data: {
            x: limitedCoords.x - x2,
            y: limitedCoords.y - y2,
            enabled: {
              [mainAxis]: checkMainAxis,
              [crossAxis]: checkCrossAxis
            }
          }
        };
      }
    };
  };
  function hasWindow() {
    return typeof window !== "undefined";
  }
  function getNodeName(node) {
    if (isNode(node)) {
      return (node.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow(node) {
    var _node$ownerDocument;
    return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement(node) {
    var _ref;
    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
  }
  function isNode(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Node || value instanceof getWindow(value).Node;
  }
  function isElement$1(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Element || value instanceof getWindow(value).Element;
  }
  function isHTMLElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
  }
  function isShadowRoot(value) {
    if (!hasWindow() || typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
  }
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle$1(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
  }
  function isTableElement(element) {
    return ["table", "td", "th"].includes(getNodeName(element));
  }
  function isTopLayer(element) {
    return [":popover-open", ":modal"].some((selector) => {
      try {
        return element.matches(selector);
      } catch (e) {
        return false;
      }
    });
  }
  function isContainingBlock(elementOrCss) {
    const webkit = isWebKit();
    const css = isElement$1(elementOrCss) ? getComputedStyle$1(elementOrCss) : elementOrCss;
    return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else if (isTopLayer(currentNode)) {
        return null;
      }
      currentNode = getParentNode(currentNode);
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports)
      return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  function isLastTraversableNode(node) {
    return ["html", "body", "#document"].includes(getNodeName(node));
  }
  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }
  function getNodeScroll(element) {
    if (isElement$1(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.scrollX,
      scrollTop: element.scrollY
    };
  }
  function getParentNode(node) {
    if (getNodeName(node) === "html") {
      return node;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node.assignedSlot || // DOM Element detected.
      node.parentNode || // ShadowRoot detected.
      isShadowRoot(node) && node.host || // Fallback.
      getDocumentElement(node)
    );
    return isShadowRoot(result) ? result.host : result;
  }
  function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (isLastTraversableNode(parentNode)) {
      return node.ownerDocument ? node.ownerDocument.body : node.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
      list = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow(scrollableAncestor);
    if (isBody) {
      const frameElement = getFrameElement(win);
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }
  function getFrameElement(win) {
    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
  }
  function getCssDimensions(element) {
    const css = getComputedStyle$1(element);
    let width = parseFloat(css.width) || 0;
    let height = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  function unwrapElement(element) {
    return !isElement$1(element) ? element.contextElement : element;
  }
  function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $: $2
    } = getCssDimensions(domElement);
    let x2 = ($2 ? round(rect.width) : rect.width) / width;
    let y2 = ($2 ? round(rect.height) : rect.height) / height;
    if (!x2 || !Number.isFinite(x2)) {
      x2 = 1;
    }
    if (!y2 || !Number.isFinite(y2)) {
      y2 = 1;
    }
    return {
      x: x2,
      y: y2
    };
  }
  const noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow(element);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement$1(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x2 = (clientRect.left + visualOffsets.x) / scale.x;
    let y2 = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow(domElement);
      const offsetWin = offsetParent && isElement$1(offsetParent) ? getWindow(offsetParent) : offsetParent;
      let currentWin = win;
      let currentIFrame = getFrameElement(currentWin);
      while (currentIFrame && offsetParent && offsetWin !== currentWin) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css = getComputedStyle$1(currentIFrame);
        const left2 = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
        const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
        x2 *= iframeScale.x;
        y2 *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x2 += left2;
        y2 += top;
        currentWin = getWindow(currentIFrame);
        currentIFrame = getFrameElement(currentWin);
      }
    }
    return rectToClientRect({
      width,
      height,
      x: x2,
      y: y2
    });
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      elements,
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isFixed = strategy === "fixed";
    const documentElement = getDocumentElement(offsetParent);
    const topLayer = elements ? isTopLayer(elements.floating) : false;
    if (offsetParent === documentElement || topLayer && isFixed) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
    };
  }
  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }
  function getWindowScrollBarX(element, rect) {
    const leftScroll = getNodeScroll(element).scrollLeft;
    if (!rect) {
      return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
    }
    return rect.left + leftScroll;
  }
  function getDocumentRect(element) {
    const html = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width = max$2(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max$2(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
    let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y2 = -scroll.scrollTop;
    if (getComputedStyle$1(body).direction === "rtl") {
      x2 += max$2(html.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getViewportRect(element, strategy) {
    const win = getWindow(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x2 = 0;
    let y2 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x2 = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
    const top = clientRect.top + element.clientTop;
    const left2 = clientRect.left + element.clientLeft;
    const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x2 = left2 * scale.x;
    const y2 = top * scale.y;
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement(element));
    } else if (isElement$1(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = {
        ...clippingAncestor,
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y
      };
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode(element);
    if (parentNode === stopNode || !isElement$1(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle$1(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element, cache2) {
    const cachedResult = cache2.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element, [], false).filter((el) => isElement$1(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle$1(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element) : element;
    while (isElement$1(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle$1(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache2.set(element, result);
    return result;
  }
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max$2(rect.top, accRect.top);
      accRect.right = min$1(rect.right, accRect.right);
      accRect.bottom = min$1(rect.bottom, accRect.bottom);
      accRect.left = max$2(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element) {
    const {
      width,
      height
    } = getCssDimensions(element);
    return {
      width,
      height
    };
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    let htmlX = 0;
    let htmlY = 0;
    if (documentElement && !isOffsetParentAnElement && !isFixed) {
      const htmlRect = documentElement.getBoundingClientRect();
      htmlY = htmlRect.top + scroll.scrollTop;
      htmlX = htmlRect.left + scroll.scrollLeft - // RTL <body> scrollbar.
      getWindowScrollBarX(documentElement, htmlRect);
    }
    const x2 = rect.left + scroll.scrollLeft - offsets.x - htmlX;
    const y2 = rect.top + scroll.scrollTop - offsets.y - htmlY;
    return {
      x: x2,
      y: y2,
      width: rect.width,
      height: rect.height
    };
  }
  function isStaticPositioned(element) {
    return getComputedStyle$1(element).position === "static";
  }
  function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    let rawOffsetParent = element.offsetParent;
    if (getDocumentElement(element) === rawOffsetParent) {
      rawOffsetParent = rawOffsetParent.ownerDocument.body;
    }
    return rawOffsetParent;
  }
  function getOffsetParent(element, polyfill) {
    const win = getWindow(element);
    if (isTopLayer(element)) {
      return win;
    }
    if (!isHTMLElement(element)) {
      let svgOffsetParent = getParentNode(element);
      while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
        if (isElement$1(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
          return svgOffsetParent;
        }
        svgOffsetParent = getParentNode(svgOffsetParent);
      }
      return win;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
      return win;
    }
    return offsetParent || getContainingBlock(element) || win;
  }
  const getElementRects = async function(data) {
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    const floatingDimensions = await getDimensionsFn(data.floating);
    return {
      reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
      floating: {
        x: 0,
        y: 0,
        width: floatingDimensions.width,
        height: floatingDimensions.height
      }
    };
  };
  function isRTL$1(element) {
    return getComputedStyle$1(element).direction === "rtl";
  }
  const platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement: isElement$1,
    isRTL: isRTL$1
  };
  function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root2 = getDocumentElement(element);
    function cleanup() {
      var _io;
      clearTimeout(timeoutId);
      (_io = io) == null || _io.disconnect();
      io = null;
    }
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const {
        left: left2,
        top,
        width,
        height
      } = element.getBoundingClientRect();
      if (!skip) {
        onMove();
      }
      if (!width || !height) {
        return;
      }
      const insetTop = floor$1(top);
      const insetRight = floor$1(root2.clientWidth - (left2 + width));
      const insetBottom = floor$1(root2.clientHeight - (top + height));
      const insetLeft = floor$1(left2);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max$2(0, min$1(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 1e3);
          } else {
            refresh(false, ratio);
          }
        }
        isFirstUpdate = false;
      }
      try {
        io = new IntersectionObserver(handleObserve, {
          ...options,
          // Handle <iframe>s
          root: root2.ownerDocument
        });
      } catch (e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element);
    }
    refresh(true);
    return cleanup;
  }
  function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === "function",
      layoutShift = typeof IntersectionObserver === "function",
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver((_ref) => {
        let [firstEntry] = _ref;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            var _resizeObserver;
            (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
          });
        }
        update();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
        update();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
      var _resizeObserver2;
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update);
        ancestorResize && ancestor.removeEventListener("resize", update);
      });
      cleanupIo == null || cleanupIo();
      (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  const detectOverflow = detectOverflow$1;
  const offset = offset$1;
  const shift = shift$1;
  const flip = flip$1;
  const arrow = arrow$1;
  const computePosition = (reference, floating, options) => {
    const cache2 = /* @__PURE__ */ new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache2
    };
    return computePosition$1(reference, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };
  buildProps({});
  const unrefReference = (elRef) => {
    if (!isClient)
      return;
    if (!elRef)
      return elRef;
    const unrefEl = unrefElement(elRef);
    if (unrefEl)
      return unrefEl;
    return vue.isRef(elRef) ? unrefEl : elRef;
  };
  const useFloating$1 = ({
    middleware,
    placement,
    strategy
  }) => {
    const referenceRef = vue.ref();
    const contentRef = vue.ref();
    const x2 = vue.ref();
    const y2 = vue.ref();
    const middlewareData = vue.ref({});
    const states = {
      x: x2,
      y: y2,
      placement,
      strategy,
      middlewareData
    };
    const update = async () => {
      if (!isClient)
        return;
      const referenceEl = unrefReference(referenceRef);
      const contentEl = unrefElement(contentRef);
      if (!referenceEl || !contentEl)
        return;
      const data = await computePosition(referenceEl, contentEl, {
        placement: vue.unref(placement),
        strategy: vue.unref(strategy),
        middleware: vue.unref(middleware)
      });
      keysOf(states).forEach((key) => {
        states[key].value = data[key];
      });
    };
    vue.onMounted(() => {
      vue.watchEffect(() => {
        update();
      });
    });
    return {
      ...states,
      update,
      referenceRef,
      contentRef
    };
  };
  const arrowMiddleware = ({
    arrowRef,
    padding
  }) => {
    return {
      name: "arrow",
      options: {
        element: arrowRef,
        padding
      },
      fn(args) {
        const arrowEl = vue.unref(arrowRef);
        if (!arrowEl)
          return {};
        return arrow({
          element: arrowEl,
          padding
        }).fn(args);
      }
    };
  };
  function useCursor(input) {
    let selectionInfo;
    function recordCursor() {
      if (input.value == void 0)
        return;
      const { selectionStart, selectionEnd, value } = input.value;
      if (selectionStart == null || selectionEnd == null)
        return;
      const beforeTxt = value.slice(0, Math.max(0, selectionStart));
      const afterTxt = value.slice(Math.max(0, selectionEnd));
      selectionInfo = {
        selectionStart,
        selectionEnd,
        value,
        beforeTxt,
        afterTxt
      };
    }
    function setCursor() {
      if (input.value == void 0 || selectionInfo == void 0)
        return;
      const { value } = input.value;
      const { beforeTxt, afterTxt, selectionStart } = selectionInfo;
      if (beforeTxt == void 0 || afterTxt == void 0 || selectionStart == void 0)
        return;
      let startPos = value.length;
      if (value.endsWith(afterTxt)) {
        startPos = value.length - afterTxt.length;
      } else if (value.startsWith(beforeTxt)) {
        startPos = beforeTxt.length;
      } else {
        const beforeLastChar = beforeTxt[selectionStart - 1];
        const newIndex = value.indexOf(beforeLastChar, selectionStart - 1);
        if (newIndex !== -1) {
          startPos = newIndex + 1;
        }
      }
      input.value.setSelectionRange(startPos, startPos);
    }
    return [recordCursor, setCursor];
  }
  const getOrderedChildren = (vm, childComponentName, children) => {
    const nodes = flattedChildren(vm.subTree).filter((n2) => {
      var _a2;
      return vue.isVNode(n2) && ((_a2 = n2.type) == null ? void 0 : _a2.name) === childComponentName && !!n2.component;
    });
    const uids = nodes.map((n2) => n2.component.uid);
    return uids.map((uid2) => children[uid2]).filter((p2) => !!p2);
  };
  const useOrderedChildren = (vm, childComponentName) => {
    const children = {};
    const orderedChildren = vue.shallowRef([]);
    const addChild = (child) => {
      children[child.uid] = child;
      orderedChildren.value = getOrderedChildren(vm, childComponentName, children);
    };
    const removeChild = (uid2) => {
      delete children[uid2];
      orderedChildren.value = orderedChildren.value.filter((children2) => children2.uid !== uid2);
    };
    return {
      children: orderedChildren,
      addChild,
      removeChild
    };
  };
  const useSizeProp = buildProp({
    type: String,
    values: componentSizes,
    required: false
  });
  const SIZE_INJECTION_KEY = Symbol("size");
  const useGlobalSize = () => {
    const injectedSize = vue.inject(SIZE_INJECTION_KEY, {});
    return vue.computed(() => {
      return vue.unref(injectedSize.size) || "";
    });
  };
  function useFocusController(target, {
    beforeFocus,
    afterFocus,
    beforeBlur,
    afterBlur
  } = {}) {
    const instance = vue.getCurrentInstance();
    const { emit } = instance;
    const wrapperRef = vue.shallowRef();
    const isFocused = vue.ref(false);
    const handleFocus = (event) => {
      const cancelFocus = shared.isFunction(beforeFocus) ? beforeFocus(event) : false;
      if (cancelFocus || isFocused.value)
        return;
      isFocused.value = true;
      emit("focus", event);
      afterFocus == null ? void 0 : afterFocus();
    };
    const handleBlur = (event) => {
      var _a2;
      const cancelBlur = shared.isFunction(beforeBlur) ? beforeBlur(event) : false;
      if (cancelBlur || event.relatedTarget && ((_a2 = wrapperRef.value) == null ? void 0 : _a2.contains(event.relatedTarget)))
        return;
      isFocused.value = false;
      emit("blur", event);
      afterBlur == null ? void 0 : afterBlur();
    };
    const handleClick = () => {
      var _a2, _b;
      if (((_a2 = wrapperRef.value) == null ? void 0 : _a2.contains(document.activeElement)) && wrapperRef.value !== document.activeElement)
        return;
      (_b = target.value) == null ? void 0 : _b.focus();
    };
    vue.watch(wrapperRef, (el) => {
      if (el) {
        el.setAttribute("tabindex", "-1");
      }
    });
    useEventListener(wrapperRef, "focus", handleFocus, true);
    useEventListener(wrapperRef, "blur", handleBlur, true);
    useEventListener(wrapperRef, "click", handleClick, true);
    return {
      isFocused,
      wrapperRef,
      handleFocus,
      handleBlur
    };
  }
  function useComposition({
    afterComposition,
    emit
  }) {
    const isComposing = vue.ref(false);
    const handleCompositionStart = (event) => {
      emit == null ? void 0 : emit("compositionstart", event);
      isComposing.value = true;
    };
    const handleCompositionUpdate = (event) => {
      var _a2;
      emit == null ? void 0 : emit("compositionupdate", event);
      const text = (_a2 = event.target) == null ? void 0 : _a2.value;
      const lastCharacter = text[text.length - 1] || "";
      isComposing.value = !isKorean(lastCharacter);
    };
    const handleCompositionEnd = (event) => {
      emit == null ? void 0 : emit("compositionend", event);
      if (isComposing.value) {
        isComposing.value = false;
        vue.nextTick(() => afterComposition(event));
      }
    };
    const handleComposition = (event) => {
      event.type === "compositionend" ? handleCompositionEnd(event) : handleCompositionUpdate(event);
    };
    return {
      isComposing,
      handleComposition,
      handleCompositionStart,
      handleCompositionUpdate,
      handleCompositionEnd
    };
  }
  const emptyValuesContextKey = Symbol("emptyValuesContextKey");
  const SCOPE$7 = "use-empty-values";
  const DEFAULT_EMPTY_VALUES = ["", void 0, null];
  const DEFAULT_VALUE_ON_CLEAR = void 0;
  const useEmptyValuesProps = buildProps({
    emptyValues: Array,
    valueOnClear: {
      type: [String, Number, Boolean, Function],
      default: void 0,
      validator: (val) => shared.isFunction(val) ? !val() : !val
    }
  });
  const useEmptyValues = (props2, defaultValue) => {
    const config = vue.getCurrentInstance() ? vue.inject(emptyValuesContextKey, vue.ref({})) : vue.ref({});
    const emptyValues = vue.computed(() => props2.emptyValues || config.value.emptyValues || DEFAULT_EMPTY_VALUES);
    const valueOnClear = vue.computed(() => {
      if (shared.isFunction(props2.valueOnClear)) {
        return props2.valueOnClear();
      } else if (props2.valueOnClear !== void 0) {
        return props2.valueOnClear;
      } else if (shared.isFunction(config.value.valueOnClear)) {
        return config.value.valueOnClear();
      } else if (config.value.valueOnClear !== void 0) {
        return config.value.valueOnClear;
      }
      return defaultValue !== void 0 ? defaultValue : DEFAULT_VALUE_ON_CLEAR;
    });
    const isEmptyValue2 = (value) => {
      return emptyValues.value.includes(value);
    };
    if (!emptyValues.value.includes(valueOnClear.value)) {
      debugWarn(SCOPE$7, "value-on-clear should be a value of empty-values");
    }
    return {
      emptyValues,
      valueOnClear,
      isEmptyValue: isEmptyValue2
    };
  };
  const ariaProps = buildProps({
    ariaLabel: String,
    ariaOrientation: {
      type: String,
      values: ["horizontal", "vertical", "undefined"]
    },
    ariaControls: String
  });
  const useAriaProps = (arias) => {
    return pick(ariaProps, arias);
  };
  const configProviderContextKey = Symbol();
  const globalConfig = vue.ref();
  function useGlobalConfig(key, defaultValue = void 0) {
    const config = vue.getCurrentInstance() ? vue.inject(configProviderContextKey, globalConfig) : globalConfig;
    if (key) {
      return vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = config.value) == null ? void 0 : _a2[key]) != null ? _b : defaultValue;
      });
    } else {
      return config;
    }
  }
  function useGlobalComponentSettings(block, sizeFallback) {
    const config = useGlobalConfig();
    const ns2 = useNamespace(block, vue.computed(() => {
      var _a2;
      return ((_a2 = config.value) == null ? void 0 : _a2.namespace) || defaultNamespace;
    }));
    const locale = useLocale(vue.computed(() => {
      var _a2;
      return (_a2 = config.value) == null ? void 0 : _a2.locale;
    }));
    const zIndex2 = useZIndex(vue.computed(() => {
      var _a2;
      return ((_a2 = config.value) == null ? void 0 : _a2.zIndex) || defaultInitialZIndex;
    }));
    const size = vue.computed(() => {
      var _a2;
      return vue.unref(sizeFallback) || ((_a2 = config.value) == null ? void 0 : _a2.size) || "";
    });
    provideGlobalConfig(vue.computed(() => vue.unref(config) || {}));
    return {
      ns: ns2,
      locale,
      zIndex: zIndex2,
      size
    };
  }
  const provideGlobalConfig = (config, app, global2 = false) => {
    var _a2;
    const inSetup = !!vue.getCurrentInstance();
    const oldConfig = inSetup ? useGlobalConfig() : void 0;
    const provideFn = (_a2 = app == null ? void 0 : app.provide) != null ? _a2 : inSetup ? vue.provide : void 0;
    if (!provideFn) {
      debugWarn("provideGlobalConfig", "provideGlobalConfig() can only be used inside setup().");
      return;
    }
    const context = vue.computed(() => {
      const cfg = vue.unref(config);
      if (!(oldConfig == null ? void 0 : oldConfig.value))
        return cfg;
      return mergeConfig(oldConfig.value, cfg);
    });
    provideFn(configProviderContextKey, context);
    provideFn(localeContextKey, vue.computed(() => context.value.locale));
    provideFn(namespaceContextKey, vue.computed(() => context.value.namespace));
    provideFn(zIndexContextKey, vue.computed(() => context.value.zIndex));
    provideFn(SIZE_INJECTION_KEY, {
      size: vue.computed(() => context.value.size || "")
    });
    provideFn(emptyValuesContextKey, vue.computed(() => ({
      emptyValues: context.value.emptyValues,
      valueOnClear: context.value.valueOnClear
    })));
    if (global2 || !globalConfig.value) {
      globalConfig.value = context.value;
    }
    return context;
  };
  const mergeConfig = (a2, b2) => {
    const keys2 = [.../* @__PURE__ */ new Set([...keysOf(a2), ...keysOf(b2)])];
    const obj = {};
    for (const key of keys2) {
      obj[key] = b2[key] !== void 0 ? b2[key] : a2[key];
    }
    return obj;
  };
  const configProviderProps = buildProps({
    a11y: {
      type: Boolean,
      default: true
    },
    locale: {
      type: definePropType(Object)
    },
    size: useSizeProp,
    button: {
      type: definePropType(Object)
    },
    experimentalFeatures: {
      type: definePropType(Object)
    },
    keyboardNavigation: {
      type: Boolean,
      default: true
    },
    message: {
      type: definePropType(Object)
    },
    zIndex: Number,
    namespace: {
      type: String,
      default: "el"
    },
    ...useEmptyValuesProps
  });
  const messageConfig = {};
  const ConfigProvider = vue.defineComponent({
    name: "ElConfigProvider",
    props: configProviderProps,
    setup(props2, { slots }) {
      vue.watch(() => props2.message, (val) => {
        Object.assign(messageConfig, val != null ? val : {});
      }, { immediate: true, deep: true });
      const config = provideGlobalConfig(props2);
      return () => vue.renderSlot(slots, "default", { config: config == null ? void 0 : config.value });
    }
  });
  const ElConfigProvider = withInstall(ConfigProvider);
  const version = "2.8.6";
  const makeInstaller = (components = []) => {
    const install = (app, options) => {
      if (app[INSTALLED_KEY])
        return;
      app[INSTALLED_KEY] = true;
      components.forEach((c2) => app.use(c2));
      if (options)
        provideGlobalConfig(options, app, true);
    };
    return {
      version,
      install
    };
  };
  const affixProps = buildProps({
    zIndex: {
      type: definePropType([Number, String]),
      default: 100
    },
    target: {
      type: String,
      default: ""
    },
    offset: {
      type: Number,
      default: 0
    },
    position: {
      type: String,
      values: ["top", "bottom"],
      default: "top"
    }
  });
  const affixEmits = {
    scroll: ({ scrollTop, fixed }) => isNumber$2(scrollTop) && isBoolean$1(fixed),
    [CHANGE_EVENT]: (fixed) => isBoolean$1(fixed)
  };
  var _export_sfc = (sfc, props2) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props2) {
      target[key] = val;
    }
    return target;
  };
  const COMPONENT_NAME$n = "ElAffix";
  const __default__$1P = vue.defineComponent({
    name: COMPONENT_NAME$n
  });
  const _sfc_main$2v = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1P,
    props: affixProps,
    emits: affixEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const ns2 = useNamespace("affix");
      const target = vue.shallowRef();
      const root2 = vue.shallowRef();
      const scrollContainer = vue.shallowRef();
      const { height: windowHeight } = useWindowSize();
      const {
        height: rootHeight,
        width: rootWidth,
        top: rootTop,
        bottom: rootBottom,
        update: updateRoot
      } = useElementBounding(root2, { windowScroll: false });
      const targetRect = useElementBounding(target);
      const fixed = vue.ref(false);
      const scrollTop = vue.ref(0);
      const transform = vue.ref(0);
      const rootStyle = vue.computed(() => {
        return {
          height: fixed.value ? `${rootHeight.value}px` : "",
          width: fixed.value ? `${rootWidth.value}px` : ""
        };
      });
      const affixStyle = vue.computed(() => {
        if (!fixed.value)
          return {};
        const offset2 = props2.offset ? addUnit(props2.offset) : 0;
        return {
          height: `${rootHeight.value}px`,
          width: `${rootWidth.value}px`,
          top: props2.position === "top" ? offset2 : "",
          bottom: props2.position === "bottom" ? offset2 : "",
          transform: transform.value ? `translateY(${transform.value}px)` : "",
          zIndex: props2.zIndex
        };
      });
      const update = () => {
        if (!scrollContainer.value)
          return;
        scrollTop.value = scrollContainer.value instanceof Window ? document.documentElement.scrollTop : scrollContainer.value.scrollTop || 0;
        const { position, target: target2, offset: offset2 } = props2;
        const rootHeightOffset = offset2 + rootHeight.value;
        if (position === "top") {
          if (target2) {
            const difference = targetRect.bottom.value - rootHeightOffset;
            fixed.value = offset2 > rootTop.value && targetRect.bottom.value > 0;
            transform.value = difference < 0 ? difference : 0;
          } else {
            fixed.value = offset2 > rootTop.value;
          }
        } else if (target2) {
          const difference = windowHeight.value - targetRect.top.value - rootHeightOffset;
          fixed.value = windowHeight.value - offset2 < rootBottom.value && windowHeight.value > targetRect.top.value;
          transform.value = difference < 0 ? -difference : 0;
        } else {
          fixed.value = windowHeight.value - offset2 < rootBottom.value;
        }
      };
      const handleScroll2 = () => {
        updateRoot();
        emit("scroll", {
          scrollTop: scrollTop.value,
          fixed: fixed.value
        });
      };
      vue.watch(fixed, (val) => emit("change", val));
      vue.onMounted(() => {
        var _a2;
        if (props2.target) {
          target.value = (_a2 = document.querySelector(props2.target)) != null ? _a2 : void 0;
          if (!target.value)
            throwError(COMPONENT_NAME$n, `Target does not exist: ${props2.target}`);
        } else {
          target.value = document.documentElement;
        }
        scrollContainer.value = getScrollContainer(root2.value, true);
        updateRoot();
      });
      useEventListener(scrollContainer, "scroll", handleScroll2);
      vue.watchEffect(update);
      expose({
        update,
        updateRoot
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "root",
          ref: root2,
          class: vue.normalizeClass(vue.unref(ns2).b()),
          style: vue.normalizeStyle(vue.unref(rootStyle))
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass({ [vue.unref(ns2).m("fixed")]: fixed.value }),
            style: vue.normalizeStyle(vue.unref(affixStyle))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 6)
        ], 6);
      };
    }
  });
  var Affix = /* @__PURE__ */ _export_sfc(_sfc_main$2v, [["__file", "affix.vue"]]);
  const ElAffix = withInstall(Affix);
  const iconProps = buildProps({
    size: {
      type: definePropType([Number, String])
    },
    color: {
      type: String
    }
  });
  const __default__$1O = vue.defineComponent({
    name: "ElIcon",
    inheritAttrs: false
  });
  const _sfc_main$2u = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1O,
    props: iconProps,
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("icon");
      const style = vue.computed(() => {
        const { size, color } = props2;
        if (!size && !color)
          return {};
        return {
          fontSize: isUndefined(size) ? void 0 : addUnit(size),
          "--color": color
        };
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("i", vue.mergeProps({
          class: vue.unref(ns2).b(),
          style: vue.unref(style)
        }, _ctx.$attrs), [
          vue.renderSlot(_ctx.$slots, "default")
        ], 16);
      };
    }
  });
  var Icon = /* @__PURE__ */ _export_sfc(_sfc_main$2u, [["__file", "icon.vue"]]);
  const ElIcon = withInstall(Icon);
  const alertEffects = ["light", "dark"];
  const alertProps = buildProps({
    title: {
      type: String,
      default: ""
    },
    description: {
      type: String,
      default: ""
    },
    type: {
      type: String,
      values: keysOf(TypeComponentsMap),
      default: "info"
    },
    closable: {
      type: Boolean,
      default: true
    },
    closeText: {
      type: String,
      default: ""
    },
    showIcon: Boolean,
    center: Boolean,
    effect: {
      type: String,
      values: alertEffects,
      default: "light"
    }
  });
  const alertEmits = {
    close: (evt) => evt instanceof MouseEvent
  };
  const __default__$1N = vue.defineComponent({
    name: "ElAlert"
  });
  const _sfc_main$2t = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1N,
    props: alertProps,
    emits: alertEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const { Close } = TypeComponents;
      const slots = vue.useSlots();
      const ns2 = useNamespace("alert");
      const visible = vue.ref(true);
      const iconComponent = vue.computed(() => TypeComponentsMap[props2.type]);
      const iconClass = vue.computed(() => [
        ns2.e("icon"),
        { [ns2.is("big")]: !!props2.description || !!slots.default }
      ]);
      const withDescription = vue.computed(() => {
        return { "with-description": props2.description || slots.default };
      });
      const close2 = (evt) => {
        visible.value = false;
        emit("close", evt);
      };
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.Transition, {
          name: vue.unref(ns2).b("fade"),
          persisted: ""
        }, {
          default: vue.withCtx(() => [
            vue.withDirectives(vue.createElementVNode("div", {
              class: vue.normalizeClass([vue.unref(ns2).b(), vue.unref(ns2).m(_ctx.type), vue.unref(ns2).is("center", _ctx.center), vue.unref(ns2).is(_ctx.effect)]),
              role: "alert"
            }, [
              _ctx.showIcon && vue.unref(iconComponent) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 0,
                class: vue.normalizeClass(vue.unref(iconClass))
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(iconComponent))))
                ]),
                _: 1
              }, 8, ["class"])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).e("content"))
              }, [
                _ctx.title || _ctx.$slots.title ? (vue.openBlock(), vue.createElementBlock("span", {
                  key: 0,
                  class: vue.normalizeClass([vue.unref(ns2).e("title"), vue.unref(withDescription)])
                }, [
                  vue.renderSlot(_ctx.$slots, "title", {}, () => [
                    vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)
                  ])
                ], 2)) : vue.createCommentVNode("v-if", true),
                _ctx.$slots.default || _ctx.description ? (vue.openBlock(), vue.createElementBlock("p", {
                  key: 1,
                  class: vue.normalizeClass(vue.unref(ns2).e("description"))
                }, [
                  vue.renderSlot(_ctx.$slots, "default", {}, () => [
                    vue.createTextVNode(vue.toDisplayString(_ctx.description), 1)
                  ])
                ], 2)) : vue.createCommentVNode("v-if", true),
                _ctx.closable ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 2 }, [
                  _ctx.closeText ? (vue.openBlock(), vue.createElementBlock("div", {
                    key: 0,
                    class: vue.normalizeClass([vue.unref(ns2).e("close-btn"), vue.unref(ns2).is("customed")]),
                    onClick: close2
                  }, vue.toDisplayString(_ctx.closeText), 3)) : (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: 1,
                    class: vue.normalizeClass(vue.unref(ns2).e("close-btn")),
                    onClick: close2
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(Close))
                    ]),
                    _: 1
                  }, 8, ["class"]))
                ], 64)) : vue.createCommentVNode("v-if", true)
              ], 2)
            ], 2), [
              [vue.vShow, visible.value]
            ])
          ]),
          _: 3
        }, 8, ["name"]);
      };
    }
  });
  var Alert = /* @__PURE__ */ _export_sfc(_sfc_main$2t, [["__file", "alert.vue"]]);
  const ElAlert = withInstall(Alert);
  const formContextKey = Symbol("formContextKey");
  const formItemContextKey = Symbol("formItemContextKey");
  const useFormSize = (fallback, ignore = {}) => {
    const emptyRef = vue.ref(void 0);
    const size = ignore.prop ? emptyRef : useProp("size");
    const globalConfig2 = ignore.global ? emptyRef : useGlobalSize();
    const form = ignore.form ? { size: void 0 } : vue.inject(formContextKey, void 0);
    const formItem = ignore.formItem ? { size: void 0 } : vue.inject(formItemContextKey, void 0);
    return vue.computed(() => size.value || vue.unref(fallback) || (formItem == null ? void 0 : formItem.size) || (form == null ? void 0 : form.size) || globalConfig2.value || "");
  };
  const useFormDisabled = (fallback) => {
    const disabled = useProp("disabled");
    const form = vue.inject(formContextKey, void 0);
    return vue.computed(() => disabled.value || vue.unref(fallback) || (form == null ? void 0 : form.disabled) || false);
  };
  const useFormItem = () => {
    const form = vue.inject(formContextKey, void 0);
    const formItem = vue.inject(formItemContextKey, void 0);
    return {
      form,
      formItem
    };
  };
  const useFormItemInputId = (props2, {
    formItemContext,
    disableIdGeneration,
    disableIdManagement
  }) => {
    if (!disableIdGeneration) {
      disableIdGeneration = vue.ref(false);
    }
    if (!disableIdManagement) {
      disableIdManagement = vue.ref(false);
    }
    const inputId = vue.ref();
    let idUnwatch = void 0;
    const isLabeledByFormItem = vue.computed(() => {
      var _a2;
      return !!(!(props2.label || props2.ariaLabel) && formItemContext && formItemContext.inputIds && ((_a2 = formItemContext.inputIds) == null ? void 0 : _a2.length) <= 1);
    });
    vue.onMounted(() => {
      idUnwatch = vue.watch([vue.toRef(props2, "id"), disableIdGeneration], ([id, disableIdGeneration2]) => {
        const newId = id != null ? id : !disableIdGeneration2 ? useId().value : void 0;
        if (newId !== inputId.value) {
          if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
            inputId.value && formItemContext.removeInputId(inputId.value);
            if (!(disableIdManagement == null ? void 0 : disableIdManagement.value) && !disableIdGeneration2 && newId) {
              formItemContext.addInputId(newId);
            }
          }
          inputId.value = newId;
        }
      }, { immediate: true });
    });
    vue.onUnmounted(() => {
      idUnwatch && idUnwatch();
      if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
        inputId.value && formItemContext.removeInputId(inputId.value);
      }
    });
    return {
      isLabeledByFormItem,
      inputId
    };
  };
  const formMetaProps = buildProps({
    size: {
      type: String,
      values: componentSizes
    },
    disabled: Boolean
  });
  const formProps = buildProps({
    ...formMetaProps,
    model: Object,
    rules: {
      type: definePropType(Object)
    },
    labelPosition: {
      type: String,
      values: ["left", "right", "top"],
      default: "right"
    },
    requireAsteriskPosition: {
      type: String,
      values: ["left", "right"],
      default: "left"
    },
    labelWidth: {
      type: [String, Number],
      default: ""
    },
    labelSuffix: {
      type: String,
      default: ""
    },
    inline: Boolean,
    inlineMessage: Boolean,
    statusIcon: Boolean,
    showMessage: {
      type: Boolean,
      default: true
    },
    validateOnRuleChange: {
      type: Boolean,
      default: true
    },
    hideRequiredAsterisk: Boolean,
    scrollToError: Boolean,
    scrollIntoViewOptions: {
      type: [Object, Boolean]
    }
  });
  const formEmits = {
    validate: (prop, isValid, message2) => (shared.isArray(prop) || shared.isString(prop)) && isBoolean$1(isValid) && shared.isString(message2)
  };
  const SCOPE$6 = "ElForm";
  function useFormLabelWidth() {
    const potentialLabelWidthArr = vue.ref([]);
    const autoLabelWidth = vue.computed(() => {
      if (!potentialLabelWidthArr.value.length)
        return "0";
      const max2 = Math.max(...potentialLabelWidthArr.value);
      return max2 ? `${max2}px` : "";
    });
    function getLabelWidthIndex(width) {
      const index = potentialLabelWidthArr.value.indexOf(width);
      if (index === -1 && autoLabelWidth.value === "0") {
        debugWarn(SCOPE$6, `unexpected width ${width}`);
      }
      return index;
    }
    function registerLabelWidth(val, oldVal) {
      if (val && oldVal) {
        const index = getLabelWidthIndex(oldVal);
        potentialLabelWidthArr.value.splice(index, 1, val);
      } else if (val) {
        potentialLabelWidthArr.value.push(val);
      }
    }
    function deregisterLabelWidth(val) {
      const index = getLabelWidthIndex(val);
      if (index > -1) {
        potentialLabelWidthArr.value.splice(index, 1);
      }
    }
    return {
      autoLabelWidth,
      registerLabelWidth,
      deregisterLabelWidth
    };
  }
  const filterFields = (fields, props2) => {
    const normalized = castArray$1(props2);
    return normalized.length > 0 ? fields.filter((field) => field.prop && normalized.includes(field.prop)) : fields;
  };
  const COMPONENT_NAME$m = "ElForm";
  const __default__$1M = vue.defineComponent({
    name: COMPONENT_NAME$m
  });
  const _sfc_main$2s = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1M,
    props: formProps,
    emits: formEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const fields = [];
      const formSize = useFormSize();
      const ns2 = useNamespace("form");
      const formClasses = vue.computed(() => {
        const { labelPosition, inline } = props2;
        return [
          ns2.b(),
          ns2.m(formSize.value || "default"),
          {
            [ns2.m(`label-${labelPosition}`)]: labelPosition,
            [ns2.m("inline")]: inline
          }
        ];
      });
      const getField = (prop) => {
        return fields.find((field) => field.prop === prop);
      };
      const addField = (field) => {
        fields.push(field);
      };
      const removeField = (field) => {
        if (field.prop) {
          fields.splice(fields.indexOf(field), 1);
        }
      };
      const resetFields = (properties = []) => {
        if (!props2.model) {
          debugWarn(COMPONENT_NAME$m, "model is required for resetFields to work.");
          return;
        }
        filterFields(fields, properties).forEach((field) => field.resetField());
      };
      const clearValidate = (props22 = []) => {
        filterFields(fields, props22).forEach((field) => field.clearValidate());
      };
      const isValidatable = vue.computed(() => {
        const hasModel = !!props2.model;
        if (!hasModel) {
          debugWarn(COMPONENT_NAME$m, "model is required for validate to work.");
        }
        return hasModel;
      });
      const obtainValidateFields = (props22) => {
        if (fields.length === 0)
          return [];
        const filteredFields = filterFields(fields, props22);
        if (!filteredFields.length) {
          debugWarn(COMPONENT_NAME$m, "please pass correct props!");
          return [];
        }
        return filteredFields;
      };
      const validate = async (callback) => validateField(void 0, callback);
      const doValidateField = async (props22 = []) => {
        if (!isValidatable.value)
          return false;
        const fields2 = obtainValidateFields(props22);
        if (fields2.length === 0)
          return true;
        let validationErrors = {};
        for (const field of fields2) {
          try {
            await field.validate("");
          } catch (fields3) {
            validationErrors = {
              ...validationErrors,
              ...fields3
            };
          }
        }
        if (Object.keys(validationErrors).length === 0)
          return true;
        return Promise.reject(validationErrors);
      };
      const validateField = async (modelProps = [], callback) => {
        const shouldThrow = !shared.isFunction(callback);
        try {
          const result = await doValidateField(modelProps);
          if (result === true) {
            await (callback == null ? void 0 : callback(result));
          }
          return result;
        } catch (e) {
          if (e instanceof Error)
            throw e;
          const invalidFields = e;
          if (props2.scrollToError) {
            scrollToField(Object.keys(invalidFields)[0]);
          }
          await (callback == null ? void 0 : callback(false, invalidFields));
          return shouldThrow && Promise.reject(invalidFields);
        }
      };
      const scrollToField = (prop) => {
        var _a2;
        const field = filterFields(fields, prop)[0];
        if (field) {
          (_a2 = field.$el) == null ? void 0 : _a2.scrollIntoView(props2.scrollIntoViewOptions);
        }
      };
      vue.watch(() => props2.rules, () => {
        if (props2.validateOnRuleChange) {
          validate().catch((err) => debugWarn(err));
        }
      }, { deep: true });
      vue.provide(formContextKey, vue.reactive({
        ...vue.toRefs(props2),
        emit,
        resetFields,
        clearValidate,
        validateField,
        getField,
        addField,
        removeField,
        ...useFormLabelWidth()
      }));
      expose({
        validate,
        validateField,
        resetFields,
        clearValidate,
        scrollToField,
        fields
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("form", {
          class: vue.normalizeClass(vue.unref(formClasses))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var Form = /* @__PURE__ */ _export_sfc(_sfc_main$2s, [["__file", "form.vue"]]);
  var define_process_env_default = {};
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o2) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o22) {
      return o22.__proto__ || Object.getPrototypeOf(o22);
    };
    return _getPrototypeOf(o2);
  }
  function _setPrototypeOf(o2, p2) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o22, p22) {
      o22.__proto__ = p22;
      return o22;
    };
    return _setPrototypeOf(o2, p2);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      }));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct.bind();
    } else {
      _construct = function _construct2(Parent2, args2, Class2) {
        var a2 = [null];
        a2.push.apply(a2, args2);
        var Constructor = Function.bind.apply(Parent2, a2);
        var instance = new Constructor();
        if (Class2)
          _setPrototypeOf(instance, Class2.prototype);
        return instance;
      };
    }
    return _construct.apply(null, arguments);
  }
  function _isNativeFunction(fn2) {
    return Function.toString.call(fn2).indexOf("[native code]") !== -1;
  }
  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
    _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
      if (Class2 === null || !_isNativeFunction(Class2))
        return Class2;
      if (typeof Class2 !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class2))
          return _cache.get(Class2);
        _cache.set(Class2, Wrapper);
      }
      function Wrapper() {
        return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
      }
      Wrapper.prototype = Object.create(Class2.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class2);
    };
    return _wrapNativeSuper(Class);
  }
  var formatRegExp = /%[sdj%]/g;
  var warning = function warning2() {
  };
  if (typeof process !== "undefined" && define_process_env_default && true && typeof window !== "undefined" && typeof document !== "undefined") {
    warning = function warning3(type4, errors) {
      if (typeof console !== "undefined" && console.warn && typeof ASYNC_VALIDATOR_NO_WARNING === "undefined") {
        if (errors.every(function(e) {
          return typeof e === "string";
        })) {
          formatAppLog("warn", "at node_modules/element-plus/node_modules/async-validator/dist-web/index.js:118", type4, errors);
        }
      }
    };
  }
  function convertFieldsError(errors) {
    if (!errors || !errors.length)
      return null;
    var fields = {};
    errors.forEach(function(error) {
      var field = error.field;
      fields[field] = fields[field] || [];
      fields[field].push(error);
    });
    return fields;
  }
  function format(template) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var i2 = 0;
    var len = args.length;
    if (typeof template === "function") {
      return template.apply(null, args);
    }
    if (typeof template === "string") {
      var str = template.replace(formatRegExp, function(x2) {
        if (x2 === "%%") {
          return "%";
        }
        if (i2 >= len) {
          return x2;
        }
        switch (x2) {
          case "%s":
            return String(args[i2++]);
          case "%d":
            return Number(args[i2++]);
          case "%j":
            try {
              return JSON.stringify(args[i2++]);
            } catch (_2) {
              return "[Circular]";
            }
            break;
          default:
            return x2;
        }
      });
      return str;
    }
    return template;
  }
  function isNativeStringType(type4) {
    return type4 === "string" || type4 === "url" || type4 === "hex" || type4 === "email" || type4 === "date" || type4 === "pattern";
  }
  function isEmptyValue(value, type4) {
    if (value === void 0 || value === null) {
      return true;
    }
    if (type4 === "array" && Array.isArray(value) && !value.length) {
      return true;
    }
    if (isNativeStringType(type4) && typeof value === "string" && !value) {
      return true;
    }
    return false;
  }
  function asyncParallelArray(arr, func, callback) {
    var results = [];
    var total2 = 0;
    var arrLength = arr.length;
    function count2(errors) {
      results.push.apply(results, errors || []);
      total2++;
      if (total2 === arrLength) {
        callback(results);
      }
    }
    arr.forEach(function(a2) {
      func(a2, count2);
    });
  }
  function asyncSerialArray(arr, func, callback) {
    var index = 0;
    var arrLength = arr.length;
    function next(errors) {
      if (errors && errors.length) {
        callback(errors);
        return;
      }
      var original = index;
      index = index + 1;
      if (original < arrLength) {
        func(arr[original], next);
      } else {
        callback([]);
      }
    }
    next([]);
  }
  function flattenObjArr(objArr) {
    var ret = [];
    Object.keys(objArr).forEach(function(k) {
      ret.push.apply(ret, objArr[k] || []);
    });
    return ret;
  }
  var AsyncValidationError = /* @__PURE__ */ function(_Error) {
    _inheritsLoose(AsyncValidationError2, _Error);
    function AsyncValidationError2(errors, fields) {
      var _this;
      _this = _Error.call(this, "Async Validation Error") || this;
      _this.errors = errors;
      _this.fields = fields;
      return _this;
    }
    return AsyncValidationError2;
  }(/* @__PURE__ */ _wrapNativeSuper(Error));
  function asyncMap(objArr, option, func, callback, source) {
    if (option.first) {
      var _pending = new Promise(function(resolve, reject) {
        var next = function next2(errors) {
          callback(errors);
          return errors.length ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);
        };
        var flattenArr = flattenObjArr(objArr);
        asyncSerialArray(flattenArr, func, next);
      });
      _pending["catch"](function(e) {
        return e;
      });
      return _pending;
    }
    var firstFields = option.firstFields === true ? Object.keys(objArr) : option.firstFields || [];
    var objArrKeys = Object.keys(objArr);
    var objArrLength = objArrKeys.length;
    var total2 = 0;
    var results = [];
    var pending = new Promise(function(resolve, reject) {
      var next = function next2(errors) {
        results.push.apply(results, errors);
        total2++;
        if (total2 === objArrLength) {
          callback(results);
          return results.length ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);
        }
      };
      if (!objArrKeys.length) {
        callback(results);
        resolve(source);
      }
      objArrKeys.forEach(function(key) {
        var arr = objArr[key];
        if (firstFields.indexOf(key) !== -1) {
          asyncSerialArray(arr, func, next);
        } else {
          asyncParallelArray(arr, func, next);
        }
      });
    });
    pending["catch"](function(e) {
      return e;
    });
    return pending;
  }
  function isErrorObj(obj) {
    return !!(obj && obj.message !== void 0);
  }
  function getValue(value, path) {
    var v2 = value;
    for (var i2 = 0; i2 < path.length; i2++) {
      if (v2 == void 0) {
        return v2;
      }
      v2 = v2[path[i2]];
    }
    return v2;
  }
  function complementError(rule, source) {
    return function(oe2) {
      var fieldValue;
      if (rule.fullFields) {
        fieldValue = getValue(source, rule.fullFields);
      } else {
        fieldValue = source[oe2.field || rule.fullField];
      }
      if (isErrorObj(oe2)) {
        oe2.field = oe2.field || rule.fullField;
        oe2.fieldValue = fieldValue;
        return oe2;
      }
      return {
        message: typeof oe2 === "function" ? oe2() : oe2,
        fieldValue,
        field: oe2.field || rule.fullField
      };
    };
  }
  function deepMerge(target, source) {
    if (source) {
      for (var s2 in source) {
        if (source.hasOwnProperty(s2)) {
          var value = source[s2];
          if (typeof value === "object" && typeof target[s2] === "object") {
            target[s2] = _extends({}, target[s2], value);
          } else {
            target[s2] = value;
          }
        }
      }
    }
    return target;
  }
  var required$1 = function required(rule, value, source, errors, options, type4) {
    if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type4 || rule.type))) {
      errors.push(format(options.messages.required, rule.fullField));
    }
  };
  var whitespace = function whitespace2(rule, value, source, errors, options) {
    if (/^\s+$/.test(value) || value === "") {
      errors.push(format(options.messages.whitespace, rule.fullField));
    }
  };
  var urlReg;
  var getUrlRegex = function() {
    if (urlReg) {
      return urlReg;
    }
    var word = "[a-fA-F\\d:]";
    var b2 = function b22(options) {
      return options && options.includeBoundaries ? "(?:(?<=\\s|^)(?=" + word + ")|(?<=" + word + ")(?=\\s|$))" : "";
    };
    var v4 = "(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}";
    var v6seg = "[a-fA-F\\d]{1,4}";
    var v6 = ("\n(?:\n(?:" + v6seg + ":){7}(?:" + v6seg + "|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:" + v6seg + ":){6}(?:" + v4 + "|:" + v6seg + "|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:" + v6seg + ":){5}(?::" + v4 + "|(?::" + v6seg + "){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:" + v6seg + ":){4}(?:(?::" + v6seg + "){0,1}:" + v4 + "|(?::" + v6seg + "){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:" + v6seg + ":){3}(?:(?::" + v6seg + "){0,2}:" + v4 + "|(?::" + v6seg + "){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:" + v6seg + ":){2}(?:(?::" + v6seg + "){0,3}:" + v4 + "|(?::" + v6seg + "){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:" + v6seg + ":){1}(?:(?::" + v6seg + "){0,4}:" + v4 + "|(?::" + v6seg + "){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::" + v6seg + "){0,5}:" + v4 + "|(?::" + v6seg + "){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n").replace(/\s*\/\/.*$/gm, "").replace(/\n/g, "").trim();
    var v46Exact = new RegExp("(?:^" + v4 + "$)|(?:^" + v6 + "$)");
    var v4exact = new RegExp("^" + v4 + "$");
    var v6exact = new RegExp("^" + v6 + "$");
    var ip = function ip2(options) {
      return options && options.exact ? v46Exact : new RegExp("(?:" + b2(options) + v4 + b2(options) + ")|(?:" + b2(options) + v6 + b2(options) + ")", "g");
    };
    ip.v4 = function(options) {
      return options && options.exact ? v4exact : new RegExp("" + b2(options) + v4 + b2(options), "g");
    };
    ip.v6 = function(options) {
      return options && options.exact ? v6exact : new RegExp("" + b2(options) + v6 + b2(options), "g");
    };
    var protocol = "(?:(?:[a-z]+:)?//)";
    var auth = "(?:\\S+(?::\\S*)?@)?";
    var ipv4 = ip.v4().source;
    var ipv6 = ip.v6().source;
    var host2 = "(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)";
    var domain = "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*";
    var tld = "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))";
    var port = "(?::\\d{2,5})?";
    var path = '(?:[/?#][^\\s"]*)?';
    var regex = "(?:" + protocol + "|www\\.)" + auth + "(?:localhost|" + ipv4 + "|" + ipv6 + "|" + host2 + domain + tld + ")" + port + path;
    urlReg = new RegExp("(?:^" + regex + "$)", "i");
    return urlReg;
  };
  var pattern$2 = {
    // http://emailregex.com/
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
    // url: new RegExp(
    //   '^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$',
    //   'i',
    // ),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
  };
  var types = {
    integer: function integer(value) {
      return types.number(value) && parseInt(value, 10) === value;
    },
    "float": function float(value) {
      return types.number(value) && !types.integer(value);
    },
    array: function array(value) {
      return Array.isArray(value);
    },
    regexp: function regexp(value) {
      if (value instanceof RegExp) {
        return true;
      }
      try {
        return !!new RegExp(value);
      } catch (e) {
        return false;
      }
    },
    date: function date(value) {
      return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function" && !isNaN(value.getTime());
    },
    number: function number(value) {
      if (isNaN(value)) {
        return false;
      }
      return typeof value === "number";
    },
    object: function object(value) {
      return typeof value === "object" && !types.array(value);
    },
    method: function method(value) {
      return typeof value === "function";
    },
    email: function email(value) {
      return typeof value === "string" && value.length <= 320 && !!value.match(pattern$2.email);
    },
    url: function url(value) {
      return typeof value === "string" && value.length <= 2048 && !!value.match(getUrlRegex());
    },
    hex: function hex(value) {
      return typeof value === "string" && !!value.match(pattern$2.hex);
    }
  };
  var type$1 = function type3(rule, value, source, errors, options) {
    if (rule.required && value === void 0) {
      required$1(rule, value, source, errors, options);
      return;
    }
    var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
    var ruleType = rule.type;
    if (custom.indexOf(ruleType) > -1) {
      if (!types[ruleType](value)) {
        errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
      }
    } else if (ruleType && typeof value !== rule.type) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  };
  var range$1 = function range2(rule, value, source, errors, options) {
    var len = typeof rule.len === "number";
    var min2 = typeof rule.min === "number";
    var max2 = typeof rule.max === "number";
    var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var val = value;
    var key = null;
    var num = typeof value === "number";
    var str = typeof value === "string";
    var arr = Array.isArray(value);
    if (num) {
      key = "number";
    } else if (str) {
      key = "string";
    } else if (arr) {
      key = "array";
    }
    if (!key) {
      return false;
    }
    if (arr) {
      val = value.length;
    }
    if (str) {
      val = value.replace(spRegexp, "_").length;
    }
    if (len) {
      if (val !== rule.len) {
        errors.push(format(options.messages[key].len, rule.fullField, rule.len));
      }
    } else if (min2 && !max2 && val < rule.min) {
      errors.push(format(options.messages[key].min, rule.fullField, rule.min));
    } else if (max2 && !min2 && val > rule.max) {
      errors.push(format(options.messages[key].max, rule.fullField, rule.max));
    } else if (min2 && max2 && (val < rule.min || val > rule.max)) {
      errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
    }
  };
  var ENUM$1 = "enum";
  var enumerable$1 = function enumerable(rule, value, source, errors, options) {
    rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
    if (rule[ENUM$1].indexOf(value) === -1) {
      errors.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
    }
  };
  var pattern$1 = function pattern3(rule, value, source, errors, options) {
    if (rule.pattern) {
      if (rule.pattern instanceof RegExp) {
        rule.pattern.lastIndex = 0;
        if (!rule.pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      } else if (typeof rule.pattern === "string") {
        var _pattern = new RegExp(rule.pattern);
        if (!_pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      }
    }
  };
  var rules = {
    required: required$1,
    whitespace,
    type: type$1,
    range: range$1,
    "enum": enumerable$1,
    pattern: pattern$1
  };
  var string = function string2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, "string");
      if (!isEmptyValue(value, "string")) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
        rules.pattern(rule, value, source, errors, options);
        if (rule.whitespace === true) {
          rules.whitespace(rule, value, source, errors, options);
        }
      }
    }
    callback(errors);
  };
  var method2 = function method3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var number2 = function number3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (value === "") {
        value = void 0;
      }
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var _boolean = function _boolean2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var regexp2 = function regexp3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var integer2 = function integer3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var floatFn = function floatFn2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var array2 = function array3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if ((value === void 0 || value === null) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, "array");
      if (value !== void 0 && value !== null) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var object2 = function object3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var ENUM = "enum";
  var enumerable2 = function enumerable3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules[ENUM](rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var pattern2 = function pattern3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value, "string")) {
        rules.pattern(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var date2 = function date3(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "date") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value, "date")) {
        var dateObject;
        if (value instanceof Date) {
          dateObject = value;
        } else {
          dateObject = new Date(value);
        }
        rules.type(rule, dateObject, source, errors, options);
        if (dateObject) {
          rules.range(rule, dateObject.getTime(), source, errors, options);
        }
      }
    }
    callback(errors);
  };
  var required2 = function required3(rule, value, callback, source, options) {
    var errors = [];
    var type4 = Array.isArray(value) ? "array" : typeof value;
    rules.required(rule, value, source, errors, options, type4);
    callback(errors);
  };
  var type2 = function type3(rule, value, callback, source, options) {
    var ruleType = rule.type;
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, ruleType) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, ruleType);
      if (!isEmptyValue(value, ruleType)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  var any = function any2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
    }
    callback(errors);
  };
  var validators = {
    string,
    method: method2,
    number: number2,
    "boolean": _boolean,
    regexp: regexp2,
    integer: integer2,
    "float": floatFn,
    array: array2,
    object: object2,
    "enum": enumerable2,
    pattern: pattern2,
    date: date2,
    url: type2,
    hex: type2,
    email: type2,
    required: required2,
    any
  };
  function newMessages() {
    return {
      "default": "Validation error on field %s",
      required: "%s is required",
      "enum": "%s must be one of %s",
      whitespace: "%s cannot be empty",
      date: {
        format: "%s date %s is invalid for format %s",
        parse: "%s date could not be parsed, %s is invalid ",
        invalid: "%s date %s is invalid"
      },
      types: {
        string: "%s is not a %s",
        method: "%s is not a %s (function)",
        array: "%s is not an %s",
        object: "%s is not an %s",
        number: "%s is not a %s",
        date: "%s is not a %s",
        "boolean": "%s is not a %s",
        integer: "%s is not an %s",
        "float": "%s is not a %s",
        regexp: "%s is not a valid %s",
        email: "%s is not a valid %s",
        url: "%s is not a valid %s",
        hex: "%s is not a valid %s"
      },
      string: {
        len: "%s must be exactly %s characters",
        min: "%s must be at least %s characters",
        max: "%s cannot be longer than %s characters",
        range: "%s must be between %s and %s characters"
      },
      number: {
        len: "%s must equal %s",
        min: "%s cannot be less than %s",
        max: "%s cannot be greater than %s",
        range: "%s must be between %s and %s"
      },
      array: {
        len: "%s must be exactly %s in length",
        min: "%s cannot be less than %s in length",
        max: "%s cannot be greater than %s in length",
        range: "%s must be between %s and %s in length"
      },
      pattern: {
        mismatch: "%s value %s does not match pattern %s"
      },
      clone: function clone2() {
        var cloned = JSON.parse(JSON.stringify(this));
        cloned.clone = this.clone;
        return cloned;
      }
    };
  }
  var messages = newMessages();
  var Schema = /* @__PURE__ */ function() {
    function Schema2(descriptor) {
      this.rules = null;
      this._messages = messages;
      this.define(descriptor);
    }
    var _proto = Schema2.prototype;
    _proto.define = function define2(rules2) {
      var _this = this;
      if (!rules2) {
        throw new Error("Cannot configure a schema with no rules");
      }
      if (typeof rules2 !== "object" || Array.isArray(rules2)) {
        throw new Error("Rules must be an object");
      }
      this.rules = {};
      Object.keys(rules2).forEach(function(name) {
        var item = rules2[name];
        _this.rules[name] = Array.isArray(item) ? item : [item];
      });
    };
    _proto.messages = function messages2(_messages) {
      if (_messages) {
        this._messages = deepMerge(newMessages(), _messages);
      }
      return this._messages;
    };
    _proto.validate = function validate(source_, o2, oc) {
      var _this2 = this;
      if (o2 === void 0) {
        o2 = {};
      }
      if (oc === void 0) {
        oc = function oc2() {
        };
      }
      var source = source_;
      var options = o2;
      var callback = oc;
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (!this.rules || Object.keys(this.rules).length === 0) {
        if (callback) {
          callback(null, source);
        }
        return Promise.resolve(source);
      }
      function complete(results) {
        var errors = [];
        var fields = {};
        function add(e) {
          if (Array.isArray(e)) {
            var _errors;
            errors = (_errors = errors).concat.apply(_errors, e);
          } else {
            errors.push(e);
          }
        }
        for (var i2 = 0; i2 < results.length; i2++) {
          add(results[i2]);
        }
        if (!errors.length) {
          callback(null, source);
        } else {
          fields = convertFieldsError(errors);
          callback(errors, fields);
        }
      }
      if (options.messages) {
        var messages$12 = this.messages();
        if (messages$12 === messages) {
          messages$12 = newMessages();
        }
        deepMerge(messages$12, options.messages);
        options.messages = messages$12;
      } else {
        options.messages = this.messages();
      }
      var series = {};
      var keys2 = options.keys || Object.keys(this.rules);
      keys2.forEach(function(z2) {
        var arr = _this2.rules[z2];
        var value = source[z2];
        arr.forEach(function(r2) {
          var rule = r2;
          if (typeof rule.transform === "function") {
            if (source === source_) {
              source = _extends({}, source);
            }
            value = source[z2] = rule.transform(value);
          }
          if (typeof rule === "function") {
            rule = {
              validator: rule
            };
          } else {
            rule = _extends({}, rule);
          }
          rule.validator = _this2.getValidationMethod(rule);
          if (!rule.validator) {
            return;
          }
          rule.field = z2;
          rule.fullField = rule.fullField || z2;
          rule.type = _this2.getType(rule);
          series[z2] = series[z2] || [];
          series[z2].push({
            rule,
            value,
            source,
            field: z2
          });
        });
      });
      var errorFields = {};
      return asyncMap(series, options, function(data, doIt) {
        var rule = data.rule;
        var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
        deep = deep && (rule.required || !rule.required && data.value);
        rule.field = data.field;
        function addFullField(key, schema) {
          return _extends({}, schema, {
            fullField: rule.fullField + "." + key,
            fullFields: rule.fullFields ? [].concat(rule.fullFields, [key]) : [key]
          });
        }
        function cb(e) {
          if (e === void 0) {
            e = [];
          }
          var errorList = Array.isArray(e) ? e : [e];
          if (!options.suppressWarning && errorList.length) {
            Schema2.warning("async-validator:", errorList);
          }
          if (errorList.length && rule.message !== void 0) {
            errorList = [].concat(rule.message);
          }
          var filledErrors = errorList.map(complementError(rule, source));
          if (options.first && filledErrors.length) {
            errorFields[rule.field] = 1;
            return doIt(filledErrors);
          }
          if (!deep) {
            doIt(filledErrors);
          } else {
            if (rule.required && !data.value) {
              if (rule.message !== void 0) {
                filledErrors = [].concat(rule.message).map(complementError(rule, source));
              } else if (options.error) {
                filledErrors = [options.error(rule, format(options.messages.required, rule.field))];
              }
              return doIt(filledErrors);
            }
            var fieldsSchema = {};
            if (rule.defaultField) {
              Object.keys(data.value).map(function(key) {
                fieldsSchema[key] = rule.defaultField;
              });
            }
            fieldsSchema = _extends({}, fieldsSchema, data.rule.fields);
            var paredFieldsSchema = {};
            Object.keys(fieldsSchema).forEach(function(field) {
              var fieldSchema = fieldsSchema[field];
              var fieldSchemaList = Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
              paredFieldsSchema[field] = fieldSchemaList.map(addFullField.bind(null, field));
            });
            var schema = new Schema2(paredFieldsSchema);
            schema.messages(options.messages);
            if (data.rule.options) {
              data.rule.options.messages = options.messages;
              data.rule.options.error = options.error;
            }
            schema.validate(data.value, data.rule.options || options, function(errs) {
              var finalErrors = [];
              if (filledErrors && filledErrors.length) {
                finalErrors.push.apply(finalErrors, filledErrors);
              }
              if (errs && errs.length) {
                finalErrors.push.apply(finalErrors, errs);
              }
              doIt(finalErrors.length ? finalErrors : null);
            });
          }
        }
        var res;
        if (rule.asyncValidator) {
          res = rule.asyncValidator(rule, data.value, cb, data.source, options);
        } else if (rule.validator) {
          try {
            res = rule.validator(rule, data.value, cb, data.source, options);
          } catch (error) {
            console.error == null ? void 0 : formatAppLog("error", "at node_modules/element-plus/node_modules/async-validator/dist-web/index.js:1248", error);
            if (!options.suppressValidatorError) {
              setTimeout(function() {
                throw error;
              }, 0);
            }
            cb(error.message);
          }
          if (res === true) {
            cb();
          } else if (res === false) {
            cb(typeof rule.message === "function" ? rule.message(rule.fullField || rule.field) : rule.message || (rule.fullField || rule.field) + " fails");
          } else if (res instanceof Array) {
            cb(res);
          } else if (res instanceof Error) {
            cb(res.message);
          }
        }
        if (res && res.then) {
          res.then(function() {
            return cb();
          }, function(e) {
            return cb(e);
          });
        }
      }, function(results) {
        complete(results);
      }, source);
    };
    _proto.getType = function getType(rule) {
      if (rule.type === void 0 && rule.pattern instanceof RegExp) {
        rule.type = "pattern";
      }
      if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
        throw new Error(format("Unknown rule type %s", rule.type));
      }
      return rule.type || "string";
    };
    _proto.getValidationMethod = function getValidationMethod(rule) {
      if (typeof rule.validator === "function") {
        return rule.validator;
      }
      var keys2 = Object.keys(rule);
      var messageIndex = keys2.indexOf("message");
      if (messageIndex !== -1) {
        keys2.splice(messageIndex, 1);
      }
      if (keys2.length === 1 && keys2[0] === "required") {
        return validators.required;
      }
      return validators[this.getType(rule)] || void 0;
    };
    return Schema2;
  }();
  Schema.register = function register(type4, validator) {
    if (typeof validator !== "function") {
      throw new Error("Cannot register a validator by type, validator is not a function");
    }
    validators[type4] = validator;
  };
  Schema.warning = warning;
  Schema.messages = messages;
  Schema.validators = validators;
  const formItemValidateStates = [
    "",
    "error",
    "validating",
    "success"
  ];
  const formItemProps = buildProps({
    label: String,
    labelWidth: {
      type: [String, Number],
      default: ""
    },
    labelPosition: {
      type: String,
      values: ["left", "right", "top", ""],
      default: ""
    },
    prop: {
      type: definePropType([String, Array])
    },
    required: {
      type: Boolean,
      default: void 0
    },
    rules: {
      type: definePropType([Object, Array])
    },
    error: String,
    validateStatus: {
      type: String,
      values: formItemValidateStates
    },
    for: String,
    inlineMessage: {
      type: [String, Boolean],
      default: ""
    },
    showMessage: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      values: componentSizes
    }
  });
  const COMPONENT_NAME$l = "ElLabelWrap";
  var FormLabelWrap = vue.defineComponent({
    name: COMPONENT_NAME$l,
    props: {
      isAutoWidth: Boolean,
      updateAll: Boolean
    },
    setup(props2, {
      slots
    }) {
      const formContext = vue.inject(formContextKey, void 0);
      const formItemContext = vue.inject(formItemContextKey);
      if (!formItemContext)
        throwError(COMPONENT_NAME$l, "usage: <el-form-item><label-wrap /></el-form-item>");
      const ns2 = useNamespace("form");
      const el = vue.ref();
      const computedWidth = vue.ref(0);
      const getLabelWidth = () => {
        var _a2;
        if ((_a2 = el.value) == null ? void 0 : _a2.firstElementChild) {
          const width = window.getComputedStyle(el.value.firstElementChild).width;
          return Math.ceil(Number.parseFloat(width));
        } else {
          return 0;
        }
      };
      const updateLabelWidth = (action = "update") => {
        vue.nextTick(() => {
          if (slots.default && props2.isAutoWidth) {
            if (action === "update") {
              computedWidth.value = getLabelWidth();
            } else if (action === "remove") {
              formContext == null ? void 0 : formContext.deregisterLabelWidth(computedWidth.value);
            }
          }
        });
      };
      const updateLabelWidthFn = () => updateLabelWidth("update");
      vue.onMounted(() => {
        updateLabelWidthFn();
      });
      vue.onBeforeUnmount(() => {
        updateLabelWidth("remove");
      });
      vue.onUpdated(() => updateLabelWidthFn());
      vue.watch(computedWidth, (val, oldVal) => {
        if (props2.updateAll) {
          formContext == null ? void 0 : formContext.registerLabelWidth(val, oldVal);
        }
      });
      useResizeObserver(vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = el.value) == null ? void 0 : _a2.firstElementChild) != null ? _b : null;
      }), updateLabelWidthFn);
      return () => {
        var _a2, _b;
        if (!slots)
          return null;
        const {
          isAutoWidth
        } = props2;
        if (isAutoWidth) {
          const autoLabelWidth = formContext == null ? void 0 : formContext.autoLabelWidth;
          const hasLabel = formItemContext == null ? void 0 : formItemContext.hasLabel;
          const style = {};
          if (hasLabel && autoLabelWidth && autoLabelWidth !== "auto") {
            const marginWidth = Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);
            const labelPosition = formItemContext.labelPosition || formContext.labelPosition;
            const marginPosition = labelPosition === "left" ? "marginRight" : "marginLeft";
            if (marginWidth) {
              style[marginPosition] = `${marginWidth}px`;
            }
          }
          return vue.createVNode("div", {
            "ref": el,
            "class": [ns2.be("item", "label-wrap")],
            "style": style
          }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]);
        } else {
          return vue.createVNode(vue.Fragment, {
            "ref": el
          }, [(_b = slots.default) == null ? void 0 : _b.call(slots)]);
        }
      };
    }
  });
  const __default__$1L = vue.defineComponent({
    name: "ElFormItem"
  });
  const _sfc_main$2r = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1L,
    props: formItemProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const slots = vue.useSlots();
      const formContext = vue.inject(formContextKey, void 0);
      const parentFormItemContext = vue.inject(formItemContextKey, void 0);
      const _size = useFormSize(void 0, { formItem: false });
      const ns2 = useNamespace("form-item");
      const labelId = useId().value;
      const inputIds = vue.ref([]);
      const validateState = vue.ref("");
      const validateStateDebounced = refDebounced(validateState, 100);
      const validateMessage = vue.ref("");
      const formItemRef = vue.ref();
      let initialValue = void 0;
      let isResettingField = false;
      const labelPosition = vue.computed(() => props2.labelPosition || (formContext == null ? void 0 : formContext.labelPosition));
      const labelStyle = vue.computed(() => {
        if (labelPosition.value === "top") {
          return {};
        }
        const labelWidth = addUnit(props2.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || "");
        if (labelWidth)
          return { width: labelWidth };
        return {};
      });
      const contentStyle = vue.computed(() => {
        if (labelPosition.value === "top" || (formContext == null ? void 0 : formContext.inline)) {
          return {};
        }
        if (!props2.label && !props2.labelWidth && isNested) {
          return {};
        }
        const labelWidth = addUnit(props2.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || "");
        if (!props2.label && !slots.label) {
          return { marginLeft: labelWidth };
        }
        return {};
      });
      const formItemClasses = vue.computed(() => [
        ns2.b(),
        ns2.m(_size.value),
        ns2.is("error", validateState.value === "error"),
        ns2.is("validating", validateState.value === "validating"),
        ns2.is("success", validateState.value === "success"),
        ns2.is("required", isRequired.value || props2.required),
        ns2.is("no-asterisk", formContext == null ? void 0 : formContext.hideRequiredAsterisk),
        (formContext == null ? void 0 : formContext.requireAsteriskPosition) === "right" ? "asterisk-right" : "asterisk-left",
        {
          [ns2.m("feedback")]: formContext == null ? void 0 : formContext.statusIcon,
          [ns2.m(`label-${labelPosition.value}`)]: labelPosition.value
        }
      ]);
      const _inlineMessage = vue.computed(() => isBoolean$1(props2.inlineMessage) ? props2.inlineMessage : (formContext == null ? void 0 : formContext.inlineMessage) || false);
      const validateClasses = vue.computed(() => [
        ns2.e("error"),
        { [ns2.em("error", "inline")]: _inlineMessage.value }
      ]);
      const propString = vue.computed(() => {
        if (!props2.prop)
          return "";
        return shared.isString(props2.prop) ? props2.prop : props2.prop.join(".");
      });
      const hasLabel = vue.computed(() => {
        return !!(props2.label || slots.label);
      });
      const labelFor = vue.computed(() => {
        return props2.for || (inputIds.value.length === 1 ? inputIds.value[0] : void 0);
      });
      const isGroup = vue.computed(() => {
        return !labelFor.value && hasLabel.value;
      });
      const isNested = !!parentFormItemContext;
      const fieldValue = vue.computed(() => {
        const model = formContext == null ? void 0 : formContext.model;
        if (!model || !props2.prop) {
          return;
        }
        return getProp(model, props2.prop).value;
      });
      const normalizedRules = vue.computed(() => {
        const { required } = props2;
        const rules2 = [];
        if (props2.rules) {
          rules2.push(...castArray$1(props2.rules));
        }
        const formRules = formContext == null ? void 0 : formContext.rules;
        if (formRules && props2.prop) {
          const _rules = getProp(formRules, props2.prop).value;
          if (_rules) {
            rules2.push(...castArray$1(_rules));
          }
        }
        if (required !== void 0) {
          const requiredRules = rules2.map((rule, i2) => [rule, i2]).filter(([rule]) => Object.keys(rule).includes("required"));
          if (requiredRules.length > 0) {
            for (const [rule, i2] of requiredRules) {
              if (rule.required === required)
                continue;
              rules2[i2] = { ...rule, required };
            }
          } else {
            rules2.push({ required });
          }
        }
        return rules2;
      });
      const validateEnabled = vue.computed(() => normalizedRules.value.length > 0);
      const getFilteredRule = (trigger) => {
        const rules2 = normalizedRules.value;
        return rules2.filter((rule) => {
          if (!rule.trigger || !trigger)
            return true;
          if (Array.isArray(rule.trigger)) {
            return rule.trigger.includes(trigger);
          } else {
            return rule.trigger === trigger;
          }
        }).map(({ trigger: trigger2, ...rule }) => rule);
      };
      const isRequired = vue.computed(() => normalizedRules.value.some((rule) => rule.required));
      const shouldShowError = vue.computed(() => {
        var _a2;
        return validateStateDebounced.value === "error" && props2.showMessage && ((_a2 = formContext == null ? void 0 : formContext.showMessage) != null ? _a2 : true);
      });
      const currentLabel = vue.computed(() => `${props2.label || ""}${(formContext == null ? void 0 : formContext.labelSuffix) || ""}`);
      const setValidationState = (state2) => {
        validateState.value = state2;
      };
      const onValidationFailed = (error) => {
        var _a2, _b;
        const { errors, fields } = error;
        if (!errors || !fields) {
          formatAppLog("error", "at node_modules/element-plus/es/components/form/src/form-item2.mjs:158", error);
        }
        setValidationState("error");
        validateMessage.value = errors ? (_b = (_a2 = errors == null ? void 0 : errors[0]) == null ? void 0 : _a2.message) != null ? _b : `${props2.prop} is required` : "";
        formContext == null ? void 0 : formContext.emit("validate", props2.prop, false, validateMessage.value);
      };
      const onValidationSucceeded = () => {
        setValidationState("success");
        formContext == null ? void 0 : formContext.emit("validate", props2.prop, true, "");
      };
      const doValidate = async (rules2) => {
        const modelName = propString.value;
        const validator = new Schema({
          [modelName]: rules2
        });
        return validator.validate({ [modelName]: fieldValue.value }, { firstFields: true }).then(() => {
          onValidationSucceeded();
          return true;
        }).catch((err) => {
          onValidationFailed(err);
          return Promise.reject(err);
        });
      };
      const validate = async (trigger, callback) => {
        if (isResettingField || !props2.prop) {
          return false;
        }
        const hasCallback = shared.isFunction(callback);
        if (!validateEnabled.value) {
          callback == null ? void 0 : callback(false);
          return false;
        }
        const rules2 = getFilteredRule(trigger);
        if (rules2.length === 0) {
          callback == null ? void 0 : callback(true);
          return true;
        }
        setValidationState("validating");
        return doValidate(rules2).then(() => {
          callback == null ? void 0 : callback(true);
          return true;
        }).catch((err) => {
          const { fields } = err;
          callback == null ? void 0 : callback(false, fields);
          return hasCallback ? false : Promise.reject(fields);
        });
      };
      const clearValidate = () => {
        setValidationState("");
        validateMessage.value = "";
        isResettingField = false;
      };
      const resetField = async () => {
        const model = formContext == null ? void 0 : formContext.model;
        if (!model || !props2.prop)
          return;
        const computedValue = getProp(model, props2.prop);
        isResettingField = true;
        computedValue.value = clone(initialValue);
        await vue.nextTick();
        clearValidate();
        isResettingField = false;
      };
      const addInputId = (id) => {
        if (!inputIds.value.includes(id)) {
          inputIds.value.push(id);
        }
      };
      const removeInputId = (id) => {
        inputIds.value = inputIds.value.filter((listId) => listId !== id);
      };
      vue.watch(() => props2.error, (val) => {
        validateMessage.value = val || "";
        setValidationState(val ? "error" : "");
      }, { immediate: true });
      vue.watch(() => props2.validateStatus, (val) => setValidationState(val || ""));
      const context = vue.reactive({
        ...vue.toRefs(props2),
        $el: formItemRef,
        size: _size,
        validateState,
        labelId,
        inputIds,
        isGroup,
        hasLabel,
        fieldValue,
        addInputId,
        removeInputId,
        resetField,
        clearValidate,
        validate
      });
      vue.provide(formItemContextKey, context);
      vue.onMounted(() => {
        if (props2.prop) {
          formContext == null ? void 0 : formContext.addField(context);
          initialValue = clone(fieldValue.value);
        }
      });
      vue.onBeforeUnmount(() => {
        formContext == null ? void 0 : formContext.removeField(context);
      });
      expose({
        size: _size,
        validateMessage,
        validateState,
        validate,
        clearValidate,
        resetField
      });
      return (_ctx, _cache) => {
        var _a2;
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "formItemRef",
          ref: formItemRef,
          class: vue.normalizeClass(vue.unref(formItemClasses)),
          role: vue.unref(isGroup) ? "group" : void 0,
          "aria-labelledby": vue.unref(isGroup) ? vue.unref(labelId) : void 0
        }, [
          vue.createVNode(vue.unref(FormLabelWrap), {
            "is-auto-width": vue.unref(labelStyle).width === "auto",
            "update-all": ((_a2 = vue.unref(formContext)) == null ? void 0 : _a2.labelWidth) === "auto"
          }, {
            default: vue.withCtx(() => [
              vue.unref(hasLabel) ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(labelFor) ? "label" : "div"), {
                key: 0,
                id: vue.unref(labelId),
                for: vue.unref(labelFor),
                class: vue.normalizeClass(vue.unref(ns2).e("label")),
                style: vue.normalizeStyle(vue.unref(labelStyle))
              }, {
                default: vue.withCtx(() => [
                  vue.renderSlot(_ctx.$slots, "label", { label: vue.unref(currentLabel) }, () => [
                    vue.createTextVNode(vue.toDisplayString(vue.unref(currentLabel)), 1)
                  ])
                ]),
                _: 3
              }, 8, ["id", "for", "class", "style"])) : vue.createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["is-auto-width", "update-all"]),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("content")),
            style: vue.normalizeStyle(vue.unref(contentStyle))
          }, [
            vue.renderSlot(_ctx.$slots, "default"),
            vue.createVNode(vue.TransitionGroup, {
              name: `${vue.unref(ns2).namespace.value}-zoom-in-top`
            }, {
              default: vue.withCtx(() => [
                vue.unref(shouldShowError) ? vue.renderSlot(_ctx.$slots, "error", {
                  key: 0,
                  error: validateMessage.value
                }, () => [
                  vue.createElementVNode("div", {
                    class: vue.normalizeClass(vue.unref(validateClasses))
                  }, vue.toDisplayString(validateMessage.value), 3)
                ]) : vue.createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 8, ["name"])
          ], 6)
        ], 10, ["role", "aria-labelledby"]);
      };
    }
  });
  var FormItem = /* @__PURE__ */ _export_sfc(_sfc_main$2r, [["__file", "form-item.vue"]]);
  const ElForm = withInstall(Form, {
    FormItem
  });
  const ElFormItem = withNoopInstall(FormItem);
  let hiddenTextarea = void 0;
  const HIDDEN_STYLE = `
  height:0 !important;
  visibility:hidden !important;
  ${isFirefox() ? "" : "overflow:hidden !important;"}
  position:absolute !important;
  z-index:-1000 !important;
  top:0 !important;
  right:0 !important;
`;
  const CONTEXT_STYLE = [
    "letter-spacing",
    "line-height",
    "padding-top",
    "padding-bottom",
    "font-family",
    "font-weight",
    "font-size",
    "text-rendering",
    "text-transform",
    "width",
    "text-indent",
    "padding-left",
    "padding-right",
    "border-width",
    "box-sizing"
  ];
  function calculateNodeStyling(targetElement) {
    const style = window.getComputedStyle(targetElement);
    const boxSizing = style.getPropertyValue("box-sizing");
    const paddingSize = Number.parseFloat(style.getPropertyValue("padding-bottom")) + Number.parseFloat(style.getPropertyValue("padding-top"));
    const borderSize = Number.parseFloat(style.getPropertyValue("border-bottom-width")) + Number.parseFloat(style.getPropertyValue("border-top-width"));
    const contextStyle = CONTEXT_STYLE.map((name) => `${name}:${style.getPropertyValue(name)}`).join(";");
    return { contextStyle, paddingSize, borderSize, boxSizing };
  }
  function calcTextareaHeight(targetElement, minRows = 1, maxRows) {
    var _a2;
    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      document.body.appendChild(hiddenTextarea);
    }
    const { paddingSize, borderSize, boxSizing, contextStyle } = calculateNodeStyling(targetElement);
    hiddenTextarea.setAttribute("style", `${contextStyle};${HIDDEN_STYLE}`);
    hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
    let height = hiddenTextarea.scrollHeight;
    const result = {};
    if (boxSizing === "border-box") {
      height = height + borderSize;
    } else if (boxSizing === "content-box") {
      height = height - paddingSize;
    }
    hiddenTextarea.value = "";
    const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
    if (isNumber$2(minRows)) {
      let minHeight = singleRowHeight * minRows;
      if (boxSizing === "border-box") {
        minHeight = minHeight + paddingSize + borderSize;
      }
      height = Math.max(minHeight, height);
      result.minHeight = `${minHeight}px`;
    }
    if (isNumber$2(maxRows)) {
      let maxHeight = singleRowHeight * maxRows;
      if (boxSizing === "border-box") {
        maxHeight = maxHeight + paddingSize + borderSize;
      }
      height = Math.min(maxHeight, height);
    }
    result.height = `${height}px`;
    (_a2 = hiddenTextarea.parentNode) == null ? void 0 : _a2.removeChild(hiddenTextarea);
    hiddenTextarea = void 0;
    return result;
  }
  const inputProps = buildProps({
    id: {
      type: String,
      default: void 0
    },
    size: useSizeProp,
    disabled: Boolean,
    modelValue: {
      type: definePropType([
        String,
        Number,
        Object
      ]),
      default: ""
    },
    maxlength: {
      type: [String, Number]
    },
    minlength: {
      type: [String, Number]
    },
    type: {
      type: String,
      default: "text"
    },
    resize: {
      type: String,
      values: ["none", "both", "horizontal", "vertical"]
    },
    autosize: {
      type: definePropType([Boolean, Object]),
      default: false
    },
    autocomplete: {
      type: String,
      default: "off"
    },
    formatter: {
      type: Function
    },
    parser: {
      type: Function
    },
    placeholder: {
      type: String
    },
    form: {
      type: String
    },
    readonly: Boolean,
    clearable: Boolean,
    showPassword: Boolean,
    showWordLimit: Boolean,
    suffixIcon: {
      type: iconPropType
    },
    prefixIcon: {
      type: iconPropType
    },
    containerRole: {
      type: String,
      default: void 0
    },
    tabindex: {
      type: [String, Number],
      default: 0
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    inputStyle: {
      type: definePropType([Object, Array, String]),
      default: () => mutable({})
    },
    autofocus: Boolean,
    rows: {
      type: Number,
      default: 2
    },
    ...useAriaProps(["ariaLabel"])
  });
  const inputEmits = {
    [UPDATE_MODEL_EVENT]: (value) => shared.isString(value),
    input: (value) => shared.isString(value),
    change: (value) => shared.isString(value),
    focus: (evt) => evt instanceof FocusEvent,
    blur: (evt) => evt instanceof FocusEvent,
    clear: () => true,
    mouseleave: (evt) => evt instanceof MouseEvent,
    mouseenter: (evt) => evt instanceof MouseEvent,
    keydown: (evt) => evt instanceof Event,
    compositionstart: (evt) => evt instanceof CompositionEvent,
    compositionupdate: (evt) => evt instanceof CompositionEvent,
    compositionend: (evt) => evt instanceof CompositionEvent
  };
  const __default__$1K = vue.defineComponent({
    name: "ElInput",
    inheritAttrs: false
  });
  const _sfc_main$2q = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1K,
    props: inputProps,
    emits: inputEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const rawAttrs = vue.useAttrs();
      const slots = vue.useSlots();
      const containerAttrs = vue.computed(() => {
        const comboBoxAttrs = {};
        if (props2.containerRole === "combobox") {
          comboBoxAttrs["aria-haspopup"] = rawAttrs["aria-haspopup"];
          comboBoxAttrs["aria-owns"] = rawAttrs["aria-owns"];
          comboBoxAttrs["aria-expanded"] = rawAttrs["aria-expanded"];
        }
        return comboBoxAttrs;
      });
      const containerKls = vue.computed(() => [
        props2.type === "textarea" ? nsTextarea.b() : nsInput.b(),
        nsInput.m(inputSize.value),
        nsInput.is("disabled", inputDisabled.value),
        nsInput.is("exceed", inputExceed.value),
        {
          [nsInput.b("group")]: slots.prepend || slots.append,
          [nsInput.m("prefix")]: slots.prefix || props2.prefixIcon,
          [nsInput.m("suffix")]: slots.suffix || props2.suffixIcon || props2.clearable || props2.showPassword,
          [nsInput.bm("suffix", "password-clear")]: showClear.value && showPwdVisible.value,
          [nsInput.b("hidden")]: props2.type === "hidden"
        },
        rawAttrs.class
      ]);
      const wrapperKls = vue.computed(() => [
        nsInput.e("wrapper"),
        nsInput.is("focus", isFocused.value)
      ]);
      const attrs2 = useAttrs({
        excludeKeys: vue.computed(() => {
          return Object.keys(containerAttrs.value);
        })
      });
      const { form: elForm, formItem: elFormItem } = useFormItem();
      const { inputId } = useFormItemInputId(props2, {
        formItemContext: elFormItem
      });
      const inputSize = useFormSize();
      const inputDisabled = useFormDisabled();
      const nsInput = useNamespace("input");
      const nsTextarea = useNamespace("textarea");
      const input = vue.shallowRef();
      const textarea = vue.shallowRef();
      const hovering = vue.ref(false);
      const passwordVisible = vue.ref(false);
      const countStyle = vue.ref();
      const textareaCalcStyle = vue.shallowRef(props2.inputStyle);
      const _ref = vue.computed(() => input.value || textarea.value);
      const { wrapperRef, isFocused, handleFocus, handleBlur } = useFocusController(_ref, {
        beforeFocus() {
          return inputDisabled.value;
        },
        afterBlur() {
          var _a2;
          if (props2.validateEvent) {
            (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "blur").catch((err) => debugWarn(err));
          }
        }
      });
      const needStatusIcon = vue.computed(() => {
        var _a2;
        return (_a2 = elForm == null ? void 0 : elForm.statusIcon) != null ? _a2 : false;
      });
      const validateState = vue.computed(() => (elFormItem == null ? void 0 : elFormItem.validateState) || "");
      const validateIcon = vue.computed(() => validateState.value && ValidateComponentsMap[validateState.value]);
      const passwordIcon = vue.computed(() => passwordVisible.value ? view_default : hide_default);
      const containerStyle = vue.computed(() => [
        rawAttrs.style
      ]);
      const textareaStyle = vue.computed(() => [
        props2.inputStyle,
        textareaCalcStyle.value,
        { resize: props2.resize }
      ]);
      const nativeInputValue = vue.computed(() => isNil(props2.modelValue) ? "" : String(props2.modelValue));
      const showClear = vue.computed(() => props2.clearable && !inputDisabled.value && !props2.readonly && !!nativeInputValue.value && (isFocused.value || hovering.value));
      const showPwdVisible = vue.computed(() => props2.showPassword && !inputDisabled.value && !!nativeInputValue.value && (!!nativeInputValue.value || isFocused.value));
      const isWordLimitVisible = vue.computed(() => props2.showWordLimit && !!props2.maxlength && (props2.type === "text" || props2.type === "textarea") && !inputDisabled.value && !props2.readonly && !props2.showPassword);
      const textLength = vue.computed(() => nativeInputValue.value.length);
      const inputExceed = vue.computed(() => !!isWordLimitVisible.value && textLength.value > Number(props2.maxlength));
      const suffixVisible = vue.computed(() => !!slots.suffix || !!props2.suffixIcon || showClear.value || props2.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);
      const [recordCursor, setCursor] = useCursor(input);
      useResizeObserver(textarea, (entries) => {
        onceInitSizeTextarea();
        if (!isWordLimitVisible.value || props2.resize !== "both")
          return;
        const entry = entries[0];
        const { width } = entry.contentRect;
        countStyle.value = {
          right: `calc(100% - ${width + 15 + 6}px)`
        };
      });
      const resizeTextarea = () => {
        const { type: type3, autosize } = props2;
        if (!isClient || type3 !== "textarea" || !textarea.value)
          return;
        if (autosize) {
          const minRows = shared.isObject(autosize) ? autosize.minRows : void 0;
          const maxRows = shared.isObject(autosize) ? autosize.maxRows : void 0;
          const textareaStyle2 = calcTextareaHeight(textarea.value, minRows, maxRows);
          textareaCalcStyle.value = {
            overflowY: "hidden",
            ...textareaStyle2
          };
          vue.nextTick(() => {
            textarea.value.offsetHeight;
            textareaCalcStyle.value = textareaStyle2;
          });
        } else {
          textareaCalcStyle.value = {
            minHeight: calcTextareaHeight(textarea.value).minHeight
          };
        }
      };
      const createOnceInitResize = (resizeTextarea2) => {
        let isInit = false;
        return () => {
          var _a2;
          if (isInit || !props2.autosize)
            return;
          const isElHidden = ((_a2 = textarea.value) == null ? void 0 : _a2.offsetParent) === null;
          if (!isElHidden) {
            resizeTextarea2();
            isInit = true;
          }
        };
      };
      const onceInitSizeTextarea = createOnceInitResize(resizeTextarea);
      const setNativeInputValue = () => {
        const input2 = _ref.value;
        const formatterValue = props2.formatter ? props2.formatter(nativeInputValue.value) : nativeInputValue.value;
        if (!input2 || input2.value === formatterValue)
          return;
        input2.value = formatterValue;
      };
      const handleInput = async (event) => {
        recordCursor();
        let { value } = event.target;
        if (props2.formatter) {
          value = props2.parser ? props2.parser(value) : value;
        }
        if (isComposing.value)
          return;
        if (value === nativeInputValue.value) {
          setNativeInputValue();
          return;
        }
        emit(UPDATE_MODEL_EVENT, value);
        emit("input", value);
        await vue.nextTick();
        setNativeInputValue();
        setCursor();
      };
      const handleChange = (event) => {
        emit("change", event.target.value);
      };
      const {
        isComposing,
        handleCompositionStart,
        handleCompositionUpdate,
        handleCompositionEnd
      } = useComposition({ emit, afterComposition: handleInput });
      const handlePasswordVisible = () => {
        passwordVisible.value = !passwordVisible.value;
        focus();
      };
      const focus = async () => {
        var _a2;
        await vue.nextTick();
        (_a2 = _ref.value) == null ? void 0 : _a2.focus();
      };
      const blur = () => {
        var _a2;
        return (_a2 = _ref.value) == null ? void 0 : _a2.blur();
      };
      const handleMouseLeave = (evt) => {
        hovering.value = false;
        emit("mouseleave", evt);
      };
      const handleMouseEnter = (evt) => {
        hovering.value = true;
        emit("mouseenter", evt);
      };
      const handleKeydown = (evt) => {
        emit("keydown", evt);
      };
      const select = () => {
        var _a2;
        (_a2 = _ref.value) == null ? void 0 : _a2.select();
      };
      const clear = () => {
        emit(UPDATE_MODEL_EVENT, "");
        emit("change", "");
        emit("clear");
        emit("input", "");
      };
      vue.watch(() => props2.modelValue, () => {
        var _a2;
        vue.nextTick(() => resizeTextarea());
        if (props2.validateEvent) {
          (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn(err));
        }
      });
      vue.watch(nativeInputValue, () => setNativeInputValue());
      vue.watch(() => props2.type, async () => {
        await vue.nextTick();
        setNativeInputValue();
        resizeTextarea();
      });
      vue.onMounted(() => {
        if (!props2.formatter && props2.parser) {
          debugWarn("ElInput", "If you set the parser, you also need to set the formatter.");
        }
        setNativeInputValue();
        vue.nextTick(resizeTextarea);
      });
      expose({
        input,
        textarea,
        ref: _ref,
        textareaStyle,
        autosize: vue.toRef(props2, "autosize"),
        isComposing,
        focus,
        blur,
        select,
        clear,
        resizeTextarea
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", vue.mergeProps(vue.unref(containerAttrs), {
          class: [
            vue.unref(containerKls),
            {
              [vue.unref(nsInput).bm("group", "append")]: _ctx.$slots.append,
              [vue.unref(nsInput).bm("group", "prepend")]: _ctx.$slots.prepend
            }
          ],
          style: vue.unref(containerStyle),
          role: _ctx.containerRole,
          onMouseenter: handleMouseEnter,
          onMouseleave: handleMouseLeave
        }), [
          vue.createCommentVNode(" input "),
          _ctx.type !== "textarea" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
            vue.createCommentVNode(" prepend slot "),
            _ctx.$slots.prepend ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(nsInput).be("group", "prepend"))
            }, [
              vue.renderSlot(_ctx.$slots, "prepend")
            ], 2)) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("div", {
              ref_key: "wrapperRef",
              ref: wrapperRef,
              class: vue.normalizeClass(vue.unref(wrapperKls))
            }, [
              vue.createCommentVNode(" prefix slot "),
              _ctx.$slots.prefix || _ctx.prefixIcon ? (vue.openBlock(), vue.createElementBlock("span", {
                key: 0,
                class: vue.normalizeClass(vue.unref(nsInput).e("prefix"))
              }, [
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(vue.unref(nsInput).e("prefix-inner"))
                }, [
                  vue.renderSlot(_ctx.$slots, "prefix"),
                  _ctx.prefixIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: 0,
                    class: vue.normalizeClass(vue.unref(nsInput).e("icon"))
                  }, {
                    default: vue.withCtx(() => [
                      (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.prefixIcon)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : vue.createCommentVNode("v-if", true)
                ], 2)
              ], 2)) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("input", vue.mergeProps({
                id: vue.unref(inputId),
                ref_key: "input",
                ref: input,
                class: vue.unref(nsInput).e("inner")
              }, vue.unref(attrs2), {
                minlength: _ctx.minlength,
                maxlength: _ctx.maxlength,
                type: _ctx.showPassword ? passwordVisible.value ? "text" : "password" : _ctx.type,
                disabled: vue.unref(inputDisabled),
                readonly: _ctx.readonly,
                autocomplete: _ctx.autocomplete,
                tabindex: _ctx.tabindex,
                "aria-label": _ctx.ariaLabel,
                placeholder: _ctx.placeholder,
                style: _ctx.inputStyle,
                form: _ctx.form,
                autofocus: _ctx.autofocus,
                onCompositionstart: vue.unref(handleCompositionStart),
                onCompositionupdate: vue.unref(handleCompositionUpdate),
                onCompositionend: vue.unref(handleCompositionEnd),
                onInput: handleInput,
                onChange: handleChange,
                onKeydown: handleKeydown
              }), null, 16, ["id", "minlength", "maxlength", "type", "disabled", "readonly", "autocomplete", "tabindex", "aria-label", "placeholder", "form", "autofocus", "onCompositionstart", "onCompositionupdate", "onCompositionend"]),
              vue.createCommentVNode(" suffix slot "),
              vue.unref(suffixVisible) ? (vue.openBlock(), vue.createElementBlock("span", {
                key: 1,
                class: vue.normalizeClass(vue.unref(nsInput).e("suffix"))
              }, [
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(vue.unref(nsInput).e("suffix-inner"))
                }, [
                  !vue.unref(showClear) || !vue.unref(showPwdVisible) || !vue.unref(isWordLimitVisible) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                    vue.renderSlot(_ctx.$slots, "suffix"),
                    _ctx.suffixIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                      key: 0,
                      class: vue.normalizeClass(vue.unref(nsInput).e("icon"))
                    }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.suffixIcon)))
                      ]),
                      _: 1
                    }, 8, ["class"])) : vue.createCommentVNode("v-if", true)
                  ], 64)) : vue.createCommentVNode("v-if", true),
                  vue.unref(showClear) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: 1,
                    class: vue.normalizeClass([vue.unref(nsInput).e("icon"), vue.unref(nsInput).e("clear")]),
                    onMousedown: vue.withModifiers(vue.unref(shared.NOOP), ["prevent"]),
                    onClick: clear
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(circle_close_default))
                    ]),
                    _: 1
                  }, 8, ["class", "onMousedown"])) : vue.createCommentVNode("v-if", true),
                  vue.unref(showPwdVisible) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: 2,
                    class: vue.normalizeClass([vue.unref(nsInput).e("icon"), vue.unref(nsInput).e("password")]),
                    onClick: handlePasswordVisible
                  }, {
                    default: vue.withCtx(() => [
                      (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(passwordIcon))))
                    ]),
                    _: 1
                  }, 8, ["class"])) : vue.createCommentVNode("v-if", true),
                  vue.unref(isWordLimitVisible) ? (vue.openBlock(), vue.createElementBlock("span", {
                    key: 3,
                    class: vue.normalizeClass(vue.unref(nsInput).e("count"))
                  }, [
                    vue.createElementVNode("span", {
                      class: vue.normalizeClass(vue.unref(nsInput).e("count-inner"))
                    }, vue.toDisplayString(vue.unref(textLength)) + " / " + vue.toDisplayString(_ctx.maxlength), 3)
                  ], 2)) : vue.createCommentVNode("v-if", true),
                  vue.unref(validateState) && vue.unref(validateIcon) && vue.unref(needStatusIcon) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: 4,
                    class: vue.normalizeClass([
                      vue.unref(nsInput).e("icon"),
                      vue.unref(nsInput).e("validateIcon"),
                      vue.unref(nsInput).is("loading", vue.unref(validateState) === "validating")
                    ])
                  }, {
                    default: vue.withCtx(() => [
                      (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(validateIcon))))
                    ]),
                    _: 1
                  }, 8, ["class"])) : vue.createCommentVNode("v-if", true)
                ], 2)
              ], 2)) : vue.createCommentVNode("v-if", true)
            ], 2),
            vue.createCommentVNode(" append slot "),
            _ctx.$slots.append ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 1,
              class: vue.normalizeClass(vue.unref(nsInput).be("group", "append"))
            }, [
              vue.renderSlot(_ctx.$slots, "append")
            ], 2)) : vue.createCommentVNode("v-if", true)
          ], 64)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
            vue.createCommentVNode(" textarea "),
            vue.createElementVNode("textarea", vue.mergeProps({
              id: vue.unref(inputId),
              ref_key: "textarea",
              ref: textarea,
              class: [vue.unref(nsTextarea).e("inner"), vue.unref(nsInput).is("focus", vue.unref(isFocused))]
            }, vue.unref(attrs2), {
              minlength: _ctx.minlength,
              maxlength: _ctx.maxlength,
              tabindex: _ctx.tabindex,
              disabled: vue.unref(inputDisabled),
              readonly: _ctx.readonly,
              autocomplete: _ctx.autocomplete,
              style: vue.unref(textareaStyle),
              "aria-label": _ctx.ariaLabel,
              placeholder: _ctx.placeholder,
              form: _ctx.form,
              autofocus: _ctx.autofocus,
              rows: _ctx.rows,
              onCompositionstart: vue.unref(handleCompositionStart),
              onCompositionupdate: vue.unref(handleCompositionUpdate),
              onCompositionend: vue.unref(handleCompositionEnd),
              onInput: handleInput,
              onFocus: vue.unref(handleFocus),
              onBlur: vue.unref(handleBlur),
              onChange: handleChange,
              onKeydown: handleKeydown
            }), null, 16, ["id", "minlength", "maxlength", "tabindex", "disabled", "readonly", "autocomplete", "aria-label", "placeholder", "form", "autofocus", "rows", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onFocus", "onBlur"]),
            vue.unref(isWordLimitVisible) ? (vue.openBlock(), vue.createElementBlock("span", {
              key: 0,
              style: vue.normalizeStyle(countStyle.value),
              class: vue.normalizeClass(vue.unref(nsInput).e("count"))
            }, vue.toDisplayString(vue.unref(textLength)) + " / " + vue.toDisplayString(_ctx.maxlength), 7)) : vue.createCommentVNode("v-if", true)
          ], 64))
        ], 16, ["role"]);
      };
    }
  });
  var Input = /* @__PURE__ */ _export_sfc(_sfc_main$2q, [["__file", "input.vue"]]);
  const ElInput = withInstall(Input);
  const GAP = 4;
  const BAR_MAP = {
    vertical: {
      offset: "offsetHeight",
      scroll: "scrollTop",
      scrollSize: "scrollHeight",
      size: "height",
      key: "vertical",
      axis: "Y",
      client: "clientY",
      direction: "top"
    },
    horizontal: {
      offset: "offsetWidth",
      scroll: "scrollLeft",
      scrollSize: "scrollWidth",
      size: "width",
      key: "horizontal",
      axis: "X",
      client: "clientX",
      direction: "left"
    }
  };
  const renderThumbStyle$1 = ({
    move,
    size,
    bar
  }) => ({
    [bar.size]: size,
    transform: `translate${bar.axis}(${move}%)`
  });
  const scrollbarContextKey = Symbol("scrollbarContextKey");
  const thumbProps = buildProps({
    vertical: Boolean,
    size: String,
    move: Number,
    ratio: {
      type: Number,
      required: true
    },
    always: Boolean
  });
  const COMPONENT_NAME$k = "Thumb";
  const _sfc_main$2p = /* @__PURE__ */ vue.defineComponent({
    __name: "thumb",
    props: thumbProps,
    setup(__props) {
      const props2 = __props;
      const scrollbar = vue.inject(scrollbarContextKey);
      const ns2 = useNamespace("scrollbar");
      if (!scrollbar)
        throwError(COMPONENT_NAME$k, "can not inject scrollbar context");
      const instance = vue.ref();
      const thumb = vue.ref();
      const thumbState = vue.ref({});
      const visible = vue.ref(false);
      let cursorDown = false;
      let cursorLeave = false;
      let originalOnSelectStart = isClient ? document.onselectstart : null;
      const bar = vue.computed(() => BAR_MAP[props2.vertical ? "vertical" : "horizontal"]);
      const thumbStyle = vue.computed(() => renderThumbStyle$1({
        size: props2.size,
        move: props2.move,
        bar: bar.value
      }));
      const offsetRatio = vue.computed(() => instance.value[bar.value.offset] ** 2 / scrollbar.wrapElement[bar.value.scrollSize] / props2.ratio / thumb.value[bar.value.offset]);
      const clickThumbHandler = (e) => {
        var _a2;
        e.stopPropagation();
        if (e.ctrlKey || [1, 2].includes(e.button))
          return;
        (_a2 = window.getSelection()) == null ? void 0 : _a2.removeAllRanges();
        startDrag(e);
        const el = e.currentTarget;
        if (!el)
          return;
        thumbState.value[bar.value.axis] = el[bar.value.offset] - (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);
      };
      const clickTrackHandler = (e) => {
        if (!thumb.value || !instance.value || !scrollbar.wrapElement)
          return;
        const offset2 = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);
        const thumbHalf = thumb.value[bar.value.offset] / 2;
        const thumbPositionPercentage = (offset2 - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];
        scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
      };
      const startDrag = (e) => {
        e.stopImmediatePropagation();
        cursorDown = true;
        document.addEventListener("mousemove", mouseMoveDocumentHandler);
        document.addEventListener("mouseup", mouseUpDocumentHandler);
        originalOnSelectStart = document.onselectstart;
        document.onselectstart = () => false;
      };
      const mouseMoveDocumentHandler = (e) => {
        if (!instance.value || !thumb.value)
          return;
        if (cursorDown === false)
          return;
        const prevPage = thumbState.value[bar.value.axis];
        if (!prevPage)
          return;
        const offset2 = (instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;
        const thumbClickPosition = thumb.value[bar.value.offset] - prevPage;
        const thumbPositionPercentage = (offset2 - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];
        scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
      };
      const mouseUpDocumentHandler = () => {
        cursorDown = false;
        thumbState.value[bar.value.axis] = 0;
        document.removeEventListener("mousemove", mouseMoveDocumentHandler);
        document.removeEventListener("mouseup", mouseUpDocumentHandler);
        restoreOnselectstart();
        if (cursorLeave)
          visible.value = false;
      };
      const mouseMoveScrollbarHandler = () => {
        cursorLeave = false;
        visible.value = !!props2.size;
      };
      const mouseLeaveScrollbarHandler = () => {
        cursorLeave = true;
        visible.value = cursorDown;
      };
      vue.onBeforeUnmount(() => {
        restoreOnselectstart();
        document.removeEventListener("mouseup", mouseUpDocumentHandler);
      });
      const restoreOnselectstart = () => {
        if (document.onselectstart !== originalOnSelectStart)
          document.onselectstart = originalOnSelectStart;
      };
      useEventListener(vue.toRef(scrollbar, "scrollbarElement"), "mousemove", mouseMoveScrollbarHandler);
      useEventListener(vue.toRef(scrollbar, "scrollbarElement"), "mouseleave", mouseLeaveScrollbarHandler);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.Transition, {
          name: vue.unref(ns2).b("fade"),
          persisted: ""
        }, {
          default: vue.withCtx(() => [
            vue.withDirectives(vue.createElementVNode("div", {
              ref_key: "instance",
              ref: instance,
              class: vue.normalizeClass([vue.unref(ns2).e("bar"), vue.unref(ns2).is(vue.unref(bar).key)]),
              onMousedown: clickTrackHandler
            }, [
              vue.createElementVNode("div", {
                ref_key: "thumb",
                ref: thumb,
                class: vue.normalizeClass(vue.unref(ns2).e("thumb")),
                style: vue.normalizeStyle(vue.unref(thumbStyle)),
                onMousedown: clickThumbHandler
              }, null, 38)
            ], 34), [
              [vue.vShow, _ctx.always || visible.value]
            ])
          ]),
          _: 1
        }, 8, ["name"]);
      };
    }
  });
  var Thumb = /* @__PURE__ */ _export_sfc(_sfc_main$2p, [["__file", "thumb.vue"]]);
  const barProps = buildProps({
    always: {
      type: Boolean,
      default: true
    },
    minSize: {
      type: Number,
      required: true
    }
  });
  const _sfc_main$2o = /* @__PURE__ */ vue.defineComponent({
    __name: "bar",
    props: barProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const scrollbar = vue.inject(scrollbarContextKey);
      const moveX = vue.ref(0);
      const moveY = vue.ref(0);
      const sizeWidth = vue.ref("");
      const sizeHeight = vue.ref("");
      const ratioY = vue.ref(1);
      const ratioX = vue.ref(1);
      const handleScroll2 = (wrap) => {
        if (wrap) {
          const offsetHeight = wrap.offsetHeight - GAP;
          const offsetWidth = wrap.offsetWidth - GAP;
          moveY.value = wrap.scrollTop * 100 / offsetHeight * ratioY.value;
          moveX.value = wrap.scrollLeft * 100 / offsetWidth * ratioX.value;
        }
      };
      const update = () => {
        const wrap = scrollbar == null ? void 0 : scrollbar.wrapElement;
        if (!wrap)
          return;
        const offsetHeight = wrap.offsetHeight - GAP;
        const offsetWidth = wrap.offsetWidth - GAP;
        const originalHeight = offsetHeight ** 2 / wrap.scrollHeight;
        const originalWidth = offsetWidth ** 2 / wrap.scrollWidth;
        const height = Math.max(originalHeight, props2.minSize);
        const width = Math.max(originalWidth, props2.minSize);
        ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));
        ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));
        sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : "";
        sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : "";
      };
      expose({
        handleScroll: handleScroll2,
        update
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
          vue.createVNode(Thumb, {
            move: moveX.value,
            ratio: ratioX.value,
            size: sizeWidth.value,
            always: _ctx.always
          }, null, 8, ["move", "ratio", "size", "always"]),
          vue.createVNode(Thumb, {
            move: moveY.value,
            ratio: ratioY.value,
            size: sizeHeight.value,
            vertical: "",
            always: _ctx.always
          }, null, 8, ["move", "ratio", "size", "always"])
        ], 64);
      };
    }
  });
  var Bar = /* @__PURE__ */ _export_sfc(_sfc_main$2o, [["__file", "bar.vue"]]);
  const scrollbarProps = buildProps({
    height: {
      type: [String, Number],
      default: ""
    },
    maxHeight: {
      type: [String, Number],
      default: ""
    },
    native: {
      type: Boolean,
      default: false
    },
    wrapStyle: {
      type: definePropType([String, Object, Array]),
      default: ""
    },
    wrapClass: {
      type: [String, Array],
      default: ""
    },
    viewClass: {
      type: [String, Array],
      default: ""
    },
    viewStyle: {
      type: [String, Array, Object],
      default: ""
    },
    noresize: Boolean,
    tag: {
      type: String,
      default: "div"
    },
    always: Boolean,
    minSize: {
      type: Number,
      default: 20
    },
    tabindex: {
      type: [String, Number],
      default: void 0
    },
    id: String,
    role: String,
    ...useAriaProps(["ariaLabel", "ariaOrientation"])
  });
  const scrollbarEmits = {
    scroll: ({
      scrollTop,
      scrollLeft
    }) => [scrollTop, scrollLeft].every(isNumber$2)
  };
  const COMPONENT_NAME$j = "ElScrollbar";
  const __default__$1J = vue.defineComponent({
    name: COMPONENT_NAME$j
  });
  const _sfc_main$2n = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1J,
    props: scrollbarProps,
    emits: scrollbarEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const ns2 = useNamespace("scrollbar");
      let stopResizeObserver = void 0;
      let stopResizeListener = void 0;
      let wrapScrollTop = 0;
      let wrapScrollLeft = 0;
      const scrollbarRef = vue.ref();
      const wrapRef = vue.ref();
      const resizeRef = vue.ref();
      const barRef = vue.ref();
      const wrapStyle = vue.computed(() => {
        const style = {};
        if (props2.height)
          style.height = addUnit(props2.height);
        if (props2.maxHeight)
          style.maxHeight = addUnit(props2.maxHeight);
        return [props2.wrapStyle, style];
      });
      const wrapKls = vue.computed(() => {
        return [
          props2.wrapClass,
          ns2.e("wrap"),
          { [ns2.em("wrap", "hidden-default")]: !props2.native }
        ];
      });
      const resizeKls = vue.computed(() => {
        return [ns2.e("view"), props2.viewClass];
      });
      const handleScroll2 = () => {
        var _a2;
        if (wrapRef.value) {
          (_a2 = barRef.value) == null ? void 0 : _a2.handleScroll(wrapRef.value);
          wrapScrollTop = wrapRef.value.scrollTop;
          wrapScrollLeft = wrapRef.value.scrollLeft;
          emit("scroll", {
            scrollTop: wrapRef.value.scrollTop,
            scrollLeft: wrapRef.value.scrollLeft
          });
        }
      };
      function scrollTo(arg1, arg2) {
        if (shared.isObject(arg1)) {
          wrapRef.value.scrollTo(arg1);
        } else if (isNumber$2(arg1) && isNumber$2(arg2)) {
          wrapRef.value.scrollTo(arg1, arg2);
        }
      }
      const setScrollTop = (value) => {
        if (!isNumber$2(value)) {
          debugWarn(COMPONENT_NAME$j, "value must be a number");
          return;
        }
        wrapRef.value.scrollTop = value;
      };
      const setScrollLeft = (value) => {
        if (!isNumber$2(value)) {
          debugWarn(COMPONENT_NAME$j, "value must be a number");
          return;
        }
        wrapRef.value.scrollLeft = value;
      };
      const update = () => {
        var _a2;
        (_a2 = barRef.value) == null ? void 0 : _a2.update();
      };
      vue.watch(() => props2.noresize, (noresize) => {
        if (noresize) {
          stopResizeObserver == null ? void 0 : stopResizeObserver();
          stopResizeListener == null ? void 0 : stopResizeListener();
        } else {
          ({ stop: stopResizeObserver } = useResizeObserver(resizeRef, update));
          stopResizeListener = useEventListener("resize", update);
        }
      }, { immediate: true });
      vue.watch(() => [props2.maxHeight, props2.height], () => {
        if (!props2.native)
          vue.nextTick(() => {
            var _a2;
            update();
            if (wrapRef.value) {
              (_a2 = barRef.value) == null ? void 0 : _a2.handleScroll(wrapRef.value);
            }
          });
      });
      vue.provide(scrollbarContextKey, vue.reactive({
        scrollbarElement: scrollbarRef,
        wrapElement: wrapRef
      }));
      vue.onActivated(() => {
        if (wrapRef.value) {
          wrapRef.value.scrollTop = wrapScrollTop;
          wrapRef.value.scrollLeft = wrapScrollLeft;
        }
      });
      vue.onMounted(() => {
        if (!props2.native)
          vue.nextTick(() => {
            update();
          });
      });
      vue.onUpdated(() => update());
      expose({
        wrapRef,
        update,
        scrollTo,
        setScrollTop,
        setScrollLeft,
        handleScroll: handleScroll2
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "scrollbarRef",
          ref: scrollbarRef,
          class: vue.normalizeClass(vue.unref(ns2).b())
        }, [
          vue.createElementVNode("div", {
            ref_key: "wrapRef",
            ref: wrapRef,
            class: vue.normalizeClass(vue.unref(wrapKls)),
            style: vue.normalizeStyle(vue.unref(wrapStyle)),
            tabindex: _ctx.tabindex,
            onScroll: handleScroll2
          }, [
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tag), {
              id: _ctx.id,
              ref_key: "resizeRef",
              ref: resizeRef,
              class: vue.normalizeClass(vue.unref(resizeKls)),
              style: vue.normalizeStyle(_ctx.viewStyle),
              role: _ctx.role,
              "aria-label": _ctx.ariaLabel,
              "aria-orientation": _ctx.ariaOrientation
            }, {
              default: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 8, ["id", "class", "style", "role", "aria-label", "aria-orientation"]))
          ], 46, ["tabindex"]),
          !_ctx.native ? (vue.openBlock(), vue.createBlock(Bar, {
            key: 0,
            ref_key: "barRef",
            ref: barRef,
            always: _ctx.always,
            "min-size": _ctx.minSize
          }, null, 8, ["always", "min-size"])) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var Scrollbar = /* @__PURE__ */ _export_sfc(_sfc_main$2n, [["__file", "scrollbar.vue"]]);
  const ElScrollbar = withInstall(Scrollbar);
  const POPPER_INJECTION_KEY = Symbol("popper");
  const POPPER_CONTENT_INJECTION_KEY = Symbol("popperContent");
  const roleTypes = [
    "dialog",
    "grid",
    "group",
    "listbox",
    "menu",
    "navigation",
    "tooltip",
    "tree"
  ];
  const popperProps = buildProps({
    role: {
      type: String,
      values: roleTypes,
      default: "tooltip"
    }
  });
  const __default__$1I = vue.defineComponent({
    name: "ElPopper",
    inheritAttrs: false
  });
  const _sfc_main$2m = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1I,
    props: popperProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const triggerRef = vue.ref();
      const popperInstanceRef = vue.ref();
      const contentRef = vue.ref();
      const referenceRef = vue.ref();
      const role = vue.computed(() => props2.role);
      const popperProvides = {
        triggerRef,
        popperInstanceRef,
        contentRef,
        referenceRef,
        role
      };
      expose(popperProvides);
      vue.provide(POPPER_INJECTION_KEY, popperProvides);
      return (_ctx, _cache) => {
        return vue.renderSlot(_ctx.$slots, "default");
      };
    }
  });
  var Popper = /* @__PURE__ */ _export_sfc(_sfc_main$2m, [["__file", "popper.vue"]]);
  const popperArrowProps = buildProps({
    arrowOffset: {
      type: Number,
      default: 5
    }
  });
  const __default__$1H = vue.defineComponent({
    name: "ElPopperArrow",
    inheritAttrs: false
  });
  const _sfc_main$2l = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1H,
    props: popperArrowProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const ns2 = useNamespace("popper");
      const { arrowOffset, arrowRef, arrowStyle } = vue.inject(POPPER_CONTENT_INJECTION_KEY, void 0);
      vue.watch(() => props2.arrowOffset, (val) => {
        arrowOffset.value = val;
      });
      vue.onBeforeUnmount(() => {
        arrowRef.value = void 0;
      });
      expose({
        arrowRef
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("span", {
          ref_key: "arrowRef",
          ref: arrowRef,
          class: vue.normalizeClass(vue.unref(ns2).e("arrow")),
          style: vue.normalizeStyle(vue.unref(arrowStyle)),
          "data-popper-arrow": ""
        }, null, 6);
      };
    }
  });
  var ElPopperArrow = /* @__PURE__ */ _export_sfc(_sfc_main$2l, [["__file", "arrow.vue"]]);
  const NAME = "ElOnlyChild";
  const OnlyChild = vue.defineComponent({
    name: NAME,
    setup(_2, {
      slots,
      attrs: attrs2
    }) {
      var _a2;
      const forwardRefInjection = vue.inject(FORWARD_REF_INJECTION_KEY);
      const forwardRefDirective = useForwardRefDirective((_a2 = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a2 : shared.NOOP);
      return () => {
        var _a22;
        const defaultSlot = (_a22 = slots.default) == null ? void 0 : _a22.call(slots, attrs2);
        if (!defaultSlot)
          return null;
        if (defaultSlot.length > 1) {
          debugWarn(NAME, "requires exact only one valid child.");
          return null;
        }
        const firstLegitNode = findFirstLegitChild(defaultSlot);
        if (!firstLegitNode) {
          debugWarn(NAME, "no valid child node found");
          return null;
        }
        return vue.withDirectives(vue.cloneVNode(firstLegitNode, attrs2), [[forwardRefDirective]]);
      };
    }
  });
  function findFirstLegitChild(node) {
    if (!node)
      return null;
    const children = node;
    for (const child of children) {
      if (shared.isObject(child)) {
        switch (child.type) {
          case vue.Comment:
            continue;
          case vue.Text:
          case "svg":
            return wrapTextContent(child);
          case vue.Fragment:
            return findFirstLegitChild(child.children);
          default:
            return child;
        }
      }
      return wrapTextContent(child);
    }
    return null;
  }
  function wrapTextContent(s2) {
    const ns2 = useNamespace("only-child");
    return vue.createVNode("span", {
      "class": ns2.e("content")
    }, [s2]);
  }
  const popperTriggerProps = buildProps({
    virtualRef: {
      type: definePropType(Object)
    },
    virtualTriggering: Boolean,
    onMouseenter: {
      type: definePropType(Function)
    },
    onMouseleave: {
      type: definePropType(Function)
    },
    onClick: {
      type: definePropType(Function)
    },
    onKeydown: {
      type: definePropType(Function)
    },
    onFocus: {
      type: definePropType(Function)
    },
    onBlur: {
      type: definePropType(Function)
    },
    onContextmenu: {
      type: definePropType(Function)
    },
    id: String,
    open: Boolean
  });
  const __default__$1G = vue.defineComponent({
    name: "ElPopperTrigger",
    inheritAttrs: false
  });
  const _sfc_main$2k = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1G,
    props: popperTriggerProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const { role, triggerRef } = vue.inject(POPPER_INJECTION_KEY, void 0);
      useForwardRef(triggerRef);
      const ariaControls = vue.computed(() => {
        return ariaHaspopup.value ? props2.id : void 0;
      });
      const ariaDescribedby = vue.computed(() => {
        if (role && role.value === "tooltip") {
          return props2.open && props2.id ? props2.id : void 0;
        }
        return void 0;
      });
      const ariaHaspopup = vue.computed(() => {
        if (role && role.value !== "tooltip") {
          return role.value;
        }
        return void 0;
      });
      const ariaExpanded = vue.computed(() => {
        return ariaHaspopup.value ? `${props2.open}` : void 0;
      });
      let virtualTriggerAriaStopWatch = void 0;
      const TRIGGER_ELE_EVENTS = [
        "onMouseenter",
        "onMouseleave",
        "onClick",
        "onKeydown",
        "onFocus",
        "onBlur",
        "onContextmenu"
      ];
      vue.onMounted(() => {
        vue.watch(() => props2.virtualRef, (virtualEl) => {
          if (virtualEl) {
            triggerRef.value = unrefElement(virtualEl);
          }
        }, {
          immediate: true
        });
        vue.watch(triggerRef, (el, prevEl) => {
          virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
          virtualTriggerAriaStopWatch = void 0;
          if (isElement$2(el)) {
            TRIGGER_ELE_EVENTS.forEach((eventName) => {
              var _a2;
              const handler = props2[eventName];
              if (handler) {
                el.addEventListener(eventName.slice(2).toLowerCase(), handler);
                (_a2 = prevEl == null ? void 0 : prevEl.removeEventListener) == null ? void 0 : _a2.call(prevEl, eventName.slice(2).toLowerCase(), handler);
              }
            });
            virtualTriggerAriaStopWatch = vue.watch([ariaControls, ariaDescribedby, ariaHaspopup, ariaExpanded], (watches) => {
              [
                "aria-controls",
                "aria-describedby",
                "aria-haspopup",
                "aria-expanded"
              ].forEach((key, idx) => {
                isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);
              });
            }, { immediate: true });
          }
          if (isElement$2(prevEl)) {
            [
              "aria-controls",
              "aria-describedby",
              "aria-haspopup",
              "aria-expanded"
            ].forEach((key) => prevEl.removeAttribute(key));
          }
        }, {
          immediate: true
        });
      });
      vue.onBeforeUnmount(() => {
        virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
        virtualTriggerAriaStopWatch = void 0;
        if (triggerRef.value && isElement$2(triggerRef.value)) {
          const el = triggerRef.value;
          TRIGGER_ELE_EVENTS.forEach((eventName) => {
            const handler = props2[eventName];
            if (handler) {
              el.removeEventListener(eventName.slice(2).toLowerCase(), handler);
            }
          });
          triggerRef.value = void 0;
        }
      });
      expose({
        triggerRef
      });
      return (_ctx, _cache) => {
        return !_ctx.virtualTriggering ? (vue.openBlock(), vue.createBlock(vue.unref(OnlyChild), vue.mergeProps({ key: 0 }, _ctx.$attrs, {
          "aria-controls": vue.unref(ariaControls),
          "aria-describedby": vue.unref(ariaDescribedby),
          "aria-expanded": vue.unref(ariaExpanded),
          "aria-haspopup": vue.unref(ariaHaspopup)
        }), {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["aria-controls", "aria-describedby", "aria-expanded", "aria-haspopup"])) : vue.createCommentVNode("v-if", true);
      };
    }
  });
  var ElPopperTrigger = /* @__PURE__ */ _export_sfc(_sfc_main$2k, [["__file", "trigger.vue"]]);
  const FOCUS_AFTER_TRAPPED = "focus-trap.focus-after-trapped";
  const FOCUS_AFTER_RELEASED = "focus-trap.focus-after-released";
  const FOCUSOUT_PREVENTED = "focus-trap.focusout-prevented";
  const FOCUS_AFTER_TRAPPED_OPTS = {
    cancelable: true,
    bubbles: false
  };
  const FOCUSOUT_PREVENTED_OPTS = {
    cancelable: true,
    bubbles: false
  };
  const ON_TRAP_FOCUS_EVT = "focusAfterTrapped";
  const ON_RELEASE_FOCUS_EVT = "focusAfterReleased";
  const FOCUS_TRAP_INJECTION_KEY = Symbol("elFocusTrap");
  const focusReason = vue.ref();
  const lastUserFocusTimestamp = vue.ref(0);
  const lastAutomatedFocusTimestamp = vue.ref(0);
  let focusReasonUserCount = 0;
  const obtainAllFocusableElements = (element) => {
    const nodes = [];
    const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {
      acceptNode: (node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput)
          return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 || node === document.activeElement ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    while (walker.nextNode())
      nodes.push(walker.currentNode);
    return nodes;
  };
  const getVisibleElement = (elements, container) => {
    for (const element of elements) {
      if (!isHidden(element, container))
        return element;
    }
  };
  const isHidden = (element, container) => {
    if (getComputedStyle(element).visibility === "hidden")
      return true;
    while (element) {
      if (container && element === container)
        return false;
      if (getComputedStyle(element).display === "none")
        return true;
      element = element.parentElement;
    }
    return false;
  };
  const getEdges = (container) => {
    const focusable = obtainAllFocusableElements(container);
    const first = getVisibleElement(focusable, container);
    const last2 = getVisibleElement(focusable.reverse(), container);
    return [first, last2];
  };
  const isSelectable = (element) => {
    return element instanceof HTMLInputElement && "select" in element;
  };
  const tryFocus = (element, shouldSelect) => {
    if (element && element.focus) {
      const prevFocusedElement = document.activeElement;
      element.focus({ preventScroll: true });
      lastAutomatedFocusTimestamp.value = window.performance.now();
      if (element !== prevFocusedElement && isSelectable(element) && shouldSelect) {
        element.select();
      }
    }
  };
  function removeFromStack(list, item) {
    const copy = [...list];
    const idx = list.indexOf(item);
    if (idx !== -1) {
      copy.splice(idx, 1);
    }
    return copy;
  }
  const createFocusableStack = () => {
    let stack = [];
    const push2 = (layer) => {
      const currentLayer = stack[0];
      if (currentLayer && layer !== currentLayer) {
        currentLayer.pause();
      }
      stack = removeFromStack(stack, layer);
      stack.unshift(layer);
    };
    const remove = (layer) => {
      var _a2, _b;
      stack = removeFromStack(stack, layer);
      (_b = (_a2 = stack[0]) == null ? void 0 : _a2.resume) == null ? void 0 : _b.call(_a2);
    };
    return {
      push: push2,
      remove
    };
  };
  const focusFirstDescendant = (elements, shouldSelect = false) => {
    const prevFocusedElement = document.activeElement;
    for (const element of elements) {
      tryFocus(element, shouldSelect);
      if (document.activeElement !== prevFocusedElement)
        return;
    }
  };
  const focusableStack = createFocusableStack();
  const isFocusCausedByUserEvent = () => {
    return lastUserFocusTimestamp.value > lastAutomatedFocusTimestamp.value;
  };
  const notifyFocusReasonPointer = () => {
    focusReason.value = "pointer";
    lastUserFocusTimestamp.value = window.performance.now();
  };
  const notifyFocusReasonKeydown = () => {
    focusReason.value = "keyboard";
    lastUserFocusTimestamp.value = window.performance.now();
  };
  const useFocusReason = () => {
    vue.onMounted(() => {
      if (focusReasonUserCount === 0) {
        document.addEventListener("mousedown", notifyFocusReasonPointer);
        document.addEventListener("touchstart", notifyFocusReasonPointer);
        document.addEventListener("keydown", notifyFocusReasonKeydown);
      }
      focusReasonUserCount++;
    });
    vue.onBeforeUnmount(() => {
      focusReasonUserCount--;
      if (focusReasonUserCount <= 0) {
        document.removeEventListener("mousedown", notifyFocusReasonPointer);
        document.removeEventListener("touchstart", notifyFocusReasonPointer);
        document.removeEventListener("keydown", notifyFocusReasonKeydown);
      }
    });
    return {
      focusReason,
      lastUserFocusTimestamp,
      lastAutomatedFocusTimestamp
    };
  };
  const createFocusOutPreventedEvent = (detail) => {
    return new CustomEvent(FOCUSOUT_PREVENTED, {
      ...FOCUSOUT_PREVENTED_OPTS,
      detail
    });
  };
  const _sfc_main$2j = vue.defineComponent({
    name: "ElFocusTrap",
    inheritAttrs: false,
    props: {
      loop: Boolean,
      trapped: Boolean,
      focusTrapEl: Object,
      focusStartEl: {
        type: [Object, String],
        default: "first"
      }
    },
    emits: [
      ON_TRAP_FOCUS_EVT,
      ON_RELEASE_FOCUS_EVT,
      "focusin",
      "focusout",
      "focusout-prevented",
      "release-requested"
    ],
    setup(props2, { emit }) {
      const forwardRef = vue.ref();
      let lastFocusBeforeTrapped;
      let lastFocusAfterTrapped;
      const { focusReason: focusReason2 } = useFocusReason();
      useEscapeKeydown((event) => {
        if (props2.trapped && !focusLayer.paused) {
          emit("release-requested", event);
        }
      });
      const focusLayer = {
        paused: false,
        pause() {
          this.paused = true;
        },
        resume() {
          this.paused = false;
        }
      };
      const onKeydown = (e) => {
        if (!props2.loop && !props2.trapped)
          return;
        if (focusLayer.paused)
          return;
        const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e;
        const { loop } = props2;
        const isTabbing = key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;
        const currentFocusingEl = document.activeElement;
        if (isTabbing && currentFocusingEl) {
          const container = currentTarget;
          const [first, last2] = getEdges(container);
          const isTabbable = first && last2;
          if (!isTabbable) {
            if (currentFocusingEl === container) {
              const focusoutPreventedEvent = createFocusOutPreventedEvent({
                focusReason: focusReason2.value
              });
              emit("focusout-prevented", focusoutPreventedEvent);
              if (!focusoutPreventedEvent.defaultPrevented) {
                e.preventDefault();
              }
            }
          } else {
            if (!shiftKey && currentFocusingEl === last2) {
              const focusoutPreventedEvent = createFocusOutPreventedEvent({
                focusReason: focusReason2.value
              });
              emit("focusout-prevented", focusoutPreventedEvent);
              if (!focusoutPreventedEvent.defaultPrevented) {
                e.preventDefault();
                if (loop)
                  tryFocus(first, true);
              }
            } else if (shiftKey && [first, container].includes(currentFocusingEl)) {
              const focusoutPreventedEvent = createFocusOutPreventedEvent({
                focusReason: focusReason2.value
              });
              emit("focusout-prevented", focusoutPreventedEvent);
              if (!focusoutPreventedEvent.defaultPrevented) {
                e.preventDefault();
                if (loop)
                  tryFocus(last2, true);
              }
            }
          }
        }
      };
      vue.provide(FOCUS_TRAP_INJECTION_KEY, {
        focusTrapRef: forwardRef,
        onKeydown
      });
      vue.watch(() => props2.focusTrapEl, (focusTrapEl) => {
        if (focusTrapEl) {
          forwardRef.value = focusTrapEl;
        }
      }, { immediate: true });
      vue.watch([forwardRef], ([forwardRef2], [oldForwardRef]) => {
        if (forwardRef2) {
          forwardRef2.addEventListener("keydown", onKeydown);
          forwardRef2.addEventListener("focusin", onFocusIn);
          forwardRef2.addEventListener("focusout", onFocusOut);
        }
        if (oldForwardRef) {
          oldForwardRef.removeEventListener("keydown", onKeydown);
          oldForwardRef.removeEventListener("focusin", onFocusIn);
          oldForwardRef.removeEventListener("focusout", onFocusOut);
        }
      });
      const trapOnFocus = (e) => {
        emit(ON_TRAP_FOCUS_EVT, e);
      };
      const releaseOnFocus = (e) => emit(ON_RELEASE_FOCUS_EVT, e);
      const onFocusIn = (e) => {
        const trapContainer = vue.unref(forwardRef);
        if (!trapContainer)
          return;
        const target = e.target;
        const relatedTarget = e.relatedTarget;
        const isFocusedInTrap = target && trapContainer.contains(target);
        if (!props2.trapped) {
          const isPrevFocusedInTrap = relatedTarget && trapContainer.contains(relatedTarget);
          if (!isPrevFocusedInTrap) {
            lastFocusBeforeTrapped = relatedTarget;
          }
        }
        if (isFocusedInTrap)
          emit("focusin", e);
        if (focusLayer.paused)
          return;
        if (props2.trapped) {
          if (isFocusedInTrap) {
            lastFocusAfterTrapped = target;
          } else {
            tryFocus(lastFocusAfterTrapped, true);
          }
        }
      };
      const onFocusOut = (e) => {
        const trapContainer = vue.unref(forwardRef);
        if (focusLayer.paused || !trapContainer)
          return;
        if (props2.trapped) {
          const relatedTarget = e.relatedTarget;
          if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {
            setTimeout(() => {
              if (!focusLayer.paused && props2.trapped) {
                const focusoutPreventedEvent = createFocusOutPreventedEvent({
                  focusReason: focusReason2.value
                });
                emit("focusout-prevented", focusoutPreventedEvent);
                if (!focusoutPreventedEvent.defaultPrevented) {
                  tryFocus(lastFocusAfterTrapped, true);
                }
              }
            }, 0);
          }
        } else {
          const target = e.target;
          const isFocusedInTrap = target && trapContainer.contains(target);
          if (!isFocusedInTrap)
            emit("focusout", e);
        }
      };
      async function startTrap() {
        await vue.nextTick();
        const trapContainer = vue.unref(forwardRef);
        if (trapContainer) {
          focusableStack.push(focusLayer);
          const prevFocusedElement = trapContainer.contains(document.activeElement) ? lastFocusBeforeTrapped : document.activeElement;
          lastFocusBeforeTrapped = prevFocusedElement;
          const isPrevFocusContained = trapContainer.contains(prevFocusedElement);
          if (!isPrevFocusContained) {
            const focusEvent = new Event(FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS);
            trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
            trapContainer.dispatchEvent(focusEvent);
            if (!focusEvent.defaultPrevented) {
              vue.nextTick(() => {
                let focusStartEl = props2.focusStartEl;
                if (!shared.isString(focusStartEl)) {
                  tryFocus(focusStartEl);
                  if (document.activeElement !== focusStartEl) {
                    focusStartEl = "first";
                  }
                }
                if (focusStartEl === "first") {
                  focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);
                }
                if (document.activeElement === prevFocusedElement || focusStartEl === "container") {
                  tryFocus(trapContainer);
                }
              });
            }
          }
        }
      }
      function stopTrap() {
        const trapContainer = vue.unref(forwardRef);
        if (trapContainer) {
          trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
          const releasedEvent = new CustomEvent(FOCUS_AFTER_RELEASED, {
            ...FOCUS_AFTER_TRAPPED_OPTS,
            detail: {
              focusReason: focusReason2.value
            }
          });
          trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);
          trapContainer.dispatchEvent(releasedEvent);
          if (!releasedEvent.defaultPrevented && (focusReason2.value == "keyboard" || !isFocusCausedByUserEvent() || trapContainer.contains(document.activeElement))) {
            tryFocus(lastFocusBeforeTrapped != null ? lastFocusBeforeTrapped : document.body);
          }
          trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);
          focusableStack.remove(focusLayer);
        }
      }
      vue.onMounted(() => {
        if (props2.trapped) {
          startTrap();
        }
        vue.watch(() => props2.trapped, (trapped) => {
          if (trapped) {
            startTrap();
          } else {
            stopTrap();
          }
        });
      });
      vue.onBeforeUnmount(() => {
        if (props2.trapped) {
          stopTrap();
        }
        if (forwardRef.value) {
          forwardRef.value.removeEventListener("keydown", onKeydown);
          forwardRef.value.removeEventListener("focusin", onFocusIn);
          forwardRef.value.removeEventListener("focusout", onFocusOut);
          forwardRef.value = void 0;
        }
      });
      return {
        onKeydown
      };
    }
  });
  function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.renderSlot(_ctx.$slots, "default", { handleKeydown: _ctx.onKeydown });
  }
  var ElFocusTrap = /* @__PURE__ */ _export_sfc(_sfc_main$2j, [["render", _sfc_render$u], ["__file", "focus-trap.vue"]]);
  const POSITIONING_STRATEGIES = ["fixed", "absolute"];
  const popperCoreConfigProps = buildProps({
    boundariesPadding: {
      type: Number,
      default: 0
    },
    fallbackPlacements: {
      type: definePropType(Array),
      default: void 0
    },
    gpuAcceleration: {
      type: Boolean,
      default: true
    },
    offset: {
      type: Number,
      default: 12
    },
    placement: {
      type: String,
      values: Ee,
      default: "bottom"
    },
    popperOptions: {
      type: definePropType(Object),
      default: () => ({})
    },
    strategy: {
      type: String,
      values: POSITIONING_STRATEGIES,
      default: "absolute"
    }
  });
  const popperContentProps = buildProps({
    ...popperCoreConfigProps,
    id: String,
    style: {
      type: definePropType([String, Array, Object])
    },
    className: {
      type: definePropType([String, Array, Object])
    },
    effect: {
      type: definePropType(String),
      default: "dark"
    },
    visible: Boolean,
    enterable: {
      type: Boolean,
      default: true
    },
    pure: Boolean,
    focusOnShow: {
      type: Boolean,
      default: false
    },
    trapping: {
      type: Boolean,
      default: false
    },
    popperClass: {
      type: definePropType([String, Array, Object])
    },
    popperStyle: {
      type: definePropType([String, Array, Object])
    },
    referenceEl: {
      type: definePropType(Object)
    },
    triggerTargetEl: {
      type: definePropType(Object)
    },
    stopPopperMouseEvent: {
      type: Boolean,
      default: true
    },
    virtualTriggering: Boolean,
    zIndex: Number,
    ...useAriaProps(["ariaLabel"])
  });
  const popperContentEmits = {
    mouseenter: (evt) => evt instanceof MouseEvent,
    mouseleave: (evt) => evt instanceof MouseEvent,
    focus: () => true,
    blur: () => true,
    close: () => true
  };
  const buildPopperOptions = (props2, modifiers = []) => {
    const { placement, strategy, popperOptions } = props2;
    const options = {
      placement,
      strategy,
      ...popperOptions,
      modifiers: [...genModifiers(props2), ...modifiers]
    };
    deriveExtraModifiers(options, popperOptions == null ? void 0 : popperOptions.modifiers);
    return options;
  };
  const unwrapMeasurableEl = ($el) => {
    if (!isClient)
      return;
    return unrefElement($el);
  };
  function genModifiers(options) {
    const { offset: offset2, gpuAcceleration, fallbackPlacements } = options;
    return [
      {
        name: "offset",
        options: {
          offset: [0, offset2 != null ? offset2 : 12]
        }
      },
      {
        name: "preventOverflow",
        options: {
          padding: {
            top: 2,
            bottom: 2,
            left: 5,
            right: 5
          }
        }
      },
      {
        name: "flip",
        options: {
          padding: 5,
          fallbackPlacements
        }
      },
      {
        name: "computeStyles",
        options: {
          gpuAcceleration
        }
      }
    ];
  }
  function deriveExtraModifiers(options, modifiers) {
    if (modifiers) {
      options.modifiers = [...options.modifiers, ...modifiers != null ? modifiers : []];
    }
  }
  const DEFAULT_ARROW_OFFSET = 0;
  const usePopperContent = (props2) => {
    const { popperInstanceRef, contentRef, triggerRef, role } = vue.inject(POPPER_INJECTION_KEY, void 0);
    const arrowRef = vue.ref();
    const arrowOffset = vue.ref();
    const eventListenerModifier = vue.computed(() => {
      return {
        name: "eventListeners",
        enabled: !!props2.visible
      };
    });
    const arrowModifier = vue.computed(() => {
      var _a2;
      const arrowEl = vue.unref(arrowRef);
      const offset2 = (_a2 = vue.unref(arrowOffset)) != null ? _a2 : DEFAULT_ARROW_OFFSET;
      return {
        name: "arrow",
        enabled: !isUndefined$1(arrowEl),
        options: {
          element: arrowEl,
          padding: offset2
        }
      };
    });
    const options = vue.computed(() => {
      return {
        onFirstUpdate: () => {
          update();
        },
        ...buildPopperOptions(props2, [
          vue.unref(arrowModifier),
          vue.unref(eventListenerModifier)
        ])
      };
    });
    const computedReference = vue.computed(() => unwrapMeasurableEl(props2.referenceEl) || vue.unref(triggerRef));
    const { attributes: attributes2, state: state2, styles, update, forceUpdate, instanceRef } = usePopper(computedReference, contentRef, options);
    vue.watch(instanceRef, (instance) => popperInstanceRef.value = instance);
    vue.onMounted(() => {
      vue.watch(() => {
        var _a2;
        return (_a2 = vue.unref(computedReference)) == null ? void 0 : _a2.getBoundingClientRect();
      }, () => {
        update();
      });
    });
    return {
      attributes: attributes2,
      arrowRef,
      contentRef,
      instanceRef,
      state: state2,
      styles,
      role,
      forceUpdate,
      update
    };
  };
  const usePopperContentDOM = (props2, {
    attributes: attributes2,
    styles,
    role
  }) => {
    const { nextZIndex } = useZIndex();
    const ns2 = useNamespace("popper");
    const contentAttrs = vue.computed(() => vue.unref(attributes2).popper);
    const contentZIndex = vue.ref(isNumber$2(props2.zIndex) ? props2.zIndex : nextZIndex());
    const contentClass = vue.computed(() => [
      ns2.b(),
      ns2.is("pure", props2.pure),
      ns2.is(props2.effect),
      props2.popperClass
    ]);
    const contentStyle = vue.computed(() => {
      return [
        { zIndex: vue.unref(contentZIndex) },
        vue.unref(styles).popper,
        props2.popperStyle || {}
      ];
    });
    const ariaModal = vue.computed(() => role.value === "dialog" ? "false" : void 0);
    const arrowStyle = vue.computed(() => vue.unref(styles).arrow || {});
    const updateZIndex = () => {
      contentZIndex.value = isNumber$2(props2.zIndex) ? props2.zIndex : nextZIndex();
    };
    return {
      ariaModal,
      arrowStyle,
      contentAttrs,
      contentClass,
      contentStyle,
      contentZIndex,
      updateZIndex
    };
  };
  const usePopperContentFocusTrap = (props2, emit) => {
    const trapped = vue.ref(false);
    const focusStartRef = vue.ref();
    const onFocusAfterTrapped = () => {
      emit("focus");
    };
    const onFocusAfterReleased = (event) => {
      var _a2;
      if (((_a2 = event.detail) == null ? void 0 : _a2.focusReason) !== "pointer") {
        focusStartRef.value = "first";
        emit("blur");
      }
    };
    const onFocusInTrap = (event) => {
      if (props2.visible && !trapped.value) {
        if (event.target) {
          focusStartRef.value = event.target;
        }
        trapped.value = true;
      }
    };
    const onFocusoutPrevented = (event) => {
      if (!props2.trapping) {
        if (event.detail.focusReason === "pointer") {
          event.preventDefault();
        }
        trapped.value = false;
      }
    };
    const onReleaseRequested = () => {
      trapped.value = false;
      emit("close");
    };
    return {
      focusStartRef,
      trapped,
      onFocusAfterReleased,
      onFocusAfterTrapped,
      onFocusInTrap,
      onFocusoutPrevented,
      onReleaseRequested
    };
  };
  const __default__$1F = vue.defineComponent({
    name: "ElPopperContent"
  });
  const _sfc_main$2i = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1F,
    props: popperContentProps,
    emits: popperContentEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const {
        focusStartRef,
        trapped,
        onFocusAfterReleased,
        onFocusAfterTrapped,
        onFocusInTrap,
        onFocusoutPrevented,
        onReleaseRequested
      } = usePopperContentFocusTrap(props2, emit);
      const { attributes: attributes2, arrowRef, contentRef, styles, instanceRef, role, update } = usePopperContent(props2);
      const {
        ariaModal,
        arrowStyle,
        contentAttrs,
        contentClass,
        contentStyle,
        updateZIndex
      } = usePopperContentDOM(props2, {
        styles,
        attributes: attributes2,
        role
      });
      const formItemContext = vue.inject(formItemContextKey, void 0);
      const arrowOffset = vue.ref();
      vue.provide(POPPER_CONTENT_INJECTION_KEY, {
        arrowStyle,
        arrowRef,
        arrowOffset
      });
      if (formItemContext) {
        vue.provide(formItemContextKey, {
          ...formItemContext,
          addInputId: shared.NOOP,
          removeInputId: shared.NOOP
        });
      }
      let triggerTargetAriaStopWatch = void 0;
      const updatePopper = (shouldUpdateZIndex = true) => {
        update();
        shouldUpdateZIndex && updateZIndex();
      };
      const togglePopperAlive = () => {
        updatePopper(false);
        if (props2.visible && props2.focusOnShow) {
          trapped.value = true;
        } else if (props2.visible === false) {
          trapped.value = false;
        }
      };
      vue.onMounted(() => {
        vue.watch(() => props2.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {
          triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
          triggerTargetAriaStopWatch = void 0;
          const el = vue.unref(triggerTargetEl || contentRef.value);
          const prevEl = vue.unref(prevTriggerTargetEl || contentRef.value);
          if (isElement$2(el)) {
            triggerTargetAriaStopWatch = vue.watch([role, () => props2.ariaLabel, ariaModal, () => props2.id], (watches) => {
              ["role", "aria-label", "aria-modal", "id"].forEach((key, idx) => {
                isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);
              });
            }, { immediate: true });
          }
          if (prevEl !== el && isElement$2(prevEl)) {
            ["role", "aria-label", "aria-modal", "id"].forEach((key) => {
              prevEl.removeAttribute(key);
            });
          }
        }, { immediate: true });
        vue.watch(() => props2.visible, togglePopperAlive, { immediate: true });
      });
      vue.onBeforeUnmount(() => {
        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
        triggerTargetAriaStopWatch = void 0;
      });
      expose({
        popperContentRef: contentRef,
        popperInstanceRef: instanceRef,
        updatePopper,
        contentStyle
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", vue.mergeProps({
          ref_key: "contentRef",
          ref: contentRef
        }, vue.unref(contentAttrs), {
          style: vue.unref(contentStyle),
          class: vue.unref(contentClass),
          tabindex: "-1",
          onMouseenter: (e) => _ctx.$emit("mouseenter", e),
          onMouseleave: (e) => _ctx.$emit("mouseleave", e)
        }), [
          vue.createVNode(vue.unref(ElFocusTrap), {
            trapped: vue.unref(trapped),
            "trap-on-focus-in": true,
            "focus-trap-el": vue.unref(contentRef),
            "focus-start-el": vue.unref(focusStartRef),
            onFocusAfterTrapped: vue.unref(onFocusAfterTrapped),
            onFocusAfterReleased: vue.unref(onFocusAfterReleased),
            onFocusin: vue.unref(onFocusInTrap),
            onFocusoutPrevented: vue.unref(onFocusoutPrevented),
            onReleaseRequested: vue.unref(onReleaseRequested)
          }, {
            default: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusin", "onFocusoutPrevented", "onReleaseRequested"])
        ], 16, ["onMouseenter", "onMouseleave"]);
      };
    }
  });
  var ElPopperContent = /* @__PURE__ */ _export_sfc(_sfc_main$2i, [["__file", "content.vue"]]);
  const ElPopper = withInstall(Popper);
  const TOOLTIP_INJECTION_KEY = Symbol("elTooltip");
  const useTooltipContentProps = buildProps({
    ...useDelayedToggleProps,
    ...popperContentProps,
    appendTo: {
      type: definePropType([String, Object])
    },
    content: {
      type: String,
      default: ""
    },
    rawContent: Boolean,
    persistent: Boolean,
    visible: {
      type: definePropType(Boolean),
      default: null
    },
    transition: String,
    teleported: {
      type: Boolean,
      default: true
    },
    disabled: Boolean,
    ...useAriaProps(["ariaLabel"])
  });
  const useTooltipTriggerProps = buildProps({
    ...popperTriggerProps,
    disabled: Boolean,
    trigger: {
      type: definePropType([String, Array]),
      default: "hover"
    },
    triggerKeys: {
      type: definePropType(Array),
      default: () => [EVENT_CODE.enter, EVENT_CODE.space]
    }
  });
  const {
    useModelToggleProps: useTooltipModelToggleProps,
    useModelToggleEmits: useTooltipModelToggleEmits,
    useModelToggle: useTooltipModelToggle
  } = createModelToggleComposable("visible");
  const useTooltipProps = buildProps({
    ...popperProps,
    ...useTooltipModelToggleProps,
    ...useTooltipContentProps,
    ...useTooltipTriggerProps,
    ...popperArrowProps,
    showArrow: {
      type: Boolean,
      default: true
    }
  });
  const tooltipEmits = [
    ...useTooltipModelToggleEmits,
    "before-show",
    "before-hide",
    "show",
    "hide",
    "open",
    "close"
  ];
  const isTriggerType = (trigger, type3) => {
    if (shared.isArray(trigger)) {
      return trigger.includes(type3);
    }
    return trigger === type3;
  };
  const whenTrigger = (trigger, type3, handler) => {
    return (e) => {
      isTriggerType(vue.unref(trigger), type3) && handler(e);
    };
  };
  const __default__$1E = vue.defineComponent({
    name: "ElTooltipTrigger"
  });
  const _sfc_main$2h = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1E,
    props: useTooltipTriggerProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const ns2 = useNamespace("tooltip");
      const { controlled, id, open, onOpen, onClose, onToggle } = vue.inject(TOOLTIP_INJECTION_KEY, void 0);
      const triggerRef = vue.ref(null);
      const stopWhenControlledOrDisabled = () => {
        if (vue.unref(controlled) || props2.disabled) {
          return true;
        }
      };
      const trigger = vue.toRef(props2, "trigger");
      const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onOpen));
      const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onClose));
      const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "click", (e) => {
        if (e.button === 0) {
          onToggle(e);
        }
      }));
      const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onOpen));
      const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onClose));
      const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "contextmenu", (e) => {
        e.preventDefault();
        onToggle(e);
      }));
      const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, (e) => {
        const { code } = e;
        if (props2.triggerKeys.includes(code)) {
          e.preventDefault();
          onToggle(e);
        }
      });
      expose({
        triggerRef
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElPopperTrigger), {
          id: vue.unref(id),
          "virtual-ref": _ctx.virtualRef,
          open: vue.unref(open),
          "virtual-triggering": _ctx.virtualTriggering,
          class: vue.normalizeClass(vue.unref(ns2).e("trigger")),
          onBlur: vue.unref(onBlur),
          onClick: vue.unref(onClick),
          onContextmenu: vue.unref(onContextMenu),
          onFocus: vue.unref(onFocus),
          onMouseenter: vue.unref(onMouseenter),
          onMouseleave: vue.unref(onMouseleave),
          onKeydown: vue.unref(onKeydown)
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["id", "virtual-ref", "open", "virtual-triggering", "class", "onBlur", "onClick", "onContextmenu", "onFocus", "onMouseenter", "onMouseleave", "onKeydown"]);
      };
    }
  });
  var ElTooltipTrigger = /* @__PURE__ */ _export_sfc(_sfc_main$2h, [["__file", "trigger.vue"]]);
  const teleportProps = buildProps({
    to: {
      type: definePropType([String, Object]),
      required: true
    },
    disabled: Boolean
  });
  const _sfc_main$2g = /* @__PURE__ */ vue.defineComponent({
    __name: "teleport",
    props: teleportProps,
    setup(__props) {
      return (_ctx, _cache) => {
        return _ctx.disabled ? vue.renderSlot(_ctx.$slots, "default", { key: 0 }) : (vue.openBlock(), vue.createBlock(vue.Teleport, {
          key: 1,
          to: _ctx.to
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 8, ["to"]));
      };
    }
  });
  var Teleport = /* @__PURE__ */ _export_sfc(_sfc_main$2g, [["__file", "teleport.vue"]]);
  const ElTeleport = withInstall(Teleport);
  const __default__$1D = vue.defineComponent({
    name: "ElTooltipContent",
    inheritAttrs: false
  });
  const _sfc_main$2f = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1D,
    props: useTooltipContentProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const { selector } = usePopperContainerId();
      const ns2 = useNamespace("tooltip");
      const contentRef = vue.ref(null);
      let stopHandle;
      const {
        controlled,
        id,
        open,
        trigger,
        onClose,
        onOpen,
        onShow,
        onHide,
        onBeforeShow,
        onBeforeHide
      } = vue.inject(TOOLTIP_INJECTION_KEY, void 0);
      const transitionClass = vue.computed(() => {
        return props2.transition || `${ns2.namespace.value}-fade-in-linear`;
      });
      const persistentRef = vue.computed(() => {
        return props2.persistent;
      });
      vue.onBeforeUnmount(() => {
        stopHandle == null ? void 0 : stopHandle();
      });
      const shouldRender = vue.computed(() => {
        return vue.unref(persistentRef) ? true : vue.unref(open);
      });
      const shouldShow = vue.computed(() => {
        return props2.disabled ? false : vue.unref(open);
      });
      const appendTo = vue.computed(() => {
        return props2.appendTo || selector.value;
      });
      const contentStyle = vue.computed(() => {
        var _a2;
        return (_a2 = props2.style) != null ? _a2 : {};
      });
      const ariaHidden = vue.ref(true);
      const onTransitionLeave = () => {
        onHide();
        ariaHidden.value = true;
      };
      const stopWhenControlled = () => {
        if (vue.unref(controlled))
          return true;
      };
      const onContentEnter = composeEventHandlers(stopWhenControlled, () => {
        if (props2.enterable && vue.unref(trigger) === "hover") {
          onOpen();
        }
      });
      const onContentLeave = composeEventHandlers(stopWhenControlled, () => {
        if (vue.unref(trigger) === "hover") {
          onClose();
        }
      });
      const onBeforeEnter = () => {
        var _a2, _b;
        (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
        onBeforeShow == null ? void 0 : onBeforeShow();
      };
      const onBeforeLeave = () => {
        onBeforeHide == null ? void 0 : onBeforeHide();
      };
      const onAfterShow = () => {
        onShow();
        stopHandle = onClickOutside(vue.computed(() => {
          var _a2;
          return (_a2 = contentRef.value) == null ? void 0 : _a2.popperContentRef;
        }), () => {
          if (vue.unref(controlled))
            return;
          const $trigger = vue.unref(trigger);
          if ($trigger !== "hover") {
            onClose();
          }
        });
      };
      const onBlur = () => {
        if (!props2.virtualTriggering) {
          onClose();
        }
      };
      vue.watch(() => vue.unref(open), (val) => {
        if (!val) {
          stopHandle == null ? void 0 : stopHandle();
        } else {
          ariaHidden.value = false;
        }
      }, {
        flush: "post"
      });
      vue.watch(() => props2.content, () => {
        var _a2, _b;
        (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
      });
      expose({
        contentRef
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElTeleport), {
          disabled: !_ctx.teleported,
          to: vue.unref(appendTo)
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(vue.Transition, {
              name: vue.unref(transitionClass),
              onAfterLeave: onTransitionLeave,
              onBeforeEnter,
              onAfterEnter: onAfterShow,
              onBeforeLeave
            }, {
              default: vue.withCtx(() => [
                vue.unref(shouldRender) ? vue.withDirectives((vue.openBlock(), vue.createBlock(vue.unref(ElPopperContent), vue.mergeProps({
                  key: 0,
                  id: vue.unref(id),
                  ref_key: "contentRef",
                  ref: contentRef
                }, _ctx.$attrs, {
                  "aria-label": _ctx.ariaLabel,
                  "aria-hidden": ariaHidden.value,
                  "boundaries-padding": _ctx.boundariesPadding,
                  "fallback-placements": _ctx.fallbackPlacements,
                  "gpu-acceleration": _ctx.gpuAcceleration,
                  offset: _ctx.offset,
                  placement: _ctx.placement,
                  "popper-options": _ctx.popperOptions,
                  strategy: _ctx.strategy,
                  effect: _ctx.effect,
                  enterable: _ctx.enterable,
                  pure: _ctx.pure,
                  "popper-class": _ctx.popperClass,
                  "popper-style": [_ctx.popperStyle, vue.unref(contentStyle)],
                  "reference-el": _ctx.referenceEl,
                  "trigger-target-el": _ctx.triggerTargetEl,
                  visible: vue.unref(shouldShow),
                  "z-index": _ctx.zIndex,
                  onMouseenter: vue.unref(onContentEnter),
                  onMouseleave: vue.unref(onContentLeave),
                  onBlur,
                  onClose: vue.unref(onClose)
                }), {
                  default: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "default")
                  ]),
                  _: 3
                }, 16, ["id", "aria-label", "aria-hidden", "boundaries-padding", "fallback-placements", "gpu-acceleration", "offset", "placement", "popper-options", "strategy", "effect", "enterable", "pure", "popper-class", "popper-style", "reference-el", "trigger-target-el", "visible", "z-index", "onMouseenter", "onMouseleave", "onClose"])), [
                  [vue.vShow, vue.unref(shouldShow)]
                ]) : vue.createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 8, ["name"])
          ]),
          _: 3
        }, 8, ["disabled", "to"]);
      };
    }
  });
  var ElTooltipContent = /* @__PURE__ */ _export_sfc(_sfc_main$2f, [["__file", "content.vue"]]);
  const __default__$1C = vue.defineComponent({
    name: "ElTooltip"
  });
  const _sfc_main$2e = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1C,
    props: useTooltipProps,
    emits: tooltipEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      usePopperContainer();
      const id = useId();
      const popperRef = vue.ref();
      const contentRef = vue.ref();
      const updatePopper = () => {
        var _a2;
        const popperComponent = vue.unref(popperRef);
        if (popperComponent) {
          (_a2 = popperComponent.popperInstanceRef) == null ? void 0 : _a2.update();
        }
      };
      const open = vue.ref(false);
      const toggleReason = vue.ref();
      const { show, hide, hasUpdateHandler } = useTooltipModelToggle({
        indicator: open,
        toggleReason
      });
      const { onOpen, onClose } = useDelayedToggle({
        showAfter: vue.toRef(props2, "showAfter"),
        hideAfter: vue.toRef(props2, "hideAfter"),
        autoClose: vue.toRef(props2, "autoClose"),
        open: show,
        close: hide
      });
      const controlled = vue.computed(() => isBoolean$1(props2.visible) && !hasUpdateHandler.value);
      vue.provide(TOOLTIP_INJECTION_KEY, {
        controlled,
        id,
        open: vue.readonly(open),
        trigger: vue.toRef(props2, "trigger"),
        onOpen: (event) => {
          onOpen(event);
        },
        onClose: (event) => {
          onClose(event);
        },
        onToggle: (event) => {
          if (vue.unref(open)) {
            onClose(event);
          } else {
            onOpen(event);
          }
        },
        onShow: () => {
          emit("show", toggleReason.value);
        },
        onHide: () => {
          emit("hide", toggleReason.value);
        },
        onBeforeShow: () => {
          emit("before-show", toggleReason.value);
        },
        onBeforeHide: () => {
          emit("before-hide", toggleReason.value);
        },
        updatePopper
      });
      vue.watch(() => props2.disabled, (disabled) => {
        if (disabled && open.value) {
          open.value = false;
        }
      });
      const isFocusInsideContent = (event) => {
        var _a2, _b;
        const popperContent = (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.contentRef) == null ? void 0 : _b.popperContentRef;
        const activeElement = (event == null ? void 0 : event.relatedTarget) || document.activeElement;
        return popperContent && popperContent.contains(activeElement);
      };
      vue.onDeactivated(() => open.value && hide());
      expose({
        popperRef,
        contentRef,
        isFocusInsideContent,
        updatePopper,
        onOpen,
        onClose,
        hide
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElPopper), {
          ref_key: "popperRef",
          ref: popperRef,
          role: _ctx.role
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(ElTooltipTrigger, {
              disabled: _ctx.disabled,
              trigger: _ctx.trigger,
              "trigger-keys": _ctx.triggerKeys,
              "virtual-ref": _ctx.virtualRef,
              "virtual-triggering": _ctx.virtualTriggering
            }, {
              default: vue.withCtx(() => [
                _ctx.$slots.default ? vue.renderSlot(_ctx.$slots, "default", { key: 0 }) : vue.createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 8, ["disabled", "trigger", "trigger-keys", "virtual-ref", "virtual-triggering"]),
            vue.createVNode(ElTooltipContent, {
              ref_key: "contentRef",
              ref: contentRef,
              "aria-label": _ctx.ariaLabel,
              "boundaries-padding": _ctx.boundariesPadding,
              content: _ctx.content,
              disabled: _ctx.disabled,
              effect: _ctx.effect,
              enterable: _ctx.enterable,
              "fallback-placements": _ctx.fallbackPlacements,
              "hide-after": _ctx.hideAfter,
              "gpu-acceleration": _ctx.gpuAcceleration,
              offset: _ctx.offset,
              persistent: _ctx.persistent,
              "popper-class": _ctx.popperClass,
              "popper-style": _ctx.popperStyle,
              placement: _ctx.placement,
              "popper-options": _ctx.popperOptions,
              pure: _ctx.pure,
              "raw-content": _ctx.rawContent,
              "reference-el": _ctx.referenceEl,
              "trigger-target-el": _ctx.triggerTargetEl,
              "show-after": _ctx.showAfter,
              strategy: _ctx.strategy,
              teleported: _ctx.teleported,
              transition: _ctx.transition,
              "virtual-triggering": _ctx.virtualTriggering,
              "z-index": _ctx.zIndex,
              "append-to": _ctx.appendTo
            }, {
              default: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "content", {}, () => [
                  _ctx.rawContent ? (vue.openBlock(), vue.createElementBlock("span", {
                    key: 0,
                    innerHTML: _ctx.content
                  }, null, 8, ["innerHTML"])) : (vue.openBlock(), vue.createElementBlock("span", { key: 1 }, vue.toDisplayString(_ctx.content), 1))
                ]),
                _ctx.showArrow ? (vue.openBlock(), vue.createBlock(vue.unref(ElPopperArrow), {
                  key: 0,
                  "arrow-offset": _ctx.arrowOffset
                }, null, 8, ["arrow-offset"])) : vue.createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 8, ["aria-label", "boundaries-padding", "content", "disabled", "effect", "enterable", "fallback-placements", "hide-after", "gpu-acceleration", "offset", "persistent", "popper-class", "popper-style", "placement", "popper-options", "pure", "raw-content", "reference-el", "trigger-target-el", "show-after", "strategy", "teleported", "transition", "virtual-triggering", "z-index", "append-to"])
          ]),
          _: 3
        }, 8, ["role"]);
      };
    }
  });
  var Tooltip = /* @__PURE__ */ _export_sfc(_sfc_main$2e, [["__file", "tooltip.vue"]]);
  const ElTooltip = withInstall(Tooltip);
  const autocompleteProps = buildProps({
    valueKey: {
      type: String,
      default: "value"
    },
    modelValue: {
      type: [String, Number],
      default: ""
    },
    debounce: {
      type: Number,
      default: 300
    },
    placement: {
      type: definePropType(String),
      values: [
        "top",
        "top-start",
        "top-end",
        "bottom",
        "bottom-start",
        "bottom-end"
      ],
      default: "bottom-start"
    },
    fetchSuggestions: {
      type: definePropType([Function, Array]),
      default: shared.NOOP
    },
    popperClass: {
      type: String,
      default: ""
    },
    triggerOnFocus: {
      type: Boolean,
      default: true
    },
    selectWhenUnmatched: {
      type: Boolean,
      default: false
    },
    hideLoading: {
      type: Boolean,
      default: false
    },
    teleported: useTooltipContentProps.teleported,
    highlightFirstItem: {
      type: Boolean,
      default: false
    },
    fitInputWidth: {
      type: Boolean,
      default: false
    },
    clearable: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    name: String,
    ...useAriaProps(["ariaLabel"])
  });
  const autocompleteEmits = {
    [UPDATE_MODEL_EVENT]: (value) => shared.isString(value),
    [INPUT_EVENT]: (value) => shared.isString(value),
    [CHANGE_EVENT]: (value) => shared.isString(value),
    focus: (evt) => evt instanceof FocusEvent,
    blur: (evt) => evt instanceof FocusEvent,
    clear: () => true,
    select: (item) => shared.isObject(item)
  };
  const COMPONENT_NAME$i = "ElAutocomplete";
  const __default__$1B = vue.defineComponent({
    name: COMPONENT_NAME$i,
    inheritAttrs: false
  });
  const _sfc_main$2d = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1B,
    props: autocompleteProps,
    emits: autocompleteEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const attrs2 = useAttrs();
      const rawAttrs = vue.useAttrs();
      const disabled = useFormDisabled();
      const ns2 = useNamespace("autocomplete");
      const inputRef = vue.ref();
      const regionRef = vue.ref();
      const popperRef = vue.ref();
      const listboxRef = vue.ref();
      let readonly = false;
      let ignoreFocusEvent = false;
      const suggestions = vue.ref([]);
      const highlightedIndex = vue.ref(-1);
      const dropdownWidth = vue.ref("");
      const activated = vue.ref(false);
      const suggestionDisabled = vue.ref(false);
      const loading = vue.ref(false);
      const listboxId = useId();
      const styles = vue.computed(() => rawAttrs.style);
      const suggestionVisible = vue.computed(() => {
        const isValidData = suggestions.value.length > 0;
        return (isValidData || loading.value) && activated.value;
      });
      const suggestionLoading = vue.computed(() => !props2.hideLoading && loading.value);
      const refInput = vue.computed(() => {
        if (inputRef.value) {
          return Array.from(inputRef.value.$el.querySelectorAll("input"));
        }
        return [];
      });
      const onSuggestionShow = () => {
        if (suggestionVisible.value) {
          dropdownWidth.value = `${inputRef.value.$el.offsetWidth}px`;
        }
      };
      const onHide = () => {
        highlightedIndex.value = -1;
      };
      const getData = async (queryString) => {
        if (suggestionDisabled.value)
          return;
        const cb = (suggestionList) => {
          loading.value = false;
          if (suggestionDisabled.value)
            return;
          if (shared.isArray(suggestionList)) {
            suggestions.value = suggestionList;
            highlightedIndex.value = props2.highlightFirstItem ? 0 : -1;
          } else {
            throwError(COMPONENT_NAME$i, "autocomplete suggestions must be an array");
          }
        };
        loading.value = true;
        if (shared.isArray(props2.fetchSuggestions)) {
          cb(props2.fetchSuggestions);
        } else {
          const result = await props2.fetchSuggestions(queryString, cb);
          if (shared.isArray(result))
            cb(result);
        }
      };
      const debouncedGetData = debounce(getData, props2.debounce);
      const handleInput = (value) => {
        const valuePresented = !!value;
        emit(INPUT_EVENT, value);
        emit(UPDATE_MODEL_EVENT, value);
        suggestionDisabled.value = false;
        activated.value || (activated.value = valuePresented);
        if (!props2.triggerOnFocus && !value) {
          suggestionDisabled.value = true;
          suggestions.value = [];
          return;
        }
        debouncedGetData(value);
      };
      const handleMouseDown = (event) => {
        var _a2;
        if (disabled.value)
          return;
        if (((_a2 = event.target) == null ? void 0 : _a2.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
          activated.value = true;
        }
      };
      const handleChange = (value) => {
        emit(CHANGE_EVENT, value);
      };
      const handleFocus = (evt) => {
        if (!ignoreFocusEvent) {
          activated.value = true;
          emit("focus", evt);
          if (props2.triggerOnFocus && !readonly) {
            debouncedGetData(String(props2.modelValue));
          }
        } else {
          ignoreFocusEvent = false;
        }
      };
      const handleBlur = (evt) => {
        setTimeout(() => {
          var _a2;
          if ((_a2 = popperRef.value) == null ? void 0 : _a2.isFocusInsideContent()) {
            ignoreFocusEvent = true;
            return;
          }
          activated.value && close2();
          emit("blur", evt);
        });
      };
      const handleClear = () => {
        activated.value = false;
        emit(UPDATE_MODEL_EVENT, "");
        emit("clear");
      };
      const handleKeyEnter = async () => {
        if (suggestionVisible.value && highlightedIndex.value >= 0 && highlightedIndex.value < suggestions.value.length) {
          handleSelect(suggestions.value[highlightedIndex.value]);
        } else if (props2.selectWhenUnmatched) {
          emit("select", { value: props2.modelValue });
          suggestions.value = [];
          highlightedIndex.value = -1;
        }
      };
      const handleKeyEscape = (evt) => {
        if (suggestionVisible.value) {
          evt.preventDefault();
          evt.stopPropagation();
          close2();
        }
      };
      const close2 = () => {
        activated.value = false;
      };
      const focus = () => {
        var _a2;
        (_a2 = inputRef.value) == null ? void 0 : _a2.focus();
      };
      const blur = () => {
        var _a2;
        (_a2 = inputRef.value) == null ? void 0 : _a2.blur();
      };
      const handleSelect = async (item) => {
        emit(INPUT_EVENT, item[props2.valueKey]);
        emit(UPDATE_MODEL_EVENT, item[props2.valueKey]);
        emit("select", item);
        suggestions.value = [];
        highlightedIndex.value = -1;
      };
      const highlight = (index) => {
        if (!suggestionVisible.value || loading.value)
          return;
        if (index < 0) {
          highlightedIndex.value = -1;
          return;
        }
        if (index >= suggestions.value.length) {
          index = suggestions.value.length - 1;
        }
        const suggestion = regionRef.value.querySelector(`.${ns2.be("suggestion", "wrap")}`);
        const suggestionList = suggestion.querySelectorAll(`.${ns2.be("suggestion", "list")} li`);
        const highlightItem = suggestionList[index];
        const scrollTop = suggestion.scrollTop;
        const { offsetTop, scrollHeight } = highlightItem;
        if (offsetTop + scrollHeight > scrollTop + suggestion.clientHeight) {
          suggestion.scrollTop += scrollHeight;
        }
        if (offsetTop < scrollTop) {
          suggestion.scrollTop -= scrollHeight;
        }
        highlightedIndex.value = index;
        inputRef.value.ref.setAttribute("aria-activedescendant", `${listboxId.value}-item-${highlightedIndex.value}`);
      };
      const stopHandle = onClickOutside(listboxRef, () => {
        suggestionVisible.value && close2();
      });
      vue.onBeforeUnmount(() => {
        stopHandle == null ? void 0 : stopHandle();
      });
      vue.onMounted(() => {
        inputRef.value.ref.setAttribute("role", "textbox");
        inputRef.value.ref.setAttribute("aria-autocomplete", "list");
        inputRef.value.ref.setAttribute("aria-controls", "id");
        inputRef.value.ref.setAttribute("aria-activedescendant", `${listboxId.value}-item-${highlightedIndex.value}`);
        readonly = inputRef.value.ref.hasAttribute("readonly");
      });
      expose({
        highlightedIndex,
        activated,
        loading,
        inputRef,
        popperRef,
        suggestions,
        handleSelect,
        handleKeyEnter,
        focus,
        blur,
        close: close2,
        highlight,
        getData
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElTooltip), {
          ref_key: "popperRef",
          ref: popperRef,
          visible: vue.unref(suggestionVisible),
          placement: _ctx.placement,
          "fallback-placements": ["bottom-start", "top-start"],
          "popper-class": [vue.unref(ns2).e("popper"), _ctx.popperClass],
          teleported: _ctx.teleported,
          "gpu-acceleration": false,
          pure: "",
          "manual-mode": "",
          effect: "light",
          trigger: "click",
          transition: `${vue.unref(ns2).namespace.value}-zoom-in-top`,
          persistent: "",
          role: "listbox",
          onBeforeShow: onSuggestionShow,
          onHide
        }, {
          content: vue.withCtx(() => [
            vue.createElementVNode("div", {
              ref_key: "regionRef",
              ref: regionRef,
              class: vue.normalizeClass([vue.unref(ns2).b("suggestion"), vue.unref(ns2).is("loading", vue.unref(suggestionLoading))]),
              style: vue.normalizeStyle({
                [_ctx.fitInputWidth ? "width" : "minWidth"]: dropdownWidth.value,
                outline: "none"
              }),
              role: "region"
            }, [
              vue.createVNode(vue.unref(ElScrollbar), {
                id: vue.unref(listboxId),
                tag: "ul",
                "wrap-class": vue.unref(ns2).be("suggestion", "wrap"),
                "view-class": vue.unref(ns2).be("suggestion", "list"),
                role: "listbox"
              }, {
                default: vue.withCtx(() => [
                  vue.unref(suggestionLoading) ? (vue.openBlock(), vue.createElementBlock("li", { key: 0 }, [
                    vue.renderSlot(_ctx.$slots, "loading", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), {
                        class: vue.normalizeClass(vue.unref(ns2).is("loading"))
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(loading_default))
                        ]),
                        _: 1
                      }, 8, ["class"])
                    ])
                  ])) : (vue.openBlock(true), vue.createElementBlock(vue.Fragment, { key: 1 }, vue.renderList(suggestions.value, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("li", {
                      id: `${vue.unref(listboxId)}-item-${index}`,
                      key: index,
                      class: vue.normalizeClass({ highlighted: highlightedIndex.value === index }),
                      role: "option",
                      "aria-selected": highlightedIndex.value === index,
                      onClick: ($event) => handleSelect(item)
                    }, [
                      vue.renderSlot(_ctx.$slots, "default", { item }, () => [
                        vue.createTextVNode(vue.toDisplayString(item[_ctx.valueKey]), 1)
                      ])
                    ], 10, ["id", "aria-selected", "onClick"]);
                  }), 128))
                ]),
                _: 3
              }, 8, ["id", "wrap-class", "view-class"])
            ], 6)
          ]),
          default: vue.withCtx(() => [
            vue.createElementVNode("div", {
              ref_key: "listboxRef",
              ref: listboxRef,
              class: vue.normalizeClass([vue.unref(ns2).b(), _ctx.$attrs.class]),
              style: vue.normalizeStyle(vue.unref(styles)),
              role: "combobox",
              "aria-haspopup": "listbox",
              "aria-expanded": vue.unref(suggestionVisible),
              "aria-owns": vue.unref(listboxId)
            }, [
              vue.createVNode(vue.unref(ElInput), vue.mergeProps({
                ref_key: "inputRef",
                ref: inputRef
              }, vue.unref(attrs2), {
                clearable: _ctx.clearable,
                disabled: vue.unref(disabled),
                name: _ctx.name,
                "model-value": _ctx.modelValue,
                "aria-label": _ctx.ariaLabel,
                onInput: handleInput,
                onChange: handleChange,
                onFocus: handleFocus,
                onBlur: handleBlur,
                onClear: handleClear,
                onKeydown: [
                  vue.withKeys(vue.withModifiers(($event) => highlight(highlightedIndex.value - 1), ["prevent"]), ["up"]),
                  vue.withKeys(vue.withModifiers(($event) => highlight(highlightedIndex.value + 1), ["prevent"]), ["down"]),
                  vue.withKeys(handleKeyEnter, ["enter"]),
                  vue.withKeys(close2, ["tab"]),
                  vue.withKeys(handleKeyEscape, ["esc"])
                ],
                onMousedown: handleMouseDown
              }), vue.createSlots({
                _: 2
              }, [
                _ctx.$slots.prepend ? {
                  name: "prepend",
                  fn: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "prepend")
                  ])
                } : void 0,
                _ctx.$slots.append ? {
                  name: "append",
                  fn: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "append")
                  ])
                } : void 0,
                _ctx.$slots.prefix ? {
                  name: "prefix",
                  fn: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "prefix")
                  ])
                } : void 0,
                _ctx.$slots.suffix ? {
                  name: "suffix",
                  fn: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "suffix")
                  ])
                } : void 0
              ]), 1040, ["clearable", "disabled", "name", "model-value", "aria-label", "onKeydown"])
            ], 14, ["aria-expanded", "aria-owns"])
          ]),
          _: 3
        }, 8, ["visible", "placement", "popper-class", "teleported", "transition"]);
      };
    }
  });
  var Autocomplete = /* @__PURE__ */ _export_sfc(_sfc_main$2d, [["__file", "autocomplete.vue"]]);
  const ElAutocomplete = withInstall(Autocomplete);
  const avatarProps = buildProps({
    size: {
      type: [Number, String],
      values: componentSizes,
      default: "",
      validator: (val) => isNumber$2(val)
    },
    shape: {
      type: String,
      values: ["circle", "square"],
      default: "circle"
    },
    icon: {
      type: iconPropType
    },
    src: {
      type: String,
      default: ""
    },
    alt: String,
    srcSet: String,
    fit: {
      type: definePropType(String),
      default: "cover"
    }
  });
  const avatarEmits = {
    error: (evt) => evt instanceof Event
  };
  const __default__$1A = vue.defineComponent({
    name: "ElAvatar"
  });
  const _sfc_main$2c = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1A,
    props: avatarProps,
    emits: avatarEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("avatar");
      const hasLoadError = vue.ref(false);
      const avatarClass = vue.computed(() => {
        const { size, icon, shape } = props2;
        const classList = [ns2.b()];
        if (shared.isString(size))
          classList.push(ns2.m(size));
        if (icon)
          classList.push(ns2.m("icon"));
        if (shape)
          classList.push(ns2.m(shape));
        return classList;
      });
      const sizeStyle = vue.computed(() => {
        const { size } = props2;
        return isNumber$2(size) ? ns2.cssVarBlock({
          size: addUnit(size) || ""
        }) : void 0;
      });
      const fitStyle = vue.computed(() => ({
        objectFit: props2.fit
      }));
      vue.watch(() => props2.src, () => hasLoadError.value = false);
      function handleError(e) {
        hasLoadError.value = true;
        emit("error", e);
      }
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass(vue.unref(avatarClass)),
          style: vue.normalizeStyle(vue.unref(sizeStyle))
        }, [
          (_ctx.src || _ctx.srcSet) && !hasLoadError.value ? (vue.openBlock(), vue.createElementBlock("img", {
            key: 0,
            src: _ctx.src,
            alt: _ctx.alt,
            srcset: _ctx.srcSet,
            style: vue.normalizeStyle(vue.unref(fitStyle)),
            onError: handleError
          }, null, 44, ["src", "alt", "srcset"])) : _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 1 }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
            ]),
            _: 1
          })) : vue.renderSlot(_ctx.$slots, "default", { key: 2 })
        ], 6);
      };
    }
  });
  var Avatar = /* @__PURE__ */ _export_sfc(_sfc_main$2c, [["__file", "avatar.vue"]]);
  const ElAvatar = withInstall(Avatar);
  const backtopProps = {
    visibilityHeight: {
      type: Number,
      default: 200
    },
    target: {
      type: String,
      default: ""
    },
    right: {
      type: Number,
      default: 40
    },
    bottom: {
      type: Number,
      default: 40
    }
  };
  const backtopEmits = {
    click: (evt) => evt instanceof MouseEvent
  };
  const useBackTop = (props2, emit, componentName2) => {
    const el = vue.shallowRef();
    const container = vue.shallowRef();
    const visible = vue.ref(false);
    const handleScroll2 = () => {
      if (el.value)
        visible.value = el.value.scrollTop >= props2.visibilityHeight;
    };
    const handleClick = (event) => {
      var _a2;
      (_a2 = el.value) == null ? void 0 : _a2.scrollTo({ top: 0, behavior: "smooth" });
      emit("click", event);
    };
    const handleScrollThrottled = useThrottleFn(handleScroll2, 300, true);
    useEventListener(container, "scroll", handleScrollThrottled);
    vue.onMounted(() => {
      var _a2;
      container.value = document;
      el.value = document.documentElement;
      if (props2.target) {
        el.value = (_a2 = document.querySelector(props2.target)) != null ? _a2 : void 0;
        if (!el.value) {
          throwError(componentName2, `target does not exist: ${props2.target}`);
        }
        container.value = el.value;
      }
      handleScroll2();
    });
    return {
      visible,
      handleClick
    };
  };
  const COMPONENT_NAME$h = "ElBacktop";
  const __default__$1z = vue.defineComponent({
    name: COMPONENT_NAME$h
  });
  const _sfc_main$2b = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1z,
    props: backtopProps,
    emits: backtopEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("backtop");
      const { handleClick, visible } = useBackTop(props2, emit, COMPONENT_NAME$h);
      const backTopStyle = vue.computed(() => ({
        right: `${props2.right}px`,
        bottom: `${props2.bottom}px`
      }));
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.Transition, {
          name: `${vue.unref(ns2).namespace.value}-fade-in`
        }, {
          default: vue.withCtx(() => [
            vue.unref(visible) ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              style: vue.normalizeStyle(vue.unref(backTopStyle)),
              class: vue.normalizeClass(vue.unref(ns2).b()),
              onClick: vue.withModifiers(vue.unref(handleClick), ["stop"])
            }, [
              vue.renderSlot(_ctx.$slots, "default", {}, () => [
                vue.createVNode(vue.unref(ElIcon), {
                  class: vue.normalizeClass(vue.unref(ns2).e("icon"))
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(caret_top_default))
                  ]),
                  _: 1
                }, 8, ["class"])
              ])
            ], 14, ["onClick"])) : vue.createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 8, ["name"]);
      };
    }
  });
  var Backtop = /* @__PURE__ */ _export_sfc(_sfc_main$2b, [["__file", "backtop.vue"]]);
  const ElBacktop = withInstall(Backtop);
  const badgeProps = buildProps({
    value: {
      type: [String, Number],
      default: ""
    },
    max: {
      type: Number,
      default: 99
    },
    isDot: Boolean,
    hidden: Boolean,
    type: {
      type: String,
      values: ["primary", "success", "warning", "info", "danger"],
      default: "danger"
    },
    showZero: {
      type: Boolean,
      default: true
    },
    color: String,
    badgeStyle: {
      type: definePropType([String, Object, Array])
    },
    offset: {
      type: definePropType(Array),
      default: [0, 0]
    },
    badgeClass: {
      type: String
    }
  });
  const __default__$1y = vue.defineComponent({
    name: "ElBadge"
  });
  const _sfc_main$2a = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1y,
    props: badgeProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const ns2 = useNamespace("badge");
      const content = vue.computed(() => {
        if (props2.isDot)
          return "";
        if (isNumber$2(props2.value) && isNumber$2(props2.max)) {
          return props2.max < props2.value ? `${props2.max}+` : `${props2.value}`;
        }
        return `${props2.value}`;
      });
      const style = vue.computed(() => {
        var _a2, _b, _c, _d, _e2;
        return [
          {
            backgroundColor: props2.color,
            marginRight: addUnit(-((_b = (_a2 = props2.offset) == null ? void 0 : _a2[0]) != null ? _b : 0)),
            marginTop: addUnit((_d = (_c = props2.offset) == null ? void 0 : _c[1]) != null ? _d : 0)
          },
          (_e2 = props2.badgeStyle) != null ? _e2 : {}
        ];
      });
      expose({
        content
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns2).b())
        }, [
          vue.renderSlot(_ctx.$slots, "default"),
          vue.createVNode(vue.Transition, {
            name: `${vue.unref(ns2).namespace.value}-zoom-in-center`,
            persisted: ""
          }, {
            default: vue.withCtx(() => [
              vue.withDirectives(vue.createElementVNode("sup", {
                class: vue.normalizeClass([
                  vue.unref(ns2).e("content"),
                  vue.unref(ns2).em("content", _ctx.type),
                  vue.unref(ns2).is("fixed", !!_ctx.$slots.default),
                  vue.unref(ns2).is("dot", _ctx.isDot),
                  vue.unref(ns2).is("hide-zero", !_ctx.showZero && props2.value === 0),
                  _ctx.badgeClass
                ]),
                style: vue.normalizeStyle(vue.unref(style)),
                textContent: vue.toDisplayString(vue.unref(content))
              }, null, 14, ["textContent"]), [
                [vue.vShow, !_ctx.hidden && (vue.unref(content) || _ctx.isDot)]
              ])
            ]),
            _: 1
          }, 8, ["name"])
        ], 2);
      };
    }
  });
  var Badge = /* @__PURE__ */ _export_sfc(_sfc_main$2a, [["__file", "badge.vue"]]);
  const ElBadge = withInstall(Badge);
  const breadcrumbKey = Symbol("breadcrumbKey");
  const breadcrumbProps = buildProps({
    separator: {
      type: String,
      default: "/"
    },
    separatorIcon: {
      type: iconPropType
    }
  });
  const __default__$1x = vue.defineComponent({
    name: "ElBreadcrumb"
  });
  const _sfc_main$29 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1x,
    props: breadcrumbProps,
    setup(__props) {
      const props2 = __props;
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("breadcrumb");
      const breadcrumb = vue.ref();
      vue.provide(breadcrumbKey, props2);
      vue.onMounted(() => {
        const items = breadcrumb.value.querySelectorAll(`.${ns2.e("item")}`);
        if (items.length) {
          items[items.length - 1].setAttribute("aria-current", "page");
        }
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "breadcrumb",
          ref: breadcrumb,
          class: vue.normalizeClass(vue.unref(ns2).b()),
          "aria-label": vue.unref(t2)("el.breadcrumb.label"),
          role: "navigation"
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 10, ["aria-label"]);
      };
    }
  });
  var Breadcrumb = /* @__PURE__ */ _export_sfc(_sfc_main$29, [["__file", "breadcrumb.vue"]]);
  const breadcrumbItemProps = buildProps({
    to: {
      type: definePropType([String, Object]),
      default: ""
    },
    replace: Boolean
  });
  const __default__$1w = vue.defineComponent({
    name: "ElBreadcrumbItem"
  });
  const _sfc_main$28 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1w,
    props: breadcrumbItemProps,
    setup(__props) {
      const props2 = __props;
      const instance = vue.getCurrentInstance();
      const breadcrumbContext = vue.inject(breadcrumbKey, void 0);
      const ns2 = useNamespace("breadcrumb");
      const router2 = instance.appContext.config.globalProperties.$router;
      const link = vue.ref();
      const onClick = () => {
        if (!props2.to || !router2)
          return;
        props2.replace ? router2.replace(props2.to) : router2.push(props2.to);
      };
      return (_ctx, _cache) => {
        var _a2, _b;
        return vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass(vue.unref(ns2).e("item"))
        }, [
          vue.createElementVNode("span", {
            ref_key: "link",
            ref: link,
            class: vue.normalizeClass([vue.unref(ns2).e("inner"), vue.unref(ns2).is("link", !!_ctx.to)]),
            role: "link",
            onClick
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2),
          ((_a2 = vue.unref(breadcrumbContext)) == null ? void 0 : _a2.separatorIcon) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("separator"))
          }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(breadcrumbContext).separatorIcon)))
            ]),
            _: 1
          }, 8, ["class"])) : (vue.openBlock(), vue.createElementBlock("span", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns2).e("separator")),
            role: "presentation"
          }, vue.toDisplayString((_b = vue.unref(breadcrumbContext)) == null ? void 0 : _b.separator), 3))
        ], 2);
      };
    }
  });
  var BreadcrumbItem = /* @__PURE__ */ _export_sfc(_sfc_main$28, [["__file", "breadcrumb-item.vue"]]);
  const ElBreadcrumb = withInstall(Breadcrumb, {
    BreadcrumbItem
  });
  const ElBreadcrumbItem = withNoopInstall(BreadcrumbItem);
  const buttonGroupContextKey = Symbol("buttonGroupContextKey");
  const useButton = (props2, emit) => {
    useDeprecated({
      from: "type.text",
      replacement: "link",
      version: "3.0.0",
      scope: "props",
      ref: "https://element-plus.org/en-US/component/button.html#button-attributes"
    }, vue.computed(() => props2.type === "text"));
    const buttonGroupContext = vue.inject(buttonGroupContextKey, void 0);
    const globalConfig2 = useGlobalConfig("button");
    const { form } = useFormItem();
    const _size = useFormSize(vue.computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));
    const _disabled = useFormDisabled();
    const _ref = vue.ref();
    const slots = vue.useSlots();
    const _type = vue.computed(() => props2.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || "");
    const autoInsertSpace = vue.computed(() => {
      var _a2, _b, _c;
      return (_c = (_b = props2.autoInsertSpace) != null ? _b : (_a2 = globalConfig2.value) == null ? void 0 : _a2.autoInsertSpace) != null ? _c : false;
    });
    const _props = vue.computed(() => {
      if (props2.tag === "button") {
        return {
          ariaDisabled: _disabled.value || props2.loading,
          disabled: _disabled.value || props2.loading,
          autofocus: props2.autofocus,
          type: props2.nativeType
        };
      }
      return {};
    });
    const shouldAddSpace = vue.computed(() => {
      var _a2;
      const defaultSlot = (_a2 = slots.default) == null ? void 0 : _a2.call(slots);
      if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {
        const slot = defaultSlot[0];
        if ((slot == null ? void 0 : slot.type) === vue.Text) {
          const text = slot.children;
          return new RegExp("^\\p{Unified_Ideograph}{2}$", "u").test(text.trim());
        }
      }
      return false;
    });
    const handleClick = (evt) => {
      if (_disabled.value || props2.loading) {
        evt.stopPropagation();
        return;
      }
      if (props2.nativeType === "reset") {
        form == null ? void 0 : form.resetFields();
      }
      emit("click", evt);
    };
    return {
      _disabled,
      _size,
      _type,
      _ref,
      _props,
      shouldAddSpace,
      handleClick
    };
  };
  const buttonTypes = [
    "default",
    "primary",
    "success",
    "warning",
    "info",
    "danger",
    "text",
    ""
  ];
  const buttonNativeTypes = ["button", "submit", "reset"];
  const buttonProps = buildProps({
    size: useSizeProp,
    disabled: Boolean,
    type: {
      type: String,
      values: buttonTypes,
      default: ""
    },
    icon: {
      type: iconPropType
    },
    nativeType: {
      type: String,
      values: buttonNativeTypes,
      default: "button"
    },
    loading: Boolean,
    loadingIcon: {
      type: iconPropType,
      default: () => loading_default
    },
    plain: Boolean,
    text: Boolean,
    link: Boolean,
    bg: Boolean,
    autofocus: Boolean,
    round: Boolean,
    circle: Boolean,
    color: String,
    dark: Boolean,
    autoInsertSpace: {
      type: Boolean,
      default: void 0
    },
    tag: {
      type: definePropType([String, Object]),
      default: "button"
    }
  });
  const buttonEmits = {
    click: (evt) => evt instanceof MouseEvent
  };
  function bound01$1(n2, max2) {
    if (isOnePointZero$1(n2)) {
      n2 = "100%";
    }
    var isPercent = isPercentage$1(n2);
    n2 = max2 === 360 ? n2 : Math.min(max2, Math.max(0, parseFloat(n2)));
    if (isPercent) {
      n2 = parseInt(String(n2 * max2), 10) / 100;
    }
    if (Math.abs(n2 - max2) < 1e-6) {
      return 1;
    }
    if (max2 === 360) {
      n2 = (n2 < 0 ? n2 % max2 + max2 : n2 % max2) / parseFloat(String(max2));
    } else {
      n2 = n2 % max2 / parseFloat(String(max2));
    }
    return n2;
  }
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }
  function isOnePointZero$1(n2) {
    return typeof n2 === "string" && n2.indexOf(".") !== -1 && parseFloat(n2) === 1;
  }
  function isPercentage$1(n2) {
    return typeof n2 === "string" && n2.indexOf("%") !== -1;
  }
  function boundAlpha(a2) {
    a2 = parseFloat(a2);
    if (isNaN(a2) || a2 < 0 || a2 > 1) {
      a2 = 1;
    }
    return a2;
  }
  function convertToPercentage(n2) {
    if (n2 <= 1) {
      return "".concat(Number(n2) * 100, "%");
    }
    return n2;
  }
  function pad2(c2) {
    return c2.length === 1 ? "0" + c2 : String(c2);
  }
  function rgbToRgb(r2, g2, b2) {
    return {
      r: bound01$1(r2, 255) * 255,
      g: bound01$1(g2, 255) * 255,
      b: bound01$1(b2, 255) * 255
    };
  }
  function rgbToHsl(r2, g2, b2) {
    r2 = bound01$1(r2, 255);
    g2 = bound01$1(g2, 255);
    b2 = bound01$1(b2, 255);
    var max2 = Math.max(r2, g2, b2);
    var min2 = Math.min(r2, g2, b2);
    var h2 = 0;
    var s2 = 0;
    var l2 = (max2 + min2) / 2;
    if (max2 === min2) {
      s2 = 0;
      h2 = 0;
    } else {
      var d2 = max2 - min2;
      s2 = l2 > 0.5 ? d2 / (2 - max2 - min2) : d2 / (max2 + min2);
      switch (max2) {
        case r2:
          h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
          break;
        case g2:
          h2 = (b2 - r2) / d2 + 2;
          break;
        case b2:
          h2 = (r2 - g2) / d2 + 4;
          break;
      }
      h2 /= 6;
    }
    return { h: h2, s: s2, l: l2 };
  }
  function hue2rgb(p2, q2, t2) {
    if (t2 < 0) {
      t2 += 1;
    }
    if (t2 > 1) {
      t2 -= 1;
    }
    if (t2 < 1 / 6) {
      return p2 + (q2 - p2) * (6 * t2);
    }
    if (t2 < 1 / 2) {
      return q2;
    }
    if (t2 < 2 / 3) {
      return p2 + (q2 - p2) * (2 / 3 - t2) * 6;
    }
    return p2;
  }
  function hslToRgb(h2, s2, l2) {
    var r2;
    var g2;
    var b2;
    h2 = bound01$1(h2, 360);
    s2 = bound01$1(s2, 100);
    l2 = bound01$1(l2, 100);
    if (s2 === 0) {
      g2 = l2;
      b2 = l2;
      r2 = l2;
    } else {
      var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
      var p2 = 2 * l2 - q2;
      r2 = hue2rgb(p2, q2, h2 + 1 / 3);
      g2 = hue2rgb(p2, q2, h2);
      b2 = hue2rgb(p2, q2, h2 - 1 / 3);
    }
    return { r: r2 * 255, g: g2 * 255, b: b2 * 255 };
  }
  function rgbToHsv(r2, g2, b2) {
    r2 = bound01$1(r2, 255);
    g2 = bound01$1(g2, 255);
    b2 = bound01$1(b2, 255);
    var max2 = Math.max(r2, g2, b2);
    var min2 = Math.min(r2, g2, b2);
    var h2 = 0;
    var v2 = max2;
    var d2 = max2 - min2;
    var s2 = max2 === 0 ? 0 : d2 / max2;
    if (max2 === min2) {
      h2 = 0;
    } else {
      switch (max2) {
        case r2:
          h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
          break;
        case g2:
          h2 = (b2 - r2) / d2 + 2;
          break;
        case b2:
          h2 = (r2 - g2) / d2 + 4;
          break;
      }
      h2 /= 6;
    }
    return { h: h2, s: s2, v: v2 };
  }
  function hsvToRgb(h2, s2, v2) {
    h2 = bound01$1(h2, 360) * 6;
    s2 = bound01$1(s2, 100);
    v2 = bound01$1(v2, 100);
    var i2 = Math.floor(h2);
    var f2 = h2 - i2;
    var p2 = v2 * (1 - s2);
    var q2 = v2 * (1 - f2 * s2);
    var t2 = v2 * (1 - (1 - f2) * s2);
    var mod = i2 % 6;
    var r2 = [v2, q2, p2, p2, t2, v2][mod];
    var g2 = [t2, v2, v2, q2, p2, p2][mod];
    var b2 = [p2, p2, t2, v2, v2, q2][mod];
    return { r: r2 * 255, g: g2 * 255, b: b2 * 255 };
  }
  function rgbToHex(r2, g2, b2, allow3Char) {
    var hex = [
      pad2(Math.round(r2).toString(16)),
      pad2(Math.round(g2).toString(16)),
      pad2(Math.round(b2).toString(16))
    ];
    if (allow3Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1))) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join("");
  }
  function rgbaToHex(r2, g2, b2, a2, allow4Char) {
    var hex = [
      pad2(Math.round(r2).toString(16)),
      pad2(Math.round(g2).toString(16)),
      pad2(Math.round(b2).toString(16)),
      pad2(convertDecimalToHex(a2))
    ];
    if (allow4Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1)) && hex[3].startsWith(hex[3].charAt(1))) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join("");
  }
  function convertDecimalToHex(d2) {
    return Math.round(parseFloat(d2) * 255).toString(16);
  }
  function convertHexToDecimal(h2) {
    return parseIntFromHex(h2) / 255;
  }
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }
  function numberInputToObject(color) {
    return {
      r: color >> 16,
      g: (color & 65280) >> 8,
      b: color & 255
    };
  }
  var names = {
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    blueviolet: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkgrey: "#a9a9a9",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkviolet: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    forestgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    goldenrod: "#daa520",
    gold: "#ffd700",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavenderblush: "#fff0f5",
    lavender: "#e6e6fa",
    lawngreen: "#7cfc00",
    lemonchiffon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightgrey: "#d3d3d3",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvioletred: "#c71585",
    midnightblue: "#191970",
    mintcream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    paleturquoise: "#afeeee",
    palevioletred: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    violet: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
  };
  function inputToRGB(color) {
    var rgb = { r: 0, g: 0, b: 0 };
    var a2 = 1;
    var s2 = null;
    var v2 = null;
    var l2 = null;
    var ok = false;
    var format2 = false;
    if (typeof color === "string") {
      color = stringInputToObject(color);
    }
    if (typeof color === "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format2 = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s2 = convertToPercentage(color.s);
        v2 = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s2, v2);
        ok = true;
        format2 = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s2 = convertToPercentage(color.s);
        l2 = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s2, l2);
        ok = true;
        format2 = "hsl";
      }
      if (Object.prototype.hasOwnProperty.call(color, "a")) {
        a2 = color.a;
      }
    }
    a2 = boundAlpha(a2);
    return {
      ok,
      format: color.format || format2,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a2
    };
  }
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
  var matchers = {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
  function stringInputToObject(color) {
    color = color.trim().toLowerCase();
    if (color.length === 0) {
      return false;
    }
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color === "transparent") {
      return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }
    var match = matchers.rgb.exec(color);
    if (match) {
      return { r: match[1], g: match[2], b: match[3] };
    }
    match = matchers.rgba.exec(color);
    if (match) {
      return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    match = matchers.hsl.exec(color);
    if (match) {
      return { h: match[1], s: match[2], l: match[3] };
    }
    match = matchers.hsla.exec(color);
    if (match) {
      return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    match = matchers.hsv.exec(color);
    if (match) {
      return { h: match[1], s: match[2], v: match[3] };
    }
    match = matchers.hsva.exec(color);
    if (match) {
      return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    match = matchers.hex8.exec(color);
    if (match) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? "name" : "hex8"
      };
    }
    match = matchers.hex6.exec(color);
    if (match) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? "name" : "hex"
      };
    }
    match = matchers.hex4.exec(color);
    if (match) {
      return {
        r: parseIntFromHex(match[1] + match[1]),
        g: parseIntFromHex(match[2] + match[2]),
        b: parseIntFromHex(match[3] + match[3]),
        a: convertHexToDecimal(match[4] + match[4]),
        format: named ? "name" : "hex8"
      };
    }
    match = matchers.hex3.exec(color);
    if (match) {
      return {
        r: parseIntFromHex(match[1] + match[1]),
        g: parseIntFromHex(match[2] + match[2]),
        b: parseIntFromHex(match[3] + match[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function isValidCSSUnit(color) {
    return Boolean(matchers.CSS_UNIT.exec(String(color)));
  }
  var TinyColor = (
    /** @class */
    function() {
      function TinyColor2(color, opts) {
        if (color === void 0) {
          color = "";
        }
        if (opts === void 0) {
          opts = {};
        }
        var _a2;
        if (color instanceof TinyColor2) {
          return color;
        }
        if (typeof color === "number") {
          color = numberInputToObject(color);
        }
        this.originalInput = color;
        var rgb = inputToRGB(color);
        this.originalInput = color;
        this.r = rgb.r;
        this.g = rgb.g;
        this.b = rgb.b;
        this.a = rgb.a;
        this.roundA = Math.round(100 * this.a) / 100;
        this.format = (_a2 = opts.format) !== null && _a2 !== void 0 ? _a2 : rgb.format;
        this.gradientType = opts.gradientType;
        if (this.r < 1) {
          this.r = Math.round(this.r);
        }
        if (this.g < 1) {
          this.g = Math.round(this.g);
        }
        if (this.b < 1) {
          this.b = Math.round(this.b);
        }
        this.isValid = rgb.ok;
      }
      TinyColor2.prototype.isDark = function() {
        return this.getBrightness() < 128;
      };
      TinyColor2.prototype.isLight = function() {
        return !this.isDark();
      };
      TinyColor2.prototype.getBrightness = function() {
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
      };
      TinyColor2.prototype.getLuminance = function() {
        var rgb = this.toRgb();
        var R2;
        var G2;
        var B2;
        var RsRGB = rgb.r / 255;
        var GsRGB = rgb.g / 255;
        var BsRGB = rgb.b / 255;
        if (RsRGB <= 0.03928) {
          R2 = RsRGB / 12.92;
        } else {
          R2 = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
        }
        if (GsRGB <= 0.03928) {
          G2 = GsRGB / 12.92;
        } else {
          G2 = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
        }
        if (BsRGB <= 0.03928) {
          B2 = BsRGB / 12.92;
        } else {
          B2 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * R2 + 0.7152 * G2 + 0.0722 * B2;
      };
      TinyColor2.prototype.getAlpha = function() {
        return this.a;
      };
      TinyColor2.prototype.setAlpha = function(alpha) {
        this.a = boundAlpha(alpha);
        this.roundA = Math.round(100 * this.a) / 100;
        return this;
      };
      TinyColor2.prototype.isMonochrome = function() {
        var s2 = this.toHsl().s;
        return s2 === 0;
      };
      TinyColor2.prototype.toHsv = function() {
        var hsv = rgbToHsv(this.r, this.g, this.b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
      };
      TinyColor2.prototype.toHsvString = function() {
        var hsv = rgbToHsv(this.r, this.g, this.b);
        var h2 = Math.round(hsv.h * 360);
        var s2 = Math.round(hsv.s * 100);
        var v2 = Math.round(hsv.v * 100);
        return this.a === 1 ? "hsv(".concat(h2, ", ").concat(s2, "%, ").concat(v2, "%)") : "hsva(".concat(h2, ", ").concat(s2, "%, ").concat(v2, "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toHsl = function() {
        var hsl = rgbToHsl(this.r, this.g, this.b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
      };
      TinyColor2.prototype.toHslString = function() {
        var hsl = rgbToHsl(this.r, this.g, this.b);
        var h2 = Math.round(hsl.h * 360);
        var s2 = Math.round(hsl.s * 100);
        var l2 = Math.round(hsl.l * 100);
        return this.a === 1 ? "hsl(".concat(h2, ", ").concat(s2, "%, ").concat(l2, "%)") : "hsla(".concat(h2, ", ").concat(s2, "%, ").concat(l2, "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toHex = function(allow3Char) {
        if (allow3Char === void 0) {
          allow3Char = false;
        }
        return rgbToHex(this.r, this.g, this.b, allow3Char);
      };
      TinyColor2.prototype.toHexString = function(allow3Char) {
        if (allow3Char === void 0) {
          allow3Char = false;
        }
        return "#" + this.toHex(allow3Char);
      };
      TinyColor2.prototype.toHex8 = function(allow4Char) {
        if (allow4Char === void 0) {
          allow4Char = false;
        }
        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
      };
      TinyColor2.prototype.toHex8String = function(allow4Char) {
        if (allow4Char === void 0) {
          allow4Char = false;
        }
        return "#" + this.toHex8(allow4Char);
      };
      TinyColor2.prototype.toHexShortString = function(allowShortChar) {
        if (allowShortChar === void 0) {
          allowShortChar = false;
        }
        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
      };
      TinyColor2.prototype.toRgb = function() {
        return {
          r: Math.round(this.r),
          g: Math.round(this.g),
          b: Math.round(this.b),
          a: this.a
        };
      };
      TinyColor2.prototype.toRgbString = function() {
        var r2 = Math.round(this.r);
        var g2 = Math.round(this.g);
        var b2 = Math.round(this.b);
        return this.a === 1 ? "rgb(".concat(r2, ", ").concat(g2, ", ").concat(b2, ")") : "rgba(".concat(r2, ", ").concat(g2, ", ").concat(b2, ", ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toPercentageRgb = function() {
        var fmt = function(x2) {
          return "".concat(Math.round(bound01$1(x2, 255) * 100), "%");
        };
        return {
          r: fmt(this.r),
          g: fmt(this.g),
          b: fmt(this.b),
          a: this.a
        };
      };
      TinyColor2.prototype.toPercentageRgbString = function() {
        var rnd = function(x2) {
          return Math.round(bound01$1(x2, 255) * 100);
        };
        return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
      };
      TinyColor2.prototype.toName = function() {
        if (this.a === 0) {
          return "transparent";
        }
        if (this.a < 1) {
          return false;
        }
        var hex = "#" + rgbToHex(this.r, this.g, this.b, false);
        for (var _i = 0, _a2 = Object.entries(names); _i < _a2.length; _i++) {
          var _b = _a2[_i], key = _b[0], value = _b[1];
          if (hex === value) {
            return key;
          }
        }
        return false;
      };
      TinyColor2.prototype.toString = function(format2) {
        var formatSet = Boolean(format2);
        format2 = format2 !== null && format2 !== void 0 ? format2 : this.format;
        var formattedString = false;
        var hasAlpha = this.a < 1 && this.a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format2.startsWith("hex") || format2 === "name");
        if (needsAlphaFormat) {
          if (format2 === "name" && this.a === 0) {
            return this.toName();
          }
          return this.toRgbString();
        }
        if (format2 === "rgb") {
          formattedString = this.toRgbString();
        }
        if (format2 === "prgb") {
          formattedString = this.toPercentageRgbString();
        }
        if (format2 === "hex" || format2 === "hex6") {
          formattedString = this.toHexString();
        }
        if (format2 === "hex3") {
          formattedString = this.toHexString(true);
        }
        if (format2 === "hex4") {
          formattedString = this.toHex8String(true);
        }
        if (format2 === "hex8") {
          formattedString = this.toHex8String();
        }
        if (format2 === "name") {
          formattedString = this.toName();
        }
        if (format2 === "hsl") {
          formattedString = this.toHslString();
        }
        if (format2 === "hsv") {
          formattedString = this.toHsvString();
        }
        return formattedString || this.toHexString();
      };
      TinyColor2.prototype.toNumber = function() {
        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
      };
      TinyColor2.prototype.clone = function() {
        return new TinyColor2(this.toString());
      };
      TinyColor2.prototype.lighten = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.brighten = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var rgb = this.toRgb();
        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
        return new TinyColor2(rgb);
      };
      TinyColor2.prototype.darken = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.tint = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        return this.mix("white", amount);
      };
      TinyColor2.prototype.shade = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        return this.mix("black", amount);
      };
      TinyColor2.prototype.desaturate = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.saturate = function(amount) {
        if (amount === void 0) {
          amount = 10;
        }
        var hsl = this.toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.greyscale = function() {
        return this.desaturate(100);
      };
      TinyColor2.prototype.spin = function(amount) {
        var hsl = this.toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.mix = function(color, amount) {
        if (amount === void 0) {
          amount = 50;
        }
        var rgb1 = this.toRgb();
        var rgb2 = new TinyColor2(color).toRgb();
        var p2 = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
          g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
          b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
          a: (rgb2.a - rgb1.a) * p2 + rgb1.a
        };
        return new TinyColor2(rgba);
      };
      TinyColor2.prototype.analogous = function(results, slices) {
        if (results === void 0) {
          results = 6;
        }
        if (slices === void 0) {
          slices = 30;
        }
        var hsl = this.toHsl();
        var part = 360 / slices;
        var ret = [this];
        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(new TinyColor2(hsl));
        }
        return ret;
      };
      TinyColor2.prototype.complement = function() {
        var hsl = this.toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return new TinyColor2(hsl);
      };
      TinyColor2.prototype.monochromatic = function(results) {
        if (results === void 0) {
          results = 6;
        }
        var hsv = this.toHsv();
        var h2 = hsv.h;
        var s2 = hsv.s;
        var v2 = hsv.v;
        var res = [];
        var modification = 1 / results;
        while (results--) {
          res.push(new TinyColor2({ h: h2, s: s2, v: v2 }));
          v2 = (v2 + modification) % 1;
        }
        return res;
      };
      TinyColor2.prototype.splitcomplement = function() {
        var hsl = this.toHsl();
        var h2 = hsl.h;
        return [
          this,
          new TinyColor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
          new TinyColor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
        ];
      };
      TinyColor2.prototype.onBackground = function(background) {
        var fg = this.toRgb();
        var bg = new TinyColor2(background).toRgb();
        var alpha = fg.a + bg.a * (1 - fg.a);
        return new TinyColor2({
          r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,
          g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,
          b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,
          a: alpha
        });
      };
      TinyColor2.prototype.triad = function() {
        return this.polyad(3);
      };
      TinyColor2.prototype.tetrad = function() {
        return this.polyad(4);
      };
      TinyColor2.prototype.polyad = function(n2) {
        var hsl = this.toHsl();
        var h2 = hsl.h;
        var result = [this];
        var increment = 360 / n2;
        for (var i2 = 1; i2 < n2; i2++) {
          result.push(new TinyColor2({ h: (h2 + i2 * increment) % 360, s: hsl.s, l: hsl.l }));
        }
        return result;
      };
      TinyColor2.prototype.equals = function(color) {
        return this.toRgbString() === new TinyColor2(color).toRgbString();
      };
      return TinyColor2;
    }()
  );
  function darken(color, amount = 20) {
    return color.mix("#141414", amount).toString();
  }
  function useButtonCustomStyle(props2) {
    const _disabled = useFormDisabled();
    const ns2 = useNamespace("button");
    return vue.computed(() => {
      let styles = {};
      let buttonColor = props2.color;
      if (buttonColor) {
        const match = buttonColor.match(/var\((.*?)\)/);
        if (match) {
          buttonColor = window.getComputedStyle(window.document.documentElement).getPropertyValue(match[1]);
        }
        const color = new TinyColor(buttonColor);
        const activeBgColor = props2.dark ? color.tint(20).toString() : darken(color, 20);
        if (props2.plain) {
          styles = ns2.cssVarBlock({
            "bg-color": props2.dark ? darken(color, 90) : color.tint(90).toString(),
            "text-color": buttonColor,
            "border-color": props2.dark ? darken(color, 50) : color.tint(50).toString(),
            "hover-text-color": `var(${ns2.cssVarName("color-white")})`,
            "hover-bg-color": buttonColor,
            "hover-border-color": buttonColor,
            "active-bg-color": activeBgColor,
            "active-text-color": `var(${ns2.cssVarName("color-white")})`,
            "active-border-color": activeBgColor
          });
          if (_disabled.value) {
            styles[ns2.cssVarBlockName("disabled-bg-color")] = props2.dark ? darken(color, 90) : color.tint(90).toString();
            styles[ns2.cssVarBlockName("disabled-text-color")] = props2.dark ? darken(color, 50) : color.tint(50).toString();
            styles[ns2.cssVarBlockName("disabled-border-color")] = props2.dark ? darken(color, 80) : color.tint(80).toString();
          }
        } else {
          const hoverBgColor = props2.dark ? darken(color, 30) : color.tint(30).toString();
          const textColor = color.isDark() ? `var(${ns2.cssVarName("color-white")})` : `var(${ns2.cssVarName("color-black")})`;
          styles = ns2.cssVarBlock({
            "bg-color": buttonColor,
            "text-color": textColor,
            "border-color": buttonColor,
            "hover-bg-color": hoverBgColor,
            "hover-text-color": textColor,
            "hover-border-color": hoverBgColor,
            "active-bg-color": activeBgColor,
            "active-border-color": activeBgColor
          });
          if (_disabled.value) {
            const disabledButtonColor = props2.dark ? darken(color, 50) : color.tint(50).toString();
            styles[ns2.cssVarBlockName("disabled-bg-color")] = disabledButtonColor;
            styles[ns2.cssVarBlockName("disabled-text-color")] = props2.dark ? "rgba(255, 255, 255, 0.5)" : `var(${ns2.cssVarName("color-white")})`;
            styles[ns2.cssVarBlockName("disabled-border-color")] = disabledButtonColor;
          }
        }
      }
      return styles;
    });
  }
  const __default__$1v = vue.defineComponent({
    name: "ElButton"
  });
  const _sfc_main$27 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1v,
    props: buttonProps,
    emits: buttonEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const buttonStyle = useButtonCustomStyle(props2);
      const ns2 = useNamespace("button");
      const { _ref, _size, _type, _disabled, _props, shouldAddSpace, handleClick } = useButton(props2, emit);
      const buttonKls = vue.computed(() => [
        ns2.b(),
        ns2.m(_type.value),
        ns2.m(_size.value),
        ns2.is("disabled", _disabled.value),
        ns2.is("loading", props2.loading),
        ns2.is("plain", props2.plain),
        ns2.is("round", props2.round),
        ns2.is("circle", props2.circle),
        ns2.is("text", props2.text),
        ns2.is("link", props2.link),
        ns2.is("has-bg", props2.bg)
      ]);
      expose({
        ref: _ref,
        size: _size,
        type: _type,
        disabled: _disabled,
        shouldAddSpace
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tag), vue.mergeProps({
          ref_key: "_ref",
          ref: _ref
        }, vue.unref(_props), {
          class: vue.unref(buttonKls),
          style: vue.unref(buttonStyle),
          onClick: vue.unref(handleClick)
        }), {
          default: vue.withCtx(() => [
            _ctx.loading ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
              _ctx.$slots.loading ? vue.renderSlot(_ctx.$slots, "loading", { key: 0 }) : (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 1,
                class: vue.normalizeClass(vue.unref(ns2).is("loading"))
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.loadingIcon)))
                ]),
                _: 1
              }, 8, ["class"]))
            ], 64)) : _ctx.icon || _ctx.$slots.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 1 }, {
              default: vue.withCtx(() => [
                _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon), { key: 0 })) : vue.renderSlot(_ctx.$slots, "icon", { key: 1 })
              ]),
              _: 3
            })) : vue.createCommentVNode("v-if", true),
            _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("span", {
              key: 2,
              class: vue.normalizeClass({ [vue.unref(ns2).em("text", "expand")]: vue.unref(shouldAddSpace) })
            }, [
              vue.renderSlot(_ctx.$slots, "default")
            ], 2)) : vue.createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 16, ["class", "style", "onClick"]);
      };
    }
  });
  var Button = /* @__PURE__ */ _export_sfc(_sfc_main$27, [["__file", "button.vue"]]);
  const buttonGroupProps = {
    size: buttonProps.size,
    type: buttonProps.type
  };
  const __default__$1u = vue.defineComponent({
    name: "ElButtonGroup"
  });
  const _sfc_main$26 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1u,
    props: buttonGroupProps,
    setup(__props) {
      const props2 = __props;
      vue.provide(buttonGroupContextKey, vue.reactive({
        size: vue.toRef(props2, "size"),
        type: vue.toRef(props2, "type")
      }));
      const ns2 = useNamespace("button");
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns2).b("group"))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var ButtonGroup = /* @__PURE__ */ _export_sfc(_sfc_main$26, [["__file", "button-group.vue"]]);
  const ElButton = withInstall(Button, {
    ButtonGroup
  });
  const ElButtonGroup$1 = withNoopInstall(ButtonGroup);
  var dayjs_min = { exports: {} };
  (function(module2, exports2) {
    !function(t2, e) {
      module2.exports = e();
    }(commonjsGlobal, function() {
      var t2 = 1e3, e = 6e4, n2 = 36e5, r2 = "millisecond", i2 = "second", s2 = "minute", u2 = "hour", a2 = "day", o2 = "week", c2 = "month", f2 = "quarter", h2 = "year", d2 = "date", l2 = "Invalid Date", $2 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y2 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M2 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
        var e2 = ["th", "st", "nd", "rd"], n3 = t3 % 100;
        return "[" + t3 + (e2[(n3 - 20) % 10] || e2[n3] || e2[0]) + "]";
      } }, m2 = function(t3, e2, n3) {
        var r3 = String(t3);
        return !r3 || r3.length >= e2 ? t3 : "" + Array(e2 + 1 - r3.length).join(n3) + t3;
      }, v2 = { s: m2, z: function(t3) {
        var e2 = -t3.utcOffset(), n3 = Math.abs(e2), r3 = Math.floor(n3 / 60), i3 = n3 % 60;
        return (e2 <= 0 ? "+" : "-") + m2(r3, 2, "0") + ":" + m2(i3, 2, "0");
      }, m: function t3(e2, n3) {
        if (e2.date() < n3.date())
          return -t3(n3, e2);
        var r3 = 12 * (n3.year() - e2.year()) + (n3.month() - e2.month()), i3 = e2.clone().add(r3, c2), s3 = n3 - i3 < 0, u3 = e2.clone().add(r3 + (s3 ? -1 : 1), c2);
        return +(-(r3 + (n3 - i3) / (s3 ? i3 - u3 : u3 - i3)) || 0);
      }, a: function(t3) {
        return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
      }, p: function(t3) {
        return { M: c2, y: h2, w: o2, d: a2, D: d2, h: u2, m: s2, s: i2, ms: r2, Q: f2 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t3) {
        return void 0 === t3;
      } }, g2 = "en", D2 = {};
      D2[g2] = M2;
      var p2 = "$isDayjsObject", S2 = function(t3) {
        return t3 instanceof _2 || !(!t3 || !t3[p2]);
      }, w2 = function t3(e2, n3, r3) {
        var i3;
        if (!e2)
          return g2;
        if ("string" == typeof e2) {
          var s3 = e2.toLowerCase();
          D2[s3] && (i3 = s3), n3 && (D2[s3] = n3, i3 = s3);
          var u3 = e2.split("-");
          if (!i3 && u3.length > 1)
            return t3(u3[0]);
        } else {
          var a3 = e2.name;
          D2[a3] = e2, i3 = a3;
        }
        return !r3 && i3 && (g2 = i3), i3 || !r3 && g2;
      }, O2 = function(t3, e2) {
        if (S2(t3))
          return t3.clone();
        var n3 = "object" == typeof e2 ? e2 : {};
        return n3.date = t3, n3.args = arguments, new _2(n3);
      }, b2 = v2;
      b2.l = w2, b2.i = S2, b2.w = function(t3, e2) {
        return O2(t3, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var _2 = function() {
        function M3(t3) {
          this.$L = w2(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p2] = true;
        }
        var m3 = M3.prototype;
        return m3.parse = function(t3) {
          this.$d = function(t4) {
            var e2 = t4.date, n3 = t4.utc;
            if (null === e2)
              return /* @__PURE__ */ new Date(NaN);
            if (b2.u(e2))
              return /* @__PURE__ */ new Date();
            if (e2 instanceof Date)
              return new Date(e2);
            if ("string" == typeof e2 && !/Z$/i.test(e2)) {
              var r3 = e2.match($2);
              if (r3) {
                var i3 = r3[2] - 1 || 0, s3 = (r3[7] || "0").substring(0, 3);
                return n3 ? new Date(Date.UTC(r3[1], i3, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3)) : new Date(r3[1], i3, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3);
              }
            }
            return new Date(e2);
          }(t3), this.init();
        }, m3.init = function() {
          var t3 = this.$d;
          this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
        }, m3.$utils = function() {
          return b2;
        }, m3.isValid = function() {
          return !(this.$d.toString() === l2);
        }, m3.isSame = function(t3, e2) {
          var n3 = O2(t3);
          return this.startOf(e2) <= n3 && n3 <= this.endOf(e2);
        }, m3.isAfter = function(t3, e2) {
          return O2(t3) < this.startOf(e2);
        }, m3.isBefore = function(t3, e2) {
          return this.endOf(e2) < O2(t3);
        }, m3.$g = function(t3, e2, n3) {
          return b2.u(t3) ? this[e2] : this.set(n3, t3);
        }, m3.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m3.valueOf = function() {
          return this.$d.getTime();
        }, m3.startOf = function(t3, e2) {
          var n3 = this, r3 = !!b2.u(e2) || e2, f3 = b2.p(t3), l3 = function(t4, e3) {
            var i3 = b2.w(n3.$u ? Date.UTC(n3.$y, e3, t4) : new Date(n3.$y, e3, t4), n3);
            return r3 ? i3 : i3.endOf(a2);
          }, $3 = function(t4, e3) {
            return b2.w(n3.toDate()[t4].apply(n3.toDate("s"), (r3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n3);
          }, y3 = this.$W, M4 = this.$M, m4 = this.$D, v3 = "set" + (this.$u ? "UTC" : "");
          switch (f3) {
            case h2:
              return r3 ? l3(1, 0) : l3(31, 11);
            case c2:
              return r3 ? l3(1, M4) : l3(0, M4 + 1);
            case o2:
              var g3 = this.$locale().weekStart || 0, D3 = (y3 < g3 ? y3 + 7 : y3) - g3;
              return l3(r3 ? m4 - D3 : m4 + (6 - D3), M4);
            case a2:
            case d2:
              return $3(v3 + "Hours", 0);
            case u2:
              return $3(v3 + "Minutes", 1);
            case s2:
              return $3(v3 + "Seconds", 2);
            case i2:
              return $3(v3 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m3.endOf = function(t3) {
          return this.startOf(t3, false);
        }, m3.$set = function(t3, e2) {
          var n3, o3 = b2.p(t3), f3 = "set" + (this.$u ? "UTC" : ""), l3 = (n3 = {}, n3[a2] = f3 + "Date", n3[d2] = f3 + "Date", n3[c2] = f3 + "Month", n3[h2] = f3 + "FullYear", n3[u2] = f3 + "Hours", n3[s2] = f3 + "Minutes", n3[i2] = f3 + "Seconds", n3[r2] = f3 + "Milliseconds", n3)[o3], $3 = o3 === a2 ? this.$D + (e2 - this.$W) : e2;
          if (o3 === c2 || o3 === h2) {
            var y3 = this.clone().set(d2, 1);
            y3.$d[l3]($3), y3.init(), this.$d = y3.set(d2, Math.min(this.$D, y3.daysInMonth())).$d;
          } else
            l3 && this.$d[l3]($3);
          return this.init(), this;
        }, m3.set = function(t3, e2) {
          return this.clone().$set(t3, e2);
        }, m3.get = function(t3) {
          return this[b2.p(t3)]();
        }, m3.add = function(r3, f3) {
          var d3, l3 = this;
          r3 = Number(r3);
          var $3 = b2.p(f3), y3 = function(t3) {
            var e2 = O2(l3);
            return b2.w(e2.date(e2.date() + Math.round(t3 * r3)), l3);
          };
          if ($3 === c2)
            return this.set(c2, this.$M + r3);
          if ($3 === h2)
            return this.set(h2, this.$y + r3);
          if ($3 === a2)
            return y3(1);
          if ($3 === o2)
            return y3(7);
          var M4 = (d3 = {}, d3[s2] = e, d3[u2] = n2, d3[i2] = t2, d3)[$3] || 1, m4 = this.$d.getTime() + r3 * M4;
          return b2.w(m4, this);
        }, m3.subtract = function(t3, e2) {
          return this.add(-1 * t3, e2);
        }, m3.format = function(t3) {
          var e2 = this, n3 = this.$locale();
          if (!this.isValid())
            return n3.invalidDate || l2;
          var r3 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i3 = b2.z(this), s3 = this.$H, u3 = this.$m, a3 = this.$M, o3 = n3.weekdays, c3 = n3.months, f3 = n3.meridiem, h3 = function(t4, n4, i4, s4) {
            return t4 && (t4[n4] || t4(e2, r3)) || i4[n4].slice(0, s4);
          }, d3 = function(t4) {
            return b2.s(s3 % 12 || 12, t4, "0");
          }, $3 = f3 || function(t4, e3, n4) {
            var r4 = t4 < 12 ? "AM" : "PM";
            return n4 ? r4.toLowerCase() : r4;
          };
          return r3.replace(y2, function(t4, r4) {
            return r4 || function(t5) {
              switch (t5) {
                case "YY":
                  return String(e2.$y).slice(-2);
                case "YYYY":
                  return b2.s(e2.$y, 4, "0");
                case "M":
                  return a3 + 1;
                case "MM":
                  return b2.s(a3 + 1, 2, "0");
                case "MMM":
                  return h3(n3.monthsShort, a3, c3, 3);
                case "MMMM":
                  return h3(c3, a3);
                case "D":
                  return e2.$D;
                case "DD":
                  return b2.s(e2.$D, 2, "0");
                case "d":
                  return String(e2.$W);
                case "dd":
                  return h3(n3.weekdaysMin, e2.$W, o3, 2);
                case "ddd":
                  return h3(n3.weekdaysShort, e2.$W, o3, 3);
                case "dddd":
                  return o3[e2.$W];
                case "H":
                  return String(s3);
                case "HH":
                  return b2.s(s3, 2, "0");
                case "h":
                  return d3(1);
                case "hh":
                  return d3(2);
                case "a":
                  return $3(s3, u3, true);
                case "A":
                  return $3(s3, u3, false);
                case "m":
                  return String(u3);
                case "mm":
                  return b2.s(u3, 2, "0");
                case "s":
                  return String(e2.$s);
                case "ss":
                  return b2.s(e2.$s, 2, "0");
                case "SSS":
                  return b2.s(e2.$ms, 3, "0");
                case "Z":
                  return i3;
              }
              return null;
            }(t4) || i3.replace(":", "");
          });
        }, m3.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m3.diff = function(r3, d3, l3) {
          var $3, y3 = this, M4 = b2.p(d3), m4 = O2(r3), v3 = (m4.utcOffset() - this.utcOffset()) * e, g3 = this - m4, D3 = function() {
            return b2.m(y3, m4);
          };
          switch (M4) {
            case h2:
              $3 = D3() / 12;
              break;
            case c2:
              $3 = D3();
              break;
            case f2:
              $3 = D3() / 3;
              break;
            case o2:
              $3 = (g3 - v3) / 6048e5;
              break;
            case a2:
              $3 = (g3 - v3) / 864e5;
              break;
            case u2:
              $3 = g3 / n2;
              break;
            case s2:
              $3 = g3 / e;
              break;
            case i2:
              $3 = g3 / t2;
              break;
            default:
              $3 = g3;
          }
          return l3 ? $3 : b2.a($3);
        }, m3.daysInMonth = function() {
          return this.endOf(c2).$D;
        }, m3.$locale = function() {
          return D2[this.$L];
        }, m3.locale = function(t3, e2) {
          if (!t3)
            return this.$L;
          var n3 = this.clone(), r3 = w2(t3, e2, true);
          return r3 && (n3.$L = r3), n3;
        }, m3.clone = function() {
          return b2.w(this.$d, this);
        }, m3.toDate = function() {
          return new Date(this.valueOf());
        }, m3.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m3.toISOString = function() {
          return this.$d.toISOString();
        }, m3.toString = function() {
          return this.$d.toUTCString();
        }, M3;
      }(), k = _2.prototype;
      return O2.prototype = k, [["$ms", r2], ["$s", i2], ["$m", s2], ["$H", u2], ["$W", a2], ["$M", c2], ["$y", h2], ["$D", d2]].forEach(function(t3) {
        k[t3[1]] = function(e2) {
          return this.$g(e2, t3[0], t3[1]);
        };
      }), O2.extend = function(t3, e2) {
        return t3.$i || (t3(e2, _2, O2), t3.$i = true), O2;
      }, O2.locale = w2, O2.isDayjs = S2, O2.unix = function(t3) {
        return O2(1e3 * t3);
      }, O2.en = D2[g2], O2.Ls = D2, O2.p = {}, O2;
    });
  })(dayjs_min);
  var dayjs_minExports = dayjs_min.exports;
  const dayjs = /* @__PURE__ */ getDefaultExportFromCjs(dayjs_minExports);
  var customParseFormat$1 = { exports: {} };
  (function(module2, exports2) {
    !function(e, t2) {
      module2.exports = t2();
    }(commonjsGlobal, function() {
      var e = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, t2 = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|Q|YYYY|YY?|ww?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, n2 = /\d/, r2 = /\d\d/, i2 = /\d\d?/, o2 = /\d*[^-_:/,()\s\d]+/, s2 = {}, a2 = function(e2) {
        return (e2 = +e2) + (e2 > 68 ? 1900 : 2e3);
      };
      var f2 = function(e2) {
        return function(t3) {
          this[e2] = +t3;
        };
      }, h2 = [/[+-]\d\d:?(\d\d)?|Z/, function(e2) {
        (this.zone || (this.zone = {})).offset = function(e3) {
          if (!e3)
            return 0;
          if ("Z" === e3)
            return 0;
          var t3 = e3.match(/([+-]|\d\d)/g), n3 = 60 * t3[1] + (+t3[2] || 0);
          return 0 === n3 ? 0 : "+" === t3[0] ? -n3 : n3;
        }(e2);
      }], u2 = function(e2) {
        var t3 = s2[e2];
        return t3 && (t3.indexOf ? t3 : t3.s.concat(t3.f));
      }, d2 = function(e2, t3) {
        var n3, r3 = s2.meridiem;
        if (r3) {
          for (var i3 = 1; i3 <= 24; i3 += 1)
            if (e2.indexOf(r3(i3, 0, t3)) > -1) {
              n3 = i3 > 12;
              break;
            }
        } else
          n3 = e2 === (t3 ? "pm" : "PM");
        return n3;
      }, c2 = { A: [o2, function(e2) {
        this.afternoon = d2(e2, false);
      }], a: [o2, function(e2) {
        this.afternoon = d2(e2, true);
      }], Q: [n2, function(e2) {
        this.month = 3 * (e2 - 1) + 1;
      }], S: [n2, function(e2) {
        this.milliseconds = 100 * +e2;
      }], SS: [r2, function(e2) {
        this.milliseconds = 10 * +e2;
      }], SSS: [/\d{3}/, function(e2) {
        this.milliseconds = +e2;
      }], s: [i2, f2("seconds")], ss: [i2, f2("seconds")], m: [i2, f2("minutes")], mm: [i2, f2("minutes")], H: [i2, f2("hours")], h: [i2, f2("hours")], HH: [i2, f2("hours")], hh: [i2, f2("hours")], D: [i2, f2("day")], DD: [r2, f2("day")], Do: [o2, function(e2) {
        var t3 = s2.ordinal, n3 = e2.match(/\d+/);
        if (this.day = n3[0], t3)
          for (var r3 = 1; r3 <= 31; r3 += 1)
            t3(r3).replace(/\[|\]/g, "") === e2 && (this.day = r3);
      }], w: [i2, f2("week")], ww: [r2, f2("week")], M: [i2, f2("month")], MM: [r2, f2("month")], MMM: [o2, function(e2) {
        var t3 = u2("months"), n3 = (u2("monthsShort") || t3.map(function(e3) {
          return e3.slice(0, 3);
        })).indexOf(e2) + 1;
        if (n3 < 1)
          throw new Error();
        this.month = n3 % 12 || n3;
      }], MMMM: [o2, function(e2) {
        var t3 = u2("months").indexOf(e2) + 1;
        if (t3 < 1)
          throw new Error();
        this.month = t3 % 12 || t3;
      }], Y: [/[+-]?\d+/, f2("year")], YY: [r2, function(e2) {
        this.year = a2(e2);
      }], YYYY: [/\d{4}/, f2("year")], Z: h2, ZZ: h2 };
      function l2(n3) {
        var r3, i3;
        r3 = n3, i3 = s2 && s2.formats;
        for (var o3 = (n3 = r3.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t3, n4, r4) {
          var o4 = r4 && r4.toUpperCase();
          return n4 || i3[r4] || e[r4] || i3[o4].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e2, t4, n5) {
            return t4 || n5.slice(1);
          });
        })).match(t2), a3 = o3.length, f3 = 0; f3 < a3; f3 += 1) {
          var h3 = o3[f3], u3 = c2[h3], d3 = u3 && u3[0], l3 = u3 && u3[1];
          o3[f3] = l3 ? { regex: d3, parser: l3 } : h3.replace(/^\[|\]$/g, "");
        }
        return function(e2) {
          for (var t3 = {}, n4 = 0, r4 = 0; n4 < a3; n4 += 1) {
            var i4 = o3[n4];
            if ("string" == typeof i4)
              r4 += i4.length;
            else {
              var s3 = i4.regex, f4 = i4.parser, h4 = e2.slice(r4), u4 = s3.exec(h4)[0];
              f4.call(t3, u4), e2 = e2.replace(u4, "");
            }
          }
          return function(e3) {
            var t4 = e3.afternoon;
            if (void 0 !== t4) {
              var n5 = e3.hours;
              t4 ? n5 < 12 && (e3.hours += 12) : 12 === n5 && (e3.hours = 0), delete e3.afternoon;
            }
          }(t3), t3;
        };
      }
      return function(e2, t3, n3) {
        n3.p.customParseFormat = true, e2 && e2.parseTwoDigitYear && (a2 = e2.parseTwoDigitYear);
        var r3 = t3.prototype, i3 = r3.parse;
        r3.parse = function(e3) {
          var t4 = e3.date, r4 = e3.utc, o3 = e3.args;
          this.$u = r4;
          var a3 = o3[1];
          if ("string" == typeof a3) {
            var f3 = true === o3[2], h3 = true === o3[3], u3 = f3 || h3, d3 = o3[2];
            h3 && (d3 = o3[2]), s2 = this.$locale(), !f3 && d3 && (s2 = n3.Ls[d3]), this.$d = function(e4, t5, n4, r5) {
              try {
                if (["x", "X"].indexOf(t5) > -1)
                  return new Date(("X" === t5 ? 1e3 : 1) * e4);
                var i4 = l2(t5)(e4), o4 = i4.year, s3 = i4.month, a4 = i4.day, f4 = i4.hours, h4 = i4.minutes, u4 = i4.seconds, d4 = i4.milliseconds, c4 = i4.zone, m3 = i4.week, M3 = /* @__PURE__ */ new Date(), Y2 = a4 || (o4 || s3 ? 1 : M3.getDate()), p2 = o4 || M3.getFullYear(), v2 = 0;
                o4 && !s3 || (v2 = s3 > 0 ? s3 - 1 : M3.getMonth());
                var D2, w2 = f4 || 0, g2 = h4 || 0, y2 = u4 || 0, L2 = d4 || 0;
                return c4 ? new Date(Date.UTC(p2, v2, Y2, w2, g2, y2, L2 + 60 * c4.offset * 1e3)) : n4 ? new Date(Date.UTC(p2, v2, Y2, w2, g2, y2, L2)) : (D2 = new Date(p2, v2, Y2, w2, g2, y2, L2), m3 && (D2 = r5(D2).week(m3).toDate()), D2);
              } catch (e5) {
                return /* @__PURE__ */ new Date("");
              }
            }(t4, a3, r4, n3), this.init(), d3 && true !== d3 && (this.$L = this.locale(d3).$L), u3 && t4 != this.format(a3) && (this.$d = /* @__PURE__ */ new Date("")), s2 = {};
          } else if (a3 instanceof Array)
            for (var c3 = a3.length, m2 = 1; m2 <= c3; m2 += 1) {
              o3[1] = a3[m2 - 1];
              var M2 = n3.apply(this, o3);
              if (M2.isValid()) {
                this.$d = M2.$d, this.$L = M2.$L, this.init();
                break;
              }
              m2 === c3 && (this.$d = /* @__PURE__ */ new Date(""));
            }
          else
            i3.call(this, e3);
        };
      };
    });
  })(customParseFormat$1);
  var customParseFormatExports = customParseFormat$1.exports;
  const customParseFormat = /* @__PURE__ */ getDefaultExportFromCjs(customParseFormatExports);
  const timeUnits$1 = ["hours", "minutes", "seconds"];
  const DEFAULT_FORMATS_TIME = "HH:mm:ss";
  const DEFAULT_FORMATS_DATE = "YYYY-MM-DD";
  const DEFAULT_FORMATS_DATEPICKER = {
    date: DEFAULT_FORMATS_DATE,
    dates: DEFAULT_FORMATS_DATE,
    week: "gggg[w]ww",
    year: "YYYY",
    years: "YYYY",
    month: "YYYY-MM",
    months: "YYYY-MM",
    datetime: `${DEFAULT_FORMATS_DATE} ${DEFAULT_FORMATS_TIME}`,
    monthrange: "YYYY-MM",
    yearrange: "YYYY",
    daterange: DEFAULT_FORMATS_DATE,
    datetimerange: `${DEFAULT_FORMATS_DATE} ${DEFAULT_FORMATS_TIME}`
  };
  const buildTimeList = (value, bound) => {
    return [
      value > 0 ? value - 1 : void 0,
      value,
      value < bound ? value + 1 : void 0
    ];
  };
  const rangeArr = (n2) => Array.from(Array.from({ length: n2 }).keys());
  const extractDateFormat = (format2) => {
    return format2.replace(/\W?m{1,2}|\W?ZZ/g, "").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi, "").trim();
  };
  const extractTimeFormat = (format2) => {
    return format2.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?Y{2,4}/g, "").trim();
  };
  const dateEquals = function(a2, b2) {
    const aIsDate = shared.isDate(a2);
    const bIsDate = shared.isDate(b2);
    if (aIsDate && bIsDate) {
      return a2.getTime() === b2.getTime();
    }
    if (!aIsDate && !bIsDate) {
      return a2 === b2;
    }
    return false;
  };
  const valueEquals = function(a2, b2) {
    const aIsArray = shared.isArray(a2);
    const bIsArray = shared.isArray(b2);
    if (aIsArray && bIsArray) {
      if (a2.length !== b2.length) {
        return false;
      }
      return a2.every((item, index) => dateEquals(item, b2[index]));
    }
    if (!aIsArray && !bIsArray) {
      return dateEquals(a2, b2);
    }
    return false;
  };
  const parseDate = function(date, format2, lang) {
    const day = isEmpty(format2) || format2 === "x" ? dayjs(date).locale(lang) : dayjs(date, format2).locale(lang);
    return day.isValid() ? day : void 0;
  };
  const formatter = function(date, format2, lang) {
    if (isEmpty(format2))
      return date;
    if (format2 === "x")
      return +date;
    return dayjs(date).locale(lang).format(format2);
  };
  const makeList = (total2, method) => {
    var _a2;
    const arr = [];
    const disabledArr = method == null ? void 0 : method();
    for (let i2 = 0; i2 < total2; i2++) {
      arr.push((_a2 = disabledArr == null ? void 0 : disabledArr.includes(i2)) != null ? _a2 : false);
    }
    return arr;
  };
  const disabledTimeListsProps = buildProps({
    disabledHours: {
      type: definePropType(Function)
    },
    disabledMinutes: {
      type: definePropType(Function)
    },
    disabledSeconds: {
      type: definePropType(Function)
    }
  });
  const timePanelSharedProps = buildProps({
    visible: Boolean,
    actualVisible: {
      type: Boolean,
      default: void 0
    },
    format: {
      type: String,
      default: ""
    }
  });
  const timePickerDefaultProps = buildProps({
    id: {
      type: definePropType([Array, String])
    },
    name: {
      type: definePropType([Array, String]),
      default: ""
    },
    popperClass: {
      type: String,
      default: ""
    },
    format: String,
    valueFormat: String,
    dateFormat: String,
    timeFormat: String,
    type: {
      type: String,
      default: ""
    },
    clearable: {
      type: Boolean,
      default: true
    },
    clearIcon: {
      type: definePropType([String, Object]),
      default: circle_close_default
    },
    editable: {
      type: Boolean,
      default: true
    },
    prefixIcon: {
      type: definePropType([String, Object]),
      default: ""
    },
    size: useSizeProp,
    readonly: Boolean,
    disabled: Boolean,
    placeholder: {
      type: String,
      default: ""
    },
    popperOptions: {
      type: definePropType(Object),
      default: () => ({})
    },
    modelValue: {
      type: definePropType([Date, Array, String, Number]),
      default: ""
    },
    rangeSeparator: {
      type: String,
      default: "-"
    },
    startPlaceholder: String,
    endPlaceholder: String,
    defaultValue: {
      type: definePropType([Date, Array])
    },
    defaultTime: {
      type: definePropType([Date, Array])
    },
    isRange: Boolean,
    ...disabledTimeListsProps,
    disabledDate: {
      type: Function
    },
    cellClassName: {
      type: Function
    },
    shortcuts: {
      type: Array,
      default: () => []
    },
    arrowControl: Boolean,
    tabindex: {
      type: definePropType([String, Number]),
      default: 0
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    unlinkPanels: Boolean,
    placement: {
      type: definePropType(String),
      values: Ee,
      default: "bottom"
    },
    fallbackPlacements: {
      type: definePropType(Array),
      default: ["bottom", "top", "right", "left"]
    },
    ...useEmptyValuesProps,
    ...useAriaProps(["ariaLabel"])
  });
  const __default__$1t = vue.defineComponent({
    name: "Picker"
  });
  const _sfc_main$25 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1t,
    props: timePickerDefaultProps,
    emits: [
      "update:modelValue",
      "change",
      "focus",
      "blur",
      "clear",
      "calendar-change",
      "panel-change",
      "visible-change",
      "keydown"
    ],
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const attrs2 = vue.useAttrs();
      const { lang } = useLocale();
      const nsDate = useNamespace("date");
      const nsInput = useNamespace("input");
      const nsRange = useNamespace("range");
      const { form, formItem } = useFormItem();
      const elPopperOptions = vue.inject("ElPopperOptions", {});
      const { valueOnClear } = useEmptyValues(props2, null);
      const refPopper = vue.ref();
      const inputRef = vue.ref();
      const pickerVisible = vue.ref(false);
      const pickerActualVisible = vue.ref(false);
      const valueOnOpen = vue.ref(null);
      let hasJustTabExitedInput = false;
      let ignoreFocusEvent = false;
      const rangeInputKls = vue.computed(() => [
        nsDate.b("editor"),
        nsDate.bm("editor", props2.type),
        nsInput.e("wrapper"),
        nsDate.is("disabled", pickerDisabled.value),
        nsDate.is("active", pickerVisible.value),
        nsRange.b("editor"),
        pickerSize ? nsRange.bm("editor", pickerSize.value) : "",
        attrs2.class
      ]);
      const clearIconKls = vue.computed(() => [
        nsInput.e("icon"),
        nsRange.e("close-icon"),
        !showClose.value ? nsRange.e("close-icon--hidden") : ""
      ]);
      vue.watch(pickerVisible, (val) => {
        if (!val) {
          userInput.value = null;
          vue.nextTick(() => {
            emitChange(props2.modelValue);
          });
        } else {
          vue.nextTick(() => {
            if (val) {
              valueOnOpen.value = props2.modelValue;
            }
          });
        }
      });
      const emitChange = (val, isClear) => {
        if (isClear || !valueEquals(val, valueOnOpen.value)) {
          emit("change", val);
          props2.validateEvent && (formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn(err)));
        }
      };
      const emitInput = (input) => {
        if (!valueEquals(props2.modelValue, input)) {
          let formatted;
          if (shared.isArray(input)) {
            formatted = input.map((item) => formatter(item, props2.valueFormat, lang.value));
          } else if (input) {
            formatted = formatter(input, props2.valueFormat, lang.value);
          }
          emit("update:modelValue", input ? formatted : input, lang.value);
        }
      };
      const emitKeydown = (e) => {
        emit("keydown", e);
      };
      const refInput = vue.computed(() => {
        if (inputRef.value) {
          const _r = isRangeInput.value ? inputRef.value : inputRef.value.$el;
          return Array.from(_r.querySelectorAll("input"));
        }
        return [];
      });
      const setSelectionRange = (start, end2, pos) => {
        const _inputs = refInput.value;
        if (!_inputs.length)
          return;
        if (!pos || pos === "min") {
          _inputs[0].setSelectionRange(start, end2);
          _inputs[0].focus();
        } else if (pos === "max") {
          _inputs[1].setSelectionRange(start, end2);
          _inputs[1].focus();
        }
      };
      const focusOnInputBox = () => {
        focus(true, true);
        vue.nextTick(() => {
          ignoreFocusEvent = false;
        });
      };
      const onPick = (date = "", visible = false) => {
        if (!visible) {
          ignoreFocusEvent = true;
        }
        pickerVisible.value = visible;
        let result;
        if (shared.isArray(date)) {
          result = date.map((_2) => _2.toDate());
        } else {
          result = date ? date.toDate() : date;
        }
        userInput.value = null;
        emitInput(result);
      };
      const onBeforeShow = () => {
        pickerActualVisible.value = true;
      };
      const onShow = () => {
        emit("visible-change", true);
      };
      const onKeydownPopperContent = (event) => {
        if ((event == null ? void 0 : event.key) === EVENT_CODE.esc) {
          focus(true, true);
        }
      };
      const onHide = () => {
        pickerActualVisible.value = false;
        pickerVisible.value = false;
        ignoreFocusEvent = false;
        emit("visible-change", false);
      };
      const handleOpen = () => {
        pickerVisible.value = true;
      };
      const handleClose = () => {
        pickerVisible.value = false;
      };
      const focus = (focusStartInput = true, isIgnoreFocusEvent = false) => {
        ignoreFocusEvent = isIgnoreFocusEvent;
        const [leftInput, rightInput] = vue.unref(refInput);
        let input = leftInput;
        if (!focusStartInput && isRangeInput.value) {
          input = rightInput;
        }
        if (input) {
          input.focus();
        }
      };
      const handleFocusInput = (e) => {
        if (props2.readonly || pickerDisabled.value || pickerVisible.value || ignoreFocusEvent) {
          return;
        }
        pickerVisible.value = true;
        emit("focus", e);
      };
      let currentHandleBlurDeferCallback = void 0;
      const handleBlurInput = (e) => {
        const handleBlurDefer = async () => {
          setTimeout(() => {
            var _a2;
            if (currentHandleBlurDeferCallback === handleBlurDefer) {
              if (!(((_a2 = refPopper.value) == null ? void 0 : _a2.isFocusInsideContent()) && !hasJustTabExitedInput) && refInput.value.filter((input) => {
                return input.contains(document.activeElement);
              }).length === 0) {
                handleChange();
                pickerVisible.value = false;
                emit("blur", e);
                props2.validateEvent && (formItem == null ? void 0 : formItem.validate("blur").catch((err) => debugWarn(err)));
              }
              hasJustTabExitedInput = false;
            }
          }, 0);
        };
        currentHandleBlurDeferCallback = handleBlurDefer;
        handleBlurDefer();
      };
      const pickerDisabled = vue.computed(() => {
        return props2.disabled || (form == null ? void 0 : form.disabled);
      });
      const parsedValue = vue.computed(() => {
        let dayOrDays;
        if (valueIsEmpty.value) {
          if (pickerOptions.value.getDefaultValue) {
            dayOrDays = pickerOptions.value.getDefaultValue();
          }
        } else {
          if (shared.isArray(props2.modelValue)) {
            dayOrDays = props2.modelValue.map((d2) => parseDate(d2, props2.valueFormat, lang.value));
          } else {
            dayOrDays = parseDate(props2.modelValue, props2.valueFormat, lang.value);
          }
        }
        if (pickerOptions.value.getRangeAvailableTime) {
          const availableResult = pickerOptions.value.getRangeAvailableTime(dayOrDays);
          if (!isEqual$1(availableResult, dayOrDays)) {
            dayOrDays = availableResult;
            if (!valueIsEmpty.value) {
              emitInput(shared.isArray(dayOrDays) ? dayOrDays.map((_2) => _2.toDate()) : dayOrDays.toDate());
            }
          }
        }
        if (shared.isArray(dayOrDays) && dayOrDays.some((day) => !day)) {
          dayOrDays = [];
        }
        return dayOrDays;
      });
      const displayValue = vue.computed(() => {
        if (!pickerOptions.value.panelReady)
          return "";
        const formattedValue = formatDayjsToString(parsedValue.value);
        if (shared.isArray(userInput.value)) {
          return [
            userInput.value[0] || formattedValue && formattedValue[0] || "",
            userInput.value[1] || formattedValue && formattedValue[1] || ""
          ];
        } else if (userInput.value !== null) {
          return userInput.value;
        }
        if (!isTimePicker.value && valueIsEmpty.value)
          return "";
        if (!pickerVisible.value && valueIsEmpty.value)
          return "";
        if (formattedValue) {
          return isDatesPicker.value || isMonthsPicker.value || isYearsPicker.value ? formattedValue.join(", ") : formattedValue;
        }
        return "";
      });
      const isTimeLikePicker = vue.computed(() => props2.type.includes("time"));
      const isTimePicker = vue.computed(() => props2.type.startsWith("time"));
      const isDatesPicker = vue.computed(() => props2.type === "dates");
      const isMonthsPicker = vue.computed(() => props2.type === "months");
      const isYearsPicker = vue.computed(() => props2.type === "years");
      const triggerIcon = vue.computed(() => props2.prefixIcon || (isTimeLikePicker.value ? clock_default : calendar_default));
      const showClose = vue.ref(false);
      const onClearIconClick = (event) => {
        if (props2.readonly || pickerDisabled.value)
          return;
        if (showClose.value) {
          event.stopPropagation();
          focusOnInputBox();
          if (pickerOptions.value.handleClear) {
            pickerOptions.value.handleClear();
          } else {
            emitInput(valueOnClear.value);
          }
          emitChange(valueOnClear.value, true);
          showClose.value = false;
          onHide();
        }
        emit("clear");
      };
      const valueIsEmpty = vue.computed(() => {
        const { modelValue } = props2;
        return !modelValue || shared.isArray(modelValue) && !modelValue.filter(Boolean).length;
      });
      const onMouseDownInput = async (event) => {
        var _a2;
        if (props2.readonly || pickerDisabled.value)
          return;
        if (((_a2 = event.target) == null ? void 0 : _a2.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
          pickerVisible.value = true;
        }
      };
      const onMouseEnter = () => {
        if (props2.readonly || pickerDisabled.value)
          return;
        if (!valueIsEmpty.value && props2.clearable) {
          showClose.value = true;
        }
      };
      const onMouseLeave = () => {
        showClose.value = false;
      };
      const onTouchStartInput = (event) => {
        var _a2;
        if (props2.readonly || pickerDisabled.value)
          return;
        if (((_a2 = event.touches[0].target) == null ? void 0 : _a2.tagName) !== "INPUT" || refInput.value.includes(document.activeElement)) {
          pickerVisible.value = true;
        }
      };
      const isRangeInput = vue.computed(() => {
        return props2.type.includes("range");
      });
      const pickerSize = useFormSize();
      const popperEl = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = vue.unref(refPopper)) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
      });
      const actualInputRef = vue.computed(() => {
        var _a2;
        if (vue.unref(isRangeInput)) {
          return vue.unref(inputRef);
        }
        return (_a2 = vue.unref(inputRef)) == null ? void 0 : _a2.$el;
      });
      const stophandle = onClickOutside(actualInputRef, (e) => {
        const unrefedPopperEl = vue.unref(popperEl);
        const inputEl = vue.unref(actualInputRef);
        if (unrefedPopperEl && (e.target === unrefedPopperEl || e.composedPath().includes(unrefedPopperEl)) || e.target === inputEl || e.composedPath().includes(inputEl))
          return;
        pickerVisible.value = false;
      });
      vue.onBeforeUnmount(() => {
        stophandle == null ? void 0 : stophandle();
      });
      const userInput = vue.ref(null);
      const handleChange = () => {
        if (userInput.value) {
          const value = parseUserInputToDayjs(displayValue.value);
          if (value) {
            if (isValidValue2(value)) {
              emitInput(shared.isArray(value) ? value.map((_2) => _2.toDate()) : value.toDate());
              userInput.value = null;
            }
          }
        }
        if (userInput.value === "") {
          emitInput(valueOnClear.value);
          emitChange(valueOnClear.value);
          userInput.value = null;
        }
      };
      const parseUserInputToDayjs = (value) => {
        if (!value)
          return null;
        return pickerOptions.value.parseUserInput(value);
      };
      const formatDayjsToString = (value) => {
        if (!value)
          return null;
        return pickerOptions.value.formatToString(value);
      };
      const isValidValue2 = (value) => {
        return pickerOptions.value.isValidValue(value);
      };
      const handleKeydownInput = async (event) => {
        if (props2.readonly || pickerDisabled.value)
          return;
        const { code } = event;
        emitKeydown(event);
        if (code === EVENT_CODE.esc) {
          if (pickerVisible.value === true) {
            pickerVisible.value = false;
            event.preventDefault();
            event.stopPropagation();
          }
          return;
        }
        if (code === EVENT_CODE.down) {
          if (pickerOptions.value.handleFocusPicker) {
            event.preventDefault();
            event.stopPropagation();
          }
          if (pickerVisible.value === false) {
            pickerVisible.value = true;
            await vue.nextTick();
          }
          if (pickerOptions.value.handleFocusPicker) {
            pickerOptions.value.handleFocusPicker();
            return;
          }
        }
        if (code === EVENT_CODE.tab) {
          hasJustTabExitedInput = true;
          return;
        }
        if (code === EVENT_CODE.enter || code === EVENT_CODE.numpadEnter) {
          if (userInput.value === null || userInput.value === "" || isValidValue2(parseUserInputToDayjs(displayValue.value))) {
            handleChange();
            pickerVisible.value = false;
          }
          event.stopPropagation();
          return;
        }
        if (userInput.value) {
          event.stopPropagation();
          return;
        }
        if (pickerOptions.value.handleKeydownInput) {
          pickerOptions.value.handleKeydownInput(event);
        }
      };
      const onUserInput = (e) => {
        userInput.value = e;
        if (!pickerVisible.value) {
          pickerVisible.value = true;
        }
      };
      const handleStartInput = (event) => {
        const target = event.target;
        if (userInput.value) {
          userInput.value = [target.value, userInput.value[1]];
        } else {
          userInput.value = [target.value, null];
        }
      };
      const handleEndInput = (event) => {
        const target = event.target;
        if (userInput.value) {
          userInput.value = [userInput.value[0], target.value];
        } else {
          userInput.value = [null, target.value];
        }
      };
      const handleStartChange = () => {
        var _a2;
        const values = userInput.value;
        const value = parseUserInputToDayjs(values && values[0]);
        const parsedVal = vue.unref(parsedValue);
        if (value && value.isValid()) {
          userInput.value = [
            formatDayjsToString(value),
            ((_a2 = displayValue.value) == null ? void 0 : _a2[1]) || null
          ];
          const newValue = [value, parsedVal && (parsedVal[1] || null)];
          if (isValidValue2(newValue)) {
            emitInput(newValue);
            userInput.value = null;
          }
        }
      };
      const handleEndChange = () => {
        var _a2;
        const values = vue.unref(userInput);
        const value = parseUserInputToDayjs(values && values[1]);
        const parsedVal = vue.unref(parsedValue);
        if (value && value.isValid()) {
          userInput.value = [
            ((_a2 = vue.unref(displayValue)) == null ? void 0 : _a2[0]) || null,
            formatDayjsToString(value)
          ];
          const newValue = [parsedVal && parsedVal[0], value];
          if (isValidValue2(newValue)) {
            emitInput(newValue);
            userInput.value = null;
          }
        }
      };
      const pickerOptions = vue.ref({});
      const onSetPickerOption = (e) => {
        pickerOptions.value[e[0]] = e[1];
        pickerOptions.value.panelReady = true;
      };
      const onCalendarChange = (e) => {
        emit("calendar-change", e);
      };
      const onPanelChange = (value, mode, view) => {
        emit("panel-change", value, mode, view);
      };
      vue.provide("EP_PICKER_BASE", {
        props: props2
      });
      expose({
        focus,
        handleFocusInput,
        handleBlurInput,
        handleOpen,
        handleClose,
        onPick
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElTooltip), vue.mergeProps({
          ref_key: "refPopper",
          ref: refPopper,
          visible: pickerVisible.value,
          effect: "light",
          pure: "",
          trigger: "click"
        }, _ctx.$attrs, {
          role: "dialog",
          teleported: "",
          transition: `${vue.unref(nsDate).namespace.value}-zoom-in-top`,
          "popper-class": [`${vue.unref(nsDate).namespace.value}-picker__popper`, _ctx.popperClass],
          "popper-options": vue.unref(elPopperOptions),
          "fallback-placements": _ctx.fallbackPlacements,
          "gpu-acceleration": false,
          placement: _ctx.placement,
          "stop-popper-mouse-event": false,
          "hide-after": 0,
          persistent: "",
          onBeforeShow,
          onShow,
          onHide
        }), {
          default: vue.withCtx(() => [
            !vue.unref(isRangeInput) ? (vue.openBlock(), vue.createBlock(vue.unref(ElInput), {
              key: 0,
              id: _ctx.id,
              ref_key: "inputRef",
              ref: inputRef,
              "container-role": "combobox",
              "model-value": vue.unref(displayValue),
              name: _ctx.name,
              size: vue.unref(pickerSize),
              disabled: vue.unref(pickerDisabled),
              placeholder: _ctx.placeholder,
              class: vue.normalizeClass([vue.unref(nsDate).b("editor"), vue.unref(nsDate).bm("editor", _ctx.type), _ctx.$attrs.class]),
              style: vue.normalizeStyle(_ctx.$attrs.style),
              readonly: !_ctx.editable || _ctx.readonly || vue.unref(isDatesPicker) || vue.unref(isMonthsPicker) || vue.unref(isYearsPicker) || _ctx.type === "week",
              "aria-label": _ctx.ariaLabel,
              tabindex: _ctx.tabindex,
              "validate-event": false,
              onInput: onUserInput,
              onFocus: handleFocusInput,
              onBlur: handleBlurInput,
              onKeydown: handleKeydownInput,
              onChange: handleChange,
              onMousedown: onMouseDownInput,
              onMouseenter: onMouseEnter,
              onMouseleave: onMouseLeave,
              onTouchstartPassive: onTouchStartInput,
              onClick: vue.withModifiers(() => {
              }, ["stop"])
            }, {
              prefix: vue.withCtx(() => [
                vue.unref(triggerIcon) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                  key: 0,
                  class: vue.normalizeClass(vue.unref(nsInput).e("icon")),
                  onMousedown: vue.withModifiers(onMouseDownInput, ["prevent"]),
                  onTouchstartPassive: onTouchStartInput
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(triggerIcon))))
                  ]),
                  _: 1
                }, 8, ["class", "onMousedown"])) : vue.createCommentVNode("v-if", true)
              ]),
              suffix: vue.withCtx(() => [
                showClose.value && _ctx.clearIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                  key: 0,
                  class: vue.normalizeClass(`${vue.unref(nsInput).e("icon")} clear-icon`),
                  onClick: vue.withModifiers(onClearIconClick, ["stop"])
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.clearIcon)))
                  ]),
                  _: 1
                }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-if", true)
              ]),
              _: 1
            }, 8, ["id", "model-value", "name", "size", "disabled", "placeholder", "class", "style", "readonly", "aria-label", "tabindex", "onKeydown", "onClick"])) : (vue.openBlock(), vue.createElementBlock("div", {
              key: 1,
              ref_key: "inputRef",
              ref: inputRef,
              class: vue.normalizeClass(vue.unref(rangeInputKls)),
              style: vue.normalizeStyle(_ctx.$attrs.style),
              onClick: handleFocusInput,
              onMouseenter: onMouseEnter,
              onMouseleave: onMouseLeave,
              onTouchstartPassive: onTouchStartInput,
              onKeydown: handleKeydownInput
            }, [
              vue.unref(triggerIcon) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 0,
                class: vue.normalizeClass([vue.unref(nsInput).e("icon"), vue.unref(nsRange).e("icon")]),
                onMousedown: vue.withModifiers(onMouseDownInput, ["prevent"]),
                onTouchstartPassive: onTouchStartInput
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(triggerIcon))))
                ]),
                _: 1
              }, 8, ["class", "onMousedown"])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("input", {
                id: _ctx.id && _ctx.id[0],
                autocomplete: "off",
                name: _ctx.name && _ctx.name[0],
                placeholder: _ctx.startPlaceholder,
                value: vue.unref(displayValue) && vue.unref(displayValue)[0],
                disabled: vue.unref(pickerDisabled),
                readonly: !_ctx.editable || _ctx.readonly,
                class: vue.normalizeClass(vue.unref(nsRange).b("input")),
                onMousedown: onMouseDownInput,
                onInput: handleStartInput,
                onChange: handleStartChange,
                onFocus: handleFocusInput,
                onBlur: handleBlurInput
              }, null, 42, ["id", "name", "placeholder", "value", "disabled", "readonly"]),
              vue.renderSlot(_ctx.$slots, "range-separator", {}, () => [
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(vue.unref(nsRange).b("separator"))
                }, vue.toDisplayString(_ctx.rangeSeparator), 3)
              ]),
              vue.createElementVNode("input", {
                id: _ctx.id && _ctx.id[1],
                autocomplete: "off",
                name: _ctx.name && _ctx.name[1],
                placeholder: _ctx.endPlaceholder,
                value: vue.unref(displayValue) && vue.unref(displayValue)[1],
                disabled: vue.unref(pickerDisabled),
                readonly: !_ctx.editable || _ctx.readonly,
                class: vue.normalizeClass(vue.unref(nsRange).b("input")),
                onMousedown: onMouseDownInput,
                onFocus: handleFocusInput,
                onBlur: handleBlurInput,
                onInput: handleEndInput,
                onChange: handleEndChange
              }, null, 42, ["id", "name", "placeholder", "value", "disabled", "readonly"]),
              _ctx.clearIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 1,
                class: vue.normalizeClass(vue.unref(clearIconKls)),
                onClick: onClearIconClick
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.clearIcon)))
                ]),
                _: 1
              }, 8, ["class"])) : vue.createCommentVNode("v-if", true)
            ], 38))
          ]),
          content: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default", {
              visible: pickerVisible.value,
              actualVisible: pickerActualVisible.value,
              parsedValue: vue.unref(parsedValue),
              format: _ctx.format,
              dateFormat: _ctx.dateFormat,
              timeFormat: _ctx.timeFormat,
              unlinkPanels: _ctx.unlinkPanels,
              type: _ctx.type,
              defaultValue: _ctx.defaultValue,
              onPick,
              onSelectRange: setSelectionRange,
              onSetPickerOption,
              onCalendarChange,
              onPanelChange,
              onKeydown: onKeydownPopperContent,
              onMousedown: vue.withModifiers(() => {
              }, ["stop"])
            })
          ]),
          _: 3
        }, 16, ["visible", "transition", "popper-class", "popper-options", "fallback-placements", "placement"]);
      };
    }
  });
  var CommonPicker = /* @__PURE__ */ _export_sfc(_sfc_main$25, [["__file", "picker.vue"]]);
  const panelTimePickerProps = buildProps({
    ...timePanelSharedProps,
    datetimeRole: String,
    parsedValue: {
      type: definePropType(Object)
    }
  });
  const useTimePanel = ({
    getAvailableHours,
    getAvailableMinutes,
    getAvailableSeconds
  }) => {
    const getAvailableTime = (date, role, first, compareDate) => {
      const availableTimeGetters = {
        hour: getAvailableHours,
        minute: getAvailableMinutes,
        second: getAvailableSeconds
      };
      let result = date;
      ["hour", "minute", "second"].forEach((type3) => {
        if (availableTimeGetters[type3]) {
          let availableTimeSlots;
          const method = availableTimeGetters[type3];
          switch (type3) {
            case "minute": {
              availableTimeSlots = method(result.hour(), role, compareDate);
              break;
            }
            case "second": {
              availableTimeSlots = method(result.hour(), result.minute(), role, compareDate);
              break;
            }
            default: {
              availableTimeSlots = method(role, compareDate);
              break;
            }
          }
          if ((availableTimeSlots == null ? void 0 : availableTimeSlots.length) && !availableTimeSlots.includes(result[type3]())) {
            const pos = first ? 0 : availableTimeSlots.length - 1;
            result = result[type3](availableTimeSlots[pos]);
          }
        }
      });
      return result;
    };
    const timePickerOptions = {};
    const onSetOption = ([key, val]) => {
      timePickerOptions[key] = val;
    };
    return {
      timePickerOptions,
      getAvailableTime,
      onSetOption
    };
  };
  const makeAvailableArr = (disabledList) => {
    const trueOrNumber = (isDisabled, index) => isDisabled || index;
    const getNumber = (predicate) => predicate !== true;
    return disabledList.map(trueOrNumber).filter(getNumber);
  };
  const getTimeLists = (disabledHours, disabledMinutes, disabledSeconds) => {
    const getHoursList = (role, compare) => {
      return makeList(24, disabledHours && (() => disabledHours == null ? void 0 : disabledHours(role, compare)));
    };
    const getMinutesList = (hour, role, compare) => {
      return makeList(60, disabledMinutes && (() => disabledMinutes == null ? void 0 : disabledMinutes(hour, role, compare)));
    };
    const getSecondsList = (hour, minute, role, compare) => {
      return makeList(60, disabledSeconds && (() => disabledSeconds == null ? void 0 : disabledSeconds(hour, minute, role, compare)));
    };
    return {
      getHoursList,
      getMinutesList,
      getSecondsList
    };
  };
  const buildAvailableTimeSlotGetter = (disabledHours, disabledMinutes, disabledSeconds) => {
    const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(disabledHours, disabledMinutes, disabledSeconds);
    const getAvailableHours = (role, compare) => {
      return makeAvailableArr(getHoursList(role, compare));
    };
    const getAvailableMinutes = (hour, role, compare) => {
      return makeAvailableArr(getMinutesList(hour, role, compare));
    };
    const getAvailableSeconds = (hour, minute, role, compare) => {
      return makeAvailableArr(getSecondsList(hour, minute, role, compare));
    };
    return {
      getAvailableHours,
      getAvailableMinutes,
      getAvailableSeconds
    };
  };
  const useOldValue = (props2) => {
    const oldValue = vue.ref(props2.parsedValue);
    vue.watch(() => props2.visible, (val) => {
      if (!val) {
        oldValue.value = props2.parsedValue;
      }
    });
    return oldValue;
  };
  const nodeList = /* @__PURE__ */ new Map();
  if (isClient) {
    let startClick;
    document.addEventListener("mousedown", (e) => startClick = e);
    document.addEventListener("mouseup", (e) => {
      if (startClick) {
        for (const handlers of nodeList.values()) {
          for (const { documentHandler } of handlers) {
            documentHandler(e, startClick);
          }
        }
        startClick = void 0;
      }
    });
  }
  function createDocumentHandler(el, binding) {
    let excludes = [];
    if (Array.isArray(binding.arg)) {
      excludes = binding.arg;
    } else if (isElement$2(binding.arg)) {
      excludes.push(binding.arg);
    }
    return function(mouseup, mousedown) {
      const popperRef = binding.instance.popperRef;
      const mouseUpTarget = mouseup.target;
      const mouseDownTarget = mousedown == null ? void 0 : mousedown.target;
      const isBound = !binding || !binding.instance;
      const isTargetExists = !mouseUpTarget || !mouseDownTarget;
      const isContainedByEl = el.contains(mouseUpTarget) || el.contains(mouseDownTarget);
      const isSelf = el === mouseUpTarget;
      const isTargetExcluded = excludes.length && excludes.some((item) => item == null ? void 0 : item.contains(mouseUpTarget)) || excludes.length && excludes.includes(mouseDownTarget);
      const isContainedByPopper = popperRef && (popperRef.contains(mouseUpTarget) || popperRef.contains(mouseDownTarget));
      if (isBound || isTargetExists || isContainedByEl || isSelf || isTargetExcluded || isContainedByPopper) {
        return;
      }
      binding.value(mouseup, mousedown);
    };
  }
  const ClickOutside = {
    beforeMount(el, binding) {
      if (!nodeList.has(el)) {
        nodeList.set(el, []);
      }
      nodeList.get(el).push({
        documentHandler: createDocumentHandler(el, binding),
        bindingFn: binding.value
      });
    },
    updated(el, binding) {
      if (!nodeList.has(el)) {
        nodeList.set(el, []);
      }
      const handlers = nodeList.get(el);
      const oldHandlerIndex = handlers.findIndex((item) => item.bindingFn === binding.oldValue);
      const newHandler = {
        documentHandler: createDocumentHandler(el, binding),
        bindingFn: binding.value
      };
      if (oldHandlerIndex >= 0) {
        handlers.splice(oldHandlerIndex, 1, newHandler);
      } else {
        handlers.push(newHandler);
      }
    },
    unmounted(el) {
      nodeList.delete(el);
    }
  };
  const REPEAT_INTERVAL = 100;
  const REPEAT_DELAY = 600;
  const vRepeatClick = {
    beforeMount(el, binding) {
      const value = binding.value;
      const { interval = REPEAT_INTERVAL, delay = REPEAT_DELAY } = shared.isFunction(value) ? {} : value;
      let intervalId;
      let delayId;
      const handler = () => shared.isFunction(value) ? value() : value.handler();
      const clear = () => {
        if (delayId) {
          clearTimeout(delayId);
          delayId = void 0;
        }
        if (intervalId) {
          clearInterval(intervalId);
          intervalId = void 0;
        }
      };
      el.addEventListener("mousedown", (evt) => {
        if (evt.button !== 0)
          return;
        clear();
        handler();
        document.addEventListener("mouseup", () => clear(), {
          once: true
        });
        delayId = setTimeout(() => {
          intervalId = setInterval(() => {
            handler();
          }, interval);
        }, delay);
      });
    }
  };
  const FOCUSABLE_CHILDREN = "_trap-focus-children";
  const FOCUS_STACK = [];
  const FOCUS_HANDLER = (e) => {
    if (FOCUS_STACK.length === 0)
      return;
    const focusableElement = FOCUS_STACK[FOCUS_STACK.length - 1][FOCUSABLE_CHILDREN];
    if (focusableElement.length > 0 && e.code === EVENT_CODE.tab) {
      if (focusableElement.length === 1) {
        e.preventDefault();
        if (document.activeElement !== focusableElement[0]) {
          focusableElement[0].focus();
        }
        return;
      }
      const goingBackward = e.shiftKey;
      const isFirst = e.target === focusableElement[0];
      const isLast = e.target === focusableElement[focusableElement.length - 1];
      if (isFirst && goingBackward) {
        e.preventDefault();
        focusableElement[focusableElement.length - 1].focus();
      }
      if (isLast && !goingBackward) {
        e.preventDefault();
        focusableElement[0].focus();
      }
    }
  };
  const TrapFocus = {
    beforeMount(el) {
      el[FOCUSABLE_CHILDREN] = obtainAllFocusableElements$1(el);
      FOCUS_STACK.push(el);
      if (FOCUS_STACK.length <= 1) {
        document.addEventListener("keydown", FOCUS_HANDLER);
      }
    },
    updated(el) {
      vue.nextTick(() => {
        el[FOCUSABLE_CHILDREN] = obtainAllFocusableElements$1(el);
      });
    },
    unmounted() {
      FOCUS_STACK.shift();
      if (FOCUS_STACK.length === 0) {
        document.removeEventListener("keydown", FOCUS_HANDLER);
      }
    }
  };
  var v = false, o, f, s, u, d, N, l, p, m, w, D, x, E, M, F;
  function a() {
    if (!v) {
      v = true;
      var e = navigator.userAgent, n2 = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e), i2 = /(Mac OS X)|(Windows)|(Linux)/.exec(e);
      if (x = /\b(iPhone|iP[ao]d)/.exec(e), E = /\b(iP[ao]d)/.exec(e), w = /Android/i.exec(e), M = /FBAN\/\w+;/i.exec(e), F = /Mobile/i.exec(e), D = !!/Win64/.exec(e), n2) {
        o = n2[1] ? parseFloat(n2[1]) : n2[5] ? parseFloat(n2[5]) : NaN, o && document && document.documentMode && (o = document.documentMode);
        var r2 = /(?:Trident\/(\d+.\d+))/.exec(e);
        N = r2 ? parseFloat(r2[1]) + 4 : o, f = n2[2] ? parseFloat(n2[2]) : NaN, s = n2[3] ? parseFloat(n2[3]) : NaN, u = n2[4] ? parseFloat(n2[4]) : NaN, u ? (n2 = /(?:Chrome\/(\d+\.\d+))/.exec(e), d = n2 && n2[1] ? parseFloat(n2[1]) : NaN) : d = NaN;
      } else
        o = f = s = d = u = NaN;
      if (i2) {
        if (i2[1]) {
          var t2 = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);
          l = t2 ? parseFloat(t2[1].replace("_", ".")) : true;
        } else
          l = false;
        p = !!i2[2], m = !!i2[3];
      } else
        l = p = m = false;
    }
  }
  var _ = { ie: function() {
    return a() || o;
  }, ieCompatibilityMode: function() {
    return a() || N > o;
  }, ie64: function() {
    return _.ie() && D;
  }, firefox: function() {
    return a() || f;
  }, opera: function() {
    return a() || s;
  }, webkit: function() {
    return a() || u;
  }, safari: function() {
    return _.webkit();
  }, chrome: function() {
    return a() || d;
  }, windows: function() {
    return a() || p;
  }, osx: function() {
    return a() || l;
  }, linux: function() {
    return a() || m;
  }, iphone: function() {
    return a() || x;
  }, mobile: function() {
    return a() || x || E || w || F;
  }, nativeApp: function() {
    return a() || M;
  }, android: function() {
    return a() || w;
  }, ipad: function() {
    return a() || E;
  } }, A = _;
  var c = !!(typeof window < "u" && window.document && window.document.createElement), U = { canUseDOM: c, canUseWorkers: typeof Worker < "u", canUseEventListeners: c && !!(window.addEventListener || window.attachEvent), canUseViewport: c && !!window.screen, isInWorker: !c }, h = U;
  var X;
  h.canUseDOM && (X = document.implementation && document.implementation.hasFeature && document.implementation.hasFeature("", "") !== true);
  function S(e, n2) {
    if (!h.canUseDOM || n2 && !("addEventListener" in document))
      return false;
    var i2 = "on" + e, r2 = i2 in document;
    if (!r2) {
      var t2 = document.createElement("div");
      t2.setAttribute(i2, "return;"), r2 = typeof t2[i2] == "function";
    }
    return !r2 && X && e === "wheel" && (r2 = document.implementation.hasFeature("Events.wheel", "3.0")), r2;
  }
  var b = S;
  var O = 10, I = 40, P = 800;
  function T(e) {
    var n2 = 0, i2 = 0, r2 = 0, t2 = 0;
    return "detail" in e && (i2 = e.detail), "wheelDelta" in e && (i2 = -e.wheelDelta / 120), "wheelDeltaY" in e && (i2 = -e.wheelDeltaY / 120), "wheelDeltaX" in e && (n2 = -e.wheelDeltaX / 120), "axis" in e && e.axis === e.HORIZONTAL_AXIS && (n2 = i2, i2 = 0), r2 = n2 * O, t2 = i2 * O, "deltaY" in e && (t2 = e.deltaY), "deltaX" in e && (r2 = e.deltaX), (r2 || t2) && e.deltaMode && (e.deltaMode == 1 ? (r2 *= I, t2 *= I) : (r2 *= P, t2 *= P)), r2 && !n2 && (n2 = r2 < 1 ? -1 : 1), t2 && !i2 && (i2 = t2 < 1 ? -1 : 1), { spinX: n2, spinY: i2, pixelX: r2, pixelY: t2 };
  }
  T.getEventType = function() {
    return A.firefox() ? "DOMMouseScroll" : b("wheel") ? "wheel" : "mousewheel";
  };
  var Y = T;
  /**
  * Checks if an event is supported in the current execution environment.
  *
  * NOTE: This will not work correctly for non-generic events such as `change`,
  * `reset`, `load`, `error`, and `select`.
  *
  * Borrows from Modernizr.
  *
  * @param {string} eventNameSuffix Event name, e.g. "click".
  * @param {?boolean} capture Check if the capture phase is supported.
  * @return {boolean} True if the event is supported.
  * @internal
  * @license Modernizr 3.0.0pre (Custom Build) | MIT
  */
  const mousewheel = function(element, callback) {
    if (element && element.addEventListener) {
      const fn2 = function(event) {
        const normalized = Y(event);
        callback && Reflect.apply(callback, this, [event, normalized]);
      };
      element.addEventListener("wheel", fn2, { passive: true });
    }
  };
  const Mousewheel = {
    beforeMount(el, binding) {
      mousewheel(el, binding.value);
    }
  };
  const basicTimeSpinnerProps = buildProps({
    role: {
      type: String,
      required: true
    },
    spinnerDate: {
      type: definePropType(Object),
      required: true
    },
    showSeconds: {
      type: Boolean,
      default: true
    },
    arrowControl: Boolean,
    amPmMode: {
      type: definePropType(String),
      default: ""
    },
    ...disabledTimeListsProps
  });
  const _sfc_main$24 = /* @__PURE__ */ vue.defineComponent({
    __name: "basic-time-spinner",
    props: basicTimeSpinnerProps,
    emits: ["change", "select-range", "set-option"],
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("time");
      const { getHoursList, getMinutesList, getSecondsList } = getTimeLists(props2.disabledHours, props2.disabledMinutes, props2.disabledSeconds);
      let isScrolling = false;
      const currentScrollbar = vue.ref();
      const listHoursRef = vue.ref();
      const listMinutesRef = vue.ref();
      const listSecondsRef = vue.ref();
      const listRefsMap = {
        hours: listHoursRef,
        minutes: listMinutesRef,
        seconds: listSecondsRef
      };
      const spinnerItems = vue.computed(() => {
        return props2.showSeconds ? timeUnits$1 : timeUnits$1.slice(0, 2);
      });
      const timePartials = vue.computed(() => {
        const { spinnerDate } = props2;
        const hours = spinnerDate.hour();
        const minutes = spinnerDate.minute();
        const seconds = spinnerDate.second();
        return { hours, minutes, seconds };
      });
      const timeList = vue.computed(() => {
        const { hours, minutes } = vue.unref(timePartials);
        return {
          hours: getHoursList(props2.role),
          minutes: getMinutesList(hours, props2.role),
          seconds: getSecondsList(hours, minutes, props2.role)
        };
      });
      const arrowControlTimeList = vue.computed(() => {
        const { hours, minutes, seconds } = vue.unref(timePartials);
        return {
          hours: buildTimeList(hours, 23),
          minutes: buildTimeList(minutes, 59),
          seconds: buildTimeList(seconds, 59)
        };
      });
      const debouncedResetScroll = debounce((type3) => {
        isScrolling = false;
        adjustCurrentSpinner(type3);
      }, 200);
      const getAmPmFlag = (hour) => {
        const shouldShowAmPm = !!props2.amPmMode;
        if (!shouldShowAmPm)
          return "";
        const isCapital = props2.amPmMode === "A";
        let content = hour < 12 ? " am" : " pm";
        if (isCapital)
          content = content.toUpperCase();
        return content;
      };
      const emitSelectRange = (type3) => {
        let range2;
        switch (type3) {
          case "hours":
            range2 = [0, 2];
            break;
          case "minutes":
            range2 = [3, 5];
            break;
          case "seconds":
            range2 = [6, 8];
            break;
        }
        const [left2, right2] = range2;
        emit("select-range", left2, right2);
        currentScrollbar.value = type3;
      };
      const adjustCurrentSpinner = (type3) => {
        adjustSpinner(type3, vue.unref(timePartials)[type3]);
      };
      const adjustSpinners = () => {
        adjustCurrentSpinner("hours");
        adjustCurrentSpinner("minutes");
        adjustCurrentSpinner("seconds");
      };
      const getScrollbarElement = (el) => el.querySelector(`.${ns2.namespace.value}-scrollbar__wrap`);
      const adjustSpinner = (type3, value) => {
        if (props2.arrowControl)
          return;
        const scrollbar = vue.unref(listRefsMap[type3]);
        if (scrollbar && scrollbar.$el) {
          getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type3));
        }
      };
      const typeItemHeight = (type3) => {
        const scrollbar = vue.unref(listRefsMap[type3]);
        const listItem = scrollbar == null ? void 0 : scrollbar.$el.querySelector("li");
        if (listItem) {
          return Number.parseFloat(getStyle(listItem, "height")) || 0;
        }
        return 0;
      };
      const onIncrement = () => {
        scrollDown(1);
      };
      const onDecrement = () => {
        scrollDown(-1);
      };
      const scrollDown = (step) => {
        if (!currentScrollbar.value) {
          emitSelectRange("hours");
        }
        const label = currentScrollbar.value;
        const now2 = vue.unref(timePartials)[label];
        const total2 = currentScrollbar.value === "hours" ? 24 : 60;
        const next = findNextUnDisabled(label, now2, step, total2);
        modifyDateField(label, next);
        adjustSpinner(label, next);
        vue.nextTick(() => emitSelectRange(label));
      };
      const findNextUnDisabled = (type3, now2, step, total2) => {
        let next = (now2 + step + total2) % total2;
        const list = vue.unref(timeList)[type3];
        while (list[next] && next !== now2) {
          next = (next + step + total2) % total2;
        }
        return next;
      };
      const modifyDateField = (type3, value) => {
        const list = vue.unref(timeList)[type3];
        const isDisabled = list[value];
        if (isDisabled)
          return;
        const { hours, minutes, seconds } = vue.unref(timePartials);
        let changeTo;
        switch (type3) {
          case "hours":
            changeTo = props2.spinnerDate.hour(value).minute(minutes).second(seconds);
            break;
          case "minutes":
            changeTo = props2.spinnerDate.hour(hours).minute(value).second(seconds);
            break;
          case "seconds":
            changeTo = props2.spinnerDate.hour(hours).minute(minutes).second(value);
            break;
        }
        emit("change", changeTo);
      };
      const handleClick = (type3, { value, disabled }) => {
        if (!disabled) {
          modifyDateField(type3, value);
          emitSelectRange(type3);
          adjustSpinner(type3, value);
        }
      };
      const handleScroll2 = (type3) => {
        isScrolling = true;
        debouncedResetScroll(type3);
        const value = Math.min(Math.round((getScrollbarElement(vue.unref(listRefsMap[type3]).$el).scrollTop - (scrollBarHeight(type3) * 0.5 - 10) / typeItemHeight(type3) + 3) / typeItemHeight(type3)), type3 === "hours" ? 23 : 59);
        modifyDateField(type3, value);
      };
      const scrollBarHeight = (type3) => {
        return vue.unref(listRefsMap[type3]).$el.offsetHeight;
      };
      const bindScrollEvent = () => {
        const bindFunction = (type3) => {
          const scrollbar = vue.unref(listRefsMap[type3]);
          if (scrollbar && scrollbar.$el) {
            getScrollbarElement(scrollbar.$el).onscroll = () => {
              handleScroll2(type3);
            };
          }
        };
        bindFunction("hours");
        bindFunction("minutes");
        bindFunction("seconds");
      };
      vue.onMounted(() => {
        vue.nextTick(() => {
          !props2.arrowControl && bindScrollEvent();
          adjustSpinners();
          if (props2.role === "start")
            emitSelectRange("hours");
        });
      });
      const setRef = (scrollbar, type3) => {
        listRefsMap[type3].value = scrollbar;
      };
      emit("set-option", [`${props2.role}_scrollDown`, scrollDown]);
      emit("set-option", [`${props2.role}_emitSelectRange`, emitSelectRange]);
      vue.watch(() => props2.spinnerDate, () => {
        if (isScrolling)
          return;
        adjustSpinners();
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns2).b("spinner"), { "has-seconds": _ctx.showSeconds }])
        }, [
          !_ctx.arrowControl ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, { key: 0 }, vue.renderList(vue.unref(spinnerItems), (item) => {
            return vue.openBlock(), vue.createBlock(vue.unref(ElScrollbar), {
              key: item,
              ref_for: true,
              ref: (scrollbar) => setRef(scrollbar, item),
              class: vue.normalizeClass(vue.unref(ns2).be("spinner", "wrapper")),
              "wrap-style": "max-height: inherit;",
              "view-class": vue.unref(ns2).be("spinner", "list"),
              noresize: "",
              tag: "ul",
              onMouseenter: ($event) => emitSelectRange(item),
              onMousemove: ($event) => adjustCurrentSpinner(item)
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(timeList)[item], (disabled, key) => {
                  return vue.openBlock(), vue.createElementBlock("li", {
                    key,
                    class: vue.normalizeClass([
                      vue.unref(ns2).be("spinner", "item"),
                      vue.unref(ns2).is("active", key === vue.unref(timePartials)[item]),
                      vue.unref(ns2).is("disabled", disabled)
                    ]),
                    onClick: ($event) => handleClick(item, { value: key, disabled })
                  }, [
                    item === "hours" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                      vue.createTextVNode(vue.toDisplayString(("0" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + vue.toDisplayString(getAmPmFlag(key)), 1)
                    ], 64)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
                      vue.createTextVNode(vue.toDisplayString(("0" + key).slice(-2)), 1)
                    ], 64))
                  ], 10, ["onClick"]);
                }), 128))
              ]),
              _: 2
            }, 1032, ["class", "view-class", "onMouseenter", "onMousemove"]);
          }), 128)) : vue.createCommentVNode("v-if", true),
          _ctx.arrowControl ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, { key: 1 }, vue.renderList(vue.unref(spinnerItems), (item) => {
            return vue.openBlock(), vue.createElementBlock("div", {
              key: item,
              class: vue.normalizeClass([vue.unref(ns2).be("spinner", "wrapper"), vue.unref(ns2).is("arrow")]),
              onMouseenter: ($event) => emitSelectRange(item)
            }, [
              vue.withDirectives((vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                class: vue.normalizeClass(["arrow-up", vue.unref(ns2).be("spinner", "arrow")])
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(vue.unref(arrow_up_default))
                ]),
                _: 1
              }, 8, ["class"])), [
                [vue.unref(vRepeatClick), onDecrement]
              ]),
              vue.withDirectives((vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                class: vue.normalizeClass(["arrow-down", vue.unref(ns2).be("spinner", "arrow")])
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(vue.unref(arrow_down_default))
                ]),
                _: 1
              }, 8, ["class"])), [
                [vue.unref(vRepeatClick), onIncrement]
              ]),
              vue.createElementVNode("ul", {
                class: vue.normalizeClass(vue.unref(ns2).be("spinner", "list"))
              }, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(arrowControlTimeList)[item], (time, key) => {
                  return vue.openBlock(), vue.createElementBlock("li", {
                    key,
                    class: vue.normalizeClass([
                      vue.unref(ns2).be("spinner", "item"),
                      vue.unref(ns2).is("active", time === vue.unref(timePartials)[item]),
                      vue.unref(ns2).is("disabled", vue.unref(timeList)[item][time])
                    ])
                  }, [
                    typeof time === "number" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                      item === "hours" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                        vue.createTextVNode(vue.toDisplayString(("0" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + vue.toDisplayString(getAmPmFlag(time)), 1)
                      ], 64)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
                        vue.createTextVNode(vue.toDisplayString(("0" + time).slice(-2)), 1)
                      ], 64))
                    ], 64)) : vue.createCommentVNode("v-if", true)
                  ], 2);
                }), 128))
              ], 2)
            ], 42, ["onMouseenter"]);
          }), 128)) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var TimeSpinner = /* @__PURE__ */ _export_sfc(_sfc_main$24, [["__file", "basic-time-spinner.vue"]]);
  const _sfc_main$23 = /* @__PURE__ */ vue.defineComponent({
    __name: "panel-time-pick",
    props: panelTimePickerProps,
    emits: ["pick", "select-range", "set-picker-option"],
    setup(__props, { emit }) {
      const props2 = __props;
      const pickerBase = vue.inject("EP_PICKER_BASE");
      const {
        arrowControl,
        disabledHours,
        disabledMinutes,
        disabledSeconds,
        defaultValue
      } = pickerBase.props;
      const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } = buildAvailableTimeSlotGetter(disabledHours, disabledMinutes, disabledSeconds);
      const ns2 = useNamespace("time");
      const { t: t2, lang } = useLocale();
      const selectionRange = vue.ref([0, 2]);
      const oldValue = useOldValue(props2);
      const transitionName = vue.computed(() => {
        return isUndefined(props2.actualVisible) ? `${ns2.namespace.value}-zoom-in-top` : "";
      });
      const showSeconds = vue.computed(() => {
        return props2.format.includes("ss");
      });
      const amPmMode = vue.computed(() => {
        if (props2.format.includes("A"))
          return "A";
        if (props2.format.includes("a"))
          return "a";
        return "";
      });
      const isValidValue2 = (_date) => {
        const parsedDate = dayjs(_date).locale(lang.value);
        const result = getRangeAvailableTime(parsedDate);
        return parsedDate.isSame(result);
      };
      const handleCancel = () => {
        emit("pick", oldValue.value, false);
      };
      const handleConfirm = (visible = false, first = false) => {
        if (first)
          return;
        emit("pick", props2.parsedValue, visible);
      };
      const handleChange = (_date) => {
        if (!props2.visible) {
          return;
        }
        const result = getRangeAvailableTime(_date).millisecond(0);
        emit("pick", result, true);
      };
      const setSelectionRange = (start, end2) => {
        emit("select-range", start, end2);
        selectionRange.value = [start, end2];
      };
      const changeSelectionRange = (step) => {
        const list = [0, 3].concat(showSeconds.value ? [6] : []);
        const mapping = ["hours", "minutes"].concat(showSeconds.value ? ["seconds"] : []);
        const index = list.indexOf(selectionRange.value[0]);
        const next = (index + step + list.length) % list.length;
        timePickerOptions["start_emitSelectRange"](mapping[next]);
      };
      const handleKeydown = (event) => {
        const code = event.code;
        const { left: left2, right: right2, up: up2, down: down2 } = EVENT_CODE;
        if ([left2, right2].includes(code)) {
          const step = code === left2 ? -1 : 1;
          changeSelectionRange(step);
          event.preventDefault();
          return;
        }
        if ([up2, down2].includes(code)) {
          const step = code === up2 ? -1 : 1;
          timePickerOptions["start_scrollDown"](step);
          event.preventDefault();
          return;
        }
      };
      const { timePickerOptions, onSetOption, getAvailableTime } = useTimePanel({
        getAvailableHours,
        getAvailableMinutes,
        getAvailableSeconds
      });
      const getRangeAvailableTime = (date) => {
        return getAvailableTime(date, props2.datetimeRole || "", true);
      };
      const parseUserInput = (value) => {
        if (!value)
          return null;
        return dayjs(value, props2.format).locale(lang.value);
      };
      const formatToString = (value) => {
        if (!value)
          return null;
        return value.format(props2.format);
      };
      const getDefaultValue2 = () => {
        return dayjs(defaultValue).locale(lang.value);
      };
      emit("set-picker-option", ["isValidValue", isValidValue2]);
      emit("set-picker-option", ["formatToString", formatToString]);
      emit("set-picker-option", ["parseUserInput", parseUserInput]);
      emit("set-picker-option", ["handleKeydownInput", handleKeydown]);
      emit("set-picker-option", ["getRangeAvailableTime", getRangeAvailableTime]);
      emit("set-picker-option", ["getDefaultValue", getDefaultValue2]);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.Transition, { name: vue.unref(transitionName) }, {
          default: vue.withCtx(() => [
            _ctx.actualVisible || _ctx.visible ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ns2).b("panel"))
            }, [
              vue.createElementVNode("div", {
                class: vue.normalizeClass([vue.unref(ns2).be("panel", "content"), { "has-seconds": vue.unref(showSeconds) }])
              }, [
                vue.createVNode(TimeSpinner, {
                  ref: "spinner",
                  role: _ctx.datetimeRole || "start",
                  "arrow-control": vue.unref(arrowControl),
                  "show-seconds": vue.unref(showSeconds),
                  "am-pm-mode": vue.unref(amPmMode),
                  "spinner-date": _ctx.parsedValue,
                  "disabled-hours": vue.unref(disabledHours),
                  "disabled-minutes": vue.unref(disabledMinutes),
                  "disabled-seconds": vue.unref(disabledSeconds),
                  onChange: handleChange,
                  onSetOption: vue.unref(onSetOption),
                  onSelectRange: setSelectionRange
                }, null, 8, ["role", "arrow-control", "show-seconds", "am-pm-mode", "spinner-date", "disabled-hours", "disabled-minutes", "disabled-seconds", "onSetOption"])
              ], 2),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).be("panel", "footer"))
              }, [
                vue.createElementVNode("button", {
                  type: "button",
                  class: vue.normalizeClass([vue.unref(ns2).be("panel", "btn"), "cancel"]),
                  onClick: handleCancel
                }, vue.toDisplayString(vue.unref(t2)("el.datepicker.cancel")), 3),
                vue.createElementVNode("button", {
                  type: "button",
                  class: vue.normalizeClass([vue.unref(ns2).be("panel", "btn"), "confirm"]),
                  onClick: ($event) => handleConfirm()
                }, vue.toDisplayString(vue.unref(t2)("el.datepicker.confirm")), 11, ["onClick"])
              ], 2)
            ], 2)) : vue.createCommentVNode("v-if", true)
          ]),
          _: 1
        }, 8, ["name"]);
      };
    }
  });
  var TimePickPanel = /* @__PURE__ */ _export_sfc(_sfc_main$23, [["__file", "panel-time-pick.vue"]]);
  const panelTimeRangeProps = buildProps({
    ...timePanelSharedProps,
    parsedValue: {
      type: definePropType(Array)
    }
  });
  const _sfc_main$22 = /* @__PURE__ */ vue.defineComponent({
    __name: "panel-time-range",
    props: panelTimeRangeProps,
    emits: ["pick", "select-range", "set-picker-option"],
    setup(__props, { emit }) {
      const props2 = __props;
      const makeSelectRange = (start, end2) => {
        const result = [];
        for (let i2 = start; i2 <= end2; i2++) {
          result.push(i2);
        }
        return result;
      };
      const { t: t2, lang } = useLocale();
      const nsTime = useNamespace("time");
      const nsPicker = useNamespace("picker");
      const pickerBase = vue.inject("EP_PICKER_BASE");
      const {
        arrowControl,
        disabledHours,
        disabledMinutes,
        disabledSeconds,
        defaultValue
      } = pickerBase.props;
      const startContainerKls = vue.computed(() => [
        nsTime.be("range-picker", "body"),
        nsTime.be("panel", "content"),
        nsTime.is("arrow", arrowControl),
        showSeconds.value ? "has-seconds" : ""
      ]);
      const endContainerKls = vue.computed(() => [
        nsTime.be("range-picker", "body"),
        nsTime.be("panel", "content"),
        nsTime.is("arrow", arrowControl),
        showSeconds.value ? "has-seconds" : ""
      ]);
      const startTime = vue.computed(() => props2.parsedValue[0]);
      const endTime = vue.computed(() => props2.parsedValue[1]);
      const oldValue = useOldValue(props2);
      const handleCancel = () => {
        emit("pick", oldValue.value, false);
      };
      const showSeconds = vue.computed(() => {
        return props2.format.includes("ss");
      });
      const amPmMode = vue.computed(() => {
        if (props2.format.includes("A"))
          return "A";
        if (props2.format.includes("a"))
          return "a";
        return "";
      });
      const handleConfirm = (visible = false) => {
        emit("pick", [startTime.value, endTime.value], visible);
      };
      const handleMinChange = (date) => {
        handleChange(date.millisecond(0), endTime.value);
      };
      const handleMaxChange = (date) => {
        handleChange(startTime.value, date.millisecond(0));
      };
      const isValidValue2 = (_date) => {
        const parsedDate = _date.map((_2) => dayjs(_2).locale(lang.value));
        const result = getRangeAvailableTime(parsedDate);
        return parsedDate[0].isSame(result[0]) && parsedDate[1].isSame(result[1]);
      };
      const handleChange = (start, end2) => {
        emit("pick", [start, end2], true);
      };
      const btnConfirmDisabled = vue.computed(() => {
        return startTime.value > endTime.value;
      });
      const selectionRange = vue.ref([0, 2]);
      const setMinSelectionRange = (start, end2) => {
        emit("select-range", start, end2, "min");
        selectionRange.value = [start, end2];
      };
      const offset2 = vue.computed(() => showSeconds.value ? 11 : 8);
      const setMaxSelectionRange = (start, end2) => {
        emit("select-range", start, end2, "max");
        const _offset = vue.unref(offset2);
        selectionRange.value = [start + _offset, end2 + _offset];
      };
      const changeSelectionRange = (step) => {
        const list = showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];
        const mapping = ["hours", "minutes"].concat(showSeconds.value ? ["seconds"] : []);
        const index = list.indexOf(selectionRange.value[0]);
        const next = (index + step + list.length) % list.length;
        const half = list.length / 2;
        if (next < half) {
          timePickerOptions["start_emitSelectRange"](mapping[next]);
        } else {
          timePickerOptions["end_emitSelectRange"](mapping[next - half]);
        }
      };
      const handleKeydown = (event) => {
        const code = event.code;
        const { left: left2, right: right2, up: up2, down: down2 } = EVENT_CODE;
        if ([left2, right2].includes(code)) {
          const step = code === left2 ? -1 : 1;
          changeSelectionRange(step);
          event.preventDefault();
          return;
        }
        if ([up2, down2].includes(code)) {
          const step = code === up2 ? -1 : 1;
          const role = selectionRange.value[0] < offset2.value ? "start" : "end";
          timePickerOptions[`${role}_scrollDown`](step);
          event.preventDefault();
          return;
        }
      };
      const disabledHours_ = (role, compare) => {
        const defaultDisable = disabledHours ? disabledHours(role) : [];
        const isStart = role === "start";
        const compareDate = compare || (isStart ? endTime.value : startTime.value);
        const compareHour = compareDate.hour();
        const nextDisable = isStart ? makeSelectRange(compareHour + 1, 23) : makeSelectRange(0, compareHour - 1);
        return union(defaultDisable, nextDisable);
      };
      const disabledMinutes_ = (hour, role, compare) => {
        const defaultDisable = disabledMinutes ? disabledMinutes(hour, role) : [];
        const isStart = role === "start";
        const compareDate = compare || (isStart ? endTime.value : startTime.value);
        const compareHour = compareDate.hour();
        if (hour !== compareHour) {
          return defaultDisable;
        }
        const compareMinute = compareDate.minute();
        const nextDisable = isStart ? makeSelectRange(compareMinute + 1, 59) : makeSelectRange(0, compareMinute - 1);
        return union(defaultDisable, nextDisable);
      };
      const disabledSeconds_ = (hour, minute, role, compare) => {
        const defaultDisable = disabledSeconds ? disabledSeconds(hour, minute, role) : [];
        const isStart = role === "start";
        const compareDate = compare || (isStart ? endTime.value : startTime.value);
        const compareHour = compareDate.hour();
        const compareMinute = compareDate.minute();
        if (hour !== compareHour || minute !== compareMinute) {
          return defaultDisable;
        }
        const compareSecond = compareDate.second();
        const nextDisable = isStart ? makeSelectRange(compareSecond + 1, 59) : makeSelectRange(0, compareSecond - 1);
        return union(defaultDisable, nextDisable);
      };
      const getRangeAvailableTime = ([start, end2]) => {
        return [
          getAvailableTime(start, "start", true, end2),
          getAvailableTime(end2, "end", false, start)
        ];
      };
      const { getAvailableHours, getAvailableMinutes, getAvailableSeconds } = buildAvailableTimeSlotGetter(disabledHours_, disabledMinutes_, disabledSeconds_);
      const {
        timePickerOptions,
        getAvailableTime,
        onSetOption
      } = useTimePanel({
        getAvailableHours,
        getAvailableMinutes,
        getAvailableSeconds
      });
      const parseUserInput = (days) => {
        if (!days)
          return null;
        if (shared.isArray(days)) {
          return days.map((d2) => dayjs(d2, props2.format).locale(lang.value));
        }
        return dayjs(days, props2.format).locale(lang.value);
      };
      const formatToString = (days) => {
        if (!days)
          return null;
        if (shared.isArray(days)) {
          return days.map((d2) => d2.format(props2.format));
        }
        return days.format(props2.format);
      };
      const getDefaultValue2 = () => {
        if (shared.isArray(defaultValue)) {
          return defaultValue.map((d2) => dayjs(d2).locale(lang.value));
        }
        const defaultDay = dayjs(defaultValue).locale(lang.value);
        return [defaultDay, defaultDay.add(60, "m")];
      };
      emit("set-picker-option", ["formatToString", formatToString]);
      emit("set-picker-option", ["parseUserInput", parseUserInput]);
      emit("set-picker-option", ["isValidValue", isValidValue2]);
      emit("set-picker-option", ["handleKeydownInput", handleKeydown]);
      emit("set-picker-option", ["getDefaultValue", getDefaultValue2]);
      emit("set-picker-option", ["getRangeAvailableTime", getRangeAvailableTime]);
      return (_ctx, _cache) => {
        return _ctx.actualVisible ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass([vue.unref(nsTime).b("range-picker"), vue.unref(nsPicker).b("panel")])
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(nsTime).be("range-picker", "content"))
          }, [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(nsTime).be("range-picker", "cell"))
            }, [
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(nsTime).be("range-picker", "header"))
              }, vue.toDisplayString(vue.unref(t2)("el.datepicker.startTime")), 3),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(startContainerKls))
              }, [
                vue.createVNode(TimeSpinner, {
                  ref: "minSpinner",
                  role: "start",
                  "show-seconds": vue.unref(showSeconds),
                  "am-pm-mode": vue.unref(amPmMode),
                  "arrow-control": vue.unref(arrowControl),
                  "spinner-date": vue.unref(startTime),
                  "disabled-hours": disabledHours_,
                  "disabled-minutes": disabledMinutes_,
                  "disabled-seconds": disabledSeconds_,
                  onChange: handleMinChange,
                  onSetOption: vue.unref(onSetOption),
                  onSelectRange: setMinSelectionRange
                }, null, 8, ["show-seconds", "am-pm-mode", "arrow-control", "spinner-date", "onSetOption"])
              ], 2)
            ], 2),
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(nsTime).be("range-picker", "cell"))
            }, [
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(nsTime).be("range-picker", "header"))
              }, vue.toDisplayString(vue.unref(t2)("el.datepicker.endTime")), 3),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(endContainerKls))
              }, [
                vue.createVNode(TimeSpinner, {
                  ref: "maxSpinner",
                  role: "end",
                  "show-seconds": vue.unref(showSeconds),
                  "am-pm-mode": vue.unref(amPmMode),
                  "arrow-control": vue.unref(arrowControl),
                  "spinner-date": vue.unref(endTime),
                  "disabled-hours": disabledHours_,
                  "disabled-minutes": disabledMinutes_,
                  "disabled-seconds": disabledSeconds_,
                  onChange: handleMaxChange,
                  onSetOption: vue.unref(onSetOption),
                  onSelectRange: setMaxSelectionRange
                }, null, 8, ["show-seconds", "am-pm-mode", "arrow-control", "spinner-date", "onSetOption"])
              ], 2)
            ], 2)
          ], 2),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(nsTime).be("panel", "footer"))
          }, [
            vue.createElementVNode("button", {
              type: "button",
              class: vue.normalizeClass([vue.unref(nsTime).be("panel", "btn"), "cancel"]),
              onClick: ($event) => handleCancel()
            }, vue.toDisplayString(vue.unref(t2)("el.datepicker.cancel")), 11, ["onClick"]),
            vue.createElementVNode("button", {
              type: "button",
              class: vue.normalizeClass([vue.unref(nsTime).be("panel", "btn"), "confirm"]),
              disabled: vue.unref(btnConfirmDisabled),
              onClick: ($event) => handleConfirm()
            }, vue.toDisplayString(vue.unref(t2)("el.datepicker.confirm")), 11, ["disabled", "onClick"])
          ], 2)
        ], 2)) : vue.createCommentVNode("v-if", true);
      };
    }
  });
  var TimeRangePanel = /* @__PURE__ */ _export_sfc(_sfc_main$22, [["__file", "panel-time-range.vue"]]);
  dayjs.extend(customParseFormat);
  var TimePicker = vue.defineComponent({
    name: "ElTimePicker",
    install: null,
    props: {
      ...timePickerDefaultProps,
      isRange: {
        type: Boolean,
        default: false
      }
    },
    emits: ["update:modelValue"],
    setup(props2, ctx) {
      const commonPicker = vue.ref();
      const [type3, Panel] = props2.isRange ? ["timerange", TimeRangePanel] : ["time", TimePickPanel];
      const modelUpdater = (value) => ctx.emit("update:modelValue", value);
      vue.provide("ElPopperOptions", props2.popperOptions);
      ctx.expose({
        focus: (e) => {
          var _a2;
          (_a2 = commonPicker.value) == null ? void 0 : _a2.handleFocusInput(e);
        },
        blur: (e) => {
          var _a2;
          (_a2 = commonPicker.value) == null ? void 0 : _a2.handleBlurInput(e);
        },
        handleOpen: () => {
          var _a2;
          (_a2 = commonPicker.value) == null ? void 0 : _a2.handleOpen();
        },
        handleClose: () => {
          var _a2;
          (_a2 = commonPicker.value) == null ? void 0 : _a2.handleClose();
        }
      });
      return () => {
        var _a2;
        const format2 = (_a2 = props2.format) != null ? _a2 : DEFAULT_FORMATS_TIME;
        return vue.createVNode(CommonPicker, vue.mergeProps(props2, {
          "ref": commonPicker,
          "type": type3,
          "format": format2,
          "onUpdate:modelValue": modelUpdater
        }), {
          default: (props22) => vue.createVNode(Panel, props22, null)
        });
      };
    }
  });
  const ElTimePicker = withInstall(TimePicker);
  const getPrevMonthLastDays = (date, count2) => {
    const lastDay = date.subtract(1, "month").endOf("month").date();
    return rangeArr(count2).map((_2, index) => lastDay - (count2 - index - 1));
  };
  const getMonthDays = (date) => {
    const days = date.daysInMonth();
    return rangeArr(days).map((_2, index) => index + 1);
  };
  const toNestedArr = (days) => rangeArr(days.length / 7).map((index) => {
    const start = index * 7;
    return days.slice(start, start + 7);
  });
  const dateTableProps = buildProps({
    selectedDay: {
      type: definePropType(Object)
    },
    range: {
      type: definePropType(Array)
    },
    date: {
      type: definePropType(Object),
      required: true
    },
    hideHeader: {
      type: Boolean
    }
  });
  const dateTableEmits = {
    pick: (value) => shared.isObject(value)
  };
  var localeData$1 = { exports: {} };
  (function(module2, exports2) {
    !function(n2, e) {
      module2.exports = e();
    }(commonjsGlobal, function() {
      return function(n2, e, t2) {
        var r2 = e.prototype, o2 = function(n3) {
          return n3 && (n3.indexOf ? n3 : n3.s);
        }, u2 = function(n3, e2, t3, r3, u3) {
          var i3 = n3.name ? n3 : n3.$locale(), a3 = o2(i3[e2]), s3 = o2(i3[t3]), f2 = a3 || s3.map(function(n4) {
            return n4.slice(0, r3);
          });
          if (!u3)
            return f2;
          var d2 = i3.weekStart;
          return f2.map(function(n4, e3) {
            return f2[(e3 + (d2 || 0)) % 7];
          });
        }, i2 = function() {
          return t2.Ls[t2.locale()];
        }, a2 = function(n3, e2) {
          return n3.formats[e2] || function(n4) {
            return n4.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(n5, e3, t3) {
              return e3 || t3.slice(1);
            });
          }(n3.formats[e2.toUpperCase()]);
        }, s2 = function() {
          var n3 = this;
          return { months: function(e2) {
            return e2 ? e2.format("MMMM") : u2(n3, "months");
          }, monthsShort: function(e2) {
            return e2 ? e2.format("MMM") : u2(n3, "monthsShort", "months", 3);
          }, firstDayOfWeek: function() {
            return n3.$locale().weekStart || 0;
          }, weekdays: function(e2) {
            return e2 ? e2.format("dddd") : u2(n3, "weekdays");
          }, weekdaysMin: function(e2) {
            return e2 ? e2.format("dd") : u2(n3, "weekdaysMin", "weekdays", 2);
          }, weekdaysShort: function(e2) {
            return e2 ? e2.format("ddd") : u2(n3, "weekdaysShort", "weekdays", 3);
          }, longDateFormat: function(e2) {
            return a2(n3.$locale(), e2);
          }, meridiem: this.$locale().meridiem, ordinal: this.$locale().ordinal };
        };
        r2.localeData = function() {
          return s2.bind(this)();
        }, t2.localeData = function() {
          var n3 = i2();
          return { firstDayOfWeek: function() {
            return n3.weekStart || 0;
          }, weekdays: function() {
            return t2.weekdays();
          }, weekdaysShort: function() {
            return t2.weekdaysShort();
          }, weekdaysMin: function() {
            return t2.weekdaysMin();
          }, months: function() {
            return t2.months();
          }, monthsShort: function() {
            return t2.monthsShort();
          }, longDateFormat: function(e2) {
            return a2(n3, e2);
          }, meridiem: n3.meridiem, ordinal: n3.ordinal };
        }, t2.months = function() {
          return u2(i2(), "months");
        }, t2.monthsShort = function() {
          return u2(i2(), "monthsShort", "months", 3);
        }, t2.weekdays = function(n3) {
          return u2(i2(), "weekdays", null, null, n3);
        }, t2.weekdaysShort = function(n3) {
          return u2(i2(), "weekdaysShort", "weekdays", 3, n3);
        }, t2.weekdaysMin = function(n3) {
          return u2(i2(), "weekdaysMin", "weekdays", 2, n3);
        };
      };
    });
  })(localeData$1);
  var localeDataExports = localeData$1.exports;
  const localeData = /* @__PURE__ */ getDefaultExportFromCjs(localeDataExports);
  const useDateTable = (props2, emit) => {
    dayjs.extend(localeData);
    const firstDayOfWeek = dayjs.localeData().firstDayOfWeek();
    const { t: t2, lang } = useLocale();
    const now2 = dayjs().locale(lang.value);
    const isInRange = vue.computed(() => !!props2.range && !!props2.range.length);
    const rows = vue.computed(() => {
      let days = [];
      if (isInRange.value) {
        const [start, end2] = props2.range;
        const currentMonthRange = rangeArr(end2.date() - start.date() + 1).map((index) => ({
          text: start.date() + index,
          type: "current"
        }));
        let remaining = currentMonthRange.length % 7;
        remaining = remaining === 0 ? 0 : 7 - remaining;
        const nextMonthRange = rangeArr(remaining).map((_2, index) => ({
          text: index + 1,
          type: "next"
        }));
        days = currentMonthRange.concat(nextMonthRange);
      } else {
        const firstDay = props2.date.startOf("month").day();
        const prevMonthDays = getPrevMonthLastDays(props2.date, (firstDay - firstDayOfWeek + 7) % 7).map((day) => ({
          text: day,
          type: "prev"
        }));
        const currentMonthDays = getMonthDays(props2.date).map((day) => ({
          text: day,
          type: "current"
        }));
        days = [...prevMonthDays, ...currentMonthDays];
        const remaining = 7 - (days.length % 7 || 7);
        const nextMonthDays = rangeArr(remaining).map((_2, index) => ({
          text: index + 1,
          type: "next"
        }));
        days = days.concat(nextMonthDays);
      }
      return toNestedArr(days);
    });
    const weekDays = vue.computed(() => {
      const start = firstDayOfWeek;
      if (start === 0) {
        return WEEK_DAYS.map((_2) => t2(`el.datepicker.weeks.${_2}`));
      } else {
        return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start)).map((_2) => t2(`el.datepicker.weeks.${_2}`));
      }
    });
    const getFormattedDate = (day, type3) => {
      switch (type3) {
        case "prev":
          return props2.date.startOf("month").subtract(1, "month").date(day);
        case "next":
          return props2.date.startOf("month").add(1, "month").date(day);
        case "current":
          return props2.date.date(day);
      }
    };
    const handlePickDay = ({ text, type: type3 }) => {
      const date = getFormattedDate(text, type3);
      emit("pick", date);
    };
    const getSlotData = ({ text, type: type3 }) => {
      const day = getFormattedDate(text, type3);
      return {
        isSelected: day.isSame(props2.selectedDay),
        type: `${type3}-month`,
        day: day.format("YYYY-MM-DD"),
        date: day.toDate()
      };
    };
    return {
      now: now2,
      isInRange,
      rows,
      weekDays,
      getFormattedDate,
      handlePickDay,
      getSlotData
    };
  };
  const __default__$1s = vue.defineComponent({
    name: "DateTable"
  });
  const _sfc_main$21 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1s,
    props: dateTableProps,
    emits: dateTableEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const {
        isInRange,
        now: now2,
        rows,
        weekDays,
        getFormattedDate,
        handlePickDay,
        getSlotData
      } = useDateTable(props2, emit);
      const nsTable = useNamespace("calendar-table");
      const nsDay = useNamespace("calendar-day");
      const getCellClass = ({ text, type: type3 }) => {
        const classes = [type3];
        if (type3 === "current") {
          const date = getFormattedDate(text, type3);
          if (date.isSame(props2.selectedDay, "day")) {
            classes.push(nsDay.is("selected"));
          }
          if (date.isSame(now2, "day")) {
            classes.push(nsDay.is("today"));
          }
        }
        return classes;
      };
      expose({
        getFormattedDate
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("table", {
          class: vue.normalizeClass([vue.unref(nsTable).b(), vue.unref(nsTable).is("range", vue.unref(isInRange))]),
          cellspacing: "0",
          cellpadding: "0"
        }, [
          !_ctx.hideHeader ? (vue.openBlock(), vue.createElementBlock("thead", { key: 0 }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(weekDays), (day) => {
              return vue.openBlock(), vue.createElementBlock("th", { key: day }, vue.toDisplayString(day), 1);
            }), 128))
          ])) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("tbody", null, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(rows), (row, index) => {
              return vue.openBlock(), vue.createElementBlock("tr", {
                key: index,
                class: vue.normalizeClass({
                  [vue.unref(nsTable).e("row")]: true,
                  [vue.unref(nsTable).em("row", "hide-border")]: index === 0 && _ctx.hideHeader
                })
              }, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(row, (cell, key) => {
                  return vue.openBlock(), vue.createElementBlock("td", {
                    key,
                    class: vue.normalizeClass(getCellClass(cell)),
                    onClick: ($event) => vue.unref(handlePickDay)(cell)
                  }, [
                    vue.createElementVNode("div", {
                      class: vue.normalizeClass(vue.unref(nsDay).b())
                    }, [
                      vue.renderSlot(_ctx.$slots, "date-cell", {
                        data: vue.unref(getSlotData)(cell)
                      }, () => [
                        vue.createElementVNode("span", null, vue.toDisplayString(cell.text), 1)
                      ])
                    ], 2)
                  ], 10, ["onClick"]);
                }), 128))
              ], 2);
            }), 128))
          ])
        ], 2);
      };
    }
  });
  var DateTable$1 = /* @__PURE__ */ _export_sfc(_sfc_main$21, [["__file", "date-table.vue"]]);
  const adjacentMonth = (start, end2) => {
    const firstMonthLastDay = start.endOf("month");
    const lastMonthFirstDay = end2.startOf("month");
    const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, "week");
    const lastMonthStartDay = isSameWeek ? lastMonthFirstDay.add(1, "week") : lastMonthFirstDay;
    return [
      [start, firstMonthLastDay],
      [lastMonthStartDay.startOf("week"), end2]
    ];
  };
  const threeConsecutiveMonth = (start, end2) => {
    const firstMonthLastDay = start.endOf("month");
    const secondMonthFirstDay = start.add(1, "month").startOf("month");
    const secondMonthStartDay = firstMonthLastDay.isSame(secondMonthFirstDay, "week") ? secondMonthFirstDay.add(1, "week") : secondMonthFirstDay;
    const secondMonthLastDay = secondMonthStartDay.endOf("month");
    const lastMonthFirstDay = end2.startOf("month");
    const lastMonthStartDay = secondMonthLastDay.isSame(lastMonthFirstDay, "week") ? lastMonthFirstDay.add(1, "week") : lastMonthFirstDay;
    return [
      [start, firstMonthLastDay],
      [secondMonthStartDay.startOf("week"), secondMonthLastDay],
      [lastMonthStartDay.startOf("week"), end2]
    ];
  };
  const useCalendar = (props2, emit, componentName2) => {
    const { lang } = useLocale();
    const selectedDay = vue.ref();
    const now2 = dayjs().locale(lang.value);
    const realSelectedDay = vue.computed({
      get() {
        if (!props2.modelValue)
          return selectedDay.value;
        return date.value;
      },
      set(val) {
        if (!val)
          return;
        selectedDay.value = val;
        const result = val.toDate();
        emit(INPUT_EVENT, result);
        emit(UPDATE_MODEL_EVENT, result);
      }
    });
    const validatedRange = vue.computed(() => {
      if (!props2.range || !shared.isArray(props2.range) || props2.range.length !== 2 || props2.range.some((item) => !shared.isDate(item)))
        return [];
      const rangeArrDayjs = props2.range.map((_2) => dayjs(_2).locale(lang.value));
      const [startDayjs, endDayjs] = rangeArrDayjs;
      if (startDayjs.isAfter(endDayjs)) {
        debugWarn(componentName2, "end time should be greater than start time");
        return [];
      }
      if (startDayjs.isSame(endDayjs, "month")) {
        return calculateValidatedDateRange(startDayjs, endDayjs);
      } else {
        if (startDayjs.add(1, "month").month() !== endDayjs.month()) {
          debugWarn(componentName2, "start time and end time interval must not exceed two months");
          return [];
        }
        return calculateValidatedDateRange(startDayjs, endDayjs);
      }
    });
    const date = vue.computed(() => {
      if (!props2.modelValue) {
        return realSelectedDay.value || (validatedRange.value.length ? validatedRange.value[0][0] : now2);
      } else {
        return dayjs(props2.modelValue).locale(lang.value);
      }
    });
    const prevMonthDayjs = vue.computed(() => date.value.subtract(1, "month").date(1));
    const nextMonthDayjs = vue.computed(() => date.value.add(1, "month").date(1));
    const prevYearDayjs = vue.computed(() => date.value.subtract(1, "year").date(1));
    const nextYearDayjs = vue.computed(() => date.value.add(1, "year").date(1));
    const calculateValidatedDateRange = (startDayjs, endDayjs) => {
      const firstDay = startDayjs.startOf("week");
      const lastDay = endDayjs.endOf("week");
      const firstMonth = firstDay.get("month");
      const lastMonth = lastDay.get("month");
      if (firstMonth === lastMonth) {
        return [[firstDay, lastDay]];
      } else if ((firstMonth + 1) % 12 === lastMonth) {
        return adjacentMonth(firstDay, lastDay);
      } else if (firstMonth + 2 === lastMonth || (firstMonth + 1) % 11 === lastMonth) {
        return threeConsecutiveMonth(firstDay, lastDay);
      } else {
        debugWarn(componentName2, "start time and end time interval must not exceed two months");
        return [];
      }
    };
    const pickDay = (day) => {
      realSelectedDay.value = day;
    };
    const selectDate = (type3) => {
      const dateMap = {
        "prev-month": prevMonthDayjs.value,
        "next-month": nextMonthDayjs.value,
        "prev-year": prevYearDayjs.value,
        "next-year": nextYearDayjs.value,
        today: now2
      };
      const day = dateMap[type3];
      if (!day.isSame(date.value, "day")) {
        pickDay(day);
      }
    };
    return {
      calculateValidatedDateRange,
      date,
      realSelectedDay,
      pickDay,
      selectDate,
      validatedRange
    };
  };
  const isValidRange$1 = (range2) => shared.isArray(range2) && range2.length === 2 && range2.every((item) => shared.isDate(item));
  const calendarProps = buildProps({
    modelValue: {
      type: Date
    },
    range: {
      type: definePropType(Array),
      validator: isValidRange$1
    }
  });
  const calendarEmits = {
    [UPDATE_MODEL_EVENT]: (value) => shared.isDate(value),
    [INPUT_EVENT]: (value) => shared.isDate(value)
  };
  const COMPONENT_NAME$g = "ElCalendar";
  const __default__$1r = vue.defineComponent({
    name: COMPONENT_NAME$g
  });
  const _sfc_main$20 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1r,
    props: calendarProps,
    emits: calendarEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const ns2 = useNamespace("calendar");
      const {
        calculateValidatedDateRange,
        date,
        pickDay,
        realSelectedDay,
        selectDate,
        validatedRange
      } = useCalendar(props2, emit, COMPONENT_NAME$g);
      const { t: t2 } = useLocale();
      const i18nDate = vue.computed(() => {
        const pickedMonth = `el.datepicker.month${date.value.format("M")}`;
        return `${date.value.year()} ${t2("el.datepicker.year")} ${t2(pickedMonth)}`;
      });
      expose({
        selectedDay: realSelectedDay,
        pickDay,
        selectDate,
        calculateValidatedDateRange
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns2).b())
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("header"))
          }, [
            vue.renderSlot(_ctx.$slots, "header", { date: vue.unref(i18nDate) }, () => [
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).e("title"))
              }, vue.toDisplayString(vue.unref(i18nDate)), 3),
              vue.unref(validatedRange).length === 0 ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                class: vue.normalizeClass(vue.unref(ns2).e("button-group"))
              }, [
                vue.createVNode(vue.unref(ElButtonGroup$1), null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(ElButton), {
                      size: "small",
                      onClick: ($event) => vue.unref(selectDate)("prev-month")
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(vue.toDisplayString(vue.unref(t2)("el.datepicker.prevMonth")), 1)
                      ]),
                      _: 1
                    }, 8, ["onClick"]),
                    vue.createVNode(vue.unref(ElButton), {
                      size: "small",
                      onClick: ($event) => vue.unref(selectDate)("today")
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(vue.toDisplayString(vue.unref(t2)("el.datepicker.today")), 1)
                      ]),
                      _: 1
                    }, 8, ["onClick"]),
                    vue.createVNode(vue.unref(ElButton), {
                      size: "small",
                      onClick: ($event) => vue.unref(selectDate)("next-month")
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(vue.toDisplayString(vue.unref(t2)("el.datepicker.nextMonth")), 1)
                      ]),
                      _: 1
                    }, 8, ["onClick"])
                  ]),
                  _: 1
                })
              ], 2)) : vue.createCommentVNode("v-if", true)
            ])
          ], 2),
          vue.unref(validatedRange).length === 0 ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("body"))
          }, [
            vue.createVNode(DateTable$1, {
              date: vue.unref(date),
              "selected-day": vue.unref(realSelectedDay),
              onPick: vue.unref(pickDay)
            }, vue.createSlots({
              _: 2
            }, [
              _ctx.$slots["date-cell"] ? {
                name: "date-cell",
                fn: vue.withCtx((data) => [
                  vue.renderSlot(_ctx.$slots, "date-cell", vue.normalizeProps(vue.guardReactiveProps(data)))
                ])
              } : void 0
            ]), 1032, ["date", "selected-day", "onPick"])
          ], 2)) : (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns2).e("body"))
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(validatedRange), (range_, index) => {
              return vue.openBlock(), vue.createBlock(DateTable$1, {
                key: index,
                date: range_[0],
                "selected-day": vue.unref(realSelectedDay),
                range: range_,
                "hide-header": index !== 0,
                onPick: vue.unref(pickDay)
              }, vue.createSlots({
                _: 2
              }, [
                _ctx.$slots["date-cell"] ? {
                  name: "date-cell",
                  fn: vue.withCtx((data) => [
                    vue.renderSlot(_ctx.$slots, "date-cell", vue.normalizeProps(vue.guardReactiveProps(data)))
                  ])
                } : void 0
              ]), 1032, ["date", "selected-day", "range", "hide-header", "onPick"]);
            }), 128))
          ], 2))
        ], 2);
      };
    }
  });
  var Calendar = /* @__PURE__ */ _export_sfc(_sfc_main$20, [["__file", "calendar.vue"]]);
  const ElCalendar = withInstall(Calendar);
  const cardProps = buildProps({
    header: {
      type: String,
      default: ""
    },
    footer: {
      type: String,
      default: ""
    },
    bodyStyle: {
      type: definePropType([String, Object, Array]),
      default: ""
    },
    bodyClass: String,
    shadow: {
      type: String,
      values: ["always", "hover", "never"],
      default: "always"
    }
  });
  const __default__$1q = vue.defineComponent({
    name: "ElCard"
  });
  const _sfc_main$1$ = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1q,
    props: cardProps,
    setup(__props) {
      const ns2 = useNamespace("card");
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns2).b(), vue.unref(ns2).is(`${_ctx.shadow}-shadow`)])
        }, [
          _ctx.$slots.header || _ctx.header ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("header"))
          }, [
            vue.renderSlot(_ctx.$slots, "header", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.header), 1)
            ])
          ], 2)) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass([vue.unref(ns2).e("body"), _ctx.bodyClass]),
            style: vue.normalizeStyle(_ctx.bodyStyle)
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 6),
          _ctx.$slots.footer || _ctx.footer ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns2).e("footer"))
          }, [
            vue.renderSlot(_ctx.$slots, "footer", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.footer), 1)
            ])
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var Card = /* @__PURE__ */ _export_sfc(_sfc_main$1$, [["__file", "card.vue"]]);
  const ElCard = withInstall(Card);
  const carouselProps = buildProps({
    initialIndex: {
      type: Number,
      default: 0
    },
    height: {
      type: String,
      default: ""
    },
    trigger: {
      type: String,
      values: ["hover", "click"],
      default: "hover"
    },
    autoplay: {
      type: Boolean,
      default: true
    },
    interval: {
      type: Number,
      default: 3e3
    },
    indicatorPosition: {
      type: String,
      values: ["", "none", "outside"],
      default: ""
    },
    arrow: {
      type: String,
      values: ["always", "hover", "never"],
      default: "hover"
    },
    type: {
      type: String,
      values: ["", "card"],
      default: ""
    },
    cardScale: {
      type: Number,
      default: 0.83
    },
    loop: {
      type: Boolean,
      default: true
    },
    direction: {
      type: String,
      values: ["horizontal", "vertical"],
      default: "horizontal"
    },
    pauseOnHover: {
      type: Boolean,
      default: true
    },
    motionBlur: Boolean
  });
  const carouselEmits = {
    change: (current, prev) => [current, prev].every(isNumber$2)
  };
  const carouselContextKey = Symbol("carouselContextKey");
  const CAROUSEL_ITEM_NAME = "ElCarouselItem";
  const THROTTLE_TIME = 300;
  const useCarousel = (props2, emit, componentName2) => {
    const {
      children: items,
      addChild: addItem,
      removeChild: removeItem
    } = useOrderedChildren(vue.getCurrentInstance(), CAROUSEL_ITEM_NAME);
    const slots = vue.useSlots();
    const activeIndex = vue.ref(-1);
    const timer = vue.ref(null);
    const hover = vue.ref(false);
    const root2 = vue.ref();
    const containerHeight = vue.ref(0);
    const isItemsTwoLength = vue.ref(true);
    const isFirstCall = vue.ref(true);
    const isTransitioning = vue.ref(false);
    const arrowDisplay = vue.computed(() => props2.arrow !== "never" && !vue.unref(isVertical));
    const hasLabel = vue.computed(() => {
      return items.value.some((item) => item.props.label.toString().length > 0);
    });
    const isCardType = vue.computed(() => props2.type === "card");
    const isVertical = vue.computed(() => props2.direction === "vertical");
    const containerStyle = vue.computed(() => {
      if (props2.height !== "auto") {
        return {
          height: props2.height
        };
      }
      return {
        height: `${containerHeight.value}px`,
        overflow: "hidden"
      };
    });
    const throttledArrowClick = throttle((index) => {
      setActiveItem(index);
    }, THROTTLE_TIME, { trailing: true });
    const throttledIndicatorHover = throttle((index) => {
      handleIndicatorHover(index);
    }, THROTTLE_TIME);
    const isTwoLengthShow = (index) => {
      if (!isItemsTwoLength.value)
        return true;
      return activeIndex.value <= 1 ? index <= 1 : index > 1;
    };
    function pauseTimer() {
      if (timer.value) {
        clearInterval(timer.value);
        timer.value = null;
      }
    }
    function startTimer() {
      if (props2.interval <= 0 || !props2.autoplay || timer.value)
        return;
      timer.value = setInterval(() => playSlides(), props2.interval);
    }
    const playSlides = () => {
      if (!isFirstCall.value) {
        isTransitioning.value = true;
      }
      isFirstCall.value = false;
      if (activeIndex.value < items.value.length - 1) {
        activeIndex.value = activeIndex.value + 1;
      } else if (props2.loop) {
        activeIndex.value = 0;
      } else {
        isTransitioning.value = false;
      }
    };
    function setActiveItem(index) {
      if (!isFirstCall.value) {
        isTransitioning.value = true;
      }
      isFirstCall.value = false;
      if (shared.isString(index)) {
        const filteredItems = items.value.filter((item) => item.props.name === index);
        if (filteredItems.length > 0) {
          index = items.value.indexOf(filteredItems[0]);
        }
      }
      index = Number(index);
      if (Number.isNaN(index) || index !== Math.floor(index)) {
        debugWarn(componentName2, "index must be integer.");
        return;
      }
      const itemCount = items.value.length;
      const oldIndex = activeIndex.value;
      if (index < 0) {
        activeIndex.value = props2.loop ? itemCount - 1 : 0;
      } else if (index >= itemCount) {
        activeIndex.value = props2.loop ? 0 : itemCount - 1;
      } else {
        activeIndex.value = index;
      }
      if (oldIndex === activeIndex.value) {
        resetItemPosition(oldIndex);
      }
      resetTimer();
    }
    function resetItemPosition(oldIndex) {
      items.value.forEach((item, index) => {
        item.translateItem(index, activeIndex.value, oldIndex);
      });
    }
    function itemInStage(item, index) {
      var _a2, _b, _c, _d;
      const _items = vue.unref(items);
      const itemCount = _items.length;
      if (itemCount === 0 || !item.states.inStage)
        return false;
      const nextItemIndex = index + 1;
      const prevItemIndex = index - 1;
      const lastItemIndex = itemCount - 1;
      const isLastItemActive = _items[lastItemIndex].states.active;
      const isFirstItemActive = _items[0].states.active;
      const isNextItemActive = (_b = (_a2 = _items[nextItemIndex]) == null ? void 0 : _a2.states) == null ? void 0 : _b.active;
      const isPrevItemActive = (_d = (_c = _items[prevItemIndex]) == null ? void 0 : _c.states) == null ? void 0 : _d.active;
      if (index === lastItemIndex && isFirstItemActive || isNextItemActive) {
        return "left";
      } else if (index === 0 && isLastItemActive || isPrevItemActive) {
        return "right";
      }
      return false;
    }
    function handleMouseEnter() {
      hover.value = true;
      if (props2.pauseOnHover) {
        pauseTimer();
      }
    }
    function handleMouseLeave() {
      hover.value = false;
      startTimer();
    }
    function handleTransitionEnd() {
      isTransitioning.value = false;
    }
    function handleButtonEnter(arrow2) {
      if (vue.unref(isVertical))
        return;
      items.value.forEach((item, index) => {
        if (arrow2 === itemInStage(item, index)) {
          item.states.hover = true;
        }
      });
    }
    function handleButtonLeave() {
      if (vue.unref(isVertical))
        return;
      items.value.forEach((item) => {
        item.states.hover = false;
      });
    }
    function handleIndicatorClick(index) {
      if (index !== activeIndex.value) {
        if (!isFirstCall.value) {
          isTransitioning.value = true;
        }
      }
      activeIndex.value = index;
    }
    function handleIndicatorHover(index) {
      if (props2.trigger === "hover" && index !== activeIndex.value) {
        activeIndex.value = index;
        if (!isFirstCall.value) {
          isTransitioning.value = true;
        }
      }
    }
    function prev() {
      setActiveItem(activeIndex.value - 1);
    }
    function next() {
      setActiveItem(activeIndex.value + 1);
    }
    function resetTimer() {
      pauseTimer();
      if (!props2.pauseOnHover)
        startTimer();
    }
    function setContainerHeight(height) {
      if (props2.height !== "auto")
        return;
      containerHeight.value = height;
    }
    function PlaceholderItem() {
      var _a2;
      const defaultSlots = (_a2 = slots.default) == null ? void 0 : _a2.call(slots);
      if (!defaultSlots)
        return null;
      const flatSlots = flattedChildren(defaultSlots);
      const normalizeSlots = flatSlots.filter((slot) => {
        return vue.isVNode(slot) && slot.type.name === CAROUSEL_ITEM_NAME;
      });
      if ((normalizeSlots == null ? void 0 : normalizeSlots.length) === 2 && props2.loop && !isCardType.value) {
        isItemsTwoLength.value = true;
        return normalizeSlots;
      }
      isItemsTwoLength.value = false;
      return null;
    }
    vue.watch(() => activeIndex.value, (current, prev2) => {
      resetItemPosition(prev2);
      if (isItemsTwoLength.value) {
        current = current % 2;
        prev2 = prev2 % 2;
      }
      if (prev2 > -1) {
        emit("change", current, prev2);
      }
    });
    vue.watch(() => props2.autoplay, (autoplay) => {
      autoplay ? startTimer() : pauseTimer();
    });
    vue.watch(() => props2.loop, () => {
      setActiveItem(activeIndex.value);
    });
    vue.watch(() => props2.interval, () => {
      resetTimer();
    });
    const resizeObserver = vue.shallowRef();
    vue.onMounted(() => {
      vue.watch(() => items.value, () => {
        if (items.value.length > 0)
          setActiveItem(props2.initialIndex);
      }, {
        immediate: true
      });
      resizeObserver.value = useResizeObserver(root2.value, () => {
        resetItemPosition();
      });
      startTimer();
    });
    vue.onBeforeUnmount(() => {
      pauseTimer();
      if (root2.value && resizeObserver.value)
        resizeObserver.value.stop();
    });
    vue.provide(carouselContextKey, {
      root: root2,
      isCardType,
      isVertical,
      items,
      loop: props2.loop,
      cardScale: props2.cardScale,
      addItem,
      removeItem,
      setActiveItem,
      setContainerHeight
    });
    return {
      root: root2,
      activeIndex,
      arrowDisplay,
      hasLabel,
      hover,
      isCardType,
      isTransitioning,
      items,
      isVertical,
      containerStyle,
      isItemsTwoLength,
      handleButtonEnter,
      handleTransitionEnd,
      handleButtonLeave,
      handleIndicatorClick,
      handleMouseEnter,
      handleMouseLeave,
      setActiveItem,
      prev,
      next,
      PlaceholderItem,
      isTwoLengthShow,
      throttledArrowClick,
      throttledIndicatorHover
    };
  };
  const COMPONENT_NAME$f = "ElCarousel";
  const __default__$1p = vue.defineComponent({
    name: COMPONENT_NAME$f
  });
  const _sfc_main$1_ = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1p,
    props: carouselProps,
    emits: carouselEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const {
        root: root2,
        activeIndex,
        arrowDisplay,
        hasLabel,
        hover,
        isCardType,
        items,
        isVertical,
        containerStyle,
        handleButtonEnter,
        handleButtonLeave,
        isTransitioning,
        handleIndicatorClick,
        handleMouseEnter,
        handleMouseLeave,
        handleTransitionEnd,
        setActiveItem,
        prev,
        next,
        PlaceholderItem,
        isTwoLengthShow,
        throttledArrowClick,
        throttledIndicatorHover
      } = useCarousel(props2, emit, COMPONENT_NAME$f);
      const ns2 = useNamespace("carousel");
      const { t: t2 } = useLocale();
      const carouselClasses = vue.computed(() => {
        const classes = [ns2.b(), ns2.m(props2.direction)];
        if (vue.unref(isCardType)) {
          classes.push(ns2.m("card"));
        }
        return classes;
      });
      const carouselContainer = vue.computed(() => {
        const classes = [ns2.e("container")];
        if (props2.motionBlur && vue.unref(isTransitioning) && items.value.length > 1) {
          classes.push(vue.unref(isVertical) ? `${ns2.namespace.value}-transitioning-vertical` : `${ns2.namespace.value}-transitioning`);
        }
        return classes;
      });
      const indicatorsClasses = vue.computed(() => {
        const classes = [ns2.e("indicators"), ns2.em("indicators", props2.direction)];
        if (vue.unref(hasLabel)) {
          classes.push(ns2.em("indicators", "labels"));
        }
        if (props2.indicatorPosition === "outside") {
          classes.push(ns2.em("indicators", "outside"));
        }
        if (vue.unref(isVertical)) {
          classes.push(ns2.em("indicators", "right"));
        }
        return classes;
      });
      expose({
        activeIndex,
        setActiveItem,
        prev,
        next
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "root",
          ref: root2,
          class: vue.normalizeClass(vue.unref(carouselClasses)),
          onMouseenter: vue.withModifiers(vue.unref(handleMouseEnter), ["stop"]),
          onMouseleave: vue.withModifiers(vue.unref(handleMouseLeave), ["stop"])
        }, [
          vue.unref(arrowDisplay) ? (vue.openBlock(), vue.createBlock(vue.Transition, {
            key: 0,
            name: "carousel-arrow-left",
            persisted: ""
          }, {
            default: vue.withCtx(() => [
              vue.withDirectives(vue.createElementVNode("button", {
                type: "button",
                class: vue.normalizeClass([vue.unref(ns2).e("arrow"), vue.unref(ns2).em("arrow", "left")]),
                "aria-label": vue.unref(t2)("el.carousel.leftArrow"),
                onMouseenter: ($event) => vue.unref(handleButtonEnter)("left"),
                onMouseleave: vue.unref(handleButtonLeave),
                onClick: vue.withModifiers(($event) => vue.unref(throttledArrowClick)(vue.unref(activeIndex) - 1), ["stop"])
              }, [
                vue.createVNode(vue.unref(ElIcon), null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(arrow_left_default))
                  ]),
                  _: 1
                })
              ], 42, ["aria-label", "onMouseenter", "onMouseleave", "onClick"]), [
                [
                  vue.vShow,
                  (_ctx.arrow === "always" || vue.unref(hover)) && (props2.loop || vue.unref(activeIndex) > 0)
                ]
              ])
            ]),
            _: 1
          })) : vue.createCommentVNode("v-if", true),
          vue.unref(arrowDisplay) ? (vue.openBlock(), vue.createBlock(vue.Transition, {
            key: 1,
            name: "carousel-arrow-right",
            persisted: ""
          }, {
            default: vue.withCtx(() => [
              vue.withDirectives(vue.createElementVNode("button", {
                type: "button",
                class: vue.normalizeClass([vue.unref(ns2).e("arrow"), vue.unref(ns2).em("arrow", "right")]),
                "aria-label": vue.unref(t2)("el.carousel.rightArrow"),
                onMouseenter: ($event) => vue.unref(handleButtonEnter)("right"),
                onMouseleave: vue.unref(handleButtonLeave),
                onClick: vue.withModifiers(($event) => vue.unref(throttledArrowClick)(vue.unref(activeIndex) + 1), ["stop"])
              }, [
                vue.createVNode(vue.unref(ElIcon), null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(arrow_right_default))
                  ]),
                  _: 1
                })
              ], 42, ["aria-label", "onMouseenter", "onMouseleave", "onClick"]), [
                [
                  vue.vShow,
                  (_ctx.arrow === "always" || vue.unref(hover)) && (props2.loop || vue.unref(activeIndex) < vue.unref(items).length - 1)
                ]
              ])
            ]),
            _: 1
          })) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(carouselContainer)),
            style: vue.normalizeStyle(vue.unref(containerStyle)),
            onTransitionend: vue.unref(handleTransitionEnd)
          }, [
            vue.createVNode(vue.unref(PlaceholderItem)),
            vue.renderSlot(_ctx.$slots, "default")
          ], 46, ["onTransitionend"]),
          _ctx.indicatorPosition !== "none" ? (vue.openBlock(), vue.createElementBlock("ul", {
            key: 2,
            class: vue.normalizeClass(vue.unref(indicatorsClasses))
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(items), (item, index) => {
              return vue.withDirectives((vue.openBlock(), vue.createElementBlock("li", {
                key: index,
                class: vue.normalizeClass([
                  vue.unref(ns2).e("indicator"),
                  vue.unref(ns2).em("indicator", _ctx.direction),
                  vue.unref(ns2).is("active", index === vue.unref(activeIndex))
                ]),
                onMouseenter: ($event) => vue.unref(throttledIndicatorHover)(index),
                onClick: vue.withModifiers(($event) => vue.unref(handleIndicatorClick)(index), ["stop"])
              }, [
                vue.createElementVNode("button", {
                  class: vue.normalizeClass(vue.unref(ns2).e("button")),
                  "aria-label": vue.unref(t2)("el.carousel.indicator", { index: index + 1 })
                }, [
                  vue.unref(hasLabel) ? (vue.openBlock(), vue.createElementBlock("span", { key: 0 }, vue.toDisplayString(item.props.label), 1)) : vue.createCommentVNode("v-if", true)
                ], 10, ["aria-label"])
              ], 42, ["onMouseenter", "onClick"])), [
                [vue.vShow, vue.unref(isTwoLengthShow)(index)]
              ]);
            }), 128))
          ], 2)) : vue.createCommentVNode("v-if", true),
          props2.motionBlur ? (vue.openBlock(), vue.createElementBlock("svg", {
            key: 3,
            xmlns: "http://www.w3.org/2000/svg",
            version: "1.1",
            style: { "display": "none" }
          }, [
            vue.createElementVNode("defs", null, [
              vue.createElementVNode("filter", { id: "elCarouselHorizontal" }, [
                vue.createElementVNode("feGaussianBlur", {
                  in: "SourceGraphic",
                  stdDeviation: "12,0"
                })
              ]),
              vue.createElementVNode("filter", { id: "elCarouselVertical" }, [
                vue.createElementVNode("feGaussianBlur", {
                  in: "SourceGraphic",
                  stdDeviation: "0,10"
                })
              ])
            ])
          ])) : vue.createCommentVNode("v-if", true)
        ], 42, ["onMouseenter", "onMouseleave"]);
      };
    }
  });
  var Carousel = /* @__PURE__ */ _export_sfc(_sfc_main$1_, [["__file", "carousel.vue"]]);
  const carouselItemProps = buildProps({
    name: { type: String, default: "" },
    label: {
      type: [String, Number],
      default: ""
    }
  });
  const useCarouselItem = (props2) => {
    const carouselContext = vue.inject(carouselContextKey);
    const instance = vue.getCurrentInstance();
    if (!carouselContext) {
      debugWarn(CAROUSEL_ITEM_NAME, "usage: <el-carousel></el-carousel-item></el-carousel>");
    }
    if (!instance) {
      debugWarn(CAROUSEL_ITEM_NAME, "compositional hook can only be invoked inside setups");
    }
    const carouselItemRef = vue.ref();
    const hover = vue.ref(false);
    const translate2 = vue.ref(0);
    const scale = vue.ref(1);
    const active = vue.ref(false);
    const ready = vue.ref(false);
    const inStage = vue.ref(false);
    const animating = vue.ref(false);
    const { isCardType, isVertical, cardScale } = carouselContext;
    function processIndex(index, activeIndex, length) {
      const lastItemIndex = length - 1;
      const prevItemIndex = activeIndex - 1;
      const nextItemIndex = activeIndex + 1;
      const halfItemIndex = length / 2;
      if (activeIndex === 0 && index === lastItemIndex) {
        return -1;
      } else if (activeIndex === lastItemIndex && index === 0) {
        return length;
      } else if (index < prevItemIndex && activeIndex - index >= halfItemIndex) {
        return length + 1;
      } else if (index > nextItemIndex && index - activeIndex >= halfItemIndex) {
        return -2;
      }
      return index;
    }
    function calcCardTranslate(index, activeIndex) {
      var _a2, _b;
      const parentWidth = vue.unref(isVertical) ? ((_a2 = carouselContext.root.value) == null ? void 0 : _a2.offsetHeight) || 0 : ((_b = carouselContext.root.value) == null ? void 0 : _b.offsetWidth) || 0;
      if (inStage.value) {
        return parentWidth * ((2 - cardScale) * (index - activeIndex) + 1) / 4;
      } else if (index < activeIndex) {
        return -(1 + cardScale) * parentWidth / 4;
      } else {
        return (3 + cardScale) * parentWidth / 4;
      }
    }
    function calcTranslate(index, activeIndex, isVertical2) {
      const rootEl = carouselContext.root.value;
      if (!rootEl)
        return 0;
      const distance = (isVertical2 ? rootEl.offsetHeight : rootEl.offsetWidth) || 0;
      return distance * (index - activeIndex);
    }
    const translateItem = (index, activeIndex, oldIndex) => {
      var _a2;
      const _isCardType = vue.unref(isCardType);
      const carouselItemLength = (_a2 = carouselContext.items.value.length) != null ? _a2 : Number.NaN;
      const isActive = index === activeIndex;
      if (!_isCardType && !isUndefined(oldIndex)) {
        animating.value = isActive || index === oldIndex;
      }
      if (!isActive && carouselItemLength > 2 && carouselContext.loop) {
        index = processIndex(index, activeIndex, carouselItemLength);
      }
      const _isVertical = vue.unref(isVertical);
      active.value = isActive;
      if (_isCardType) {
        inStage.value = Math.round(Math.abs(index - activeIndex)) <= 1;
        translate2.value = calcCardTranslate(index, activeIndex);
        scale.value = vue.unref(active) ? 1 : cardScale;
      } else {
        translate2.value = calcTranslate(index, activeIndex, _isVertical);
      }
      ready.value = true;
      if (isActive && carouselItemRef.value) {
        carouselContext.setContainerHeight(carouselItemRef.value.offsetHeight);
      }
    };
    function handleItemClick() {
      if (carouselContext && vue.unref(isCardType)) {
        const index = carouselContext.items.value.findIndex(({ uid: uid2 }) => uid2 === instance.uid);
        carouselContext.setActiveItem(index);
      }
    }
    vue.onMounted(() => {
      carouselContext.addItem({
        props: props2,
        states: vue.reactive({
          hover,
          translate: translate2,
          scale,
          active,
          ready,
          inStage,
          animating
        }),
        uid: instance.uid,
        translateItem
      });
    });
    vue.onUnmounted(() => {
      carouselContext.removeItem(instance.uid);
    });
    return {
      carouselItemRef,
      active,
      animating,
      hover,
      inStage,
      isVertical,
      translate: translate2,
      isCardType,
      scale,
      ready,
      handleItemClick
    };
  };
  const __default__$1o = vue.defineComponent({
    name: CAROUSEL_ITEM_NAME
  });
  const _sfc_main$1Z = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1o,
    props: carouselItemProps,
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("carousel");
      const {
        carouselItemRef,
        active,
        animating,
        hover,
        inStage,
        isVertical,
        translate: translate2,
        isCardType,
        scale,
        ready,
        handleItemClick
      } = useCarouselItem(props2);
      const itemKls = vue.computed(() => [
        ns2.e("item"),
        ns2.is("active", active.value),
        ns2.is("in-stage", inStage.value),
        ns2.is("hover", hover.value),
        ns2.is("animating", animating.value),
        {
          [ns2.em("item", "card")]: isCardType.value,
          [ns2.em("item", "card-vertical")]: isCardType.value && isVertical.value
        }
      ]);
      const itemStyle = vue.computed(() => {
        const translateType = `translate${vue.unref(isVertical) ? "Y" : "X"}`;
        const _translate = `${translateType}(${vue.unref(translate2)}px)`;
        const _scale = `scale(${vue.unref(scale)})`;
        const transform = [_translate, _scale].join(" ");
        return {
          transform
        };
      });
      return (_ctx, _cache) => {
        return vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "carouselItemRef",
          ref: carouselItemRef,
          class: vue.normalizeClass(vue.unref(itemKls)),
          style: vue.normalizeStyle(vue.unref(itemStyle)),
          onClick: vue.unref(handleItemClick)
        }, [
          vue.unref(isCardType) ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("mask"))
          }, null, 2)), [
            [vue.vShow, !vue.unref(active)]
          ]) : vue.createCommentVNode("v-if", true),
          vue.renderSlot(_ctx.$slots, "default")
        ], 14, ["onClick"])), [
          [vue.vShow, vue.unref(ready)]
        ]);
      };
    }
  });
  var CarouselItem = /* @__PURE__ */ _export_sfc(_sfc_main$1Z, [["__file", "carousel-item.vue"]]);
  const ElCarousel = withInstall(Carousel, {
    CarouselItem
  });
  const ElCarouselItem = withNoopInstall(CarouselItem);
  const checkboxProps = {
    modelValue: {
      type: [Number, String, Boolean],
      default: void 0
    },
    label: {
      type: [String, Boolean, Number, Object],
      default: void 0
    },
    value: {
      type: [String, Boolean, Number, Object],
      default: void 0
    },
    indeterminate: Boolean,
    disabled: Boolean,
    checked: Boolean,
    name: {
      type: String,
      default: void 0
    },
    trueValue: {
      type: [String, Number],
      default: void 0
    },
    falseValue: {
      type: [String, Number],
      default: void 0
    },
    trueLabel: {
      type: [String, Number],
      default: void 0
    },
    falseLabel: {
      type: [String, Number],
      default: void 0
    },
    id: {
      type: String,
      default: void 0
    },
    border: Boolean,
    size: useSizeProp,
    tabindex: [String, Number],
    validateEvent: {
      type: Boolean,
      default: true
    },
    ...useAriaProps(["ariaControls"])
  };
  const checkboxEmits = {
    [UPDATE_MODEL_EVENT]: (val) => shared.isString(val) || isNumber$2(val) || isBoolean$1(val),
    change: (val) => shared.isString(val) || isNumber$2(val) || isBoolean$1(val)
  };
  const checkboxGroupContextKey = Symbol("checkboxGroupContextKey");
  const useCheckboxDisabled = ({
    model,
    isChecked
  }) => {
    const checkboxGroup = vue.inject(checkboxGroupContextKey, void 0);
    const isLimitDisabled = vue.computed(() => {
      var _a2, _b;
      const max2 = (_a2 = checkboxGroup == null ? void 0 : checkboxGroup.max) == null ? void 0 : _a2.value;
      const min2 = (_b = checkboxGroup == null ? void 0 : checkboxGroup.min) == null ? void 0 : _b.value;
      return !isUndefined(max2) && model.value.length >= max2 && !isChecked.value || !isUndefined(min2) && model.value.length <= min2 && isChecked.value;
    });
    const isDisabled = useFormDisabled(vue.computed(() => (checkboxGroup == null ? void 0 : checkboxGroup.disabled.value) || isLimitDisabled.value));
    return {
      isDisabled,
      isLimitDisabled
    };
  };
  const useCheckboxEvent = (props2, {
    model,
    isLimitExceeded,
    hasOwnLabel,
    isDisabled,
    isLabeledByFormItem
  }) => {
    const checkboxGroup = vue.inject(checkboxGroupContextKey, void 0);
    const { formItem } = useFormItem();
    const { emit } = vue.getCurrentInstance();
    function getLabeledValue(value) {
      var _a2, _b, _c, _d;
      return [true, props2.trueValue, props2.trueLabel].includes(value) ? (_b = (_a2 = props2.trueValue) != null ? _a2 : props2.trueLabel) != null ? _b : true : (_d = (_c = props2.falseValue) != null ? _c : props2.falseLabel) != null ? _d : false;
    }
    function emitChangeEvent(checked, e) {
      emit("change", getLabeledValue(checked), e);
    }
    function handleChange(e) {
      if (isLimitExceeded.value)
        return;
      const target = e.target;
      emit("change", getLabeledValue(target.checked), e);
    }
    async function onClickRoot(e) {
      if (isLimitExceeded.value)
        return;
      if (!hasOwnLabel.value && !isDisabled.value && isLabeledByFormItem.value) {
        const eventTargets = e.composedPath();
        const hasLabel = eventTargets.some((item) => item.tagName === "LABEL");
        if (!hasLabel) {
          model.value = getLabeledValue([false, props2.falseValue, props2.falseLabel].includes(model.value));
          await vue.nextTick();
          emitChangeEvent(model.value, e);
        }
      }
    }
    const validateEvent = vue.computed(() => (checkboxGroup == null ? void 0 : checkboxGroup.validateEvent) || props2.validateEvent);
    vue.watch(() => props2.modelValue, () => {
      if (validateEvent.value) {
        formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn(err));
      }
    });
    return {
      handleChange,
      onClickRoot
    };
  };
  const useCheckboxModel = (props2) => {
    const selfModel = vue.ref(false);
    const { emit } = vue.getCurrentInstance();
    const checkboxGroup = vue.inject(checkboxGroupContextKey, void 0);
    const isGroup = vue.computed(() => isUndefined(checkboxGroup) === false);
    const isLimitExceeded = vue.ref(false);
    const model = vue.computed({
      get() {
        var _a2, _b;
        return isGroup.value ? (_a2 = checkboxGroup == null ? void 0 : checkboxGroup.modelValue) == null ? void 0 : _a2.value : (_b = props2.modelValue) != null ? _b : selfModel.value;
      },
      set(val) {
        var _a2, _b;
        if (isGroup.value && shared.isArray(val)) {
          isLimitExceeded.value = ((_a2 = checkboxGroup == null ? void 0 : checkboxGroup.max) == null ? void 0 : _a2.value) !== void 0 && val.length > (checkboxGroup == null ? void 0 : checkboxGroup.max.value) && val.length > model.value.length;
          isLimitExceeded.value === false && ((_b = checkboxGroup == null ? void 0 : checkboxGroup.changeEvent) == null ? void 0 : _b.call(checkboxGroup, val));
        } else {
          emit(UPDATE_MODEL_EVENT, val);
          selfModel.value = val;
        }
      }
    });
    return {
      model,
      isGroup,
      isLimitExceeded
    };
  };
  const useCheckboxStatus = (props2, slots, { model }) => {
    const checkboxGroup = vue.inject(checkboxGroupContextKey, void 0);
    const isFocused = vue.ref(false);
    const actualValue = vue.computed(() => {
      if (!isPropAbsent(props2.value)) {
        return props2.value;
      }
      return props2.label;
    });
    const isChecked = vue.computed(() => {
      const value = model.value;
      if (isBoolean$1(value)) {
        return value;
      } else if (shared.isArray(value)) {
        if (shared.isObject(actualValue.value)) {
          return value.map(vue.toRaw).some((o2) => isEqual$1(o2, actualValue.value));
        } else {
          return value.map(vue.toRaw).includes(actualValue.value);
        }
      } else if (value !== null && value !== void 0) {
        return value === props2.trueValue || value === props2.trueLabel;
      } else {
        return !!value;
      }
    });
    const checkboxButtonSize = useFormSize(vue.computed(() => {
      var _a2;
      return (_a2 = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a2.value;
    }), {
      prop: true
    });
    const checkboxSize = useFormSize(vue.computed(() => {
      var _a2;
      return (_a2 = checkboxGroup == null ? void 0 : checkboxGroup.size) == null ? void 0 : _a2.value;
    }));
    const hasOwnLabel = vue.computed(() => {
      return !!slots.default || !isPropAbsent(actualValue.value);
    });
    return {
      checkboxButtonSize,
      isChecked,
      isFocused,
      checkboxSize,
      hasOwnLabel,
      actualValue
    };
  };
  const useCheckbox = (props2, slots) => {
    const { formItem: elFormItem } = useFormItem();
    const { model, isGroup, isLimitExceeded } = useCheckboxModel(props2);
    const {
      isFocused,
      isChecked,
      checkboxButtonSize,
      checkboxSize,
      hasOwnLabel,
      actualValue
    } = useCheckboxStatus(props2, slots, { model });
    const { isDisabled } = useCheckboxDisabled({ model, isChecked });
    const { inputId, isLabeledByFormItem } = useFormItemInputId(props2, {
      formItemContext: elFormItem,
      disableIdGeneration: hasOwnLabel,
      disableIdManagement: isGroup
    });
    const { handleChange, onClickRoot } = useCheckboxEvent(props2, {
      model,
      isLimitExceeded,
      hasOwnLabel,
      isDisabled,
      isLabeledByFormItem
    });
    const setStoreValue = () => {
      function addToStore() {
        var _a2, _b;
        if (shared.isArray(model.value) && !model.value.includes(actualValue.value)) {
          model.value.push(actualValue.value);
        } else {
          model.value = (_b = (_a2 = props2.trueValue) != null ? _a2 : props2.trueLabel) != null ? _b : true;
        }
      }
      props2.checked && addToStore();
    };
    setStoreValue();
    useDeprecated({
      from: "label act as value",
      replacement: "value",
      version: "3.0.0",
      scope: "el-checkbox",
      ref: "https://element-plus.org/en-US/component/checkbox.html"
    }, vue.computed(() => isGroup.value && isPropAbsent(props2.value)));
    useDeprecated({
      from: "true-label",
      replacement: "true-value",
      version: "3.0.0",
      scope: "el-checkbox",
      ref: "https://element-plus.org/en-US/component/checkbox.html"
    }, vue.computed(() => !!props2.trueLabel));
    useDeprecated({
      from: "false-label",
      replacement: "false-value",
      version: "3.0.0",
      scope: "el-checkbox",
      ref: "https://element-plus.org/en-US/component/checkbox.html"
    }, vue.computed(() => !!props2.falseLabel));
    return {
      inputId,
      isLabeledByFormItem,
      isChecked,
      isDisabled,
      isFocused,
      checkboxButtonSize,
      checkboxSize,
      hasOwnLabel,
      model,
      actualValue,
      handleChange,
      onClickRoot
    };
  };
  const __default__$1n = vue.defineComponent({
    name: "ElCheckbox"
  });
  const _sfc_main$1Y = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1n,
    props: checkboxProps,
    emits: checkboxEmits,
    setup(__props) {
      const props2 = __props;
      const slots = vue.useSlots();
      const {
        inputId,
        isLabeledByFormItem,
        isChecked,
        isDisabled,
        isFocused,
        checkboxSize,
        hasOwnLabel,
        model,
        actualValue,
        handleChange,
        onClickRoot
      } = useCheckbox(props2, slots);
      const ns2 = useNamespace("checkbox");
      const compKls = vue.computed(() => {
        return [
          ns2.b(),
          ns2.m(checkboxSize.value),
          ns2.is("disabled", isDisabled.value),
          ns2.is("bordered", props2.border),
          ns2.is("checked", isChecked.value)
        ];
      });
      const spanKls = vue.computed(() => {
        return [
          ns2.e("input"),
          ns2.is("disabled", isDisabled.value),
          ns2.is("checked", isChecked.value),
          ns2.is("indeterminate", props2.indeterminate),
          ns2.is("focus", isFocused.value)
        ];
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(!vue.unref(hasOwnLabel) && vue.unref(isLabeledByFormItem) ? "span" : "label"), {
          class: vue.normalizeClass(vue.unref(compKls)),
          "aria-controls": _ctx.indeterminate ? _ctx.ariaControls : null,
          onClick: vue.unref(onClickRoot)
        }, {
          default: vue.withCtx(() => {
            var _a2, _b, _c, _d;
            return [
              vue.createElementVNode("span", {
                class: vue.normalizeClass(vue.unref(spanKls))
              }, [
                _ctx.trueValue || _ctx.falseValue || _ctx.trueLabel || _ctx.falseLabel ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
                  key: 0,
                  id: vue.unref(inputId),
                  "onUpdate:modelValue": ($event) => vue.isRef(model) ? model.value = $event : null,
                  class: vue.normalizeClass(vue.unref(ns2).e("original")),
                  type: "checkbox",
                  indeterminate: _ctx.indeterminate,
                  name: _ctx.name,
                  tabindex: _ctx.tabindex,
                  disabled: vue.unref(isDisabled),
                  "true-value": (_b = (_a2 = _ctx.trueValue) != null ? _a2 : _ctx.trueLabel) != null ? _b : true,
                  "false-value": (_d = (_c = _ctx.falseValue) != null ? _c : _ctx.falseLabel) != null ? _d : false,
                  onChange: vue.unref(handleChange),
                  onFocus: ($event) => isFocused.value = true,
                  onBlur: ($event) => isFocused.value = false,
                  onClick: vue.withModifiers(() => {
                  }, ["stop"])
                }, null, 42, ["id", "onUpdate:modelValue", "indeterminate", "name", "tabindex", "disabled", "true-value", "false-value", "onChange", "onFocus", "onBlur", "onClick"])), [
                  [vue.vModelCheckbox, vue.unref(model)]
                ]) : vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
                  key: 1,
                  id: vue.unref(inputId),
                  "onUpdate:modelValue": ($event) => vue.isRef(model) ? model.value = $event : null,
                  class: vue.normalizeClass(vue.unref(ns2).e("original")),
                  type: "checkbox",
                  indeterminate: _ctx.indeterminate,
                  disabled: vue.unref(isDisabled),
                  value: vue.unref(actualValue),
                  name: _ctx.name,
                  tabindex: _ctx.tabindex,
                  onChange: vue.unref(handleChange),
                  onFocus: ($event) => isFocused.value = true,
                  onBlur: ($event) => isFocused.value = false,
                  onClick: vue.withModifiers(() => {
                  }, ["stop"])
                }, null, 42, ["id", "onUpdate:modelValue", "indeterminate", "disabled", "value", "name", "tabindex", "onChange", "onFocus", "onBlur", "onClick"])), [
                  [vue.vModelCheckbox, vue.unref(model)]
                ]),
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(vue.unref(ns2).e("inner"))
                }, null, 2)
              ], 2),
              vue.unref(hasOwnLabel) ? (vue.openBlock(), vue.createElementBlock("span", {
                key: 0,
                class: vue.normalizeClass(vue.unref(ns2).e("label"))
              }, [
                vue.renderSlot(_ctx.$slots, "default"),
                !_ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                  vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
                ], 64)) : vue.createCommentVNode("v-if", true)
              ], 2)) : vue.createCommentVNode("v-if", true)
            ];
          }),
          _: 3
        }, 8, ["class", "aria-controls", "onClick"]);
      };
    }
  });
  var Checkbox = /* @__PURE__ */ _export_sfc(_sfc_main$1Y, [["__file", "checkbox.vue"]]);
  const __default__$1m = vue.defineComponent({
    name: "ElCheckboxButton"
  });
  const _sfc_main$1X = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1m,
    props: checkboxProps,
    emits: checkboxEmits,
    setup(__props) {
      const props2 = __props;
      const slots = vue.useSlots();
      const {
        isFocused,
        isChecked,
        isDisabled,
        checkboxButtonSize,
        model,
        actualValue,
        handleChange
      } = useCheckbox(props2, slots);
      const checkboxGroup = vue.inject(checkboxGroupContextKey, void 0);
      const ns2 = useNamespace("checkbox");
      const activeStyle = vue.computed(() => {
        var _a2, _b, _c, _d;
        const fillValue = (_b = (_a2 = checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a2.value) != null ? _b : "";
        return {
          backgroundColor: fillValue,
          borderColor: fillValue,
          color: (_d = (_c = checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) != null ? _d : "",
          boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : void 0
        };
      });
      const labelKls = vue.computed(() => {
        return [
          ns2.b("button"),
          ns2.bm("button", checkboxButtonSize.value),
          ns2.is("disabled", isDisabled.value),
          ns2.is("checked", isChecked.value),
          ns2.is("focus", isFocused.value)
        ];
      });
      return (_ctx, _cache) => {
        var _a2, _b, _c, _d;
        return vue.openBlock(), vue.createElementBlock("label", {
          class: vue.normalizeClass(vue.unref(labelKls))
        }, [
          _ctx.trueValue || _ctx.falseValue || _ctx.trueLabel || _ctx.falseLabel ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
            key: 0,
            "onUpdate:modelValue": ($event) => vue.isRef(model) ? model.value = $event : null,
            class: vue.normalizeClass(vue.unref(ns2).be("button", "original")),
            type: "checkbox",
            name: _ctx.name,
            tabindex: _ctx.tabindex,
            disabled: vue.unref(isDisabled),
            "true-value": (_b = (_a2 = _ctx.trueValue) != null ? _a2 : _ctx.trueLabel) != null ? _b : true,
            "false-value": (_d = (_c = _ctx.falseValue) != null ? _c : _ctx.falseLabel) != null ? _d : false,
            onChange: vue.unref(handleChange),
            onFocus: ($event) => isFocused.value = true,
            onBlur: ($event) => isFocused.value = false,
            onClick: vue.withModifiers(() => {
            }, ["stop"])
          }, null, 42, ["onUpdate:modelValue", "name", "tabindex", "disabled", "true-value", "false-value", "onChange", "onFocus", "onBlur", "onClick"])), [
            [vue.vModelCheckbox, vue.unref(model)]
          ]) : vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
            key: 1,
            "onUpdate:modelValue": ($event) => vue.isRef(model) ? model.value = $event : null,
            class: vue.normalizeClass(vue.unref(ns2).be("button", "original")),
            type: "checkbox",
            name: _ctx.name,
            tabindex: _ctx.tabindex,
            disabled: vue.unref(isDisabled),
            value: vue.unref(actualValue),
            onChange: vue.unref(handleChange),
            onFocus: ($event) => isFocused.value = true,
            onBlur: ($event) => isFocused.value = false,
            onClick: vue.withModifiers(() => {
            }, ["stop"])
          }, null, 42, ["onUpdate:modelValue", "name", "tabindex", "disabled", "value", "onChange", "onFocus", "onBlur", "onClick"])), [
            [vue.vModelCheckbox, vue.unref(model)]
          ]),
          _ctx.$slots.default || _ctx.label ? (vue.openBlock(), vue.createElementBlock("span", {
            key: 2,
            class: vue.normalizeClass(vue.unref(ns2).be("button", "inner")),
            style: vue.normalizeStyle(vue.unref(isChecked) ? vue.unref(activeStyle) : void 0)
          }, [
            vue.renderSlot(_ctx.$slots, "default", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
            ])
          ], 6)) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var CheckboxButton = /* @__PURE__ */ _export_sfc(_sfc_main$1X, [["__file", "checkbox-button.vue"]]);
  const checkboxGroupProps = buildProps({
    modelValue: {
      type: definePropType(Array),
      default: () => []
    },
    disabled: Boolean,
    min: Number,
    max: Number,
    size: useSizeProp,
    fill: String,
    textColor: String,
    tag: {
      type: String,
      default: "div"
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    ...useAriaProps(["ariaLabel"])
  });
  const checkboxGroupEmits = {
    [UPDATE_MODEL_EVENT]: (val) => shared.isArray(val),
    change: (val) => shared.isArray(val)
  };
  const __default__$1l = vue.defineComponent({
    name: "ElCheckboxGroup"
  });
  const _sfc_main$1W = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1l,
    props: checkboxGroupProps,
    emits: checkboxGroupEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("checkbox");
      const { formItem } = useFormItem();
      const { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props2, {
        formItemContext: formItem
      });
      const changeEvent = async (value) => {
        emit(UPDATE_MODEL_EVENT, value);
        await vue.nextTick();
        emit("change", value);
      };
      const modelValue = vue.computed({
        get() {
          return props2.modelValue;
        },
        set(val) {
          changeEvent(val);
        }
      });
      vue.provide(checkboxGroupContextKey, {
        ...pick(vue.toRefs(props2), [
          "size",
          "min",
          "max",
          "disabled",
          "validateEvent",
          "fill",
          "textColor"
        ]),
        modelValue,
        changeEvent
      });
      vue.watch(() => props2.modelValue, () => {
        if (props2.validateEvent) {
          formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn(err));
        }
      });
      return (_ctx, _cache) => {
        var _a2;
        return vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tag), {
          id: vue.unref(groupId),
          class: vue.normalizeClass(vue.unref(ns2).b("group")),
          role: "group",
          "aria-label": !vue.unref(isLabeledByFormItem) ? _ctx.ariaLabel || "checkbox-group" : void 0,
          "aria-labelledby": vue.unref(isLabeledByFormItem) ? (_a2 = vue.unref(formItem)) == null ? void 0 : _a2.labelId : void 0
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["id", "class", "aria-label", "aria-labelledby"]);
      };
    }
  });
  var CheckboxGroup = /* @__PURE__ */ _export_sfc(_sfc_main$1W, [["__file", "checkbox-group.vue"]]);
  const ElCheckbox = withInstall(Checkbox, {
    CheckboxButton,
    CheckboxGroup
  });
  const ElCheckboxButton = withNoopInstall(CheckboxButton);
  const ElCheckboxGroup$1 = withNoopInstall(CheckboxGroup);
  const radioPropsBase = buildProps({
    modelValue: {
      type: [String, Number, Boolean],
      default: void 0
    },
    size: useSizeProp,
    disabled: Boolean,
    label: {
      type: [String, Number, Boolean],
      default: void 0
    },
    value: {
      type: [String, Number, Boolean],
      default: void 0
    },
    name: {
      type: String,
      default: void 0
    }
  });
  const radioProps = buildProps({
    ...radioPropsBase,
    border: Boolean
  });
  const radioEmits = {
    [UPDATE_MODEL_EVENT]: (val) => shared.isString(val) || isNumber$2(val) || isBoolean$1(val),
    [CHANGE_EVENT]: (val) => shared.isString(val) || isNumber$2(val) || isBoolean$1(val)
  };
  const radioGroupKey = Symbol("radioGroupKey");
  const useRadio = (props2, emit) => {
    const radioRef = vue.ref();
    const radioGroup = vue.inject(radioGroupKey, void 0);
    const isGroup = vue.computed(() => !!radioGroup);
    const actualValue = vue.computed(() => {
      if (!isPropAbsent(props2.value)) {
        return props2.value;
      }
      return props2.label;
    });
    const modelValue = vue.computed({
      get() {
        return isGroup.value ? radioGroup.modelValue : props2.modelValue;
      },
      set(val) {
        if (isGroup.value) {
          radioGroup.changeEvent(val);
        } else {
          emit && emit(UPDATE_MODEL_EVENT, val);
        }
        radioRef.value.checked = props2.modelValue === actualValue.value;
      }
    });
    const size = useFormSize(vue.computed(() => radioGroup == null ? void 0 : radioGroup.size));
    const disabled = useFormDisabled(vue.computed(() => radioGroup == null ? void 0 : radioGroup.disabled));
    const focus = vue.ref(false);
    const tabIndex = vue.computed(() => {
      return disabled.value || isGroup.value && modelValue.value !== actualValue.value ? -1 : 0;
    });
    useDeprecated({
      from: "label act as value",
      replacement: "value",
      version: "3.0.0",
      scope: "el-radio",
      ref: "https://element-plus.org/en-US/component/radio.html"
    }, vue.computed(() => isGroup.value && isPropAbsent(props2.value)));
    return {
      radioRef,
      isGroup,
      radioGroup,
      focus,
      size,
      disabled,
      tabIndex,
      modelValue,
      actualValue
    };
  };
  const __default__$1k = vue.defineComponent({
    name: "ElRadio"
  });
  const _sfc_main$1V = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1k,
    props: radioProps,
    emits: radioEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("radio");
      const { radioRef, radioGroup, focus, size, disabled, modelValue, actualValue } = useRadio(props2, emit);
      function handleChange() {
        vue.nextTick(() => emit("change", modelValue.value));
      }
      return (_ctx, _cache) => {
        var _a2;
        return vue.openBlock(), vue.createElementBlock("label", {
          class: vue.normalizeClass([
            vue.unref(ns2).b(),
            vue.unref(ns2).is("disabled", vue.unref(disabled)),
            vue.unref(ns2).is("focus", vue.unref(focus)),
            vue.unref(ns2).is("bordered", _ctx.border),
            vue.unref(ns2).is("checked", vue.unref(modelValue) === vue.unref(actualValue)),
            vue.unref(ns2).m(vue.unref(size))
          ])
        }, [
          vue.createElementVNode("span", {
            class: vue.normalizeClass([
              vue.unref(ns2).e("input"),
              vue.unref(ns2).is("disabled", vue.unref(disabled)),
              vue.unref(ns2).is("checked", vue.unref(modelValue) === vue.unref(actualValue))
            ])
          }, [
            vue.withDirectives(vue.createElementVNode("input", {
              ref_key: "radioRef",
              ref: radioRef,
              "onUpdate:modelValue": ($event) => vue.isRef(modelValue) ? modelValue.value = $event : null,
              class: vue.normalizeClass(vue.unref(ns2).e("original")),
              value: vue.unref(actualValue),
              name: _ctx.name || ((_a2 = vue.unref(radioGroup)) == null ? void 0 : _a2.name),
              disabled: vue.unref(disabled),
              checked: vue.unref(modelValue) === vue.unref(actualValue),
              type: "radio",
              onFocus: ($event) => focus.value = true,
              onBlur: ($event) => focus.value = false,
              onChange: handleChange,
              onClick: vue.withModifiers(() => {
              }, ["stop"])
            }, null, 42, ["onUpdate:modelValue", "value", "name", "disabled", "checked", "onFocus", "onBlur", "onClick"]), [
              [vue.vModelRadio, vue.unref(modelValue)]
            ]),
            vue.createElementVNode("span", {
              class: vue.normalizeClass(vue.unref(ns2).e("inner"))
            }, null, 2)
          ], 2),
          vue.createElementVNode("span", {
            class: vue.normalizeClass(vue.unref(ns2).e("label")),
            onKeydown: vue.withModifiers(() => {
            }, ["stop"])
          }, [
            vue.renderSlot(_ctx.$slots, "default", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
            ])
          ], 42, ["onKeydown"])
        ], 2);
      };
    }
  });
  var Radio = /* @__PURE__ */ _export_sfc(_sfc_main$1V, [["__file", "radio.vue"]]);
  const radioButtonProps = buildProps({
    ...radioPropsBase
  });
  const __default__$1j = vue.defineComponent({
    name: "ElRadioButton"
  });
  const _sfc_main$1U = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1j,
    props: radioButtonProps,
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("radio");
      const { radioRef, focus, size, disabled, modelValue, radioGroup, actualValue } = useRadio(props2);
      const activeStyle = vue.computed(() => {
        return {
          backgroundColor: (radioGroup == null ? void 0 : radioGroup.fill) || "",
          borderColor: (radioGroup == null ? void 0 : radioGroup.fill) || "",
          boxShadow: (radioGroup == null ? void 0 : radioGroup.fill) ? `-1px 0 0 0 ${radioGroup.fill}` : "",
          color: (radioGroup == null ? void 0 : radioGroup.textColor) || ""
        };
      });
      return (_ctx, _cache) => {
        var _a2;
        return vue.openBlock(), vue.createElementBlock("label", {
          class: vue.normalizeClass([
            vue.unref(ns2).b("button"),
            vue.unref(ns2).is("active", vue.unref(modelValue) === vue.unref(actualValue)),
            vue.unref(ns2).is("disabled", vue.unref(disabled)),
            vue.unref(ns2).is("focus", vue.unref(focus)),
            vue.unref(ns2).bm("button", vue.unref(size))
          ])
        }, [
          vue.withDirectives(vue.createElementVNode("input", {
            ref_key: "radioRef",
            ref: radioRef,
            "onUpdate:modelValue": ($event) => vue.isRef(modelValue) ? modelValue.value = $event : null,
            class: vue.normalizeClass(vue.unref(ns2).be("button", "original-radio")),
            value: vue.unref(actualValue),
            type: "radio",
            name: _ctx.name || ((_a2 = vue.unref(radioGroup)) == null ? void 0 : _a2.name),
            disabled: vue.unref(disabled),
            onFocus: ($event) => focus.value = true,
            onBlur: ($event) => focus.value = false,
            onClick: vue.withModifiers(() => {
            }, ["stop"])
          }, null, 42, ["onUpdate:modelValue", "value", "name", "disabled", "onFocus", "onBlur", "onClick"]), [
            [vue.vModelRadio, vue.unref(modelValue)]
          ]),
          vue.createElementVNode("span", {
            class: vue.normalizeClass(vue.unref(ns2).be("button", "inner")),
            style: vue.normalizeStyle(vue.unref(modelValue) === vue.unref(actualValue) ? vue.unref(activeStyle) : {}),
            onKeydown: vue.withModifiers(() => {
            }, ["stop"])
          }, [
            vue.renderSlot(_ctx.$slots, "default", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
            ])
          ], 46, ["onKeydown"])
        ], 2);
      };
    }
  });
  var RadioButton = /* @__PURE__ */ _export_sfc(_sfc_main$1U, [["__file", "radio-button.vue"]]);
  const radioGroupProps = buildProps({
    id: {
      type: String,
      default: void 0
    },
    size: useSizeProp,
    disabled: Boolean,
    modelValue: {
      type: [String, Number, Boolean],
      default: void 0
    },
    fill: {
      type: String,
      default: ""
    },
    textColor: {
      type: String,
      default: ""
    },
    name: {
      type: String,
      default: void 0
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    ...useAriaProps(["ariaLabel"])
  });
  const radioGroupEmits = radioEmits;
  const __default__$1i = vue.defineComponent({
    name: "ElRadioGroup"
  });
  const _sfc_main$1T = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1i,
    props: radioGroupProps,
    emits: radioGroupEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("radio");
      const radioId = useId();
      const radioGroupRef = vue.ref();
      const { formItem } = useFormItem();
      const { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props2, {
        formItemContext: formItem
      });
      const changeEvent = (value) => {
        emit(UPDATE_MODEL_EVENT, value);
        vue.nextTick(() => emit("change", value));
      };
      vue.onMounted(() => {
        const radios = radioGroupRef.value.querySelectorAll("[type=radio]");
        const firstLabel = radios[0];
        if (!Array.from(radios).some((radio) => radio.checked) && firstLabel) {
          firstLabel.tabIndex = 0;
        }
      });
      const name = vue.computed(() => {
        return props2.name || radioId.value;
      });
      vue.provide(radioGroupKey, vue.reactive({
        ...vue.toRefs(props2),
        changeEvent,
        name
      }));
      vue.watch(() => props2.modelValue, () => {
        if (props2.validateEvent) {
          formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn(err));
        }
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          id: vue.unref(groupId),
          ref_key: "radioGroupRef",
          ref: radioGroupRef,
          class: vue.normalizeClass(vue.unref(ns2).b("group")),
          role: "radiogroup",
          "aria-label": !vue.unref(isLabeledByFormItem) ? _ctx.ariaLabel || "radio-group" : void 0,
          "aria-labelledby": vue.unref(isLabeledByFormItem) ? vue.unref(formItem).labelId : void 0
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 10, ["id", "aria-label", "aria-labelledby"]);
      };
    }
  });
  var RadioGroup = /* @__PURE__ */ _export_sfc(_sfc_main$1T, [["__file", "radio-group.vue"]]);
  const ElRadio = withInstall(Radio, {
    RadioButton,
    RadioGroup
  });
  const ElRadioGroup = withNoopInstall(RadioGroup);
  const ElRadioButton = withNoopInstall(RadioButton);
  var NodeContent$1 = vue.defineComponent({
    name: "NodeContent",
    setup() {
      const ns2 = useNamespace("cascader-node");
      return {
        ns: ns2
      };
    },
    render() {
      const { ns: ns2 } = this;
      const { node, panel } = this.$parent;
      const { data, label } = node;
      const { renderLabelFn } = panel;
      return vue.h("span", { class: ns2.e("label") }, renderLabelFn ? renderLabelFn({ node, data }) : label);
    }
  });
  const CASCADER_PANEL_INJECTION_KEY = Symbol();
  const _sfc_main$1S = vue.defineComponent({
    name: "ElCascaderNode",
    components: {
      ElCheckbox,
      ElRadio,
      NodeContent: NodeContent$1,
      ElIcon,
      Check: check_default,
      Loading: loading_default,
      ArrowRight: arrow_right_default
    },
    props: {
      node: {
        type: Object,
        required: true
      },
      menuId: String
    },
    emits: ["expand"],
    setup(props2, { emit }) {
      const panel = vue.inject(CASCADER_PANEL_INJECTION_KEY);
      const ns2 = useNamespace("cascader-node");
      const isHoverMenu = vue.computed(() => panel.isHoverMenu);
      const multiple = vue.computed(() => panel.config.multiple);
      const checkStrictly = vue.computed(() => panel.config.checkStrictly);
      const checkedNodeId = vue.computed(() => {
        var _a2;
        return (_a2 = panel.checkedNodes[0]) == null ? void 0 : _a2.uid;
      });
      const isDisabled = vue.computed(() => props2.node.isDisabled);
      const isLeaf2 = vue.computed(() => props2.node.isLeaf);
      const expandable = vue.computed(() => checkStrictly.value && !isLeaf2.value || !isDisabled.value);
      const inExpandingPath = vue.computed(() => isInPath(panel.expandingNode));
      const inCheckedPath = vue.computed(() => checkStrictly.value && panel.checkedNodes.some(isInPath));
      const isInPath = (node) => {
        var _a2;
        const { level, uid: uid2 } = props2.node;
        return ((_a2 = node == null ? void 0 : node.pathNodes[level - 1]) == null ? void 0 : _a2.uid) === uid2;
      };
      const doExpand = () => {
        if (inExpandingPath.value)
          return;
        panel.expandNode(props2.node);
      };
      const doCheck = (checked) => {
        const { node } = props2;
        if (checked === node.checked)
          return;
        panel.handleCheckChange(node, checked);
      };
      const doLoad = () => {
        panel.lazyLoad(props2.node, () => {
          if (!isLeaf2.value)
            doExpand();
        });
      };
      const handleHoverExpand = (e) => {
        if (!isHoverMenu.value)
          return;
        handleExpand();
        !isLeaf2.value && emit("expand", e);
      };
      const handleExpand = () => {
        const { node } = props2;
        if (!expandable.value || node.loading)
          return;
        node.loaded ? doExpand() : doLoad();
      };
      const handleClick = () => {
        if (isHoverMenu.value && !isLeaf2.value)
          return;
        if (isLeaf2.value && !isDisabled.value && !checkStrictly.value && !multiple.value) {
          handleCheck(true);
        } else {
          handleExpand();
        }
      };
      const handleSelectCheck = (checked) => {
        if (checkStrictly.value) {
          doCheck(checked);
          if (props2.node.loaded) {
            doExpand();
          }
        } else {
          handleCheck(checked);
        }
      };
      const handleCheck = (checked) => {
        if (!props2.node.loaded) {
          doLoad();
        } else {
          doCheck(checked);
          !checkStrictly.value && doExpand();
        }
      };
      return {
        panel,
        isHoverMenu,
        multiple,
        checkStrictly,
        checkedNodeId,
        isDisabled,
        isLeaf: isLeaf2,
        expandable,
        inExpandingPath,
        inCheckedPath,
        ns: ns2,
        handleHoverExpand,
        handleExpand,
        handleClick,
        handleCheck,
        handleSelectCheck
      };
    }
  });
  function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_checkbox = vue.resolveComponent("el-checkbox");
    const _component_el_radio = vue.resolveComponent("el-radio");
    const _component_check = vue.resolveComponent("check");
    const _component_el_icon = vue.resolveComponent("el-icon");
    const _component_node_content = vue.resolveComponent("node-content");
    const _component_loading = vue.resolveComponent("loading");
    const _component_arrow_right = vue.resolveComponent("arrow-right");
    return vue.openBlock(), vue.createElementBlock("li", {
      id: `${_ctx.menuId}-${_ctx.node.uid}`,
      role: "menuitem",
      "aria-haspopup": !_ctx.isLeaf,
      "aria-owns": _ctx.isLeaf ? null : _ctx.menuId,
      "aria-expanded": _ctx.inExpandingPath,
      tabindex: _ctx.expandable ? -1 : void 0,
      class: vue.normalizeClass([
        _ctx.ns.b(),
        _ctx.ns.is("selectable", _ctx.checkStrictly),
        _ctx.ns.is("active", _ctx.node.checked),
        _ctx.ns.is("disabled", !_ctx.expandable),
        _ctx.inExpandingPath && "in-active-path",
        _ctx.inCheckedPath && "in-checked-path"
      ]),
      onMouseenter: _ctx.handleHoverExpand,
      onFocus: _ctx.handleHoverExpand,
      onClick: _ctx.handleClick
    }, [
      vue.createCommentVNode(" prefix "),
      _ctx.multiple ? (vue.openBlock(), vue.createBlock(_component_el_checkbox, {
        key: 0,
        "model-value": _ctx.node.checked,
        indeterminate: _ctx.node.indeterminate,
        disabled: _ctx.isDisabled,
        onClick: vue.withModifiers(() => {
        }, ["stop"]),
        "onUpdate:modelValue": _ctx.handleSelectCheck
      }, null, 8, ["model-value", "indeterminate", "disabled", "onClick", "onUpdate:modelValue"])) : _ctx.checkStrictly ? (vue.openBlock(), vue.createBlock(_component_el_radio, {
        key: 1,
        "model-value": _ctx.checkedNodeId,
        label: _ctx.node.uid,
        disabled: _ctx.isDisabled,
        "onUpdate:modelValue": _ctx.handleSelectCheck,
        onClick: vue.withModifiers(() => {
        }, ["stop"])
      }, {
        default: vue.withCtx(() => [
          vue.createCommentVNode("\n        Add an empty element to avoid render label,\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\n      "),
          vue.createElementVNode("span")
        ]),
        _: 1
      }, 8, ["model-value", "label", "disabled", "onUpdate:modelValue", "onClick"])) : _ctx.isLeaf && _ctx.node.checked ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
        key: 2,
        class: vue.normalizeClass(_ctx.ns.e("prefix"))
      }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_check)
        ]),
        _: 1
      }, 8, ["class"])) : vue.createCommentVNode("v-if", true),
      vue.createCommentVNode(" content "),
      vue.createVNode(_component_node_content),
      vue.createCommentVNode(" postfix "),
      !_ctx.isLeaf ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 3 }, [
        _ctx.node.loading ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 0,
          class: vue.normalizeClass([_ctx.ns.is("loading"), _ctx.ns.e("postfix")])
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_loading)
          ]),
          _: 1
        }, 8, ["class"])) : (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 1,
          class: vue.normalizeClass(["arrow-right", _ctx.ns.e("postfix")])
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_arrow_right)
          ]),
          _: 1
        }, 8, ["class"]))
      ], 64)) : vue.createCommentVNode("v-if", true)
    ], 42, ["id", "aria-haspopup", "aria-owns", "aria-expanded", "tabindex", "onMouseenter", "onFocus", "onClick"]);
  }
  var ElCascaderNode = /* @__PURE__ */ _export_sfc(_sfc_main$1S, [["render", _sfc_render$t], ["__file", "node.vue"]]);
  const _sfc_main$1R = vue.defineComponent({
    name: "ElCascaderMenu",
    components: {
      Loading: loading_default,
      ElIcon,
      ElScrollbar,
      ElCascaderNode
    },
    props: {
      nodes: {
        type: Array,
        required: true
      },
      index: {
        type: Number,
        required: true
      }
    },
    setup(props2) {
      const instance = vue.getCurrentInstance();
      const ns2 = useNamespace("cascader-menu");
      const { t: t2 } = useLocale();
      const id = useId();
      let activeNode = null;
      let hoverTimer = null;
      const panel = vue.inject(CASCADER_PANEL_INJECTION_KEY);
      const hoverZone = vue.ref(null);
      const isEmpty2 = vue.computed(() => !props2.nodes.length);
      const isLoading = vue.computed(() => !panel.initialLoaded);
      const menuId = vue.computed(() => `${id.value}-${props2.index}`);
      const handleExpand = (e) => {
        activeNode = e.target;
      };
      const handleMouseMove = (e) => {
        if (!panel.isHoverMenu || !activeNode || !hoverZone.value)
          return;
        if (activeNode.contains(e.target)) {
          clearHoverTimer();
          const el = instance.vnode.el;
          const { left: left2 } = el.getBoundingClientRect();
          const { offsetWidth, offsetHeight } = el;
          const startX = e.clientX - left2;
          const top = activeNode.offsetTop;
          const bottom = top + activeNode.offsetHeight;
          hoverZone.value.innerHTML = `
          <path style="pointer-events: auto;" fill="transparent" d="M${startX} ${top} L${offsetWidth} 0 V${top} Z" />
          <path style="pointer-events: auto;" fill="transparent" d="M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z" />
        `;
        } else if (!hoverTimer) {
          hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);
        }
      };
      const clearHoverTimer = () => {
        if (!hoverTimer)
          return;
        clearTimeout(hoverTimer);
        hoverTimer = null;
      };
      const clearHoverZone = () => {
        if (!hoverZone.value)
          return;
        hoverZone.value.innerHTML = "";
        clearHoverTimer();
      };
      return {
        ns: ns2,
        panel,
        hoverZone,
        isEmpty: isEmpty2,
        isLoading,
        menuId,
        t: t2,
        handleExpand,
        handleMouseMove,
        clearHoverZone
      };
    }
  });
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_cascader_node = vue.resolveComponent("el-cascader-node");
    const _component_loading = vue.resolveComponent("loading");
    const _component_el_icon = vue.resolveComponent("el-icon");
    const _component_el_scrollbar = vue.resolveComponent("el-scrollbar");
    return vue.openBlock(), vue.createBlock(_component_el_scrollbar, {
      key: _ctx.menuId,
      tag: "ul",
      role: "menu",
      class: vue.normalizeClass(_ctx.ns.b()),
      "wrap-class": _ctx.ns.e("wrap"),
      "view-class": [_ctx.ns.e("list"), _ctx.ns.is("empty", _ctx.isEmpty)],
      onMousemove: _ctx.handleMouseMove,
      onMouseleave: _ctx.clearHoverZone
    }, {
      default: vue.withCtx(() => {
        var _a2;
        return [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.nodes, (node) => {
            return vue.openBlock(), vue.createBlock(_component_el_cascader_node, {
              key: node.uid,
              node,
              "menu-id": _ctx.menuId,
              onExpand: _ctx.handleExpand
            }, null, 8, ["node", "menu-id", "onExpand"]);
          }), 128)),
          _ctx.isLoading ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(_ctx.ns.e("empty-text"))
          }, [
            vue.createVNode(_component_el_icon, {
              size: "14",
              class: vue.normalizeClass(_ctx.ns.is("loading"))
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_loading)
              ]),
              _: 1
            }, 8, ["class"]),
            vue.createTextVNode(" " + vue.toDisplayString(_ctx.t("el.cascader.loading")), 1)
          ], 2)) : _ctx.isEmpty ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(_ctx.ns.e("empty-text"))
          }, [
            vue.renderSlot(_ctx.$slots, "empty", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.t("el.cascader.noData")), 1)
            ])
          ], 2)) : ((_a2 = _ctx.panel) == null ? void 0 : _a2.isHoverMenu) ? (vue.openBlock(), vue.createElementBlock("svg", {
            key: 2,
            ref: "hoverZone",
            class: vue.normalizeClass(_ctx.ns.e("hover-zone"))
          }, null, 2)) : vue.createCommentVNode("v-if", true)
        ];
      }),
      _: 3
    }, 8, ["class", "wrap-class", "view-class", "onMousemove", "onMouseleave"]);
  }
  var ElCascaderMenu = /* @__PURE__ */ _export_sfc(_sfc_main$1R, [["render", _sfc_render$s], ["__file", "menu.vue"]]);
  let uid = 0;
  const calculatePathNodes = (node) => {
    const nodes = [node];
    let { parent: parent2 } = node;
    while (parent2) {
      nodes.unshift(parent2);
      parent2 = parent2.parent;
    }
    return nodes;
  };
  let Node$2 = class Node2 {
    constructor(data, config, parent2, root2 = false) {
      this.data = data;
      this.config = config;
      this.parent = parent2;
      this.root = root2;
      this.uid = uid++;
      this.checked = false;
      this.indeterminate = false;
      this.loading = false;
      const { value: valueKey, label: labelKey, children: childrenKey } = config;
      const childrenData = data[childrenKey];
      const pathNodes = calculatePathNodes(this);
      this.level = root2 ? 0 : parent2 ? parent2.level + 1 : 1;
      this.value = data[valueKey];
      this.label = data[labelKey];
      this.pathNodes = pathNodes;
      this.pathValues = pathNodes.map((node) => node.value);
      this.pathLabels = pathNodes.map((node) => node.label);
      this.childrenData = childrenData;
      this.children = (childrenData || []).map((child) => new Node2(child, config, this));
      this.loaded = !config.lazy || this.isLeaf || !isEmpty(childrenData);
    }
    get isDisabled() {
      const { data, parent: parent2, config } = this;
      const { disabled, checkStrictly } = config;
      const isDisabled = shared.isFunction(disabled) ? disabled(data, this) : !!data[disabled];
      return isDisabled || !checkStrictly && (parent2 == null ? void 0 : parent2.isDisabled);
    }
    get isLeaf() {
      const { data, config, childrenData, loaded } = this;
      const { lazy, leaf } = config;
      const isLeaf2 = shared.isFunction(leaf) ? leaf(data, this) : data[leaf];
      return isUndefined(isLeaf2) ? lazy && !loaded ? false : !(Array.isArray(childrenData) && childrenData.length) : !!isLeaf2;
    }
    get valueByOption() {
      return this.config.emitPath ? this.pathValues : this.value;
    }
    appendChild(childData) {
      const { childrenData, children } = this;
      const node = new Node2(childData, this.config, this);
      if (Array.isArray(childrenData)) {
        childrenData.push(childData);
      } else {
        this.childrenData = [childData];
      }
      children.push(node);
      return node;
    }
    calcText(allLevels, separator) {
      const text = allLevels ? this.pathLabels.join(separator) : this.label;
      this.text = text;
      return text;
    }
    broadcast(event, ...args) {
      const handlerName = `onParent${capitalize(event)}`;
      this.children.forEach((child) => {
        if (child) {
          child.broadcast(event, ...args);
          child[handlerName] && child[handlerName](...args);
        }
      });
    }
    emit(event, ...args) {
      const { parent: parent2 } = this;
      const handlerName = `onChild${capitalize(event)}`;
      if (parent2) {
        parent2[handlerName] && parent2[handlerName](...args);
        parent2.emit(event, ...args);
      }
    }
    onParentCheck(checked) {
      if (!this.isDisabled) {
        this.setCheckState(checked);
      }
    }
    onChildCheck() {
      const { children } = this;
      const validChildren = children.filter((child) => !child.isDisabled);
      const checked = validChildren.length ? validChildren.every((child) => child.checked) : false;
      this.setCheckState(checked);
    }
    setCheckState(checked) {
      const totalNum = this.children.length;
      const checkedNum = this.children.reduce((c2, p2) => {
        const num = p2.checked ? 1 : p2.indeterminate ? 0.5 : 0;
        return c2 + num;
      }, 0);
      this.checked = this.loaded && this.children.filter((child) => !child.isDisabled).every((child) => child.loaded && child.checked) && checked;
      this.indeterminate = this.loaded && checkedNum !== totalNum && checkedNum > 0;
    }
    doCheck(checked) {
      if (this.checked === checked)
        return;
      const { checkStrictly, multiple } = this.config;
      if (checkStrictly || !multiple) {
        this.checked = checked;
      } else {
        this.broadcast("check", checked);
        this.setCheckState(checked);
        this.emit("check");
      }
    }
  };
  const flatNodes = (nodes, leafOnly) => {
    return nodes.reduce((res, node) => {
      if (node.isLeaf) {
        res.push(node);
      } else {
        !leafOnly && res.push(node);
        res = res.concat(flatNodes(node.children, leafOnly));
      }
      return res;
    }, []);
  };
  class Store {
    constructor(data, config) {
      this.config = config;
      const nodes = (data || []).map((nodeData) => new Node$2(nodeData, this.config));
      this.nodes = nodes;
      this.allNodes = flatNodes(nodes, false);
      this.leafNodes = flatNodes(nodes, true);
    }
    getNodes() {
      return this.nodes;
    }
    getFlattedNodes(leafOnly) {
      return leafOnly ? this.leafNodes : this.allNodes;
    }
    appendNode(nodeData, parentNode) {
      const node = parentNode ? parentNode.appendChild(nodeData) : new Node$2(nodeData, this.config);
      if (!parentNode)
        this.nodes.push(node);
      this.allNodes.push(node);
      node.isLeaf && this.leafNodes.push(node);
    }
    appendNodes(nodeDataList, parentNode) {
      nodeDataList.forEach((nodeData) => this.appendNode(nodeData, parentNode));
    }
    getNodeByValue(value, leafOnly = false) {
      if (!value && value !== 0)
        return null;
      const node = this.getFlattedNodes(leafOnly).find((node2) => isEqual$1(node2.value, value) || isEqual$1(node2.pathValues, value));
      return node || null;
    }
    getSameNode(node) {
      if (!node)
        return null;
      const node_ = this.getFlattedNodes(false).find(({ value, level }) => isEqual$1(node.value, value) && node.level === level);
      return node_ || null;
    }
  }
  const CommonProps = buildProps({
    modelValue: {
      type: definePropType([Number, String, Array])
    },
    options: {
      type: definePropType(Array),
      default: () => []
    },
    props: {
      type: definePropType(Object),
      default: () => ({})
    }
  });
  const DefaultProps = {
    expandTrigger: "click",
    multiple: false,
    checkStrictly: false,
    emitPath: true,
    lazy: false,
    lazyLoad: shared.NOOP,
    value: "value",
    label: "label",
    children: "children",
    leaf: "leaf",
    disabled: "disabled",
    hoverThreshold: 500
  };
  const useCascaderConfig = (props2) => {
    return vue.computed(() => ({
      ...DefaultProps,
      ...props2.props
    }));
  };
  const getMenuIndex = (el) => {
    if (!el)
      return 0;
    const pieces = el.id.split("-");
    return Number(pieces[pieces.length - 2]);
  };
  const checkNode = (el) => {
    if (!el)
      return;
    const input = el.querySelector("input");
    if (input) {
      input.click();
    } else if (isLeaf(el)) {
      el.click();
    }
  };
  const sortByOriginalOrder = (oldNodes, newNodes) => {
    const newNodesCopy = newNodes.slice(0);
    const newIds = newNodesCopy.map((node) => node.uid);
    const res = oldNodes.reduce((acc, item) => {
      const index = newIds.indexOf(item.uid);
      if (index > -1) {
        acc.push(item);
        newNodesCopy.splice(index, 1);
        newIds.splice(index, 1);
      }
      return acc;
    }, []);
    res.push(...newNodesCopy);
    return res;
  };
  const _sfc_main$1Q = vue.defineComponent({
    name: "ElCascaderPanel",
    components: {
      ElCascaderMenu
    },
    props: {
      ...CommonProps,
      border: {
        type: Boolean,
        default: true
      },
      renderLabel: Function
    },
    emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, "close", "expand-change"],
    setup(props2, { emit, slots }) {
      let manualChecked = false;
      const ns2 = useNamespace("cascader");
      const config = useCascaderConfig(props2);
      let store2 = null;
      const initialLoaded = vue.ref(true);
      const menuList = vue.ref([]);
      const checkedValue = vue.ref(null);
      const menus = vue.ref([]);
      const expandingNode = vue.ref(null);
      const checkedNodes = vue.ref([]);
      const isHoverMenu = vue.computed(() => config.value.expandTrigger === "hover");
      const renderLabelFn = vue.computed(() => props2.renderLabel || slots.default);
      const initStore = () => {
        const { options } = props2;
        const cfg = config.value;
        manualChecked = false;
        store2 = new Store(options, cfg);
        menus.value = [store2.getNodes()];
        if (cfg.lazy && isEmpty(props2.options)) {
          initialLoaded.value = false;
          lazyLoad(void 0, (list) => {
            if (list) {
              store2 = new Store(list, cfg);
              menus.value = [store2.getNodes()];
            }
            initialLoaded.value = true;
            syncCheckedValue(false, true);
          });
        } else {
          syncCheckedValue(false, true);
        }
      };
      const lazyLoad = (node, cb) => {
        const cfg = config.value;
        node = node || new Node$2({}, cfg, void 0, true);
        node.loading = true;
        const resolve = (dataList) => {
          const _node = node;
          const parent2 = _node.root ? null : _node;
          dataList && (store2 == null ? void 0 : store2.appendNodes(dataList, parent2));
          _node.loading = false;
          _node.loaded = true;
          _node.childrenData = _node.childrenData || [];
          cb && cb(dataList);
        };
        cfg.lazyLoad(node, resolve);
      };
      const expandNode = (node, silent) => {
        var _a2;
        const { level } = node;
        const newMenus = menus.value.slice(0, level);
        let newExpandingNode;
        if (node.isLeaf) {
          newExpandingNode = node.pathNodes[level - 2];
        } else {
          newExpandingNode = node;
          newMenus.push(node.children);
        }
        if (((_a2 = expandingNode.value) == null ? void 0 : _a2.uid) !== (newExpandingNode == null ? void 0 : newExpandingNode.uid)) {
          expandingNode.value = node;
          menus.value = newMenus;
          !silent && emit("expand-change", (node == null ? void 0 : node.pathValues) || []);
        }
      };
      const handleCheckChange = (node, checked, emitClose = true) => {
        const { checkStrictly, multiple } = config.value;
        const oldNode = checkedNodes.value[0];
        manualChecked = true;
        !multiple && (oldNode == null ? void 0 : oldNode.doCheck(false));
        node.doCheck(checked);
        calculateCheckedValue();
        emitClose && !multiple && !checkStrictly && emit("close");
        !emitClose && !multiple && !checkStrictly && expandParentNode(node);
      };
      const expandParentNode = (node) => {
        if (!node)
          return;
        node = node.parent;
        expandParentNode(node);
        node && expandNode(node);
      };
      const getFlattedNodes = (leafOnly) => {
        return store2 == null ? void 0 : store2.getFlattedNodes(leafOnly);
      };
      const getCheckedNodes = (leafOnly) => {
        var _a2;
        return (_a2 = getFlattedNodes(leafOnly)) == null ? void 0 : _a2.filter((node) => node.checked !== false);
      };
      const clearCheckedNodes = () => {
        checkedNodes.value.forEach((node) => node.doCheck(false));
        calculateCheckedValue();
        menus.value = menus.value.slice(0, 1);
        expandingNode.value = null;
        emit("expand-change", []);
      };
      const calculateCheckedValue = () => {
        var _a2;
        const { checkStrictly, multiple } = config.value;
        const oldNodes = checkedNodes.value;
        const newNodes = getCheckedNodes(!checkStrictly);
        const nodes = sortByOriginalOrder(oldNodes, newNodes);
        const values = nodes.map((node) => node.valueByOption);
        checkedNodes.value = nodes;
        checkedValue.value = multiple ? values : (_a2 = values[0]) != null ? _a2 : null;
      };
      const syncCheckedValue = (loaded = false, forced = false) => {
        const { modelValue } = props2;
        const { lazy, multiple, checkStrictly } = config.value;
        const leafOnly = !checkStrictly;
        if (!initialLoaded.value || manualChecked || !forced && isEqual$1(modelValue, checkedValue.value))
          return;
        if (lazy && !loaded) {
          const values = unique(flattenDeep(castArray(modelValue)));
          const nodes = values.map((val) => store2 == null ? void 0 : store2.getNodeByValue(val)).filter((node) => !!node && !node.loaded && !node.loading);
          if (nodes.length) {
            nodes.forEach((node) => {
              lazyLoad(node, () => syncCheckedValue(false, forced));
            });
          } else {
            syncCheckedValue(true, forced);
          }
        } else {
          const values = multiple ? castArray(modelValue) : [modelValue];
          const nodes = unique(values.map((val) => store2 == null ? void 0 : store2.getNodeByValue(val, leafOnly)));
          syncMenuState(nodes, forced);
          checkedValue.value = cloneDeep(modelValue);
        }
      };
      const syncMenuState = (newCheckedNodes, reserveExpandingState = true) => {
        const { checkStrictly } = config.value;
        const oldNodes = checkedNodes.value;
        const newNodes = newCheckedNodes.filter((node) => !!node && (checkStrictly || node.isLeaf));
        const oldExpandingNode = store2 == null ? void 0 : store2.getSameNode(expandingNode.value);
        const newExpandingNode = reserveExpandingState && oldExpandingNode || newNodes[0];
        if (newExpandingNode) {
          newExpandingNode.pathNodes.forEach((node) => expandNode(node, true));
        } else {
          expandingNode.value = null;
        }
        oldNodes.forEach((node) => node.doCheck(false));
        vue.reactive(newNodes).forEach((node) => node.doCheck(true));
        checkedNodes.value = newNodes;
        vue.nextTick(scrollToExpandingNode);
      };
      const scrollToExpandingNode = () => {
        if (!isClient)
          return;
        menuList.value.forEach((menu) => {
          const menuElement = menu == null ? void 0 : menu.$el;
          if (menuElement) {
            const container = menuElement.querySelector(`.${ns2.namespace.value}-scrollbar__wrap`);
            const activeNode = menuElement.querySelector(`.${ns2.b("node")}.${ns2.is("active")}`) || menuElement.querySelector(`.${ns2.b("node")}.in-active-path`);
            scrollIntoView(container, activeNode);
          }
        });
      };
      const handleKeyDown = (e) => {
        const target = e.target;
        const { code } = e;
        switch (code) {
          case EVENT_CODE.up:
          case EVENT_CODE.down: {
            e.preventDefault();
            const distance = code === EVENT_CODE.up ? -1 : 1;
            focusNode(getSibling(target, distance, `.${ns2.b("node")}[tabindex="-1"]`));
            break;
          }
          case EVENT_CODE.left: {
            e.preventDefault();
            const preMenu = menuList.value[getMenuIndex(target) - 1];
            const expandedNode = preMenu == null ? void 0 : preMenu.$el.querySelector(`.${ns2.b("node")}[aria-expanded="true"]`);
            focusNode(expandedNode);
            break;
          }
          case EVENT_CODE.right: {
            e.preventDefault();
            const nextMenu = menuList.value[getMenuIndex(target) + 1];
            const firstNode = nextMenu == null ? void 0 : nextMenu.$el.querySelector(`.${ns2.b("node")}[tabindex="-1"]`);
            focusNode(firstNode);
            break;
          }
          case EVENT_CODE.enter:
            checkNode(target);
            break;
        }
      };
      vue.provide(CASCADER_PANEL_INJECTION_KEY, vue.reactive({
        config,
        expandingNode,
        checkedNodes,
        isHoverMenu,
        initialLoaded,
        renderLabelFn,
        lazyLoad,
        expandNode,
        handleCheckChange
      }));
      vue.watch([config, () => props2.options], initStore, {
        deep: true,
        immediate: true
      });
      vue.watch(() => props2.modelValue, () => {
        manualChecked = false;
        syncCheckedValue();
      }, {
        deep: true
      });
      vue.watch(() => checkedValue.value, (val) => {
        if (!isEqual$1(val, props2.modelValue)) {
          emit(UPDATE_MODEL_EVENT, val);
          emit(CHANGE_EVENT, val);
        }
      });
      vue.onBeforeUpdate(() => menuList.value = []);
      vue.onMounted(() => !isEmpty(props2.modelValue) && syncCheckedValue());
      return {
        ns: ns2,
        menuList,
        menus,
        checkedNodes,
        handleKeyDown,
        handleCheckChange,
        getFlattedNodes,
        getCheckedNodes,
        clearCheckedNodes,
        calculateCheckedValue,
        scrollToExpandingNode
      };
    }
  });
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_cascader_menu = vue.resolveComponent("el-cascader-menu");
    return vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([_ctx.ns.b("panel"), _ctx.ns.is("bordered", _ctx.border)]),
      onKeydown: _ctx.handleKeyDown
    }, [
      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.menus, (menu, index) => {
        return vue.openBlock(), vue.createBlock(_component_el_cascader_menu, {
          key: index,
          ref_for: true,
          ref: (item) => _ctx.menuList[index] = item,
          index,
          nodes: [...menu]
        }, {
          empty: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "empty")
          ]),
          _: 2
        }, 1032, ["index", "nodes"]);
      }), 128))
    ], 42, ["onKeydown"]);
  }
  var CascaderPanel = /* @__PURE__ */ _export_sfc(_sfc_main$1Q, [["render", _sfc_render$r], ["__file", "index.vue"]]);
  const ElCascaderPanel = withInstall(CascaderPanel);
  const tagProps = buildProps({
    type: {
      type: String,
      values: ["primary", "success", "info", "warning", "danger"],
      default: "primary"
    },
    closable: Boolean,
    disableTransitions: Boolean,
    hit: Boolean,
    color: String,
    size: {
      type: String,
      values: componentSizes
    },
    effect: {
      type: String,
      values: ["dark", "light", "plain"],
      default: "light"
    },
    round: Boolean
  });
  const tagEmits = {
    close: (evt) => evt instanceof MouseEvent,
    click: (evt) => evt instanceof MouseEvent
  };
  const __default__$1h = vue.defineComponent({
    name: "ElTag"
  });
  const _sfc_main$1P = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1h,
    props: tagProps,
    emits: tagEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const tagSize = useFormSize();
      const ns2 = useNamespace("tag");
      const containerKls = vue.computed(() => {
        const { type: type3, hit, effect, closable, round: round2 } = props2;
        return [
          ns2.b(),
          ns2.is("closable", closable),
          ns2.m(type3 || "primary"),
          ns2.m(tagSize.value),
          ns2.m(effect),
          ns2.is("hit", hit),
          ns2.is("round", round2)
        ];
      });
      const handleClose = (event) => {
        emit("close", event);
      };
      const handleClick = (event) => {
        emit("click", event);
      };
      const handleVNodeMounted = (vnode) => {
        vnode.component.subTree.component.bum = null;
      };
      return (_ctx, _cache) => {
        return _ctx.disableTransitions ? (vue.openBlock(), vue.createElementBlock("span", {
          key: 0,
          class: vue.normalizeClass(vue.unref(containerKls)),
          style: vue.normalizeStyle({ backgroundColor: _ctx.color }),
          onClick: handleClick
        }, [
          vue.createElementVNode("span", {
            class: vue.normalizeClass(vue.unref(ns2).e("content"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2),
          _ctx.closable ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("close")),
            onClick: vue.withModifiers(handleClose, ["stop"])
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(vue.unref(close_default))
            ]),
            _: 1
          }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-if", true)
        ], 6)) : (vue.openBlock(), vue.createBlock(vue.Transition, {
          key: 1,
          name: `${vue.unref(ns2).namespace.value}-zoom-in-center`,
          appear: "",
          onVnodeMounted: handleVNodeMounted
        }, {
          default: vue.withCtx(() => [
            vue.createElementVNode("span", {
              class: vue.normalizeClass(vue.unref(containerKls)),
              style: vue.normalizeStyle({ backgroundColor: _ctx.color }),
              onClick: handleClick
            }, [
              vue.createElementVNode("span", {
                class: vue.normalizeClass(vue.unref(ns2).e("content"))
              }, [
                vue.renderSlot(_ctx.$slots, "default")
              ], 2),
              _ctx.closable ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 0,
                class: vue.normalizeClass(vue.unref(ns2).e("close")),
                onClick: vue.withModifiers(handleClose, ["stop"])
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(vue.unref(close_default))
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-if", true)
            ], 6)
          ]),
          _: 3
        }, 8, ["name"]));
      };
    }
  });
  var Tag = /* @__PURE__ */ _export_sfc(_sfc_main$1P, [["__file", "tag.vue"]]);
  const ElTag = withInstall(Tag);
  const cascaderProps = buildProps({
    ...CommonProps,
    size: useSizeProp,
    placeholder: String,
    disabled: Boolean,
    clearable: Boolean,
    filterable: Boolean,
    filterMethod: {
      type: definePropType(Function),
      default: (node, keyword) => node.text.includes(keyword)
    },
    separator: {
      type: String,
      default: " / "
    },
    showAllLevels: {
      type: Boolean,
      default: true
    },
    collapseTags: Boolean,
    maxCollapseTags: {
      type: Number,
      default: 1
    },
    collapseTagsTooltip: {
      type: Boolean,
      default: false
    },
    debounce: {
      type: Number,
      default: 300
    },
    beforeFilter: {
      type: definePropType(Function),
      default: () => true
    },
    placement: {
      type: definePropType(String),
      values: Ee,
      default: "bottom-start"
    },
    fallbackPlacements: {
      type: definePropType(Array),
      default: ["bottom-start", "bottom", "top-start", "top", "right", "left"]
    },
    popperClass: {
      type: String,
      default: ""
    },
    teleported: useTooltipContentProps.teleported,
    tagType: { ...tagProps.type, default: "info" },
    tagEffect: { ...tagProps.effect, default: "light" },
    validateEvent: {
      type: Boolean,
      default: true
    },
    persistent: {
      type: Boolean,
      default: true
    },
    ...useEmptyValuesProps
  });
  const cascaderEmits = {
    [UPDATE_MODEL_EVENT]: (_2) => true,
    [CHANGE_EVENT]: (_2) => true,
    focus: (evt) => evt instanceof FocusEvent,
    blur: (evt) => evt instanceof FocusEvent,
    clear: () => true,
    visibleChange: (val) => isBoolean$1(val),
    expandChange: (val) => !!val,
    removeTag: (val) => !!val
  };
  const COMPONENT_NAME$e = "ElCascader";
  const __default__$1g = vue.defineComponent({
    name: COMPONENT_NAME$e
  });
  const _sfc_main$1O = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1g,
    props: cascaderProps,
    emits: cascaderEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const popperOptions = {
        modifiers: [
          {
            name: "arrowPosition",
            enabled: true,
            phase: "main",
            fn: ({ state: state2 }) => {
              const { modifiersData, placement } = state2;
              if (["right", "left", "bottom", "top"].includes(placement))
                return;
              modifiersData.arrow.x = 35;
            },
            requires: ["arrow"]
          }
        ]
      };
      const attrs2 = vue.useAttrs();
      let inputInitialHeight = 0;
      let pressDeleteCount = 0;
      const nsCascader = useNamespace("cascader");
      const nsInput = useNamespace("input");
      const { t: t2 } = useLocale();
      const { form, formItem } = useFormItem();
      const { valueOnClear } = useEmptyValues(props2);
      const { isComposing, handleComposition } = useComposition({
        afterComposition(event) {
          var _a2;
          const text = (_a2 = event.target) == null ? void 0 : _a2.value;
          handleInput(text);
        }
      });
      const tooltipRef = vue.ref(null);
      const input = vue.ref(null);
      const tagWrapper = vue.ref(null);
      const cascaderPanelRef = vue.ref(null);
      const suggestionPanel = vue.ref(null);
      const popperVisible = vue.ref(false);
      const inputHover = vue.ref(false);
      const filtering = vue.ref(false);
      const filterFocus = vue.ref(false);
      const inputValue = vue.ref("");
      const searchInputValue = vue.ref("");
      const presentTags = vue.ref([]);
      const allPresentTags = vue.ref([]);
      const suggestions = vue.ref([]);
      const cascaderStyle = vue.computed(() => {
        return attrs2.style;
      });
      const isDisabled = vue.computed(() => props2.disabled || (form == null ? void 0 : form.disabled));
      const inputPlaceholder = vue.computed(() => props2.placeholder || t2("el.cascader.placeholder"));
      const currentPlaceholder = vue.computed(() => searchInputValue.value || presentTags.value.length > 0 || isComposing.value ? "" : inputPlaceholder.value);
      const realSize = useFormSize();
      const tagSize = vue.computed(() => ["small"].includes(realSize.value) ? "small" : "default");
      const multiple = vue.computed(() => !!props2.props.multiple);
      const readonly = vue.computed(() => !props2.filterable || multiple.value);
      const searchKeyword = vue.computed(() => multiple.value ? searchInputValue.value : inputValue.value);
      const checkedNodes = vue.computed(() => {
        var _a2;
        return ((_a2 = cascaderPanelRef.value) == null ? void 0 : _a2.checkedNodes) || [];
      });
      const clearBtnVisible = vue.computed(() => {
        if (!props2.clearable || isDisabled.value || filtering.value || !inputHover.value)
          return false;
        return !!checkedNodes.value.length;
      });
      const presentText = vue.computed(() => {
        const { showAllLevels, separator } = props2;
        const nodes = checkedNodes.value;
        return nodes.length ? multiple.value ? "" : nodes[0].calcText(showAllLevels, separator) : "";
      });
      const validateState = vue.computed(() => (formItem == null ? void 0 : formItem.validateState) || "");
      const checkedValue = vue.computed({
        get() {
          return cloneDeep(props2.modelValue);
        },
        set(val) {
          const value = val != null ? val : valueOnClear.value;
          emit(UPDATE_MODEL_EVENT, value);
          emit(CHANGE_EVENT, value);
          if (props2.validateEvent) {
            formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn(err));
          }
        }
      });
      const cascaderKls = vue.computed(() => {
        return [
          nsCascader.b(),
          nsCascader.m(realSize.value),
          nsCascader.is("disabled", isDisabled.value),
          attrs2.class
        ];
      });
      const cascaderIconKls = vue.computed(() => {
        return [
          nsInput.e("icon"),
          "icon-arrow-down",
          nsCascader.is("reverse", popperVisible.value)
        ];
      });
      const inputClass = vue.computed(() => {
        return nsCascader.is("focus", popperVisible.value || filterFocus.value);
      });
      const contentRef = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
      });
      const togglePopperVisible = (visible) => {
        var _a2, _b, _c;
        if (isDisabled.value)
          return;
        visible = visible != null ? visible : !popperVisible.value;
        if (visible !== popperVisible.value) {
          popperVisible.value = visible;
          (_b = (_a2 = input.value) == null ? void 0 : _a2.input) == null ? void 0 : _b.setAttribute("aria-expanded", `${visible}`);
          if (visible) {
            updatePopperPosition();
            vue.nextTick((_c = cascaderPanelRef.value) == null ? void 0 : _c.scrollToExpandingNode);
          } else if (props2.filterable) {
            syncPresentTextValue();
          }
          emit("visibleChange", visible);
        }
      };
      const updatePopperPosition = () => {
        vue.nextTick(() => {
          var _a2;
          (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper();
        });
      };
      const hideSuggestionPanel = () => {
        filtering.value = false;
      };
      const genTag2 = (node) => {
        const { showAllLevels, separator } = props2;
        return {
          node,
          key: node.uid,
          text: node.calcText(showAllLevels, separator),
          hitState: false,
          closable: !isDisabled.value && !node.isDisabled,
          isCollapseTag: false
        };
      };
      const deleteTag = (tag) => {
        var _a2;
        const node = tag.node;
        node.doCheck(false);
        (_a2 = cascaderPanelRef.value) == null ? void 0 : _a2.calculateCheckedValue();
        emit("removeTag", node.valueByOption);
      };
      const calculatePresentTags = () => {
        if (!multiple.value)
          return;
        const nodes = checkedNodes.value;
        const tags = [];
        const allTags = [];
        nodes.forEach((node) => allTags.push(genTag2(node)));
        allPresentTags.value = allTags;
        if (nodes.length) {
          nodes.slice(0, props2.maxCollapseTags).forEach((node) => tags.push(genTag2(node)));
          const rest = nodes.slice(props2.maxCollapseTags);
          const restCount = rest.length;
          if (restCount) {
            if (props2.collapseTags) {
              tags.push({
                key: -1,
                text: `+ ${restCount}`,
                closable: false,
                isCollapseTag: true
              });
            } else {
              rest.forEach((node) => tags.push(genTag2(node)));
            }
          }
        }
        presentTags.value = tags;
      };
      const calculateSuggestions = () => {
        var _a2, _b;
        const { filterMethod, showAllLevels, separator } = props2;
        const res = (_b = (_a2 = cascaderPanelRef.value) == null ? void 0 : _a2.getFlattedNodes(!props2.props.checkStrictly)) == null ? void 0 : _b.filter((node) => {
          if (node.isDisabled)
            return false;
          node.calcText(showAllLevels, separator);
          return filterMethod(node, searchKeyword.value);
        });
        if (multiple.value) {
          presentTags.value.forEach((tag) => {
            tag.hitState = false;
          });
          allPresentTags.value.forEach((tag) => {
            tag.hitState = false;
          });
        }
        filtering.value = true;
        suggestions.value = res;
        updatePopperPosition();
      };
      const focusFirstNode = () => {
        var _a2;
        let firstNode;
        if (filtering.value && suggestionPanel.value) {
          firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e("suggestion-item")}`);
        } else {
          firstNode = (_a2 = cascaderPanelRef.value) == null ? void 0 : _a2.$el.querySelector(`.${nsCascader.b("node")}[tabindex="-1"]`);
        }
        if (firstNode) {
          firstNode.focus();
          !filtering.value && firstNode.click();
        }
      };
      const updateStyle = () => {
        var _a2, _b;
        const inputInner = (_a2 = input.value) == null ? void 0 : _a2.input;
        const tagWrapperEl = tagWrapper.value;
        const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;
        if (!isClient || !inputInner)
          return;
        if (suggestionPanelEl) {
          const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e("suggestion-list")}`);
          suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;
        }
        if (tagWrapperEl) {
          const { offsetHeight } = tagWrapperEl;
          const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;
          inputInner.style.height = height;
          updatePopperPosition();
        }
      };
      const getCheckedNodes = (leafOnly) => {
        var _a2;
        return (_a2 = cascaderPanelRef.value) == null ? void 0 : _a2.getCheckedNodes(leafOnly);
      };
      const handleExpandChange = (value) => {
        updatePopperPosition();
        emit("expandChange", value);
      };
      const handleKeyDown = (e) => {
        if (isComposing.value)
          return;
        switch (e.code) {
          case EVENT_CODE.enter:
            togglePopperVisible();
            break;
          case EVENT_CODE.down:
            togglePopperVisible(true);
            vue.nextTick(focusFirstNode);
            e.preventDefault();
            break;
          case EVENT_CODE.esc:
            if (popperVisible.value === true) {
              e.preventDefault();
              e.stopPropagation();
              togglePopperVisible(false);
            }
            break;
          case EVENT_CODE.tab:
            togglePopperVisible(false);
            break;
        }
      };
      const handleClear = () => {
        var _a2;
        (_a2 = cascaderPanelRef.value) == null ? void 0 : _a2.clearCheckedNodes();
        if (!popperVisible.value && props2.filterable) {
          syncPresentTextValue();
        }
        togglePopperVisible(false);
        emit("clear");
      };
      const syncPresentTextValue = () => {
        const { value } = presentText;
        inputValue.value = value;
        searchInputValue.value = value;
      };
      const handleSuggestionClick = (node) => {
        var _a2, _b;
        const { checked } = node;
        if (multiple.value) {
          (_a2 = cascaderPanelRef.value) == null ? void 0 : _a2.handleCheckChange(node, !checked, false);
        } else {
          !checked && ((_b = cascaderPanelRef.value) == null ? void 0 : _b.handleCheckChange(node, true, false));
          togglePopperVisible(false);
        }
      };
      const handleSuggestionKeyDown = (e) => {
        const target = e.target;
        const { code } = e;
        switch (code) {
          case EVENT_CODE.up:
          case EVENT_CODE.down: {
            const distance = code === EVENT_CODE.up ? -1 : 1;
            focusNode(getSibling(target, distance, `.${nsCascader.e("suggestion-item")}[tabindex="-1"]`));
            break;
          }
          case EVENT_CODE.enter:
            target.click();
            break;
        }
      };
      const handleDelete = () => {
        const tags = presentTags.value;
        const lastTag = tags[tags.length - 1];
        pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;
        if (!lastTag || !pressDeleteCount || props2.collapseTags && tags.length > 1)
          return;
        if (lastTag.hitState) {
          deleteTag(lastTag);
        } else {
          lastTag.hitState = true;
        }
      };
      const handleFocus = (e) => {
        const el = e.target;
        const name = nsCascader.e("search-input");
        if (el.className === name) {
          filterFocus.value = true;
        }
        emit("focus", e);
      };
      const handleBlur = (e) => {
        filterFocus.value = false;
        emit("blur", e);
      };
      const handleFilter = debounce(() => {
        const { value } = searchKeyword;
        if (!value)
          return;
        const passed = props2.beforeFilter(value);
        if (shared.isPromise(passed)) {
          passed.then(calculateSuggestions).catch(() => {
          });
        } else if (passed !== false) {
          calculateSuggestions();
        } else {
          hideSuggestionPanel();
        }
      }, props2.debounce);
      const handleInput = (val, e) => {
        !popperVisible.value && togglePopperVisible(true);
        if (e == null ? void 0 : e.isComposing)
          return;
        val ? handleFilter() : hideSuggestionPanel();
      };
      const getInputInnerHeight = (inputInner) => Number.parseFloat(useCssVar(nsInput.cssVarName("input-height"), inputInner).value) - 2;
      vue.watch(filtering, updatePopperPosition);
      vue.watch([checkedNodes, isDisabled, () => props2.collapseTags], calculatePresentTags);
      vue.watch(presentTags, () => {
        vue.nextTick(() => updateStyle());
      });
      vue.watch(realSize, async () => {
        await vue.nextTick();
        const inputInner = input.value.input;
        inputInitialHeight = getInputInnerHeight(inputInner) || inputInitialHeight;
        updateStyle();
      });
      vue.watch(presentText, syncPresentTextValue, { immediate: true });
      vue.onMounted(() => {
        const inputInner = input.value.input;
        const inputInnerHeight = getInputInnerHeight(inputInner);
        inputInitialHeight = inputInner.offsetHeight || inputInnerHeight;
        useResizeObserver(inputInner, updateStyle);
      });
      expose({
        getCheckedNodes,
        cascaderPanelRef,
        togglePopperVisible,
        contentRef,
        presentText
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElTooltip), {
          ref_key: "tooltipRef",
          ref: tooltipRef,
          visible: popperVisible.value,
          teleported: _ctx.teleported,
          "popper-class": [vue.unref(nsCascader).e("dropdown"), _ctx.popperClass],
          "popper-options": popperOptions,
          "fallback-placements": _ctx.fallbackPlacements,
          "stop-popper-mouse-event": false,
          "gpu-acceleration": false,
          placement: _ctx.placement,
          transition: `${vue.unref(nsCascader).namespace.value}-zoom-in-top`,
          effect: "light",
          pure: "",
          persistent: _ctx.persistent,
          onHide: hideSuggestionPanel
        }, {
          default: vue.withCtx(() => [
            vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
              class: vue.normalizeClass(vue.unref(cascaderKls)),
              style: vue.normalizeStyle(vue.unref(cascaderStyle)),
              onClick: () => togglePopperVisible(vue.unref(readonly) ? void 0 : true),
              onKeydown: handleKeyDown,
              onMouseenter: ($event) => inputHover.value = true,
              onMouseleave: ($event) => inputHover.value = false
            }, [
              vue.createVNode(vue.unref(ElInput), {
                ref_key: "input",
                ref: input,
                modelValue: inputValue.value,
                "onUpdate:modelValue": ($event) => inputValue.value = $event,
                placeholder: vue.unref(currentPlaceholder),
                readonly: vue.unref(readonly),
                disabled: vue.unref(isDisabled),
                "validate-event": false,
                size: vue.unref(realSize),
                class: vue.normalizeClass(vue.unref(inputClass)),
                tabindex: vue.unref(multiple) && _ctx.filterable && !vue.unref(isDisabled) ? -1 : void 0,
                onCompositionstart: vue.unref(handleComposition),
                onCompositionupdate: vue.unref(handleComposition),
                onCompositionend: vue.unref(handleComposition),
                onFocus: handleFocus,
                onBlur: handleBlur,
                onInput: handleInput
              }, {
                suffix: vue.withCtx(() => [
                  vue.unref(clearBtnVisible) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: "clear",
                    class: vue.normalizeClass([vue.unref(nsInput).e("icon"), "icon-circle-close"]),
                    onClick: vue.withModifiers(handleClear, ["stop"])
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(circle_close_default))
                    ]),
                    _: 1
                  }, 8, ["class", "onClick"])) : (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: "arrow-down",
                    class: vue.normalizeClass(vue.unref(cascaderIconKls)),
                    onClick: vue.withModifiers(($event) => togglePopperVisible(), ["stop"])
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(arrow_down_default))
                    ]),
                    _: 1
                  }, 8, ["class", "onClick"]))
                ]),
                _: 1
              }, 8, ["modelValue", "onUpdate:modelValue", "placeholder", "readonly", "disabled", "size", "class", "tabindex", "onCompositionstart", "onCompositionupdate", "onCompositionend"]),
              vue.unref(multiple) ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                ref_key: "tagWrapper",
                ref: tagWrapper,
                class: vue.normalizeClass([
                  vue.unref(nsCascader).e("tags"),
                  vue.unref(nsCascader).is("validate", Boolean(vue.unref(validateState)))
                ])
              }, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(presentTags.value, (tag) => {
                  return vue.openBlock(), vue.createBlock(vue.unref(ElTag), {
                    key: tag.key,
                    type: _ctx.tagType,
                    size: vue.unref(tagSize),
                    effect: _ctx.tagEffect,
                    hit: tag.hitState,
                    closable: tag.closable,
                    "disable-transitions": "",
                    onClose: ($event) => deleteTag(tag)
                  }, {
                    default: vue.withCtx(() => [
                      tag.isCollapseTag === false ? (vue.openBlock(), vue.createElementBlock("span", { key: 0 }, vue.toDisplayString(tag.text), 1)) : (vue.openBlock(), vue.createBlock(vue.unref(ElTooltip), {
                        key: 1,
                        disabled: popperVisible.value || !_ctx.collapseTagsTooltip,
                        "fallback-placements": ["bottom", "top", "right", "left"],
                        placement: "bottom",
                        effect: "light"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("span", null, vue.toDisplayString(tag.text), 1)
                        ]),
                        content: vue.withCtx(() => [
                          vue.createElementVNode("div", {
                            class: vue.normalizeClass(vue.unref(nsCascader).e("collapse-tags"))
                          }, [
                            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(allPresentTags.value.slice(_ctx.maxCollapseTags), (tag2, idx) => {
                              return vue.openBlock(), vue.createElementBlock("div", {
                                key: idx,
                                class: vue.normalizeClass(vue.unref(nsCascader).e("collapse-tag"))
                              }, [
                                (vue.openBlock(), vue.createBlock(vue.unref(ElTag), {
                                  key: tag2.key,
                                  class: "in-tooltip",
                                  type: _ctx.tagType,
                                  size: vue.unref(tagSize),
                                  effect: _ctx.tagEffect,
                                  hit: tag2.hitState,
                                  closable: tag2.closable,
                                  "disable-transitions": "",
                                  onClose: ($event) => deleteTag(tag2)
                                }, {
                                  default: vue.withCtx(() => [
                                    vue.createElementVNode("span", null, vue.toDisplayString(tag2.text), 1)
                                  ]),
                                  _: 2
                                }, 1032, ["type", "size", "effect", "hit", "closable", "onClose"]))
                              ], 2);
                            }), 128))
                          ], 2)
                        ]),
                        _: 2
                      }, 1032, ["disabled"]))
                    ]),
                    _: 2
                  }, 1032, ["type", "size", "effect", "hit", "closable", "onClose"]);
                }), 128)),
                _ctx.filterable && !vue.unref(isDisabled) ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
                  key: 0,
                  "onUpdate:modelValue": ($event) => searchInputValue.value = $event,
                  type: "text",
                  class: vue.normalizeClass(vue.unref(nsCascader).e("search-input")),
                  placeholder: vue.unref(presentText) ? "" : vue.unref(inputPlaceholder),
                  onInput: (e) => handleInput(searchInputValue.value, e),
                  onClick: vue.withModifiers(($event) => togglePopperVisible(true), ["stop"]),
                  onKeydown: vue.withKeys(handleDelete, ["delete"]),
                  onCompositionstart: vue.unref(handleComposition),
                  onCompositionupdate: vue.unref(handleComposition),
                  onCompositionend: vue.unref(handleComposition),
                  onFocus: handleFocus,
                  onBlur: handleBlur
                }, null, 42, ["onUpdate:modelValue", "placeholder", "onInput", "onClick", "onKeydown", "onCompositionstart", "onCompositionupdate", "onCompositionend"])), [
                  [vue.vModelText, searchInputValue.value]
                ]) : vue.createCommentVNode("v-if", true)
              ], 2)) : vue.createCommentVNode("v-if", true)
            ], 46, ["onClick", "onMouseenter", "onMouseleave"])), [
              [vue.unref(ClickOutside), () => togglePopperVisible(false), vue.unref(contentRef)]
            ])
          ]),
          content: vue.withCtx(() => [
            vue.withDirectives(vue.createVNode(vue.unref(ElCascaderPanel), {
              ref_key: "cascaderPanelRef",
              ref: cascaderPanelRef,
              modelValue: vue.unref(checkedValue),
              "onUpdate:modelValue": ($event) => vue.isRef(checkedValue) ? checkedValue.value = $event : null,
              options: _ctx.options,
              props: props2.props,
              border: false,
              "render-label": _ctx.$slots.default,
              onExpandChange: handleExpandChange,
              onClose: ($event) => _ctx.$nextTick(() => togglePopperVisible(false))
            }, {
              empty: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "empty")
              ]),
              _: 3
            }, 8, ["modelValue", "onUpdate:modelValue", "options", "props", "render-label", "onClose"]), [
              [vue.vShow, !filtering.value]
            ]),
            _ctx.filterable ? vue.withDirectives((vue.openBlock(), vue.createBlock(vue.unref(ElScrollbar), {
              key: 0,
              ref_key: "suggestionPanel",
              ref: suggestionPanel,
              tag: "ul",
              class: vue.normalizeClass(vue.unref(nsCascader).e("suggestion-panel")),
              "view-class": vue.unref(nsCascader).e("suggestion-list"),
              onKeydown: handleSuggestionKeyDown
            }, {
              default: vue.withCtx(() => [
                suggestions.value.length ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, { key: 0 }, vue.renderList(suggestions.value, (item) => {
                  return vue.openBlock(), vue.createElementBlock("li", {
                    key: item.uid,
                    class: vue.normalizeClass([
                      vue.unref(nsCascader).e("suggestion-item"),
                      vue.unref(nsCascader).is("checked", item.checked)
                    ]),
                    tabindex: -1,
                    onClick: ($event) => handleSuggestionClick(item)
                  }, [
                    vue.createElementVNode("span", null, vue.toDisplayString(item.text), 1),
                    item.checked ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 0 }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(check_default))
                      ]),
                      _: 1
                    })) : vue.createCommentVNode("v-if", true)
                  ], 10, ["onClick"]);
                }), 128)) : vue.renderSlot(_ctx.$slots, "empty", { key: 1 }, () => [
                  vue.createElementVNode("li", {
                    class: vue.normalizeClass(vue.unref(nsCascader).e("empty-text"))
                  }, vue.toDisplayString(vue.unref(t2)("el.cascader.noMatch")), 3)
                ])
              ]),
              _: 3
            }, 8, ["class", "view-class"])), [
              [vue.vShow, filtering.value]
            ]) : vue.createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 8, ["visible", "teleported", "popper-class", "fallback-placements", "placement", "transition", "persistent"]);
      };
    }
  });
  var Cascader = /* @__PURE__ */ _export_sfc(_sfc_main$1O, [["__file", "cascader.vue"]]);
  const ElCascader = withInstall(Cascader);
  const checkTagProps = buildProps({
    checked: Boolean,
    disabled: Boolean,
    type: {
      type: String,
      values: ["primary", "success", "info", "warning", "danger"],
      default: "primary"
    }
  });
  const checkTagEmits = {
    "update:checked": (value) => isBoolean$1(value),
    [CHANGE_EVENT]: (value) => isBoolean$1(value)
  };
  const __default__$1f = vue.defineComponent({
    name: "ElCheckTag"
  });
  const _sfc_main$1N = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1f,
    props: checkTagProps,
    emits: checkTagEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("check-tag");
      const isDisabled = vue.computed(() => props2.disabled);
      const containerKls = vue.computed(() => [
        ns2.b(),
        ns2.is("checked", props2.checked),
        ns2.is("disabled", isDisabled.value),
        ns2.m(props2.type || "primary")
      ]);
      const handleChange = () => {
        if (isDisabled.value)
          return;
        const checked = !props2.checked;
        emit(CHANGE_EVENT, checked);
        emit("update:checked", checked);
      };
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass(vue.unref(containerKls)),
          onClick: handleChange
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var CheckTag = /* @__PURE__ */ _export_sfc(_sfc_main$1N, [["__file", "check-tag.vue"]]);
  const ElCheckTag = withInstall(CheckTag);
  const rowContextKey = Symbol("rowContextKey");
  const RowJustify = [
    "start",
    "center",
    "end",
    "space-around",
    "space-between",
    "space-evenly"
  ];
  const RowAlign = ["top", "middle", "bottom"];
  const rowProps = buildProps({
    tag: {
      type: String,
      default: "div"
    },
    gutter: {
      type: Number,
      default: 0
    },
    justify: {
      type: String,
      values: RowJustify,
      default: "start"
    },
    align: {
      type: String,
      values: RowAlign
    }
  });
  const __default__$1e = vue.defineComponent({
    name: "ElRow"
  });
  const _sfc_main$1M = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1e,
    props: rowProps,
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("row");
      const gutter = vue.computed(() => props2.gutter);
      vue.provide(rowContextKey, {
        gutter
      });
      const style = vue.computed(() => {
        const styles = {};
        if (!props2.gutter) {
          return styles;
        }
        styles.marginRight = styles.marginLeft = `-${props2.gutter / 2}px`;
        return styles;
      });
      const rowKls = vue.computed(() => [
        ns2.b(),
        ns2.is(`justify-${props2.justify}`, props2.justify !== "start"),
        ns2.is(`align-${props2.align}`, !!props2.align)
      ]);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tag), {
          class: vue.normalizeClass(vue.unref(rowKls)),
          style: vue.normalizeStyle(vue.unref(style))
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["class", "style"]);
      };
    }
  });
  var Row = /* @__PURE__ */ _export_sfc(_sfc_main$1M, [["__file", "row.vue"]]);
  const ElRow = withInstall(Row);
  const colProps = buildProps({
    tag: {
      type: String,
      default: "div"
    },
    span: {
      type: Number,
      default: 24
    },
    offset: {
      type: Number,
      default: 0
    },
    pull: {
      type: Number,
      default: 0
    },
    push: {
      type: Number,
      default: 0
    },
    xs: {
      type: definePropType([Number, Object]),
      default: () => mutable({})
    },
    sm: {
      type: definePropType([Number, Object]),
      default: () => mutable({})
    },
    md: {
      type: definePropType([Number, Object]),
      default: () => mutable({})
    },
    lg: {
      type: definePropType([Number, Object]),
      default: () => mutable({})
    },
    xl: {
      type: definePropType([Number, Object]),
      default: () => mutable({})
    }
  });
  const __default__$1d = vue.defineComponent({
    name: "ElCol"
  });
  const _sfc_main$1L = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1d,
    props: colProps,
    setup(__props) {
      const props2 = __props;
      const { gutter } = vue.inject(rowContextKey, { gutter: vue.computed(() => 0) });
      const ns2 = useNamespace("col");
      const style = vue.computed(() => {
        const styles = {};
        if (gutter.value) {
          styles.paddingLeft = styles.paddingRight = `${gutter.value / 2}px`;
        }
        return styles;
      });
      const colKls = vue.computed(() => {
        const classes = [];
        const pos = ["span", "offset", "pull", "push"];
        pos.forEach((prop) => {
          const size = props2[prop];
          if (isNumber$2(size)) {
            if (prop === "span")
              classes.push(ns2.b(`${props2[prop]}`));
            else if (size > 0)
              classes.push(ns2.b(`${prop}-${props2[prop]}`));
          }
        });
        const sizes = ["xs", "sm", "md", "lg", "xl"];
        sizes.forEach((size) => {
          if (isNumber$2(props2[size])) {
            classes.push(ns2.b(`${size}-${props2[size]}`));
          } else if (shared.isObject(props2[size])) {
            Object.entries(props2[size]).forEach(([prop, sizeProp]) => {
              classes.push(prop !== "span" ? ns2.b(`${size}-${prop}-${sizeProp}`) : ns2.b(`${size}-${sizeProp}`));
            });
          }
        });
        if (gutter.value) {
          classes.push(ns2.is("guttered"));
        }
        return [ns2.b(), classes];
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tag), {
          class: vue.normalizeClass(vue.unref(colKls)),
          style: vue.normalizeStyle(vue.unref(style))
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["class", "style"]);
      };
    }
  });
  var Col = /* @__PURE__ */ _export_sfc(_sfc_main$1L, [["__file", "col.vue"]]);
  const ElCol = withInstall(Col);
  const emitChangeFn = (value) => isNumber$2(value) || shared.isString(value) || shared.isArray(value);
  const collapseProps = buildProps({
    accordion: Boolean,
    modelValue: {
      type: definePropType([Array, String, Number]),
      default: () => mutable([])
    }
  });
  const collapseEmits = {
    [UPDATE_MODEL_EVENT]: emitChangeFn,
    [CHANGE_EVENT]: emitChangeFn
  };
  const collapseContextKey = Symbol("collapseContextKey");
  const useCollapse = (props2, emit) => {
    const activeNames = vue.ref(castArray$1(props2.modelValue));
    const setActiveNames = (_activeNames) => {
      activeNames.value = _activeNames;
      const value = props2.accordion ? activeNames.value[0] : activeNames.value;
      emit(UPDATE_MODEL_EVENT, value);
      emit(CHANGE_EVENT, value);
    };
    const handleItemClick = (name) => {
      if (props2.accordion) {
        setActiveNames([activeNames.value[0] === name ? "" : name]);
      } else {
        const _activeNames = [...activeNames.value];
        const index = _activeNames.indexOf(name);
        if (index > -1) {
          _activeNames.splice(index, 1);
        } else {
          _activeNames.push(name);
        }
        setActiveNames(_activeNames);
      }
    };
    vue.watch(() => props2.modelValue, () => activeNames.value = castArray$1(props2.modelValue), { deep: true });
    vue.provide(collapseContextKey, {
      activeNames,
      handleItemClick
    });
    return {
      activeNames,
      setActiveNames
    };
  };
  const useCollapseDOM = () => {
    const ns2 = useNamespace("collapse");
    const rootKls = vue.computed(() => ns2.b());
    return {
      rootKls
    };
  };
  const __default__$1c = vue.defineComponent({
    name: "ElCollapse"
  });
  const _sfc_main$1K = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1c,
    props: collapseProps,
    emits: collapseEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const { activeNames, setActiveNames } = useCollapse(props2, emit);
      const { rootKls } = useCollapseDOM();
      expose({
        activeNames,
        setActiveNames
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(rootKls))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var Collapse = /* @__PURE__ */ _export_sfc(_sfc_main$1K, [["__file", "collapse.vue"]]);
  const __default__$1b = vue.defineComponent({
    name: "ElCollapseTransition"
  });
  const _sfc_main$1J = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1b,
    setup(__props) {
      const ns2 = useNamespace("collapse-transition");
      const reset = (el) => {
        el.style.maxHeight = "";
        el.style.overflow = el.dataset.oldOverflow;
        el.style.paddingTop = el.dataset.oldPaddingTop;
        el.style.paddingBottom = el.dataset.oldPaddingBottom;
      };
      const on2 = {
        beforeEnter(el) {
          if (!el.dataset)
            el.dataset = {};
          el.dataset.oldPaddingTop = el.style.paddingTop;
          el.dataset.oldPaddingBottom = el.style.paddingBottom;
          if (el.style.height)
            el.dataset.elExistsHeight = el.style.height;
          el.style.maxHeight = 0;
          el.style.paddingTop = 0;
          el.style.paddingBottom = 0;
        },
        enter(el) {
          requestAnimationFrame(() => {
            el.dataset.oldOverflow = el.style.overflow;
            if (el.dataset.elExistsHeight) {
              el.style.maxHeight = el.dataset.elExistsHeight;
            } else if (el.scrollHeight !== 0) {
              el.style.maxHeight = `${el.scrollHeight}px`;
            } else {
              el.style.maxHeight = 0;
            }
            el.style.paddingTop = el.dataset.oldPaddingTop;
            el.style.paddingBottom = el.dataset.oldPaddingBottom;
            el.style.overflow = "hidden";
          });
        },
        afterEnter(el) {
          el.style.maxHeight = "";
          el.style.overflow = el.dataset.oldOverflow;
        },
        enterCancelled(el) {
          reset(el);
        },
        beforeLeave(el) {
          if (!el.dataset)
            el.dataset = {};
          el.dataset.oldPaddingTop = el.style.paddingTop;
          el.dataset.oldPaddingBottom = el.style.paddingBottom;
          el.dataset.oldOverflow = el.style.overflow;
          el.style.maxHeight = `${el.scrollHeight}px`;
          el.style.overflow = "hidden";
        },
        leave(el) {
          if (el.scrollHeight !== 0) {
            el.style.maxHeight = 0;
            el.style.paddingTop = 0;
            el.style.paddingBottom = 0;
          }
        },
        afterLeave(el) {
          reset(el);
        },
        leaveCancelled(el) {
          reset(el);
        }
      };
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.Transition, vue.mergeProps({
          name: vue.unref(ns2).b()
        }, vue.toHandlers(on2)), {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["name"]);
      };
    }
  });
  var CollapseTransition = /* @__PURE__ */ _export_sfc(_sfc_main$1J, [["__file", "collapse-transition.vue"]]);
  const ElCollapseTransition = withInstall(CollapseTransition);
  const collapseItemProps = buildProps({
    title: {
      type: String,
      default: ""
    },
    name: {
      type: definePropType([String, Number]),
      default: void 0
    },
    icon: {
      type: iconPropType,
      default: arrow_right_default
    },
    disabled: Boolean
  });
  const useCollapseItem = (props2) => {
    const collapse = vue.inject(collapseContextKey);
    const { namespace } = useNamespace("collapse");
    const focusing = vue.ref(false);
    const isClick = vue.ref(false);
    const idInjection = useIdInjection();
    const id = vue.computed(() => idInjection.current++);
    const name = vue.computed(() => {
      var _a2;
      return (_a2 = props2.name) != null ? _a2 : `${namespace.value}-id-${idInjection.prefix}-${vue.unref(id)}`;
    });
    const isActive = vue.computed(() => collapse == null ? void 0 : collapse.activeNames.value.includes(vue.unref(name)));
    const handleFocus = () => {
      setTimeout(() => {
        if (!isClick.value) {
          focusing.value = true;
        } else {
          isClick.value = false;
        }
      }, 50);
    };
    const handleHeaderClick = () => {
      if (props2.disabled)
        return;
      collapse == null ? void 0 : collapse.handleItemClick(vue.unref(name));
      focusing.value = false;
      isClick.value = true;
    };
    const handleEnterClick = () => {
      collapse == null ? void 0 : collapse.handleItemClick(vue.unref(name));
    };
    return {
      focusing,
      id,
      isActive,
      handleFocus,
      handleHeaderClick,
      handleEnterClick
    };
  };
  const useCollapseItemDOM = (props2, { focusing, isActive, id }) => {
    const ns2 = useNamespace("collapse");
    const rootKls = vue.computed(() => [
      ns2.b("item"),
      ns2.is("active", vue.unref(isActive)),
      ns2.is("disabled", props2.disabled)
    ]);
    const headKls = vue.computed(() => [
      ns2.be("item", "header"),
      ns2.is("active", vue.unref(isActive)),
      { focusing: vue.unref(focusing) && !props2.disabled }
    ]);
    const arrowKls = vue.computed(() => [
      ns2.be("item", "arrow"),
      ns2.is("active", vue.unref(isActive))
    ]);
    const itemWrapperKls = vue.computed(() => ns2.be("item", "wrap"));
    const itemContentKls = vue.computed(() => ns2.be("item", "content"));
    const scopedContentId = vue.computed(() => ns2.b(`content-${vue.unref(id)}`));
    const scopedHeadId = vue.computed(() => ns2.b(`head-${vue.unref(id)}`));
    return {
      arrowKls,
      headKls,
      rootKls,
      itemWrapperKls,
      itemContentKls,
      scopedContentId,
      scopedHeadId
    };
  };
  const __default__$1a = vue.defineComponent({
    name: "ElCollapseItem"
  });
  const _sfc_main$1I = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1a,
    props: collapseItemProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const {
        focusing,
        id,
        isActive,
        handleFocus,
        handleHeaderClick,
        handleEnterClick
      } = useCollapseItem(props2);
      const {
        arrowKls,
        headKls,
        rootKls,
        itemWrapperKls,
        itemContentKls,
        scopedContentId,
        scopedHeadId
      } = useCollapseItemDOM(props2, { focusing, isActive, id });
      expose({
        isActive
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(rootKls))
        }, [
          vue.createElementVNode("button", {
            id: vue.unref(scopedHeadId),
            class: vue.normalizeClass(vue.unref(headKls)),
            "aria-expanded": vue.unref(isActive),
            "aria-controls": vue.unref(scopedContentId),
            "aria-describedby": vue.unref(scopedContentId),
            tabindex: _ctx.disabled ? -1 : 0,
            type: "button",
            onClick: vue.unref(handleHeaderClick),
            onKeydown: vue.withKeys(vue.withModifiers(vue.unref(handleEnterClick), ["stop", "prevent"]), ["space", "enter"]),
            onFocus: vue.unref(handleFocus),
            onBlur: ($event) => focusing.value = false
          }, [
            vue.renderSlot(_ctx.$slots, "title", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)
            ]),
            vue.renderSlot(_ctx.$slots, "icon", { isActive: vue.unref(isActive) }, () => [
              vue.createVNode(vue.unref(ElIcon), {
                class: vue.normalizeClass(vue.unref(arrowKls))
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
                ]),
                _: 1
              }, 8, ["class"])
            ])
          ], 42, ["id", "aria-expanded", "aria-controls", "aria-describedby", "tabindex", "onClick", "onKeydown", "onFocus", "onBlur"]),
          vue.createVNode(vue.unref(ElCollapseTransition), null, {
            default: vue.withCtx(() => [
              vue.withDirectives(vue.createElementVNode("div", {
                id: vue.unref(scopedContentId),
                role: "region",
                class: vue.normalizeClass(vue.unref(itemWrapperKls)),
                "aria-hidden": !vue.unref(isActive),
                "aria-labelledby": vue.unref(scopedHeadId)
              }, [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(itemContentKls))
                }, [
                  vue.renderSlot(_ctx.$slots, "default")
                ], 2)
              ], 10, ["id", "aria-hidden", "aria-labelledby"]), [
                [vue.vShow, vue.unref(isActive)]
              ])
            ]),
            _: 3
          })
        ], 2);
      };
    }
  });
  var CollapseItem = /* @__PURE__ */ _export_sfc(_sfc_main$1I, [["__file", "collapse-item.vue"]]);
  const ElCollapse = withInstall(Collapse, {
    CollapseItem
  });
  const ElCollapseItem = withNoopInstall(CollapseItem);
  const alphaSliderProps = buildProps({
    color: {
      type: definePropType(Object),
      required: true
    },
    vertical: {
      type: Boolean,
      default: false
    }
  });
  let isDragging = false;
  function draggable(element, options) {
    if (!isClient)
      return;
    const moveFn = function(event) {
      var _a2;
      (_a2 = options.drag) == null ? void 0 : _a2.call(options, event);
    };
    const upFn = function(event) {
      var _a2;
      document.removeEventListener("mousemove", moveFn);
      document.removeEventListener("mouseup", upFn);
      document.removeEventListener("touchmove", moveFn);
      document.removeEventListener("touchend", upFn);
      document.onselectstart = null;
      document.ondragstart = null;
      isDragging = false;
      (_a2 = options.end) == null ? void 0 : _a2.call(options, event);
    };
    const downFn = function(event) {
      var _a2;
      if (isDragging)
        return;
      event.preventDefault();
      document.onselectstart = () => false;
      document.ondragstart = () => false;
      document.addEventListener("mousemove", moveFn);
      document.addEventListener("mouseup", upFn);
      document.addEventListener("touchmove", moveFn);
      document.addEventListener("touchend", upFn);
      isDragging = true;
      (_a2 = options.start) == null ? void 0 : _a2.call(options, event);
    };
    element.addEventListener("mousedown", downFn);
    element.addEventListener("touchstart", downFn, { passive: false });
  }
  const useAlphaSlider = (props2) => {
    const instance = vue.getCurrentInstance();
    const { t: t2 } = useLocale();
    const thumb = vue.shallowRef();
    const bar = vue.shallowRef();
    const alpha = vue.computed(() => props2.color.get("alpha"));
    const alphaLabel = vue.computed(() => t2("el.colorpicker.alphaLabel"));
    function handleClick(event) {
      var _a2;
      const target = event.target;
      if (target !== thumb.value) {
        handleDrag(event);
      }
      (_a2 = thumb.value) == null ? void 0 : _a2.focus();
    }
    function handleDrag(event) {
      if (!bar.value || !thumb.value)
        return;
      const el = instance.vnode.el;
      const rect = el.getBoundingClientRect();
      const { clientX, clientY } = getClientXY(event);
      if (!props2.vertical) {
        let left2 = clientX - rect.left;
        left2 = Math.max(thumb.value.offsetWidth / 2, left2);
        left2 = Math.min(left2, rect.width - thumb.value.offsetWidth / 2);
        props2.color.set("alpha", Math.round((left2 - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));
      } else {
        let top = clientY - rect.top;
        top = Math.max(thumb.value.offsetHeight / 2, top);
        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);
        props2.color.set("alpha", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));
      }
    }
    function handleKeydown(event) {
      const { code, shiftKey } = event;
      const step = shiftKey ? 10 : 1;
      switch (code) {
        case EVENT_CODE.left:
        case EVENT_CODE.down:
          event.preventDefault();
          event.stopPropagation();
          incrementPosition(-step);
          break;
        case EVENT_CODE.right:
        case EVENT_CODE.up:
          event.preventDefault();
          event.stopPropagation();
          incrementPosition(step);
          break;
      }
    }
    function incrementPosition(step) {
      let next = alpha.value + step;
      next = next < 0 ? 0 : next > 100 ? 100 : next;
      props2.color.set("alpha", next);
    }
    return {
      thumb,
      bar,
      alpha,
      alphaLabel,
      handleDrag,
      handleClick,
      handleKeydown
    };
  };
  const useAlphaSliderDOM = (props2, {
    bar,
    thumb,
    handleDrag
  }) => {
    const instance = vue.getCurrentInstance();
    const ns2 = useNamespace("color-alpha-slider");
    const thumbLeft = vue.ref(0);
    const thumbTop = vue.ref(0);
    const background = vue.ref();
    function getThumbLeft() {
      if (!thumb.value)
        return 0;
      if (props2.vertical)
        return 0;
      const el = instance.vnode.el;
      const alpha = props2.color.get("alpha");
      if (!el)
        return 0;
      return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);
    }
    function getThumbTop() {
      if (!thumb.value)
        return 0;
      const el = instance.vnode.el;
      if (!props2.vertical)
        return 0;
      const alpha = props2.color.get("alpha");
      if (!el)
        return 0;
      return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);
    }
    function getBackground() {
      if (props2.color && props2.color.value) {
        const { r: r2, g: g2, b: b2 } = props2.color.toRgb();
        return `linear-gradient(to right, rgba(${r2}, ${g2}, ${b2}, 0) 0%, rgba(${r2}, ${g2}, ${b2}, 1) 100%)`;
      }
      return "";
    }
    function update() {
      thumbLeft.value = getThumbLeft();
      thumbTop.value = getThumbTop();
      background.value = getBackground();
    }
    vue.onMounted(() => {
      if (!bar.value || !thumb.value)
        return;
      const dragConfig = {
        drag: (event) => {
          handleDrag(event);
        },
        end: (event) => {
          handleDrag(event);
        }
      };
      draggable(bar.value, dragConfig);
      draggable(thumb.value, dragConfig);
      update();
    });
    vue.watch(() => props2.color.get("alpha"), () => update());
    vue.watch(() => props2.color.value, () => update());
    const rootKls = vue.computed(() => [ns2.b(), ns2.is("vertical", props2.vertical)]);
    const barKls = vue.computed(() => ns2.e("bar"));
    const thumbKls = vue.computed(() => ns2.e("thumb"));
    const barStyle = vue.computed(() => ({ background: background.value }));
    const thumbStyle = vue.computed(() => ({
      left: addUnit(thumbLeft.value),
      top: addUnit(thumbTop.value)
    }));
    return { rootKls, barKls, barStyle, thumbKls, thumbStyle, update };
  };
  const COMPONENT_NAME$d = "ElColorAlphaSlider";
  const __default__$19 = vue.defineComponent({
    name: COMPONENT_NAME$d
  });
  const _sfc_main$1H = /* @__PURE__ */ vue.defineComponent({
    ...__default__$19,
    props: alphaSliderProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const {
        alpha,
        alphaLabel,
        bar,
        thumb,
        handleDrag,
        handleClick,
        handleKeydown
      } = useAlphaSlider(props2);
      const { rootKls, barKls, barStyle, thumbKls, thumbStyle, update } = useAlphaSliderDOM(props2, {
        bar,
        thumb,
        handleDrag
      });
      expose({
        update,
        bar,
        thumb
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(rootKls))
        }, [
          vue.createElementVNode("div", {
            ref_key: "bar",
            ref: bar,
            class: vue.normalizeClass(vue.unref(barKls)),
            style: vue.normalizeStyle(vue.unref(barStyle)),
            onClick: vue.unref(handleClick)
          }, null, 14, ["onClick"]),
          vue.createElementVNode("div", {
            ref_key: "thumb",
            ref: thumb,
            class: vue.normalizeClass(vue.unref(thumbKls)),
            style: vue.normalizeStyle(vue.unref(thumbStyle)),
            "aria-label": vue.unref(alphaLabel),
            "aria-valuenow": vue.unref(alpha),
            "aria-orientation": _ctx.vertical ? "vertical" : "horizontal",
            "aria-valuemin": "0",
            "aria-valuemax": "100",
            role: "slider",
            tabindex: "0",
            onKeydown: vue.unref(handleKeydown)
          }, null, 46, ["aria-label", "aria-valuenow", "aria-orientation", "onKeydown"])
        ], 2);
      };
    }
  });
  var AlphaSlider = /* @__PURE__ */ _export_sfc(_sfc_main$1H, [["__file", "alpha-slider.vue"]]);
  const _sfc_main$1G = vue.defineComponent({
    name: "ElColorHueSlider",
    props: {
      color: {
        type: Object,
        required: true
      },
      vertical: Boolean
    },
    setup(props2) {
      const ns2 = useNamespace("color-hue-slider");
      const instance = vue.getCurrentInstance();
      const thumb = vue.ref();
      const bar = vue.ref();
      const thumbLeft = vue.ref(0);
      const thumbTop = vue.ref(0);
      const hueValue = vue.computed(() => {
        return props2.color.get("hue");
      });
      vue.watch(() => hueValue.value, () => {
        update();
      });
      function handleClick(event) {
        const target = event.target;
        if (target !== thumb.value) {
          handleDrag(event);
        }
      }
      function handleDrag(event) {
        if (!bar.value || !thumb.value)
          return;
        const el = instance.vnode.el;
        const rect = el.getBoundingClientRect();
        const { clientX, clientY } = getClientXY(event);
        let hue;
        if (!props2.vertical) {
          let left2 = clientX - rect.left;
          left2 = Math.min(left2, rect.width - thumb.value.offsetWidth / 2);
          left2 = Math.max(thumb.value.offsetWidth / 2, left2);
          hue = Math.round((left2 - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 360);
        } else {
          let top = clientY - rect.top;
          top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);
          top = Math.max(thumb.value.offsetHeight / 2, top);
          hue = Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);
        }
        props2.color.set("hue", hue);
      }
      function getThumbLeft() {
        if (!thumb.value)
          return 0;
        const el = instance.vnode.el;
        if (props2.vertical)
          return 0;
        const hue = props2.color.get("hue");
        if (!el)
          return 0;
        return Math.round(hue * (el.offsetWidth - thumb.value.offsetWidth / 2) / 360);
      }
      function getThumbTop() {
        if (!thumb.value)
          return 0;
        const el = instance.vnode.el;
        if (!props2.vertical)
          return 0;
        const hue = props2.color.get("hue");
        if (!el)
          return 0;
        return Math.round(hue * (el.offsetHeight - thumb.value.offsetHeight / 2) / 360);
      }
      function update() {
        thumbLeft.value = getThumbLeft();
        thumbTop.value = getThumbTop();
      }
      vue.onMounted(() => {
        if (!bar.value || !thumb.value)
          return;
        const dragConfig = {
          drag: (event) => {
            handleDrag(event);
          },
          end: (event) => {
            handleDrag(event);
          }
        };
        draggable(bar.value, dragConfig);
        draggable(thumb.value, dragConfig);
        update();
      });
      return {
        bar,
        thumb,
        thumbLeft,
        thumbTop,
        hueValue,
        handleClick,
        update,
        ns: ns2
      };
    }
  });
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([_ctx.ns.b(), _ctx.ns.is("vertical", _ctx.vertical)])
    }, [
      vue.createElementVNode("div", {
        ref: "bar",
        class: vue.normalizeClass(_ctx.ns.e("bar")),
        onClick: _ctx.handleClick
      }, null, 10, ["onClick"]),
      vue.createElementVNode("div", {
        ref: "thumb",
        class: vue.normalizeClass(_ctx.ns.e("thumb")),
        style: vue.normalizeStyle({
          left: _ctx.thumbLeft + "px",
          top: _ctx.thumbTop + "px"
        })
      }, null, 6)
    ], 2);
  }
  var HueSlider = /* @__PURE__ */ _export_sfc(_sfc_main$1G, [["render", _sfc_render$q], ["__file", "hue-slider.vue"]]);
  const colorPickerProps = buildProps({
    modelValue: String,
    id: String,
    showAlpha: Boolean,
    colorFormat: String,
    disabled: Boolean,
    size: useSizeProp,
    popperClass: {
      type: String,
      default: ""
    },
    tabindex: {
      type: [String, Number],
      default: 0
    },
    teleported: useTooltipContentProps.teleported,
    predefine: {
      type: definePropType(Array)
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    ...useAriaProps(["ariaLabel"])
  });
  const colorPickerEmits = {
    [UPDATE_MODEL_EVENT]: (val) => shared.isString(val) || isNil(val),
    [CHANGE_EVENT]: (val) => shared.isString(val) || isNil(val),
    activeChange: (val) => shared.isString(val) || isNil(val),
    focus: (evt) => evt instanceof FocusEvent,
    blur: (evt) => evt instanceof FocusEvent
  };
  const colorPickerContextKey = Symbol("colorPickerContextKey");
  const hsv2hsl = function(hue, sat, val) {
    return [
      hue,
      sat * val / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0,
      hue / 2
    ];
  };
  const isOnePointZero = function(n2) {
    return typeof n2 === "string" && n2.includes(".") && Number.parseFloat(n2) === 1;
  };
  const isPercentage = function(n2) {
    return typeof n2 === "string" && n2.includes("%");
  };
  const bound01 = function(value, max2) {
    if (isOnePointZero(value))
      value = "100%";
    const processPercent = isPercentage(value);
    value = Math.min(max2, Math.max(0, Number.parseFloat(`${value}`)));
    if (processPercent) {
      value = Number.parseInt(`${value * max2}`, 10) / 100;
    }
    if (Math.abs(value - max2) < 1e-6) {
      return 1;
    }
    return value % max2 / Number.parseFloat(max2);
  };
  const INT_HEX_MAP = {
    10: "A",
    11: "B",
    12: "C",
    13: "D",
    14: "E",
    15: "F"
  };
  const hexOne = (value) => {
    value = Math.min(Math.round(value), 255);
    const high = Math.floor(value / 16);
    const low = value % 16;
    return `${INT_HEX_MAP[high] || high}${INT_HEX_MAP[low] || low}`;
  };
  const toHex = function({ r: r2, g: g2, b: b2 }) {
    if (Number.isNaN(+r2) || Number.isNaN(+g2) || Number.isNaN(+b2))
      return "";
    return `#${hexOne(r2)}${hexOne(g2)}${hexOne(b2)}`;
  };
  const HEX_INT_MAP = {
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15
  };
  const parseHexChannel = function(hex) {
    if (hex.length === 2) {
      return (HEX_INT_MAP[hex[0].toUpperCase()] || +hex[0]) * 16 + (HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1]);
    }
    return HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1];
  };
  const hsl2hsv = function(hue, sat, light) {
    sat = sat / 100;
    light = light / 100;
    let smin = sat;
    const lmin = Math.max(light, 0.01);
    light *= 2;
    sat *= light <= 1 ? light : 2 - light;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    const v2 = (light + sat) / 2;
    const sv = light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);
    return {
      h: hue,
      s: sv * 100,
      v: v2 * 100
    };
  };
  const rgb2hsv = (r2, g2, b2) => {
    r2 = bound01(r2, 255);
    g2 = bound01(g2, 255);
    b2 = bound01(b2, 255);
    const max2 = Math.max(r2, g2, b2);
    const min2 = Math.min(r2, g2, b2);
    let h2;
    const v2 = max2;
    const d2 = max2 - min2;
    const s2 = max2 === 0 ? 0 : d2 / max2;
    if (max2 === min2) {
      h2 = 0;
    } else {
      switch (max2) {
        case r2: {
          h2 = (g2 - b2) / d2 + (g2 < b2 ? 6 : 0);
          break;
        }
        case g2: {
          h2 = (b2 - r2) / d2 + 2;
          break;
        }
        case b2: {
          h2 = (r2 - g2) / d2 + 4;
          break;
        }
      }
      h2 /= 6;
    }
    return { h: h2 * 360, s: s2 * 100, v: v2 * 100 };
  };
  const hsv2rgb = function(h2, s2, v2) {
    h2 = bound01(h2, 360) * 6;
    s2 = bound01(s2, 100);
    v2 = bound01(v2, 100);
    const i2 = Math.floor(h2);
    const f2 = h2 - i2;
    const p2 = v2 * (1 - s2);
    const q2 = v2 * (1 - f2 * s2);
    const t2 = v2 * (1 - (1 - f2) * s2);
    const mod = i2 % 6;
    const r2 = [v2, q2, p2, p2, t2, v2][mod];
    const g2 = [t2, v2, v2, q2, p2, p2][mod];
    const b2 = [p2, p2, t2, v2, v2, q2][mod];
    return {
      r: Math.round(r2 * 255),
      g: Math.round(g2 * 255),
      b: Math.round(b2 * 255)
    };
  };
  class Color {
    constructor(options = {}) {
      this._hue = 0;
      this._saturation = 100;
      this._value = 100;
      this._alpha = 100;
      this.enableAlpha = false;
      this.format = "hex";
      this.value = "";
      for (const option in options) {
        if (shared.hasOwn(options, option)) {
          this[option] = options[option];
        }
      }
      if (options.value) {
        this.fromString(options.value);
      } else {
        this.doOnChange();
      }
    }
    set(prop, value) {
      if (arguments.length === 1 && typeof prop === "object") {
        for (const p2 in prop) {
          if (shared.hasOwn(prop, p2)) {
            this.set(p2, prop[p2]);
          }
        }
        return;
      }
      this[`_${prop}`] = value;
      this.doOnChange();
    }
    get(prop) {
      if (prop === "alpha") {
        return Math.floor(this[`_${prop}`]);
      }
      return this[`_${prop}`];
    }
    toRgb() {
      return hsv2rgb(this._hue, this._saturation, this._value);
    }
    fromString(value) {
      if (!value) {
        this._hue = 0;
        this._saturation = 100;
        this._value = 100;
        this.doOnChange();
        return;
      }
      const fromHSV = (h2, s2, v2) => {
        this._hue = Math.max(0, Math.min(360, h2));
        this._saturation = Math.max(0, Math.min(100, s2));
        this._value = Math.max(0, Math.min(100, v2));
        this.doOnChange();
      };
      if (value.includes("hsl")) {
        const parts = value.replace(/hsla|hsl|\(|\)/gm, "").split(/\s|,/g).filter((val) => val !== "").map((val, index) => index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
        if (parts.length === 4) {
          this._alpha = Number.parseFloat(parts[3]) * 100;
        } else if (parts.length === 3) {
          this._alpha = 100;
        }
        if (parts.length >= 3) {
          const { h: h2, s: s2, v: v2 } = hsl2hsv(parts[0], parts[1], parts[2]);
          fromHSV(h2, s2, v2);
        }
      } else if (value.includes("hsv")) {
        const parts = value.replace(/hsva|hsv|\(|\)/gm, "").split(/\s|,/g).filter((val) => val !== "").map((val, index) => index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
        if (parts.length === 4) {
          this._alpha = Number.parseFloat(parts[3]) * 100;
        } else if (parts.length === 3) {
          this._alpha = 100;
        }
        if (parts.length >= 3) {
          fromHSV(parts[0], parts[1], parts[2]);
        }
      } else if (value.includes("rgb")) {
        const parts = value.replace(/rgba|rgb|\(|\)/gm, "").split(/\s|,/g).filter((val) => val !== "").map((val, index) => index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
        if (parts.length === 4) {
          this._alpha = Number.parseFloat(parts[3]) * 100;
        } else if (parts.length === 3) {
          this._alpha = 100;
        }
        if (parts.length >= 3) {
          const { h: h2, s: s2, v: v2 } = rgb2hsv(parts[0], parts[1], parts[2]);
          fromHSV(h2, s2, v2);
        }
      } else if (value.includes("#")) {
        const hex = value.replace("#", "").trim();
        if (!/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(hex))
          return;
        let r2, g2, b2;
        if (hex.length === 3) {
          r2 = parseHexChannel(hex[0] + hex[0]);
          g2 = parseHexChannel(hex[1] + hex[1]);
          b2 = parseHexChannel(hex[2] + hex[2]);
        } else if (hex.length === 6 || hex.length === 8) {
          r2 = parseHexChannel(hex.slice(0, 2));
          g2 = parseHexChannel(hex.slice(2, 4));
          b2 = parseHexChannel(hex.slice(4, 6));
        }
        if (hex.length === 8) {
          this._alpha = parseHexChannel(hex.slice(6)) / 255 * 100;
        } else if (hex.length === 3 || hex.length === 6) {
          this._alpha = 100;
        }
        const { h: h2, s: s2, v: v2 } = rgb2hsv(r2, g2, b2);
        fromHSV(h2, s2, v2);
      }
    }
    compare(color) {
      return Math.abs(color._hue - this._hue) < 2 && Math.abs(color._saturation - this._saturation) < 1 && Math.abs(color._value - this._value) < 1 && Math.abs(color._alpha - this._alpha) < 1;
    }
    doOnChange() {
      const { _hue, _saturation, _value, _alpha, format: format2 } = this;
      if (this.enableAlpha) {
        switch (format2) {
          case "hsl": {
            const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
            this.value = `hsla(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(hsl[2] * 100)}%, ${this.get("alpha") / 100})`;
            break;
          }
          case "hsv": {
            this.value = `hsva(${_hue}, ${Math.round(_saturation)}%, ${Math.round(_value)}%, ${this.get("alpha") / 100})`;
            break;
          }
          case "hex": {
            this.value = `${toHex(hsv2rgb(_hue, _saturation, _value))}${hexOne(_alpha * 255 / 100)}`;
            break;
          }
          default: {
            const { r: r2, g: g2, b: b2 } = hsv2rgb(_hue, _saturation, _value);
            this.value = `rgba(${r2}, ${g2}, ${b2}, ${this.get("alpha") / 100})`;
          }
        }
      } else {
        switch (format2) {
          case "hsl": {
            const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
            this.value = `hsl(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(hsl[2] * 100)}%)`;
            break;
          }
          case "hsv": {
            this.value = `hsv(${_hue}, ${Math.round(_saturation)}%, ${Math.round(_value)}%)`;
            break;
          }
          case "rgb": {
            const { r: r2, g: g2, b: b2 } = hsv2rgb(_hue, _saturation, _value);
            this.value = `rgb(${r2}, ${g2}, ${b2})`;
            break;
          }
          default: {
            this.value = toHex(hsv2rgb(_hue, _saturation, _value));
          }
        }
      }
    }
  }
  const _sfc_main$1F = vue.defineComponent({
    props: {
      colors: {
        type: Array,
        required: true
      },
      color: {
        type: Object,
        required: true
      },
      enableAlpha: {
        type: Boolean,
        required: true
      }
    },
    setup(props2) {
      const ns2 = useNamespace("color-predefine");
      const { currentColor } = vue.inject(colorPickerContextKey);
      const rgbaColors = vue.ref(parseColors(props2.colors, props2.color));
      vue.watch(() => currentColor.value, (val) => {
        const color = new Color();
        color.fromString(val);
        rgbaColors.value.forEach((item) => {
          item.selected = color.compare(item);
        });
      });
      vue.watchEffect(() => {
        rgbaColors.value = parseColors(props2.colors, props2.color);
      });
      function handleSelect(index) {
        props2.color.fromString(props2.colors[index]);
      }
      function parseColors(colors, color) {
        return colors.map((value) => {
          const c2 = new Color();
          c2.enableAlpha = props2.enableAlpha;
          c2.format = "rgba";
          c2.fromString(value);
          c2.selected = c2.value === color.value;
          return c2;
        });
      }
      return {
        rgbaColors,
        handleSelect,
        ns: ns2
      };
    }
  });
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(_ctx.ns.b())
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("colors"))
      }, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.rgbaColors, (item, index) => {
          return vue.openBlock(), vue.createElementBlock("div", {
            key: _ctx.colors[index],
            class: vue.normalizeClass([
              _ctx.ns.e("color-selector"),
              _ctx.ns.is("alpha", item._alpha < 100),
              { selected: item.selected }
            ]),
            onClick: ($event) => _ctx.handleSelect(index)
          }, [
            vue.createElementVNode("div", {
              style: vue.normalizeStyle({ backgroundColor: item.value })
            }, null, 4)
          ], 10, ["onClick"]);
        }), 128))
      ], 2)
    ], 2);
  }
  var Predefine = /* @__PURE__ */ _export_sfc(_sfc_main$1F, [["render", _sfc_render$p], ["__file", "predefine.vue"]]);
  const _sfc_main$1E = vue.defineComponent({
    name: "ElSlPanel",
    props: {
      color: {
        type: Object,
        required: true
      }
    },
    setup(props2) {
      const ns2 = useNamespace("color-svpanel");
      const instance = vue.getCurrentInstance();
      const cursorTop = vue.ref(0);
      const cursorLeft = vue.ref(0);
      const background = vue.ref("hsl(0, 100%, 50%)");
      const colorValue = vue.computed(() => {
        const hue = props2.color.get("hue");
        const value = props2.color.get("value");
        return { hue, value };
      });
      function update() {
        const saturation = props2.color.get("saturation");
        const value = props2.color.get("value");
        const el = instance.vnode.el;
        const { clientWidth: width, clientHeight: height } = el;
        cursorLeft.value = saturation * width / 100;
        cursorTop.value = (100 - value) * height / 100;
        background.value = `hsl(${props2.color.get("hue")}, 100%, 50%)`;
      }
      function handleDrag(event) {
        const el = instance.vnode.el;
        const rect = el.getBoundingClientRect();
        const { clientX, clientY } = getClientXY(event);
        let left2 = clientX - rect.left;
        let top = clientY - rect.top;
        left2 = Math.max(0, left2);
        left2 = Math.min(left2, rect.width);
        top = Math.max(0, top);
        top = Math.min(top, rect.height);
        cursorLeft.value = left2;
        cursorTop.value = top;
        props2.color.set({
          saturation: left2 / rect.width * 100,
          value: 100 - top / rect.height * 100
        });
      }
      vue.watch(() => colorValue.value, () => {
        update();
      });
      vue.onMounted(() => {
        draggable(instance.vnode.el, {
          drag: (event) => {
            handleDrag(event);
          },
          end: (event) => {
            handleDrag(event);
          }
        });
        update();
      });
      return {
        cursorTop,
        cursorLeft,
        background,
        colorValue,
        handleDrag,
        update,
        ns: ns2
      };
    }
  });
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(_ctx.ns.b()),
      style: vue.normalizeStyle({
        backgroundColor: _ctx.background
      })
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("white"))
      }, null, 2),
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("black"))
      }, null, 2),
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("cursor")),
        style: vue.normalizeStyle({
          top: _ctx.cursorTop + "px",
          left: _ctx.cursorLeft + "px"
        })
      }, [
        vue.createElementVNode("div")
      ], 6)
    ], 6);
  }
  var SvPanel = /* @__PURE__ */ _export_sfc(_sfc_main$1E, [["render", _sfc_render$o], ["__file", "sv-panel.vue"]]);
  const __default__$18 = vue.defineComponent({
    name: "ElColorPicker"
  });
  const _sfc_main$1D = /* @__PURE__ */ vue.defineComponent({
    ...__default__$18,
    props: colorPickerProps,
    emits: colorPickerEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("color");
      const { formItem } = useFormItem();
      const colorSize = useFormSize();
      const colorDisabled = useFormDisabled();
      const { inputId: buttonId, isLabeledByFormItem } = useFormItemInputId(props2, {
        formItemContext: formItem
      });
      const hue = vue.ref();
      const sv = vue.ref();
      const alpha = vue.ref();
      const popper = vue.ref();
      const triggerRef = vue.ref();
      const inputRef = vue.ref();
      const { isFocused, handleFocus, handleBlur } = useFocusController(triggerRef, {
        beforeFocus() {
          return colorDisabled.value;
        },
        beforeBlur(event) {
          var _a2;
          return (_a2 = popper.value) == null ? void 0 : _a2.isFocusInsideContent(event);
        },
        afterBlur() {
          setShowPicker(false);
          resetColor();
        }
      });
      let shouldActiveChange = true;
      const color = vue.reactive(new Color({
        enableAlpha: props2.showAlpha,
        format: props2.colorFormat || "",
        value: props2.modelValue
      }));
      const showPicker = vue.ref(false);
      const showPanelColor = vue.ref(false);
      const customInput = vue.ref("");
      const displayedColor = vue.computed(() => {
        if (!props2.modelValue && !showPanelColor.value) {
          return "transparent";
        }
        return displayedRgb(color, props2.showAlpha);
      });
      const currentColor = vue.computed(() => {
        return !props2.modelValue && !showPanelColor.value ? "" : color.value;
      });
      const buttonAriaLabel = vue.computed(() => {
        return !isLabeledByFormItem.value ? props2.ariaLabel || t2("el.colorpicker.defaultLabel") : void 0;
      });
      const buttonAriaLabelledby = vue.computed(() => {
        return isLabeledByFormItem.value ? formItem == null ? void 0 : formItem.labelId : void 0;
      });
      const btnKls = vue.computed(() => {
        return [
          ns2.b("picker"),
          ns2.is("disabled", colorDisabled.value),
          ns2.bm("picker", colorSize.value),
          ns2.is("focused", isFocused.value)
        ];
      });
      function displayedRgb(color2, showAlpha) {
        if (!(color2 instanceof Color)) {
          throw new TypeError("color should be instance of _color Class");
        }
        const { r: r2, g: g2, b: b2 } = color2.toRgb();
        return showAlpha ? `rgba(${r2}, ${g2}, ${b2}, ${color2.get("alpha") / 100})` : `rgb(${r2}, ${g2}, ${b2})`;
      }
      function setShowPicker(value) {
        showPicker.value = value;
      }
      const debounceSetShowPicker = debounce(setShowPicker, 100, { leading: true });
      function show() {
        if (colorDisabled.value)
          return;
        setShowPicker(true);
      }
      function hide() {
        debounceSetShowPicker(false);
        resetColor();
      }
      function resetColor() {
        vue.nextTick(() => {
          if (props2.modelValue) {
            color.fromString(props2.modelValue);
          } else {
            color.value = "";
            vue.nextTick(() => {
              showPanelColor.value = false;
            });
          }
        });
      }
      function handleTrigger() {
        if (colorDisabled.value)
          return;
        debounceSetShowPicker(!showPicker.value);
      }
      function handleConfirm() {
        color.fromString(customInput.value);
      }
      function confirmValue() {
        const value = color.value;
        emit(UPDATE_MODEL_EVENT, value);
        emit("change", value);
        if (props2.validateEvent) {
          formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn(err));
        }
        debounceSetShowPicker(false);
        vue.nextTick(() => {
          const newColor = new Color({
            enableAlpha: props2.showAlpha,
            format: props2.colorFormat || "",
            value: props2.modelValue
          });
          if (!color.compare(newColor)) {
            resetColor();
          }
        });
      }
      function clear() {
        debounceSetShowPicker(false);
        emit(UPDATE_MODEL_EVENT, null);
        emit("change", null);
        if (props2.modelValue !== null && props2.validateEvent) {
          formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn(err));
        }
        resetColor();
      }
      function handleClickOutside() {
        if (!showPicker.value)
          return;
        hide();
        isFocused.value && focus();
      }
      function handleEsc(event) {
        event.preventDefault();
        event.stopPropagation();
        setShowPicker(false);
        resetColor();
      }
      function handleKeyDown(event) {
        switch (event.code) {
          case EVENT_CODE.enter:
          case EVENT_CODE.space:
            event.preventDefault();
            event.stopPropagation();
            show();
            inputRef.value.focus();
            break;
          case EVENT_CODE.esc:
            handleEsc(event);
            break;
        }
      }
      function focus() {
        triggerRef.value.focus();
      }
      function blur() {
        triggerRef.value.blur();
      }
      vue.onMounted(() => {
        if (props2.modelValue) {
          customInput.value = currentColor.value;
        }
      });
      vue.watch(() => props2.modelValue, (newVal) => {
        if (!newVal) {
          showPanelColor.value = false;
        } else if (newVal && newVal !== color.value) {
          shouldActiveChange = false;
          color.fromString(newVal);
        }
      });
      vue.watch(() => [props2.colorFormat, props2.showAlpha], () => {
        color.enableAlpha = props2.showAlpha;
        color.format = props2.colorFormat || color.format;
        color.doOnChange();
        emit(UPDATE_MODEL_EVENT, color.value);
      });
      vue.watch(() => currentColor.value, (val) => {
        customInput.value = val;
        shouldActiveChange && emit("activeChange", val);
        shouldActiveChange = true;
      });
      vue.watch(() => color.value, () => {
        if (!props2.modelValue && !showPanelColor.value) {
          showPanelColor.value = true;
        }
      });
      vue.watch(() => showPicker.value, () => {
        vue.nextTick(() => {
          var _a2, _b, _c;
          (_a2 = hue.value) == null ? void 0 : _a2.update();
          (_b = sv.value) == null ? void 0 : _b.update();
          (_c = alpha.value) == null ? void 0 : _c.update();
        });
      });
      vue.provide(colorPickerContextKey, {
        currentColor
      });
      expose({
        color,
        show,
        hide,
        focus,
        blur
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElTooltip), {
          ref_key: "popper",
          ref: popper,
          visible: showPicker.value,
          "show-arrow": false,
          "fallback-placements": ["bottom", "top", "right", "left"],
          offset: 0,
          "gpu-acceleration": false,
          "popper-class": [vue.unref(ns2).be("picker", "panel"), vue.unref(ns2).b("dropdown"), _ctx.popperClass],
          "stop-popper-mouse-event": false,
          effect: "light",
          trigger: "click",
          teleported: _ctx.teleported,
          transition: `${vue.unref(ns2).namespace.value}-zoom-in-top`,
          persistent: "",
          onHide: ($event) => setShowPicker(false)
        }, {
          content: vue.withCtx(() => [
            vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
              onKeydown: vue.withKeys(handleEsc, ["esc"])
            }, [
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).be("dropdown", "main-wrapper"))
              }, [
                vue.createVNode(HueSlider, {
                  ref_key: "hue",
                  ref: hue,
                  class: "hue-slider",
                  color: vue.unref(color),
                  vertical: ""
                }, null, 8, ["color"]),
                vue.createVNode(SvPanel, {
                  ref_key: "sv",
                  ref: sv,
                  color: vue.unref(color)
                }, null, 8, ["color"])
              ], 2),
              _ctx.showAlpha ? (vue.openBlock(), vue.createBlock(AlphaSlider, {
                key: 0,
                ref_key: "alpha",
                ref: alpha,
                color: vue.unref(color)
              }, null, 8, ["color"])) : vue.createCommentVNode("v-if", true),
              _ctx.predefine ? (vue.openBlock(), vue.createBlock(Predefine, {
                key: 1,
                ref: "predefine",
                "enable-alpha": _ctx.showAlpha,
                color: vue.unref(color),
                colors: _ctx.predefine
              }, null, 8, ["enable-alpha", "color", "colors"])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).be("dropdown", "btns"))
              }, [
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(vue.unref(ns2).be("dropdown", "value"))
                }, [
                  vue.createVNode(vue.unref(ElInput), {
                    ref_key: "inputRef",
                    ref: inputRef,
                    modelValue: customInput.value,
                    "onUpdate:modelValue": ($event) => customInput.value = $event,
                    "validate-event": false,
                    size: "small",
                    onKeyup: vue.withKeys(handleConfirm, ["enter"]),
                    onBlur: handleConfirm
                  }, null, 8, ["modelValue", "onUpdate:modelValue", "onKeyup"])
                ], 2),
                vue.createVNode(vue.unref(ElButton), {
                  class: vue.normalizeClass(vue.unref(ns2).be("dropdown", "link-btn")),
                  text: "",
                  size: "small",
                  onClick: clear
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(vue.toDisplayString(vue.unref(t2)("el.colorpicker.clear")), 1)
                  ]),
                  _: 1
                }, 8, ["class"]),
                vue.createVNode(vue.unref(ElButton), {
                  plain: "",
                  size: "small",
                  class: vue.normalizeClass(vue.unref(ns2).be("dropdown", "btn")),
                  onClick: confirmValue
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(vue.toDisplayString(vue.unref(t2)("el.colorpicker.confirm")), 1)
                  ]),
                  _: 1
                }, 8, ["class"])
              ], 2)
            ], 40, ["onKeydown"])), [
              [vue.unref(ClickOutside), handleClickOutside]
            ])
          ]),
          default: vue.withCtx(() => [
            vue.createElementVNode("div", vue.mergeProps({
              id: vue.unref(buttonId),
              ref_key: "triggerRef",
              ref: triggerRef
            }, _ctx.$attrs, {
              class: vue.unref(btnKls),
              role: "button",
              "aria-label": vue.unref(buttonAriaLabel),
              "aria-labelledby": vue.unref(buttonAriaLabelledby),
              "aria-description": vue.unref(t2)("el.colorpicker.description", { color: _ctx.modelValue || "" }),
              "aria-disabled": vue.unref(colorDisabled),
              tabindex: vue.unref(colorDisabled) ? -1 : _ctx.tabindex,
              onKeydown: handleKeyDown,
              onFocus: vue.unref(handleFocus),
              onBlur: vue.unref(handleBlur)
            }), [
              vue.unref(colorDisabled) ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                class: vue.normalizeClass(vue.unref(ns2).be("picker", "mask"))
              }, null, 2)) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).be("picker", "trigger")),
                onClick: handleTrigger
              }, [
                vue.createElementVNode("span", {
                  class: vue.normalizeClass([vue.unref(ns2).be("picker", "color"), vue.unref(ns2).is("alpha", _ctx.showAlpha)])
                }, [
                  vue.createElementVNode("span", {
                    class: vue.normalizeClass(vue.unref(ns2).be("picker", "color-inner")),
                    style: vue.normalizeStyle({
                      backgroundColor: vue.unref(displayedColor)
                    })
                  }, [
                    vue.withDirectives(vue.createVNode(vue.unref(ElIcon), {
                      class: vue.normalizeClass([vue.unref(ns2).be("picker", "icon"), vue.unref(ns2).is("icon-arrow-down")])
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(arrow_down_default))
                      ]),
                      _: 1
                    }, 8, ["class"]), [
                      [vue.vShow, _ctx.modelValue || showPanelColor.value]
                    ]),
                    vue.withDirectives(vue.createVNode(vue.unref(ElIcon), {
                      class: vue.normalizeClass([vue.unref(ns2).be("picker", "empty"), vue.unref(ns2).is("icon-close")])
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(close_default))
                      ]),
                      _: 1
                    }, 8, ["class"]), [
                      [vue.vShow, !_ctx.modelValue && !showPanelColor.value]
                    ])
                  ], 6)
                ], 2)
              ], 2)
            ], 16, ["id", "aria-label", "aria-labelledby", "aria-description", "aria-disabled", "tabindex", "onFocus", "onBlur"])
          ]),
          _: 1
        }, 8, ["visible", "popper-class", "teleported", "transition", "onHide"]);
      };
    }
  });
  var ColorPicker = /* @__PURE__ */ _export_sfc(_sfc_main$1D, [["__file", "color-picker.vue"]]);
  const ElColorPicker = withInstall(ColorPicker);
  const __default__$17 = vue.defineComponent({
    name: "ElContainer"
  });
  const _sfc_main$1C = /* @__PURE__ */ vue.defineComponent({
    ...__default__$17,
    props: {
      direction: {
        type: String
      }
    },
    setup(__props) {
      const props2 = __props;
      const slots = vue.useSlots();
      const ns2 = useNamespace("container");
      const isVertical = vue.computed(() => {
        if (props2.direction === "vertical") {
          return true;
        } else if (props2.direction === "horizontal") {
          return false;
        }
        if (slots && slots.default) {
          const vNodes = slots.default();
          return vNodes.some((vNode) => {
            const tag = vNode.type.name;
            return tag === "ElHeader" || tag === "ElFooter";
          });
        } else {
          return false;
        }
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("section", {
          class: vue.normalizeClass([vue.unref(ns2).b(), vue.unref(ns2).is("vertical", vue.unref(isVertical))])
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var Container = /* @__PURE__ */ _export_sfc(_sfc_main$1C, [["__file", "container.vue"]]);
  const __default__$16 = vue.defineComponent({
    name: "ElAside"
  });
  const _sfc_main$1B = /* @__PURE__ */ vue.defineComponent({
    ...__default__$16,
    props: {
      width: {
        type: String,
        default: null
      }
    },
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("aside");
      const style = vue.computed(() => props2.width ? ns2.cssVarBlock({ width: props2.width }) : {});
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("aside", {
          class: vue.normalizeClass(vue.unref(ns2).b()),
          style: vue.normalizeStyle(vue.unref(style))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 6);
      };
    }
  });
  var Aside = /* @__PURE__ */ _export_sfc(_sfc_main$1B, [["__file", "aside.vue"]]);
  const __default__$15 = vue.defineComponent({
    name: "ElFooter"
  });
  const _sfc_main$1A = /* @__PURE__ */ vue.defineComponent({
    ...__default__$15,
    props: {
      height: {
        type: String,
        default: null
      }
    },
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("footer");
      const style = vue.computed(() => props2.height ? ns2.cssVarBlock({ height: props2.height }) : {});
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("footer", {
          class: vue.normalizeClass(vue.unref(ns2).b()),
          style: vue.normalizeStyle(vue.unref(style))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 6);
      };
    }
  });
  var Footer$2 = /* @__PURE__ */ _export_sfc(_sfc_main$1A, [["__file", "footer.vue"]]);
  const __default__$14 = vue.defineComponent({
    name: "ElHeader"
  });
  const _sfc_main$1z = /* @__PURE__ */ vue.defineComponent({
    ...__default__$14,
    props: {
      height: {
        type: String,
        default: null
      }
    },
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("header");
      const style = vue.computed(() => {
        return props2.height ? ns2.cssVarBlock({
          height: props2.height
        }) : {};
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("header", {
          class: vue.normalizeClass(vue.unref(ns2).b()),
          style: vue.normalizeStyle(vue.unref(style))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 6);
      };
    }
  });
  var Header = /* @__PURE__ */ _export_sfc(_sfc_main$1z, [["__file", "header.vue"]]);
  const __default__$13 = vue.defineComponent({
    name: "ElMain"
  });
  const _sfc_main$1y = /* @__PURE__ */ vue.defineComponent({
    ...__default__$13,
    setup(__props) {
      const ns2 = useNamespace("main");
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("main", {
          class: vue.normalizeClass(vue.unref(ns2).b())
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var Main = /* @__PURE__ */ _export_sfc(_sfc_main$1y, [["__file", "main.vue"]]);
  const ElContainer = withInstall(Container, {
    Aside,
    Footer: Footer$2,
    Header,
    Main
  });
  const ElAside = withNoopInstall(Aside);
  const ElFooter = withNoopInstall(Footer$2);
  const ElHeader = withNoopInstall(Header);
  const ElMain = withNoopInstall(Main);
  var advancedFormat$1 = { exports: {} };
  (function(module2, exports2) {
    !function(e, t2) {
      module2.exports = t2();
    }(commonjsGlobal, function() {
      return function(e, t2) {
        var r2 = t2.prototype, n2 = r2.format;
        r2.format = function(e2) {
          var t3 = this, r3 = this.$locale();
          if (!this.isValid())
            return n2.bind(this)(e2);
          var s2 = this.$utils(), a2 = (e2 || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function(e3) {
            switch (e3) {
              case "Q":
                return Math.ceil((t3.$M + 1) / 3);
              case "Do":
                return r3.ordinal(t3.$D);
              case "gggg":
                return t3.weekYear();
              case "GGGG":
                return t3.isoWeekYear();
              case "wo":
                return r3.ordinal(t3.week(), "W");
              case "w":
              case "ww":
                return s2.s(t3.week(), "w" === e3 ? 1 : 2, "0");
              case "W":
              case "WW":
                return s2.s(t3.isoWeek(), "W" === e3 ? 1 : 2, "0");
              case "k":
              case "kk":
                return s2.s(String(0 === t3.$H ? 24 : t3.$H), "k" === e3 ? 1 : 2, "0");
              case "X":
                return Math.floor(t3.$d.getTime() / 1e3);
              case "x":
                return t3.$d.getTime();
              case "z":
                return "[" + t3.offsetName() + "]";
              case "zzz":
                return "[" + t3.offsetName("long") + "]";
              default:
                return e3;
            }
          });
          return n2.bind(this)(a2);
        };
      };
    });
  })(advancedFormat$1);
  var advancedFormatExports = advancedFormat$1.exports;
  const advancedFormat = /* @__PURE__ */ getDefaultExportFromCjs(advancedFormatExports);
  var weekOfYear$1 = { exports: {} };
  (function(module2, exports2) {
    !function(e, t2) {
      module2.exports = t2();
    }(commonjsGlobal, function() {
      var e = "week", t2 = "year";
      return function(i2, n2, r2) {
        var f2 = n2.prototype;
        f2.week = function(i3) {
          if (void 0 === i3 && (i3 = null), null !== i3)
            return this.add(7 * (i3 - this.week()), "day");
          var n3 = this.$locale().yearStart || 1;
          if (11 === this.month() && this.date() > 25) {
            var f3 = r2(this).startOf(t2).add(1, t2).date(n3), s2 = r2(this).endOf(e);
            if (f3.isBefore(s2))
              return 1;
          }
          var a2 = r2(this).startOf(t2).date(n3).startOf(e).subtract(1, "millisecond"), o2 = this.diff(a2, e, true);
          return o2 < 0 ? r2(this).startOf("week").week() : Math.ceil(o2);
        }, f2.weeks = function(e2) {
          return void 0 === e2 && (e2 = null), this.week(e2);
        };
      };
    });
  })(weekOfYear$1);
  var weekOfYearExports = weekOfYear$1.exports;
  const weekOfYear = /* @__PURE__ */ getDefaultExportFromCjs(weekOfYearExports);
  var weekYear$1 = { exports: {} };
  (function(module2, exports2) {
    !function(e, t2) {
      module2.exports = t2();
    }(commonjsGlobal, function() {
      return function(e, t2) {
        t2.prototype.weekYear = function() {
          var e2 = this.month(), t3 = this.week(), n2 = this.year();
          return 1 === t3 && 11 === e2 ? n2 + 1 : 0 === e2 && t3 >= 52 ? n2 - 1 : n2;
        };
      };
    });
  })(weekYear$1);
  var weekYearExports = weekYear$1.exports;
  const weekYear = /* @__PURE__ */ getDefaultExportFromCjs(weekYearExports);
  var dayOfYear$1 = { exports: {} };
  (function(module2, exports2) {
    !function(e, t2) {
      module2.exports = t2();
    }(commonjsGlobal, function() {
      return function(e, t2, n2) {
        t2.prototype.dayOfYear = function(e2) {
          var t3 = Math.round((n2(this).startOf("day") - n2(this).startOf("year")) / 864e5) + 1;
          return null == e2 ? t3 : this.add(e2 - t3, "day");
        };
      };
    });
  })(dayOfYear$1);
  var dayOfYearExports = dayOfYear$1.exports;
  const dayOfYear = /* @__PURE__ */ getDefaultExportFromCjs(dayOfYearExports);
  var isSameOrAfter$1 = { exports: {} };
  (function(module2, exports2) {
    !function(e, t2) {
      module2.exports = t2();
    }(commonjsGlobal, function() {
      return function(e, t2) {
        t2.prototype.isSameOrAfter = function(e2, t3) {
          return this.isSame(e2, t3) || this.isAfter(e2, t3);
        };
      };
    });
  })(isSameOrAfter$1);
  var isSameOrAfterExports = isSameOrAfter$1.exports;
  const isSameOrAfter = /* @__PURE__ */ getDefaultExportFromCjs(isSameOrAfterExports);
  var isSameOrBefore$1 = { exports: {} };
  (function(module2, exports2) {
    !function(e, i2) {
      module2.exports = i2();
    }(commonjsGlobal, function() {
      return function(e, i2) {
        i2.prototype.isSameOrBefore = function(e2, i3) {
          return this.isSame(e2, i3) || this.isBefore(e2, i3);
        };
      };
    });
  })(isSameOrBefore$1);
  var isSameOrBeforeExports = isSameOrBefore$1.exports;
  const isSameOrBefore = /* @__PURE__ */ getDefaultExportFromCjs(isSameOrBeforeExports);
  const ROOT_PICKER_INJECTION_KEY = Symbol();
  const datePickerProps = buildProps({
    ...timePickerDefaultProps,
    type: {
      type: definePropType(String),
      default: "date"
    }
  });
  const selectionModes = [
    "date",
    "dates",
    "year",
    "years",
    "month",
    "months",
    "week",
    "range"
  ];
  const datePickerSharedProps = buildProps({
    disabledDate: {
      type: definePropType(Function)
    },
    date: {
      type: definePropType(Object),
      required: true
    },
    minDate: {
      type: definePropType(Object)
    },
    maxDate: {
      type: definePropType(Object)
    },
    parsedValue: {
      type: definePropType([Object, Array])
    },
    rangeState: {
      type: definePropType(Object),
      default: () => ({
        endDate: null,
        selecting: false
      })
    }
  });
  const panelSharedProps = buildProps({
    type: {
      type: definePropType(String),
      required: true,
      values: datePickTypes
    },
    dateFormat: String,
    timeFormat: String
  });
  const panelRangeSharedProps = buildProps({
    unlinkPanels: Boolean,
    parsedValue: {
      type: definePropType(Array)
    }
  });
  const selectionModeWithDefault = (mode) => {
    return {
      type: String,
      values: selectionModes,
      default: mode
    };
  };
  const panelDatePickProps = buildProps({
    ...panelSharedProps,
    parsedValue: {
      type: definePropType([Object, Array])
    },
    visible: {
      type: Boolean
    },
    format: {
      type: String,
      default: ""
    }
  });
  const isValidRange = (range2) => {
    if (!shared.isArray(range2))
      return false;
    const [left2, right2] = range2;
    return dayjs.isDayjs(left2) && dayjs.isDayjs(right2) && left2.isSameOrBefore(right2);
  };
  const getDefaultValue = (defaultValue, { lang, unit: unit2, unlinkPanels }) => {
    let start;
    if (shared.isArray(defaultValue)) {
      let [left2, right2] = defaultValue.map((d2) => dayjs(d2).locale(lang));
      if (!unlinkPanels) {
        right2 = left2.add(1, unit2);
      }
      return [left2, right2];
    } else if (defaultValue) {
      start = dayjs(defaultValue);
    } else {
      start = dayjs();
    }
    start = start.locale(lang);
    return [start, start.add(1, unit2)];
  };
  const buildPickerTable = (dimension, rows, {
    columnIndexOffset,
    startDate,
    nextEndDate,
    now: now2,
    unit: unit2,
    relativeDateGetter,
    setCellMetadata,
    setRowMetadata
  }) => {
    for (let rowIndex = 0; rowIndex < dimension.row; rowIndex++) {
      const row = rows[rowIndex];
      for (let columnIndex = 0; columnIndex < dimension.column; columnIndex++) {
        let cell = row[columnIndex + columnIndexOffset];
        if (!cell) {
          cell = {
            row: rowIndex,
            column: columnIndex,
            type: "normal",
            inRange: false,
            start: false,
            end: false
          };
        }
        const index = rowIndex * dimension.column + columnIndex;
        const nextStartDate = relativeDateGetter(index);
        cell.dayjs = nextStartDate;
        cell.date = nextStartDate.toDate();
        cell.timestamp = nextStartDate.valueOf();
        cell.type = "normal";
        cell.inRange = !!(startDate && nextStartDate.isSameOrAfter(startDate, unit2) && nextEndDate && nextStartDate.isSameOrBefore(nextEndDate, unit2)) || !!(startDate && nextStartDate.isSameOrBefore(startDate, unit2) && nextEndDate && nextStartDate.isSameOrAfter(nextEndDate, unit2));
        if (startDate == null ? void 0 : startDate.isSameOrAfter(nextEndDate)) {
          cell.start = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit2);
          cell.end = startDate && nextStartDate.isSame(startDate, unit2);
        } else {
          cell.start = !!startDate && nextStartDate.isSame(startDate, unit2);
          cell.end = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit2);
        }
        const isToday = nextStartDate.isSame(now2, unit2);
        if (isToday) {
          cell.type = "today";
        }
        setCellMetadata == null ? void 0 : setCellMetadata(cell, { rowIndex, columnIndex });
        row[columnIndex + columnIndexOffset] = cell;
      }
      setRowMetadata == null ? void 0 : setRowMetadata(row);
    }
  };
  const datesInMonth = (year, month, lang) => {
    const firstDay = dayjs().locale(lang).startOf("month").month(month).year(year);
    const numOfDays = firstDay.daysInMonth();
    return rangeArr(numOfDays).map((n2) => firstDay.add(n2, "day").toDate());
  };
  const getValidDateOfMonth = (year, month, lang, disabledDate) => {
    const _value = dayjs().year(year).month(month).startOf("month");
    const _date = datesInMonth(year, month, lang).find((date) => {
      return !(disabledDate == null ? void 0 : disabledDate(date));
    });
    if (_date) {
      return dayjs(_date).locale(lang);
    }
    return _value.locale(lang);
  };
  const getValidDateOfYear = (value, lang, disabledDate) => {
    const year = value.year();
    if (!(disabledDate == null ? void 0 : disabledDate(value.toDate()))) {
      return value.locale(lang);
    }
    const month = value.month();
    if (!datesInMonth(year, month, lang).every(disabledDate)) {
      return getValidDateOfMonth(year, month, lang, disabledDate);
    }
    for (let i2 = 0; i2 < 12; i2++) {
      if (!datesInMonth(year, i2, lang).every(disabledDate)) {
        return getValidDateOfMonth(year, i2, lang, disabledDate);
      }
    }
    return value;
  };
  const basicDateTableProps = buildProps({
    ...datePickerSharedProps,
    cellClassName: {
      type: definePropType(Function)
    },
    showWeekNumber: Boolean,
    selectionMode: selectionModeWithDefault("date")
  });
  const basicDateTableEmits = ["changerange", "pick", "select"];
  const isNormalDay = (type3 = "") => {
    return ["normal", "today"].includes(type3);
  };
  const useBasicDateTable = (props2, emit) => {
    const { lang } = useLocale();
    const tbodyRef = vue.ref();
    const currentCellRef = vue.ref();
    const lastRow = vue.ref();
    const lastColumn = vue.ref();
    const tableRows = vue.ref([[], [], [], [], [], []]);
    let focusWithClick = false;
    const firstDayOfWeek = props2.date.$locale().weekStart || 7;
    const WEEKS_CONSTANT = props2.date.locale("en").localeData().weekdaysShort().map((_2) => _2.toLowerCase());
    const offsetDay = vue.computed(() => {
      return firstDayOfWeek > 3 ? 7 - firstDayOfWeek : -firstDayOfWeek;
    });
    const startDate = vue.computed(() => {
      const startDayOfMonth = props2.date.startOf("month");
      return startDayOfMonth.subtract(startDayOfMonth.day() || 7, "day");
    });
    const WEEKS = vue.computed(() => {
      return WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);
    });
    const hasCurrent = vue.computed(() => {
      return flatten(vue.unref(rows)).some((row) => {
        return row.isCurrent;
      });
    });
    const days = vue.computed(() => {
      const startOfMonth = props2.date.startOf("month");
      const startOfMonthDay = startOfMonth.day() || 7;
      const dateCountOfMonth = startOfMonth.daysInMonth();
      const dateCountOfLastMonth = startOfMonth.subtract(1, "month").daysInMonth();
      return {
        startOfMonthDay,
        dateCountOfMonth,
        dateCountOfLastMonth
      };
    });
    const selectedDate = vue.computed(() => {
      return props2.selectionMode === "dates" ? castArray(props2.parsedValue) : [];
    });
    const setDateText = (cell, { count: count2, rowIndex, columnIndex }) => {
      const { startOfMonthDay, dateCountOfMonth, dateCountOfLastMonth } = vue.unref(days);
      const offset2 = vue.unref(offsetDay);
      if (rowIndex >= 0 && rowIndex <= 1) {
        const numberOfDaysFromPreviousMonth = startOfMonthDay + offset2 < 0 ? 7 + startOfMonthDay + offset2 : startOfMonthDay + offset2;
        if (columnIndex + rowIndex * 7 >= numberOfDaysFromPreviousMonth) {
          cell.text = count2;
          return true;
        } else {
          cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - columnIndex % 7) + 1 + rowIndex * 7;
          cell.type = "prev-month";
        }
      } else {
        if (count2 <= dateCountOfMonth) {
          cell.text = count2;
        } else {
          cell.text = count2 - dateCountOfMonth;
          cell.type = "next-month";
        }
        return true;
      }
      return false;
    };
    const setCellMetadata = (cell, { columnIndex, rowIndex }, count2) => {
      const { disabledDate, cellClassName } = props2;
      const _selectedDate = vue.unref(selectedDate);
      const shouldIncrement = setDateText(cell, { count: count2, rowIndex, columnIndex });
      const cellDate = cell.dayjs.toDate();
      cell.selected = _selectedDate.find((d2) => d2.isSame(cell.dayjs, "day"));
      cell.isSelected = !!cell.selected;
      cell.isCurrent = isCurrent(cell);
      cell.disabled = disabledDate == null ? void 0 : disabledDate(cellDate);
      cell.customClass = cellClassName == null ? void 0 : cellClassName(cellDate);
      return shouldIncrement;
    };
    const setRowMetadata = (row) => {
      if (props2.selectionMode === "week") {
        const [start, end2] = props2.showWeekNumber ? [1, 7] : [0, 6];
        const isActive = isWeekActive(row[start + 1]);
        row[start].inRange = isActive;
        row[start].start = isActive;
        row[end2].inRange = isActive;
        row[end2].end = isActive;
      }
    };
    const rows = vue.computed(() => {
      const { minDate, maxDate, rangeState, showWeekNumber } = props2;
      const offset2 = vue.unref(offsetDay);
      const rows_ = vue.unref(tableRows);
      const dateUnit = "day";
      let count2 = 1;
      if (showWeekNumber) {
        for (let rowIndex = 0; rowIndex < 6; rowIndex++) {
          if (!rows_[rowIndex][0]) {
            rows_[rowIndex][0] = {
              type: "week",
              text: vue.unref(startDate).add(rowIndex * 7 + 1, dateUnit).week()
            };
          }
        }
      }
      buildPickerTable({ row: 6, column: 7 }, rows_, {
        startDate: minDate,
        columnIndexOffset: showWeekNumber ? 1 : 0,
        nextEndDate: rangeState.endDate || maxDate || rangeState.selecting && minDate || null,
        now: dayjs().locale(vue.unref(lang)).startOf(dateUnit),
        unit: dateUnit,
        relativeDateGetter: (idx) => vue.unref(startDate).add(idx - offset2, dateUnit),
        setCellMetadata: (...args) => {
          if (setCellMetadata(...args, count2)) {
            count2 += 1;
          }
        },
        setRowMetadata
      });
      return rows_;
    });
    vue.watch(() => props2.date, async () => {
      var _a2;
      if ((_a2 = vue.unref(tbodyRef)) == null ? void 0 : _a2.contains(document.activeElement)) {
        await vue.nextTick();
        await focus();
      }
    });
    const focus = async () => {
      var _a2;
      return (_a2 = vue.unref(currentCellRef)) == null ? void 0 : _a2.focus();
    };
    const isCurrent = (cell) => {
      return props2.selectionMode === "date" && isNormalDay(cell.type) && cellMatchesDate(cell, props2.parsedValue);
    };
    const cellMatchesDate = (cell, date) => {
      if (!date)
        return false;
      return dayjs(date).locale(vue.unref(lang)).isSame(props2.date.date(Number(cell.text)), "day");
    };
    const getDateOfCell = (row, column) => {
      const offsetFromStart = row * 7 + (column - (props2.showWeekNumber ? 1 : 0)) - vue.unref(offsetDay);
      return vue.unref(startDate).add(offsetFromStart, "day");
    };
    const handleMouseMove = (event) => {
      var _a2;
      if (!props2.rangeState.selecting)
        return;
      let target = event.target;
      if (target.tagName === "SPAN") {
        target = (_a2 = target.parentNode) == null ? void 0 : _a2.parentNode;
      }
      if (target.tagName === "DIV") {
        target = target.parentNode;
      }
      if (target.tagName !== "TD")
        return;
      const row = target.parentNode.rowIndex - 1;
      const column = target.cellIndex;
      if (vue.unref(rows)[row][column].disabled)
        return;
      if (row !== vue.unref(lastRow) || column !== vue.unref(lastColumn)) {
        lastRow.value = row;
        lastColumn.value = column;
        emit("changerange", {
          selecting: true,
          endDate: getDateOfCell(row, column)
        });
      }
    };
    const isSelectedCell = (cell) => {
      return !vue.unref(hasCurrent) && (cell == null ? void 0 : cell.text) === 1 && cell.type === "normal" || cell.isCurrent;
    };
    const handleFocus = (event) => {
      if (focusWithClick || vue.unref(hasCurrent) || props2.selectionMode !== "date")
        return;
      handlePickDate(event, true);
    };
    const handleMouseDown = (event) => {
      const target = event.target.closest("td");
      if (!target)
        return;
      focusWithClick = true;
    };
    const handleMouseUp = (event) => {
      const target = event.target.closest("td");
      if (!target)
        return;
      focusWithClick = false;
    };
    const handleRangePick = (newDate) => {
      if (!props2.rangeState.selecting || !props2.minDate) {
        emit("pick", { minDate: newDate, maxDate: null });
        emit("select", true);
      } else {
        if (newDate >= props2.minDate) {
          emit("pick", { minDate: props2.minDate, maxDate: newDate });
        } else {
          emit("pick", { minDate: newDate, maxDate: props2.minDate });
        }
        emit("select", false);
      }
    };
    const handleWeekPick = (newDate) => {
      const weekNumber = newDate.week();
      const value = `${newDate.year()}w${weekNumber}`;
      emit("pick", {
        year: newDate.year(),
        week: weekNumber,
        value,
        date: newDate.startOf("week")
      });
    };
    const handleDatesPick = (newDate, selected) => {
      const newValue = selected ? castArray(props2.parsedValue).filter((d2) => (d2 == null ? void 0 : d2.valueOf()) !== newDate.valueOf()) : castArray(props2.parsedValue).concat([newDate]);
      emit("pick", newValue);
    };
    const handlePickDate = (event, isKeyboardMovement = false) => {
      const target = event.target.closest("td");
      if (!target)
        return;
      const row = target.parentNode.rowIndex - 1;
      const column = target.cellIndex;
      const cell = vue.unref(rows)[row][column];
      if (cell.disabled || cell.type === "week")
        return;
      const newDate = getDateOfCell(row, column);
      switch (props2.selectionMode) {
        case "range": {
          handleRangePick(newDate);
          break;
        }
        case "date": {
          emit("pick", newDate, isKeyboardMovement);
          break;
        }
        case "week": {
          handleWeekPick(newDate);
          break;
        }
        case "dates": {
          handleDatesPick(newDate, !!cell.selected);
          break;
        }
      }
    };
    const isWeekActive = (cell) => {
      if (props2.selectionMode !== "week")
        return false;
      let newDate = props2.date.startOf("day");
      if (cell.type === "prev-month") {
        newDate = newDate.subtract(1, "month");
      }
      if (cell.type === "next-month") {
        newDate = newDate.add(1, "month");
      }
      newDate = newDate.date(Number.parseInt(cell.text, 10));
      if (props2.parsedValue && !Array.isArray(props2.parsedValue)) {
        const dayOffset = (props2.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;
        const weekDate = props2.parsedValue.subtract(dayOffset, "day");
        return weekDate.isSame(newDate, "day");
      }
      return false;
    };
    return {
      WEEKS,
      rows,
      tbodyRef,
      currentCellRef,
      focus,
      isCurrent,
      isWeekActive,
      isSelectedCell,
      handlePickDate,
      handleMouseUp,
      handleMouseDown,
      handleMouseMove,
      handleFocus
    };
  };
  const useBasicDateTableDOM = (props2, {
    isCurrent,
    isWeekActive
  }) => {
    const ns2 = useNamespace("date-table");
    const { t: t2 } = useLocale();
    const tableKls = vue.computed(() => [
      ns2.b(),
      { "is-week-mode": props2.selectionMode === "week" }
    ]);
    const tableLabel = vue.computed(() => t2("el.datepicker.dateTablePrompt"));
    const weekLabel = vue.computed(() => t2("el.datepicker.week"));
    const getCellClasses = (cell) => {
      const classes = [];
      if (isNormalDay(cell.type) && !cell.disabled) {
        classes.push("available");
        if (cell.type === "today") {
          classes.push("today");
        }
      } else {
        classes.push(cell.type);
      }
      if (isCurrent(cell)) {
        classes.push("current");
      }
      if (cell.inRange && (isNormalDay(cell.type) || props2.selectionMode === "week")) {
        classes.push("in-range");
        if (cell.start) {
          classes.push("start-date");
        }
        if (cell.end) {
          classes.push("end-date");
        }
      }
      if (cell.disabled) {
        classes.push("disabled");
      }
      if (cell.selected) {
        classes.push("selected");
      }
      if (cell.customClass) {
        classes.push(cell.customClass);
      }
      return classes.join(" ");
    };
    const getRowKls = (cell) => [
      ns2.e("row"),
      { current: isWeekActive(cell) }
    ];
    return {
      tableKls,
      tableLabel,
      weekLabel,
      getCellClasses,
      getRowKls,
      t: t2
    };
  };
  const basicCellProps = buildProps({
    cell: {
      type: definePropType(Object)
    }
  });
  var ElDatePickerCell = vue.defineComponent({
    name: "ElDatePickerCell",
    props: basicCellProps,
    setup(props2) {
      const ns2 = useNamespace("date-table-cell");
      const {
        slots
      } = vue.inject(ROOT_PICKER_INJECTION_KEY);
      return () => {
        const {
          cell
        } = props2;
        return vue.renderSlot(slots, "default", {
          ...cell
        }, () => {
          var _a2;
          return [vue.createVNode("div", {
            "class": ns2.b()
          }, [vue.createVNode("span", {
            "class": ns2.e("text")
          }, [(_a2 = cell == null ? void 0 : cell.renderText) != null ? _a2 : cell == null ? void 0 : cell.text])])];
        });
      };
    }
  });
  const _sfc_main$1x = /* @__PURE__ */ vue.defineComponent({
    __name: "basic-date-table",
    props: basicDateTableProps,
    emits: basicDateTableEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const {
        WEEKS,
        rows,
        tbodyRef,
        currentCellRef,
        focus,
        isCurrent,
        isWeekActive,
        isSelectedCell,
        handlePickDate,
        handleMouseUp,
        handleMouseDown,
        handleMouseMove,
        handleFocus
      } = useBasicDateTable(props2, emit);
      const { tableLabel, tableKls, weekLabel, getCellClasses, getRowKls, t: t2 } = useBasicDateTableDOM(props2, {
        isCurrent,
        isWeekActive
      });
      expose({
        focus
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("table", {
          "aria-label": vue.unref(tableLabel),
          class: vue.normalizeClass(vue.unref(tableKls)),
          cellspacing: "0",
          cellpadding: "0",
          role: "grid",
          onClick: vue.unref(handlePickDate),
          onMousemove: vue.unref(handleMouseMove),
          onMousedown: vue.withModifiers(vue.unref(handleMouseDown), ["prevent"]),
          onMouseup: vue.unref(handleMouseUp)
        }, [
          vue.createElementVNode("tbody", {
            ref_key: "tbodyRef",
            ref: tbodyRef
          }, [
            vue.createElementVNode("tr", null, [
              _ctx.showWeekNumber ? (vue.openBlock(), vue.createElementBlock("th", {
                key: 0,
                scope: "col"
              }, vue.toDisplayString(vue.unref(weekLabel)), 1)) : vue.createCommentVNode("v-if", true),
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(WEEKS), (week, key) => {
                return vue.openBlock(), vue.createElementBlock("th", {
                  key,
                  "aria-label": vue.unref(t2)("el.datepicker.weeksFull." + week),
                  scope: "col"
                }, vue.toDisplayString(vue.unref(t2)("el.datepicker.weeks." + week)), 9, ["aria-label"]);
              }), 128))
            ]),
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(rows), (row, rowKey2) => {
              return vue.openBlock(), vue.createElementBlock("tr", {
                key: rowKey2,
                class: vue.normalizeClass(vue.unref(getRowKls)(row[1]))
              }, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(row, (cell, columnKey) => {
                  return vue.openBlock(), vue.createElementBlock("td", {
                    key: `${rowKey2}.${columnKey}`,
                    ref_for: true,
                    ref: (el) => vue.unref(isSelectedCell)(cell) && (currentCellRef.value = el),
                    class: vue.normalizeClass(vue.unref(getCellClasses)(cell)),
                    "aria-current": cell.isCurrent ? "date" : void 0,
                    "aria-selected": cell.isCurrent,
                    tabindex: vue.unref(isSelectedCell)(cell) ? 0 : -1,
                    onFocus: vue.unref(handleFocus)
                  }, [
                    vue.createVNode(vue.unref(ElDatePickerCell), { cell }, null, 8, ["cell"])
                  ], 42, ["aria-current", "aria-selected", "tabindex", "onFocus"]);
                }), 128))
              ], 2);
            }), 128))
          ], 512)
        ], 42, ["aria-label", "onClick", "onMousemove", "onMousedown", "onMouseup"]);
      };
    }
  });
  var DateTable = /* @__PURE__ */ _export_sfc(_sfc_main$1x, [["__file", "basic-date-table.vue"]]);
  const basicMonthTableProps = buildProps({
    ...datePickerSharedProps,
    selectionMode: selectionModeWithDefault("month")
  });
  const _sfc_main$1w = /* @__PURE__ */ vue.defineComponent({
    __name: "basic-month-table",
    props: basicMonthTableProps,
    emits: ["changerange", "pick", "select"],
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const ns2 = useNamespace("month-table");
      const { t: t2, lang } = useLocale();
      const tbodyRef = vue.ref();
      const currentCellRef = vue.ref();
      const months = vue.ref(props2.date.locale("en").localeData().monthsShort().map((_2) => _2.toLowerCase()));
      const tableRows = vue.ref([
        [],
        [],
        []
      ]);
      const lastRow = vue.ref();
      const lastColumn = vue.ref();
      const rows = vue.computed(() => {
        var _a2, _b;
        const rows2 = tableRows.value;
        const now2 = dayjs().locale(lang.value).startOf("month");
        for (let i2 = 0; i2 < 3; i2++) {
          const row = rows2[i2];
          for (let j2 = 0; j2 < 4; j2++) {
            const cell = row[j2] || (row[j2] = {
              row: i2,
              column: j2,
              type: "normal",
              inRange: false,
              start: false,
              end: false,
              text: -1,
              disabled: false
            });
            cell.type = "normal";
            const index = i2 * 4 + j2;
            const calTime = props2.date.startOf("year").month(index);
            const calEndDate = props2.rangeState.endDate || props2.maxDate || props2.rangeState.selecting && props2.minDate || null;
            cell.inRange = !!(props2.minDate && calTime.isSameOrAfter(props2.minDate, "month") && calEndDate && calTime.isSameOrBefore(calEndDate, "month")) || !!(props2.minDate && calTime.isSameOrBefore(props2.minDate, "month") && calEndDate && calTime.isSameOrAfter(calEndDate, "month"));
            if ((_a2 = props2.minDate) == null ? void 0 : _a2.isSameOrAfter(calEndDate)) {
              cell.start = !!(calEndDate && calTime.isSame(calEndDate, "month"));
              cell.end = props2.minDate && calTime.isSame(props2.minDate, "month");
            } else {
              cell.start = !!(props2.minDate && calTime.isSame(props2.minDate, "month"));
              cell.end = !!(calEndDate && calTime.isSame(calEndDate, "month"));
            }
            const isToday = now2.isSame(calTime);
            if (isToday) {
              cell.type = "today";
            }
            cell.text = index;
            cell.disabled = ((_b = props2.disabledDate) == null ? void 0 : _b.call(props2, calTime.toDate())) || false;
          }
        }
        return rows2;
      });
      const focus = () => {
        var _a2;
        (_a2 = currentCellRef.value) == null ? void 0 : _a2.focus();
      };
      const getCellStyle = (cell) => {
        const style = {};
        const year = props2.date.year();
        const today = /* @__PURE__ */ new Date();
        const month = cell.text;
        style.disabled = props2.disabledDate ? datesInMonth(year, month, lang.value).every(props2.disabledDate) : false;
        style.current = castArray(props2.parsedValue).findIndex((date) => dayjs.isDayjs(date) && date.year() === year && date.month() === month) >= 0;
        style.today = today.getFullYear() === year && today.getMonth() === month;
        if (cell.inRange) {
          style["in-range"] = true;
          if (cell.start) {
            style["start-date"] = true;
          }
          if (cell.end) {
            style["end-date"] = true;
          }
        }
        return style;
      };
      const isSelectedCell = (cell) => {
        const year = props2.date.year();
        const month = cell.text;
        return castArray(props2.date).findIndex((date) => date.year() === year && date.month() === month) >= 0;
      };
      const handleMouseMove = (event) => {
        var _a2;
        if (!props2.rangeState.selecting)
          return;
        let target = event.target;
        if (target.tagName === "SPAN") {
          target = (_a2 = target.parentNode) == null ? void 0 : _a2.parentNode;
        }
        if (target.tagName === "DIV") {
          target = target.parentNode;
        }
        if (target.tagName !== "TD")
          return;
        const row = target.parentNode.rowIndex;
        const column = target.cellIndex;
        if (rows.value[row][column].disabled)
          return;
        if (row !== lastRow.value || column !== lastColumn.value) {
          lastRow.value = row;
          lastColumn.value = column;
          emit("changerange", {
            selecting: true,
            endDate: props2.date.startOf("year").month(row * 4 + column)
          });
        }
      };
      const handleMonthTableClick = (event) => {
        var _a2;
        const target = (_a2 = event.target) == null ? void 0 : _a2.closest("td");
        if ((target == null ? void 0 : target.tagName) !== "TD")
          return;
        if (hasClass(target, "disabled"))
          return;
        const column = target.cellIndex;
        const row = target.parentNode.rowIndex;
        const month = row * 4 + column;
        const newDate = props2.date.startOf("year").month(month);
        if (props2.selectionMode === "months") {
          if (event.type === "keydown") {
            emit("pick", castArray(props2.parsedValue), false);
            return;
          }
          const newMonth = getValidDateOfMonth(props2.date.year(), month, lang.value, props2.disabledDate);
          const newValue = hasClass(target, "current") ? castArray(props2.parsedValue).filter((d2) => (d2 == null ? void 0 : d2.month()) !== newMonth.month()) : castArray(props2.parsedValue).concat([dayjs(newMonth)]);
          emit("pick", newValue);
        } else if (props2.selectionMode === "range") {
          if (!props2.rangeState.selecting) {
            emit("pick", { minDate: newDate, maxDate: null });
            emit("select", true);
          } else {
            if (props2.minDate && newDate >= props2.minDate) {
              emit("pick", { minDate: props2.minDate, maxDate: newDate });
            } else {
              emit("pick", { minDate: newDate, maxDate: props2.minDate });
            }
            emit("select", false);
          }
        } else {
          emit("pick", month);
        }
      };
      vue.watch(() => props2.date, async () => {
        var _a2, _b;
        if ((_a2 = tbodyRef.value) == null ? void 0 : _a2.contains(document.activeElement)) {
          await vue.nextTick();
          (_b = currentCellRef.value) == null ? void 0 : _b.focus();
        }
      });
      expose({
        focus
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("table", {
          role: "grid",
          "aria-label": vue.unref(t2)("el.datepicker.monthTablePrompt"),
          class: vue.normalizeClass(vue.unref(ns2).b()),
          onClick: handleMonthTableClick,
          onMousemove: handleMouseMove
        }, [
          vue.createElementVNode("tbody", {
            ref_key: "tbodyRef",
            ref: tbodyRef
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(rows), (row, key) => {
              return vue.openBlock(), vue.createElementBlock("tr", { key }, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(row, (cell, key_) => {
                  return vue.openBlock(), vue.createElementBlock("td", {
                    key: key_,
                    ref_for: true,
                    ref: (el) => isSelectedCell(cell) && (currentCellRef.value = el),
                    class: vue.normalizeClass(getCellStyle(cell)),
                    "aria-selected": `${isSelectedCell(cell)}`,
                    "aria-label": vue.unref(t2)(`el.datepicker.month${+cell.text + 1}`),
                    tabindex: isSelectedCell(cell) ? 0 : -1,
                    onKeydown: [
                      vue.withKeys(vue.withModifiers(handleMonthTableClick, ["prevent", "stop"]), ["space"]),
                      vue.withKeys(vue.withModifiers(handleMonthTableClick, ["prevent", "stop"]), ["enter"])
                    ]
                  }, [
                    vue.createVNode(vue.unref(ElDatePickerCell), {
                      cell: {
                        ...cell,
                        renderText: vue.unref(t2)("el.datepicker.months." + months.value[cell.text])
                      }
                    }, null, 8, ["cell"])
                  ], 42, ["aria-selected", "aria-label", "tabindex", "onKeydown"]);
                }), 128))
              ]);
            }), 128))
          ], 512)
        ], 42, ["aria-label"]);
      };
    }
  });
  var MonthTable = /* @__PURE__ */ _export_sfc(_sfc_main$1w, [["__file", "basic-month-table.vue"]]);
  const basicYearTableProps = buildProps({
    ...datePickerSharedProps,
    selectionMode: selectionModeWithDefault("year")
  });
  const _sfc_main$1v = /* @__PURE__ */ vue.defineComponent({
    __name: "basic-year-table",
    props: basicYearTableProps,
    emits: ["changerange", "pick", "select"],
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const datesInYear = (year, lang2) => {
        const firstDay = dayjs(String(year)).locale(lang2).startOf("year");
        const lastDay = firstDay.endOf("year");
        const numOfDays = lastDay.dayOfYear();
        return rangeArr(numOfDays).map((n2) => firstDay.add(n2, "day").toDate());
      };
      const ns2 = useNamespace("year-table");
      const { t: t2, lang } = useLocale();
      const tbodyRef = vue.ref();
      const currentCellRef = vue.ref();
      const startYear = vue.computed(() => {
        return Math.floor(props2.date.year() / 10) * 10;
      });
      const tableRows = vue.ref([[], [], []]);
      const lastRow = vue.ref();
      const lastColumn = vue.ref();
      const rows = vue.computed(() => {
        var _a2;
        const rows2 = tableRows.value;
        const now2 = dayjs().locale(lang.value).startOf("year");
        for (let i2 = 0; i2 < 3; i2++) {
          const row = rows2[i2];
          for (let j2 = 0; j2 < 4; j2++) {
            if (i2 * 4 + j2 >= 10) {
              break;
            }
            let cell = row[j2];
            if (!cell) {
              cell = {
                row: i2,
                column: j2,
                type: "normal",
                inRange: false,
                start: false,
                end: false,
                text: -1,
                disabled: false
              };
            }
            cell.type = "normal";
            const index = i2 * 4 + j2 + startYear.value;
            const calTime = dayjs().year(index);
            const calEndDate = props2.rangeState.endDate || props2.maxDate || props2.rangeState.selecting && props2.minDate || null;
            cell.inRange = !!(props2.minDate && calTime.isSameOrAfter(props2.minDate, "year") && calEndDate && calTime.isSameOrBefore(calEndDate, "year")) || !!(props2.minDate && calTime.isSameOrBefore(props2.minDate, "year") && calEndDate && calTime.isSameOrAfter(calEndDate, "year"));
            if ((_a2 = props2.minDate) == null ? void 0 : _a2.isSameOrAfter(calEndDate)) {
              cell.start = !!(calEndDate && calTime.isSame(calEndDate, "year"));
              cell.end = !!(props2.minDate && calTime.isSame(props2.minDate, "year"));
            } else {
              cell.start = !!(props2.minDate && calTime.isSame(props2.minDate, "year"));
              cell.end = !!(calEndDate && calTime.isSame(calEndDate, "year"));
            }
            const isToday = now2.isSame(calTime);
            if (isToday) {
              cell.type = "today";
            }
            cell.text = index;
            const cellDate = calTime.toDate();
            cell.disabled = props2.disabledDate && props2.disabledDate(cellDate) || false;
            row[j2] = cell;
          }
        }
        return rows2;
      });
      const focus = () => {
        var _a2;
        (_a2 = currentCellRef.value) == null ? void 0 : _a2.focus();
      };
      const getCellKls = (cell) => {
        const kls = {};
        const today = dayjs().locale(lang.value);
        const year = cell.text;
        kls.disabled = props2.disabledDate ? datesInYear(year, lang.value).every(props2.disabledDate) : false;
        kls.today = today.year() === year;
        kls.current = castArray(props2.parsedValue).findIndex((d2) => d2.year() === year) >= 0;
        if (cell.inRange) {
          kls["in-range"] = true;
          if (cell.start) {
            kls["start-date"] = true;
          }
          if (cell.end) {
            kls["end-date"] = true;
          }
        }
        return kls;
      };
      const isSelectedCell = (cell) => {
        const year = cell.text;
        return castArray(props2.date).findIndex((date) => date.year() === year) >= 0;
      };
      const handleYearTableClick = (event) => {
        var _a2;
        const target = (_a2 = event.target) == null ? void 0 : _a2.closest("td");
        if (!target || !target.textContent || hasClass(target, "disabled"))
          return;
        const column = target.cellIndex;
        const row = target.parentNode.rowIndex;
        const selectedYear = row * 4 + column + startYear.value;
        const newDate = dayjs().year(selectedYear);
        if (props2.selectionMode === "range") {
          if (!props2.rangeState.selecting) {
            emit("pick", { minDate: newDate, maxDate: null });
            emit("select", true);
          } else {
            if (props2.minDate && newDate >= props2.minDate) {
              emit("pick", { minDate: props2.minDate, maxDate: newDate });
            } else {
              emit("pick", { minDate: newDate, maxDate: props2.minDate });
            }
            emit("select", false);
          }
        } else if (props2.selectionMode === "years") {
          if (event.type === "keydown") {
            emit("pick", castArray(props2.parsedValue), false);
            return;
          }
          const vaildYear = getValidDateOfYear(newDate.startOf("year"), lang.value, props2.disabledDate);
          const newValue = hasClass(target, "current") ? castArray(props2.parsedValue).filter((d2) => (d2 == null ? void 0 : d2.year()) !== selectedYear) : castArray(props2.parsedValue).concat([vaildYear]);
          emit("pick", newValue);
        } else {
          emit("pick", selectedYear);
        }
      };
      const handleMouseMove = (event) => {
        var _a2;
        if (!props2.rangeState.selecting)
          return;
        const target = (_a2 = event.target) == null ? void 0 : _a2.closest("td");
        if (!target)
          return;
        const row = target.parentNode.rowIndex;
        const column = target.cellIndex;
        if (rows.value[row][column].disabled)
          return;
        if (row !== lastRow.value || column !== lastColumn.value) {
          lastRow.value = row;
          lastColumn.value = column;
          emit("changerange", {
            selecting: true,
            endDate: dayjs().year(startYear.value).add(row * 4 + column, "year")
          });
        }
      };
      vue.watch(() => props2.date, async () => {
        var _a2, _b;
        if ((_a2 = tbodyRef.value) == null ? void 0 : _a2.contains(document.activeElement)) {
          await vue.nextTick();
          (_b = currentCellRef.value) == null ? void 0 : _b.focus();
        }
      });
      expose({
        focus
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("table", {
          role: "grid",
          "aria-label": vue.unref(t2)("el.datepicker.yearTablePrompt"),
          class: vue.normalizeClass(vue.unref(ns2).b()),
          onClick: handleYearTableClick,
          onMousemove: handleMouseMove
        }, [
          vue.createElementVNode("tbody", {
            ref_key: "tbodyRef",
            ref: tbodyRef
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(rows), (row, rowKey2) => {
              return vue.openBlock(), vue.createElementBlock("tr", { key: rowKey2 }, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(row, (cell, cellKey) => {
                  return vue.openBlock(), vue.createElementBlock("td", {
                    key: `${rowKey2}_${cellKey}`,
                    ref_for: true,
                    ref: (el) => isSelectedCell(cell) && (currentCellRef.value = el),
                    class: vue.normalizeClass(["available", getCellKls(cell)]),
                    "aria-selected": isSelectedCell(cell),
                    "aria-label": String(cell.text),
                    tabindex: isSelectedCell(cell) ? 0 : -1,
                    onKeydown: [
                      vue.withKeys(vue.withModifiers(handleYearTableClick, ["prevent", "stop"]), ["space"]),
                      vue.withKeys(vue.withModifiers(handleYearTableClick, ["prevent", "stop"]), ["enter"])
                    ]
                  }, [
                    vue.createVNode(vue.unref(ElDatePickerCell), { cell }, null, 8, ["cell"])
                  ], 42, ["aria-selected", "aria-label", "tabindex", "onKeydown"]);
                }), 128))
              ]);
            }), 128))
          ], 512)
        ], 42, ["aria-label"]);
      };
    }
  });
  var YearTable = /* @__PURE__ */ _export_sfc(_sfc_main$1v, [["__file", "basic-year-table.vue"]]);
  const _sfc_main$1u = /* @__PURE__ */ vue.defineComponent({
    __name: "panel-date-pick",
    props: panelDatePickProps,
    emits: ["pick", "set-picker-option", "panel-change"],
    setup(__props, { emit: contextEmit }) {
      const props2 = __props;
      const timeWithinRange = (_2, __, ___) => true;
      const ppNs = useNamespace("picker-panel");
      const dpNs = useNamespace("date-picker");
      const attrs2 = vue.useAttrs();
      const slots = vue.useSlots();
      const { t: t2, lang } = useLocale();
      const pickerBase = vue.inject("EP_PICKER_BASE");
      const popper = vue.inject(TOOLTIP_INJECTION_KEY);
      const { shortcuts, disabledDate, cellClassName, defaultTime } = pickerBase.props;
      const defaultValue = vue.toRef(pickerBase.props, "defaultValue");
      const currentViewRef = vue.ref();
      const innerDate = vue.ref(dayjs().locale(lang.value));
      const isChangeToNow = vue.ref(false);
      let isShortcut = false;
      const defaultTimeD = vue.computed(() => {
        return dayjs(defaultTime).locale(lang.value);
      });
      const month = vue.computed(() => {
        return innerDate.value.month();
      });
      const year = vue.computed(() => {
        return innerDate.value.year();
      });
      const selectableRange = vue.ref([]);
      const userInputDate = vue.ref(null);
      const userInputTime = vue.ref(null);
      const checkDateWithinRange = (date) => {
        return selectableRange.value.length > 0 ? timeWithinRange(date, selectableRange.value, props2.format || "HH:mm:ss") : true;
      };
      const formatEmit = (emitDayjs) => {
        if (defaultTime && !visibleTime.value && !isChangeToNow.value && !isShortcut) {
          return defaultTimeD.value.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());
        }
        if (showTime.value)
          return emitDayjs.millisecond(0);
        return emitDayjs.startOf("day");
      };
      const emit = (value, ...args) => {
        if (!value) {
          contextEmit("pick", value, ...args);
        } else if (shared.isArray(value)) {
          const dates = value.map(formatEmit);
          contextEmit("pick", dates, ...args);
        } else {
          contextEmit("pick", formatEmit(value), ...args);
        }
        userInputDate.value = null;
        userInputTime.value = null;
        isChangeToNow.value = false;
        isShortcut = false;
      };
      const handleDatePick = async (value, keepOpen) => {
        if (selectionMode.value === "date") {
          value = value;
          let newDate = props2.parsedValue ? props2.parsedValue.year(value.year()).month(value.month()).date(value.date()) : value;
          if (!checkDateWithinRange(newDate)) {
            newDate = selectableRange.value[0][0].year(value.year()).month(value.month()).date(value.date());
          }
          innerDate.value = newDate;
          emit(newDate, showTime.value || keepOpen);
          if (props2.type === "datetime") {
            await vue.nextTick();
            handleFocusPicker();
          }
        } else if (selectionMode.value === "week") {
          emit(value.date);
        } else if (selectionMode.value === "dates") {
          emit(value, true);
        }
      };
      const moveByMonth = (forward) => {
        const action = forward ? "add" : "subtract";
        innerDate.value = innerDate.value[action](1, "month");
        handlePanelChange("month");
      };
      const moveByYear = (forward) => {
        const currentDate = innerDate.value;
        const action = forward ? "add" : "subtract";
        innerDate.value = currentView.value === "year" ? currentDate[action](10, "year") : currentDate[action](1, "year");
        handlePanelChange("year");
      };
      const currentView = vue.ref("date");
      const yearLabel = vue.computed(() => {
        const yearTranslation = t2("el.datepicker.year");
        if (currentView.value === "year") {
          const startYear = Math.floor(year.value / 10) * 10;
          if (yearTranslation) {
            return `${startYear} ${yearTranslation} - ${startYear + 9} ${yearTranslation}`;
          }
          return `${startYear} - ${startYear + 9}`;
        }
        return `${year.value} ${yearTranslation}`;
      });
      const handleShortcutClick = (shortcut) => {
        const shortcutValue = shared.isFunction(shortcut.value) ? shortcut.value() : shortcut.value;
        if (shortcutValue) {
          isShortcut = true;
          emit(dayjs(shortcutValue).locale(lang.value));
          return;
        }
        if (shortcut.onClick) {
          shortcut.onClick({
            attrs: attrs2,
            slots,
            emit: contextEmit
          });
        }
      };
      const selectionMode = vue.computed(() => {
        const { type: type3 } = props2;
        if (["week", "month", "months", "year", "years", "dates"].includes(type3))
          return type3;
        return "date";
      });
      const isMultipleType = vue.computed(() => {
        return selectionMode.value === "dates" || selectionMode.value === "months" || selectionMode.value === "years";
      });
      const keyboardMode = vue.computed(() => {
        return selectionMode.value === "date" ? currentView.value : selectionMode.value;
      });
      const hasShortcuts = vue.computed(() => !!shortcuts.length);
      const handleMonthPick = async (month2, keepOpen) => {
        if (selectionMode.value === "month") {
          innerDate.value = getValidDateOfMonth(innerDate.value.year(), month2, lang.value, disabledDate);
          emit(innerDate.value, false);
        } else if (selectionMode.value === "months") {
          emit(month2, keepOpen != null ? keepOpen : true);
        } else {
          innerDate.value = getValidDateOfMonth(innerDate.value.year(), month2, lang.value, disabledDate);
          currentView.value = "date";
          if (["month", "year", "date", "week"].includes(selectionMode.value)) {
            emit(innerDate.value, true);
            await vue.nextTick();
            handleFocusPicker();
          }
        }
        handlePanelChange("month");
      };
      const handleYearPick = async (year2, keepOpen) => {
        if (selectionMode.value === "year") {
          const data = innerDate.value.startOf("year").year(year2);
          innerDate.value = getValidDateOfYear(data, lang.value, disabledDate);
          emit(innerDate.value, false);
        } else if (selectionMode.value === "years") {
          emit(year2, keepOpen != null ? keepOpen : true);
        } else {
          const data = innerDate.value.year(year2);
          innerDate.value = getValidDateOfYear(data, lang.value, disabledDate);
          currentView.value = "month";
          if (["month", "year", "date", "week"].includes(selectionMode.value)) {
            emit(innerDate.value, true);
            await vue.nextTick();
            handleFocusPicker();
          }
        }
        handlePanelChange("year");
      };
      const showPicker = async (view) => {
        currentView.value = view;
        await vue.nextTick();
        handleFocusPicker();
      };
      const showTime = vue.computed(() => props2.type === "datetime" || props2.type === "datetimerange");
      const footerVisible = vue.computed(() => {
        const showDateFooter = showTime.value || selectionMode.value === "dates";
        const showYearFooter = selectionMode.value === "years";
        const showMonthFooter = selectionMode.value === "months";
        const isDateView = currentView.value === "date";
        const isYearView = currentView.value === "year";
        const isMonthView = currentView.value === "month";
        return showDateFooter && isDateView || showYearFooter && isYearView || showMonthFooter && isMonthView;
      });
      const disabledConfirm = vue.computed(() => {
        if (!disabledDate)
          return false;
        if (!props2.parsedValue)
          return true;
        if (shared.isArray(props2.parsedValue)) {
          return disabledDate(props2.parsedValue[0].toDate());
        }
        return disabledDate(props2.parsedValue.toDate());
      });
      const onConfirm = () => {
        if (isMultipleType.value) {
          emit(props2.parsedValue);
        } else {
          let result = props2.parsedValue;
          if (!result) {
            const defaultTimeD2 = dayjs(defaultTime).locale(lang.value);
            const defaultValueD = getDefaultValue2();
            result = defaultTimeD2.year(defaultValueD.year()).month(defaultValueD.month()).date(defaultValueD.date());
          }
          innerDate.value = result;
          emit(result);
        }
      };
      const disabledNow = vue.computed(() => {
        if (!disabledDate)
          return false;
        return disabledDate(dayjs().locale(lang.value).toDate());
      });
      const changeToNow = () => {
        const now2 = dayjs().locale(lang.value);
        const nowDate = now2.toDate();
        isChangeToNow.value = true;
        if ((!disabledDate || !disabledDate(nowDate)) && checkDateWithinRange(nowDate)) {
          innerDate.value = dayjs().locale(lang.value);
          emit(innerDate.value);
        }
      };
      const timeFormat = vue.computed(() => {
        return props2.timeFormat || extractTimeFormat(props2.format);
      });
      const dateFormat = vue.computed(() => {
        return props2.dateFormat || extractDateFormat(props2.format);
      });
      const visibleTime = vue.computed(() => {
        if (userInputTime.value)
          return userInputTime.value;
        if (!props2.parsedValue && !defaultValue.value)
          return;
        return (props2.parsedValue || innerDate.value).format(timeFormat.value);
      });
      const visibleDate = vue.computed(() => {
        if (userInputDate.value)
          return userInputDate.value;
        if (!props2.parsedValue && !defaultValue.value)
          return;
        return (props2.parsedValue || innerDate.value).format(dateFormat.value);
      });
      const timePickerVisible = vue.ref(false);
      const onTimePickerInputFocus = () => {
        timePickerVisible.value = true;
      };
      const handleTimePickClose = () => {
        timePickerVisible.value = false;
      };
      const getUnits = (date) => {
        return {
          hour: date.hour(),
          minute: date.minute(),
          second: date.second(),
          year: date.year(),
          month: date.month(),
          date: date.date()
        };
      };
      const handleTimePick = (value, visible, first) => {
        const { hour, minute, second } = getUnits(value);
        const newDate = props2.parsedValue ? props2.parsedValue.hour(hour).minute(minute).second(second) : value;
        innerDate.value = newDate;
        emit(innerDate.value, true);
        if (!first) {
          timePickerVisible.value = visible;
        }
      };
      const handleVisibleTimeChange = (value) => {
        const newDate = dayjs(value, timeFormat.value).locale(lang.value);
        if (newDate.isValid() && checkDateWithinRange(newDate)) {
          const { year: year2, month: month2, date } = getUnits(innerDate.value);
          innerDate.value = newDate.year(year2).month(month2).date(date);
          userInputTime.value = null;
          timePickerVisible.value = false;
          emit(innerDate.value, true);
        }
      };
      const handleVisibleDateChange = (value) => {
        const newDate = dayjs(value, dateFormat.value).locale(lang.value);
        if (newDate.isValid()) {
          if (disabledDate && disabledDate(newDate.toDate())) {
            return;
          }
          const { hour, minute, second } = getUnits(innerDate.value);
          innerDate.value = newDate.hour(hour).minute(minute).second(second);
          userInputDate.value = null;
          emit(innerDate.value, true);
        }
      };
      const isValidValue2 = (date) => {
        return dayjs.isDayjs(date) && date.isValid() && (disabledDate ? !disabledDate(date.toDate()) : true);
      };
      const formatToString = (value) => {
        return shared.isArray(value) ? value.map((_2) => _2.format(props2.format)) : value.format(props2.format);
      };
      const parseUserInput = (value) => {
        return dayjs(value, props2.format).locale(lang.value);
      };
      const getDefaultValue2 = () => {
        const parseDate2 = dayjs(defaultValue.value).locale(lang.value);
        if (!defaultValue.value) {
          const defaultTimeDValue = defaultTimeD.value;
          return dayjs().hour(defaultTimeDValue.hour()).minute(defaultTimeDValue.minute()).second(defaultTimeDValue.second()).locale(lang.value);
        }
        return parseDate2;
      };
      const handleFocusPicker = async () => {
        var _a2;
        if (["week", "month", "year", "date"].includes(selectionMode.value)) {
          (_a2 = currentViewRef.value) == null ? void 0 : _a2.focus();
          if (selectionMode.value === "week") {
            handleKeyControl(EVENT_CODE.down);
          }
        }
      };
      const handleKeydownTable = (event) => {
        const { code } = event;
        const validCode = [
          EVENT_CODE.up,
          EVENT_CODE.down,
          EVENT_CODE.left,
          EVENT_CODE.right,
          EVENT_CODE.home,
          EVENT_CODE.end,
          EVENT_CODE.pageUp,
          EVENT_CODE.pageDown
        ];
        if (validCode.includes(code)) {
          handleKeyControl(code);
          event.stopPropagation();
          event.preventDefault();
        }
        if ([EVENT_CODE.enter, EVENT_CODE.space, EVENT_CODE.numpadEnter].includes(code) && userInputDate.value === null && userInputTime.value === null) {
          event.preventDefault();
          emit(innerDate.value, false);
        }
      };
      const handleKeyControl = (code) => {
        var _a2;
        const { up: up2, down: down2, left: left2, right: right2, home: home2, end: end2, pageUp: pageUp2, pageDown: pageDown2 } = EVENT_CODE;
        const mapping = {
          year: {
            [up2]: -4,
            [down2]: 4,
            [left2]: -1,
            [right2]: 1,
            offset: (date, step) => date.setFullYear(date.getFullYear() + step)
          },
          month: {
            [up2]: -4,
            [down2]: 4,
            [left2]: -1,
            [right2]: 1,
            offset: (date, step) => date.setMonth(date.getMonth() + step)
          },
          week: {
            [up2]: -1,
            [down2]: 1,
            [left2]: -1,
            [right2]: 1,
            offset: (date, step) => date.setDate(date.getDate() + step * 7)
          },
          date: {
            [up2]: -7,
            [down2]: 7,
            [left2]: -1,
            [right2]: 1,
            [home2]: (date) => -date.getDay(),
            [end2]: (date) => -date.getDay() + 6,
            [pageUp2]: (date) => -new Date(date.getFullYear(), date.getMonth(), 0).getDate(),
            [pageDown2]: (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate(),
            offset: (date, step) => date.setDate(date.getDate() + step)
          }
        };
        const newDate = innerDate.value.toDate();
        while (Math.abs(innerDate.value.diff(newDate, "year", true)) < 1) {
          const map2 = mapping[keyboardMode.value];
          if (!map2)
            return;
          map2.offset(newDate, shared.isFunction(map2[code]) ? map2[code](newDate) : (_a2 = map2[code]) != null ? _a2 : 0);
          if (disabledDate && disabledDate(newDate)) {
            break;
          }
          const result = dayjs(newDate).locale(lang.value);
          innerDate.value = result;
          contextEmit("pick", result, true);
          break;
        }
      };
      const handlePanelChange = (mode) => {
        contextEmit("panel-change", innerDate.value.toDate(), mode, currentView.value);
      };
      vue.watch(() => selectionMode.value, (val) => {
        if (["month", "year"].includes(val)) {
          currentView.value = val;
          return;
        } else if (val === "years") {
          currentView.value = "year";
          return;
        } else if (val === "months") {
          currentView.value = "month";
          return;
        }
        currentView.value = "date";
      }, { immediate: true });
      vue.watch(() => currentView.value, () => {
        popper == null ? void 0 : popper.updatePopper();
      });
      vue.watch(() => defaultValue.value, (val) => {
        if (val) {
          innerDate.value = getDefaultValue2();
        }
      }, { immediate: true });
      vue.watch(() => props2.parsedValue, (val) => {
        if (val) {
          if (isMultipleType.value)
            return;
          if (Array.isArray(val))
            return;
          innerDate.value = val;
        } else {
          innerDate.value = getDefaultValue2();
        }
      }, { immediate: true });
      contextEmit("set-picker-option", ["isValidValue", isValidValue2]);
      contextEmit("set-picker-option", ["formatToString", formatToString]);
      contextEmit("set-picker-option", ["parseUserInput", parseUserInput]);
      contextEmit("set-picker-option", ["handleFocusPicker", handleFocusPicker]);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([
            vue.unref(ppNs).b(),
            vue.unref(dpNs).b(),
            {
              "has-sidebar": _ctx.$slots.sidebar || vue.unref(hasShortcuts),
              "has-time": vue.unref(showTime)
            }
          ])
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ppNs).e("body-wrapper"))
          }, [
            vue.renderSlot(_ctx.$slots, "sidebar", {
              class: vue.normalizeClass(vue.unref(ppNs).e("sidebar"))
            }),
            vue.unref(hasShortcuts) ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ppNs).e("sidebar"))
            }, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(shortcuts), (shortcut, key) => {
                return vue.openBlock(), vue.createElementBlock("button", {
                  key,
                  type: "button",
                  class: vue.normalizeClass(vue.unref(ppNs).e("shortcut")),
                  onClick: ($event) => handleShortcutClick(shortcut)
                }, vue.toDisplayString(shortcut.text), 11, ["onClick"]);
              }), 128))
            ], 2)) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ppNs).e("body"))
            }, [
              vue.unref(showTime) ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                class: vue.normalizeClass(vue.unref(dpNs).e("time-header"))
              }, [
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(vue.unref(dpNs).e("editor-wrap"))
                }, [
                  vue.createVNode(vue.unref(ElInput), {
                    placeholder: vue.unref(t2)("el.datepicker.selectDate"),
                    "model-value": vue.unref(visibleDate),
                    size: "small",
                    "validate-event": false,
                    onInput: (val) => userInputDate.value = val,
                    onChange: handleVisibleDateChange
                  }, null, 8, ["placeholder", "model-value", "onInput"])
                ], 2),
                vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", {
                  class: vue.normalizeClass(vue.unref(dpNs).e("editor-wrap"))
                }, [
                  vue.createVNode(vue.unref(ElInput), {
                    placeholder: vue.unref(t2)("el.datepicker.selectTime"),
                    "model-value": vue.unref(visibleTime),
                    size: "small",
                    "validate-event": false,
                    onFocus: onTimePickerInputFocus,
                    onInput: (val) => userInputTime.value = val,
                    onChange: handleVisibleTimeChange
                  }, null, 8, ["placeholder", "model-value", "onInput"]),
                  vue.createVNode(vue.unref(TimePickPanel), {
                    visible: timePickerVisible.value,
                    format: vue.unref(timeFormat),
                    "parsed-value": innerDate.value,
                    onPick: handleTimePick
                  }, null, 8, ["visible", "format", "parsed-value"])
                ], 2)), [
                  [vue.unref(ClickOutside), handleTimePickClose]
                ])
              ], 2)) : vue.createCommentVNode("v-if", true),
              vue.withDirectives(vue.createElementVNode("div", {
                class: vue.normalizeClass([
                  vue.unref(dpNs).e("header"),
                  (currentView.value === "year" || currentView.value === "month") && vue.unref(dpNs).e("header--bordered")
                ])
              }, [
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(vue.unref(dpNs).e("prev-btn"))
                }, [
                  vue.createElementVNode("button", {
                    type: "button",
                    "aria-label": vue.unref(t2)(`el.datepicker.prevYear`),
                    class: vue.normalizeClass(["d-arrow-left", vue.unref(ppNs).e("icon-btn")]),
                    onClick: ($event) => moveByYear(false)
                  }, [
                    vue.renderSlot(_ctx.$slots, "prev-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["aria-label", "onClick"]),
                  vue.withDirectives(vue.createElementVNode("button", {
                    type: "button",
                    "aria-label": vue.unref(t2)(`el.datepicker.prevMonth`),
                    class: vue.normalizeClass([vue.unref(ppNs).e("icon-btn"), "arrow-left"]),
                    onClick: ($event) => moveByMonth(false)
                  }, [
                    vue.renderSlot(_ctx.$slots, "prev-month", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(arrow_left_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["aria-label", "onClick"]), [
                    [vue.vShow, currentView.value === "date"]
                  ])
                ], 2),
                vue.createElementVNode("span", {
                  role: "button",
                  class: vue.normalizeClass(vue.unref(dpNs).e("header-label")),
                  "aria-live": "polite",
                  tabindex: "0",
                  onKeydown: vue.withKeys(($event) => showPicker("year"), ["enter"]),
                  onClick: ($event) => showPicker("year")
                }, vue.toDisplayString(vue.unref(yearLabel)), 43, ["onKeydown", "onClick"]),
                vue.withDirectives(vue.createElementVNode("span", {
                  role: "button",
                  "aria-live": "polite",
                  tabindex: "0",
                  class: vue.normalizeClass([
                    vue.unref(dpNs).e("header-label"),
                    { active: currentView.value === "month" }
                  ]),
                  onKeydown: vue.withKeys(($event) => showPicker("month"), ["enter"]),
                  onClick: ($event) => showPicker("month")
                }, vue.toDisplayString(vue.unref(t2)(`el.datepicker.month${vue.unref(month) + 1}`)), 43, ["onKeydown", "onClick"]), [
                  [vue.vShow, currentView.value === "date"]
                ]),
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(vue.unref(dpNs).e("next-btn"))
                }, [
                  vue.withDirectives(vue.createElementVNode("button", {
                    type: "button",
                    "aria-label": vue.unref(t2)(`el.datepicker.nextMonth`),
                    class: vue.normalizeClass([vue.unref(ppNs).e("icon-btn"), "arrow-right"]),
                    onClick: ($event) => moveByMonth(true)
                  }, [
                    vue.renderSlot(_ctx.$slots, "next-month", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(arrow_right_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["aria-label", "onClick"]), [
                    [vue.vShow, currentView.value === "date"]
                  ]),
                  vue.createElementVNode("button", {
                    type: "button",
                    "aria-label": vue.unref(t2)(`el.datepicker.nextYear`),
                    class: vue.normalizeClass([vue.unref(ppNs).e("icon-btn"), "d-arrow-right"]),
                    onClick: ($event) => moveByYear(true)
                  }, [
                    vue.renderSlot(_ctx.$slots, "next-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["aria-label", "onClick"])
                ], 2)
              ], 2), [
                [vue.vShow, currentView.value !== "time"]
              ]),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ppNs).e("content")),
                onKeydown: handleKeydownTable
              }, [
                currentView.value === "date" ? (vue.openBlock(), vue.createBlock(DateTable, {
                  key: 0,
                  ref_key: "currentViewRef",
                  ref: currentViewRef,
                  "selection-mode": vue.unref(selectionMode),
                  date: innerDate.value,
                  "parsed-value": _ctx.parsedValue,
                  "disabled-date": vue.unref(disabledDate),
                  "cell-class-name": vue.unref(cellClassName),
                  onPick: handleDatePick
                }, null, 8, ["selection-mode", "date", "parsed-value", "disabled-date", "cell-class-name"])) : vue.createCommentVNode("v-if", true),
                currentView.value === "year" ? (vue.openBlock(), vue.createBlock(YearTable, {
                  key: 1,
                  ref_key: "currentViewRef",
                  ref: currentViewRef,
                  "selection-mode": vue.unref(selectionMode),
                  date: innerDate.value,
                  "disabled-date": vue.unref(disabledDate),
                  "parsed-value": _ctx.parsedValue,
                  onPick: handleYearPick
                }, null, 8, ["selection-mode", "date", "disabled-date", "parsed-value"])) : vue.createCommentVNode("v-if", true),
                currentView.value === "month" ? (vue.openBlock(), vue.createBlock(MonthTable, {
                  key: 2,
                  ref_key: "currentViewRef",
                  ref: currentViewRef,
                  "selection-mode": vue.unref(selectionMode),
                  date: innerDate.value,
                  "parsed-value": _ctx.parsedValue,
                  "disabled-date": vue.unref(disabledDate),
                  onPick: handleMonthPick
                }, null, 8, ["selection-mode", "date", "parsed-value", "disabled-date"])) : vue.createCommentVNode("v-if", true)
              ], 34)
            ], 2)
          ], 2),
          vue.withDirectives(vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ppNs).e("footer"))
          }, [
            vue.withDirectives(vue.createVNode(vue.unref(ElButton), {
              text: "",
              size: "small",
              class: vue.normalizeClass(vue.unref(ppNs).e("link-btn")),
              disabled: vue.unref(disabledNow),
              onClick: changeToNow
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(vue.toDisplayString(vue.unref(t2)("el.datepicker.now")), 1)
              ]),
              _: 1
            }, 8, ["class", "disabled"]), [
              [vue.vShow, !vue.unref(isMultipleType)]
            ]),
            vue.createVNode(vue.unref(ElButton), {
              plain: "",
              size: "small",
              class: vue.normalizeClass(vue.unref(ppNs).e("link-btn")),
              disabled: vue.unref(disabledConfirm),
              onClick: onConfirm
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(vue.toDisplayString(vue.unref(t2)("el.datepicker.confirm")), 1)
              ]),
              _: 1
            }, 8, ["class", "disabled"])
          ], 2), [
            [vue.vShow, vue.unref(footerVisible)]
          ])
        ], 2);
      };
    }
  });
  var DatePickPanel = /* @__PURE__ */ _export_sfc(_sfc_main$1u, [["__file", "panel-date-pick.vue"]]);
  const panelDateRangeProps = buildProps({
    ...panelSharedProps,
    ...panelRangeSharedProps,
    visible: Boolean
  });
  const useShortcut = (lang) => {
    const { emit } = vue.getCurrentInstance();
    const attrs2 = vue.useAttrs();
    const slots = vue.useSlots();
    const handleShortcutClick = (shortcut) => {
      const shortcutValues = shared.isFunction(shortcut.value) ? shortcut.value() : shortcut.value;
      if (shortcutValues) {
        emit("pick", [
          dayjs(shortcutValues[0]).locale(lang.value),
          dayjs(shortcutValues[1]).locale(lang.value)
        ]);
        return;
      }
      if (shortcut.onClick) {
        shortcut.onClick({
          attrs: attrs2,
          slots,
          emit
        });
      }
    };
    return handleShortcutClick;
  };
  const useRangePicker = (props2, {
    defaultValue,
    leftDate,
    rightDate,
    unit: unit2,
    onParsedValueChanged
  }) => {
    const { emit } = vue.getCurrentInstance();
    const { pickerNs } = vue.inject(ROOT_PICKER_INJECTION_KEY);
    const drpNs = useNamespace("date-range-picker");
    const { t: t2, lang } = useLocale();
    const handleShortcutClick = useShortcut(lang);
    const minDate = vue.ref();
    const maxDate = vue.ref();
    const rangeState = vue.ref({
      endDate: null,
      selecting: false
    });
    const handleChangeRange = (val) => {
      rangeState.value = val;
    };
    const handleRangeConfirm = (visible = false) => {
      const _minDate = vue.unref(minDate);
      const _maxDate = vue.unref(maxDate);
      if (isValidRange([_minDate, _maxDate])) {
        emit("pick", [_minDate, _maxDate], visible);
      }
    };
    const onSelect = (selecting) => {
      rangeState.value.selecting = selecting;
      if (!selecting) {
        rangeState.value.endDate = null;
      }
    };
    const onReset = (parsedValue) => {
      if (shared.isArray(parsedValue) && parsedValue.length === 2) {
        const [start, end2] = parsedValue;
        minDate.value = start;
        leftDate.value = start;
        maxDate.value = end2;
        onParsedValueChanged(vue.unref(minDate), vue.unref(maxDate));
      } else {
        restoreDefault();
      }
    };
    const restoreDefault = () => {
      const [start, end2] = getDefaultValue(vue.unref(defaultValue), {
        lang: vue.unref(lang),
        unit: unit2,
        unlinkPanels: props2.unlinkPanels
      });
      minDate.value = void 0;
      maxDate.value = void 0;
      leftDate.value = start;
      rightDate.value = end2;
    };
    vue.watch(defaultValue, (val) => {
      if (val) {
        restoreDefault();
      }
    }, { immediate: true });
    vue.watch(() => props2.parsedValue, onReset, { immediate: true });
    return {
      minDate,
      maxDate,
      rangeState,
      lang,
      ppNs: pickerNs,
      drpNs,
      handleChangeRange,
      handleRangeConfirm,
      handleShortcutClick,
      onSelect,
      onReset,
      t: t2
    };
  };
  const unit$2 = "month";
  const _sfc_main$1t = /* @__PURE__ */ vue.defineComponent({
    __name: "panel-date-range",
    props: panelDateRangeProps,
    emits: [
      "pick",
      "set-picker-option",
      "calendar-change",
      "panel-change"
    ],
    setup(__props, { emit }) {
      const props2 = __props;
      const pickerBase = vue.inject("EP_PICKER_BASE");
      const { disabledDate, cellClassName, defaultTime, clearable } = pickerBase.props;
      const format2 = vue.toRef(pickerBase.props, "format");
      const shortcuts = vue.toRef(pickerBase.props, "shortcuts");
      const defaultValue = vue.toRef(pickerBase.props, "defaultValue");
      const { lang } = useLocale();
      const leftDate = vue.ref(dayjs().locale(lang.value));
      const rightDate = vue.ref(dayjs().locale(lang.value).add(1, unit$2));
      const {
        minDate,
        maxDate,
        rangeState,
        ppNs,
        drpNs,
        handleChangeRange,
        handleRangeConfirm,
        handleShortcutClick,
        onSelect,
        onReset,
        t: t2
      } = useRangePicker(props2, {
        defaultValue,
        leftDate,
        rightDate,
        unit: unit$2,
        onParsedValueChanged
      });
      vue.watch(() => props2.visible, (visible) => {
        if (!visible && rangeState.value.selecting) {
          onReset(props2.parsedValue);
          onSelect(false);
        }
      });
      const dateUserInput = vue.ref({
        min: null,
        max: null
      });
      const timeUserInput = vue.ref({
        min: null,
        max: null
      });
      const leftLabel = vue.computed(() => {
        return `${leftDate.value.year()} ${t2("el.datepicker.year")} ${t2(`el.datepicker.month${leftDate.value.month() + 1}`)}`;
      });
      const rightLabel = vue.computed(() => {
        return `${rightDate.value.year()} ${t2("el.datepicker.year")} ${t2(`el.datepicker.month${rightDate.value.month() + 1}`)}`;
      });
      const leftYear = vue.computed(() => {
        return leftDate.value.year();
      });
      const leftMonth = vue.computed(() => {
        return leftDate.value.month();
      });
      const rightYear = vue.computed(() => {
        return rightDate.value.year();
      });
      const rightMonth = vue.computed(() => {
        return rightDate.value.month();
      });
      const hasShortcuts = vue.computed(() => !!shortcuts.value.length);
      const minVisibleDate = vue.computed(() => {
        if (dateUserInput.value.min !== null)
          return dateUserInput.value.min;
        if (minDate.value)
          return minDate.value.format(dateFormat.value);
        return "";
      });
      const maxVisibleDate = vue.computed(() => {
        if (dateUserInput.value.max !== null)
          return dateUserInput.value.max;
        if (maxDate.value || minDate.value)
          return (maxDate.value || minDate.value).format(dateFormat.value);
        return "";
      });
      const minVisibleTime = vue.computed(() => {
        if (timeUserInput.value.min !== null)
          return timeUserInput.value.min;
        if (minDate.value)
          return minDate.value.format(timeFormat.value);
        return "";
      });
      const maxVisibleTime = vue.computed(() => {
        if (timeUserInput.value.max !== null)
          return timeUserInput.value.max;
        if (maxDate.value || minDate.value)
          return (maxDate.value || minDate.value).format(timeFormat.value);
        return "";
      });
      const timeFormat = vue.computed(() => {
        return props2.timeFormat || extractTimeFormat(format2.value);
      });
      const dateFormat = vue.computed(() => {
        return props2.dateFormat || extractDateFormat(format2.value);
      });
      const isValidValue2 = (date) => {
        return isValidRange(date) && (disabledDate ? !disabledDate(date[0].toDate()) && !disabledDate(date[1].toDate()) : true);
      };
      const leftPrevYear = () => {
        leftDate.value = leftDate.value.subtract(1, "year");
        if (!props2.unlinkPanels) {
          rightDate.value = leftDate.value.add(1, "month");
        }
        handlePanelChange("year");
      };
      const leftPrevMonth = () => {
        leftDate.value = leftDate.value.subtract(1, "month");
        if (!props2.unlinkPanels) {
          rightDate.value = leftDate.value.add(1, "month");
        }
        handlePanelChange("month");
      };
      const rightNextYear = () => {
        if (!props2.unlinkPanels) {
          leftDate.value = leftDate.value.add(1, "year");
          rightDate.value = leftDate.value.add(1, "month");
        } else {
          rightDate.value = rightDate.value.add(1, "year");
        }
        handlePanelChange("year");
      };
      const rightNextMonth = () => {
        if (!props2.unlinkPanels) {
          leftDate.value = leftDate.value.add(1, "month");
          rightDate.value = leftDate.value.add(1, "month");
        } else {
          rightDate.value = rightDate.value.add(1, "month");
        }
        handlePanelChange("month");
      };
      const leftNextYear = () => {
        leftDate.value = leftDate.value.add(1, "year");
        handlePanelChange("year");
      };
      const leftNextMonth = () => {
        leftDate.value = leftDate.value.add(1, "month");
        handlePanelChange("month");
      };
      const rightPrevYear = () => {
        rightDate.value = rightDate.value.subtract(1, "year");
        handlePanelChange("year");
      };
      const rightPrevMonth = () => {
        rightDate.value = rightDate.value.subtract(1, "month");
        handlePanelChange("month");
      };
      const handlePanelChange = (mode) => {
        emit("panel-change", [leftDate.value.toDate(), rightDate.value.toDate()], mode);
      };
      const enableMonthArrow = vue.computed(() => {
        const nextMonth = (leftMonth.value + 1) % 12;
        const yearOffset = leftMonth.value + 1 >= 12 ? 1 : 0;
        return props2.unlinkPanels && new Date(leftYear.value + yearOffset, nextMonth) < new Date(rightYear.value, rightMonth.value);
      });
      const enableYearArrow = vue.computed(() => {
        return props2.unlinkPanels && rightYear.value * 12 + rightMonth.value - (leftYear.value * 12 + leftMonth.value + 1) >= 12;
      });
      const btnDisabled = vue.computed(() => {
        return !(minDate.value && maxDate.value && !rangeState.value.selecting && isValidRange([minDate.value, maxDate.value]));
      });
      const showTime = vue.computed(() => props2.type === "datetime" || props2.type === "datetimerange");
      const formatEmit = (emitDayjs, index) => {
        if (!emitDayjs)
          return;
        if (defaultTime) {
          const defaultTimeD = dayjs(defaultTime[index] || defaultTime).locale(lang.value);
          return defaultTimeD.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());
        }
        return emitDayjs;
      };
      const handleRangePick = (val, close2 = true) => {
        const min_ = val.minDate;
        const max_ = val.maxDate;
        const minDate_ = formatEmit(min_, 0);
        const maxDate_ = formatEmit(max_, 1);
        if (maxDate.value === maxDate_ && minDate.value === minDate_) {
          return;
        }
        emit("calendar-change", [min_.toDate(), max_ && max_.toDate()]);
        maxDate.value = maxDate_;
        minDate.value = minDate_;
        if (!close2 || showTime.value)
          return;
        handleRangeConfirm();
      };
      const minTimePickerVisible = vue.ref(false);
      const maxTimePickerVisible = vue.ref(false);
      const handleMinTimeClose = () => {
        minTimePickerVisible.value = false;
      };
      const handleMaxTimeClose = () => {
        maxTimePickerVisible.value = false;
      };
      const handleDateInput = (value, type3) => {
        dateUserInput.value[type3] = value;
        const parsedValueD = dayjs(value, dateFormat.value).locale(lang.value);
        if (parsedValueD.isValid()) {
          if (disabledDate && disabledDate(parsedValueD.toDate())) {
            return;
          }
          if (type3 === "min") {
            leftDate.value = parsedValueD;
            minDate.value = (minDate.value || leftDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());
            if (!props2.unlinkPanels && (!maxDate.value || maxDate.value.isBefore(minDate.value))) {
              rightDate.value = parsedValueD.add(1, "month");
              maxDate.value = minDate.value.add(1, "month");
            }
          } else {
            rightDate.value = parsedValueD;
            maxDate.value = (maxDate.value || rightDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());
            if (!props2.unlinkPanels && (!minDate.value || minDate.value.isAfter(maxDate.value))) {
              leftDate.value = parsedValueD.subtract(1, "month");
              minDate.value = maxDate.value.subtract(1, "month");
            }
          }
        }
      };
      const handleDateChange = (_2, type3) => {
        dateUserInput.value[type3] = null;
      };
      const handleTimeInput = (value, type3) => {
        timeUserInput.value[type3] = value;
        const parsedValueD = dayjs(value, timeFormat.value).locale(lang.value);
        if (parsedValueD.isValid()) {
          if (type3 === "min") {
            minTimePickerVisible.value = true;
            minDate.value = (minDate.value || leftDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());
          } else {
            maxTimePickerVisible.value = true;
            maxDate.value = (maxDate.value || rightDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());
            rightDate.value = maxDate.value;
          }
        }
      };
      const handleTimeChange = (value, type3) => {
        timeUserInput.value[type3] = null;
        if (type3 === "min") {
          leftDate.value = minDate.value;
          minTimePickerVisible.value = false;
          if (!maxDate.value || maxDate.value.isBefore(minDate.value)) {
            maxDate.value = minDate.value;
          }
        } else {
          rightDate.value = maxDate.value;
          maxTimePickerVisible.value = false;
          if (maxDate.value && maxDate.value.isBefore(minDate.value)) {
            minDate.value = maxDate.value;
          }
        }
      };
      const handleMinTimePick = (value, visible, first) => {
        if (timeUserInput.value.min)
          return;
        if (value) {
          leftDate.value = value;
          minDate.value = (minDate.value || leftDate.value).hour(value.hour()).minute(value.minute()).second(value.second());
        }
        if (!first) {
          minTimePickerVisible.value = visible;
        }
        if (!maxDate.value || maxDate.value.isBefore(minDate.value)) {
          maxDate.value = minDate.value;
          rightDate.value = value;
        }
      };
      const handleMaxTimePick = (value, visible, first) => {
        if (timeUserInput.value.max)
          return;
        if (value) {
          rightDate.value = value;
          maxDate.value = (maxDate.value || rightDate.value).hour(value.hour()).minute(value.minute()).second(value.second());
        }
        if (!first) {
          maxTimePickerVisible.value = visible;
        }
        if (maxDate.value && maxDate.value.isBefore(minDate.value)) {
          minDate.value = maxDate.value;
        }
      };
      const handleClear = () => {
        leftDate.value = getDefaultValue(vue.unref(defaultValue), {
          lang: vue.unref(lang),
          unit: "month",
          unlinkPanels: props2.unlinkPanels
        })[0];
        rightDate.value = leftDate.value.add(1, "month");
        maxDate.value = void 0;
        minDate.value = void 0;
        emit("pick", null);
      };
      const formatToString = (value) => {
        return shared.isArray(value) ? value.map((_2) => _2.format(format2.value)) : value.format(format2.value);
      };
      const parseUserInput = (value) => {
        return shared.isArray(value) ? value.map((_2) => dayjs(_2, format2.value).locale(lang.value)) : dayjs(value, format2.value).locale(lang.value);
      };
      function onParsedValueChanged(minDate2, maxDate2) {
        if (props2.unlinkPanels && maxDate2) {
          const minDateYear = (minDate2 == null ? void 0 : minDate2.year()) || 0;
          const minDateMonth = (minDate2 == null ? void 0 : minDate2.month()) || 0;
          const maxDateYear = maxDate2.year();
          const maxDateMonth = maxDate2.month();
          rightDate.value = minDateYear === maxDateYear && minDateMonth === maxDateMonth ? maxDate2.add(1, unit$2) : maxDate2;
        } else {
          rightDate.value = leftDate.value.add(1, unit$2);
          if (maxDate2) {
            rightDate.value = rightDate.value.hour(maxDate2.hour()).minute(maxDate2.minute()).second(maxDate2.second());
          }
        }
      }
      emit("set-picker-option", ["isValidValue", isValidValue2]);
      emit("set-picker-option", ["parseUserInput", parseUserInput]);
      emit("set-picker-option", ["formatToString", formatToString]);
      emit("set-picker-option", ["handleClear", handleClear]);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([
            vue.unref(ppNs).b(),
            vue.unref(drpNs).b(),
            {
              "has-sidebar": _ctx.$slots.sidebar || vue.unref(hasShortcuts),
              "has-time": vue.unref(showTime)
            }
          ])
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ppNs).e("body-wrapper"))
          }, [
            vue.renderSlot(_ctx.$slots, "sidebar", {
              class: vue.normalizeClass(vue.unref(ppNs).e("sidebar"))
            }),
            vue.unref(hasShortcuts) ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ppNs).e("sidebar"))
            }, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(shortcuts), (shortcut, key) => {
                return vue.openBlock(), vue.createElementBlock("button", {
                  key,
                  type: "button",
                  class: vue.normalizeClass(vue.unref(ppNs).e("shortcut")),
                  onClick: ($event) => vue.unref(handleShortcutClick)(shortcut)
                }, vue.toDisplayString(shortcut.text), 11, ["onClick"]);
              }), 128))
            ], 2)) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ppNs).e("body"))
            }, [
              vue.unref(showTime) ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                class: vue.normalizeClass(vue.unref(drpNs).e("time-header"))
              }, [
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(vue.unref(drpNs).e("editors-wrap"))
                }, [
                  vue.createElementVNode("span", {
                    class: vue.normalizeClass(vue.unref(drpNs).e("time-picker-wrap"))
                  }, [
                    vue.createVNode(vue.unref(ElInput), {
                      size: "small",
                      disabled: vue.unref(rangeState).selecting,
                      placeholder: vue.unref(t2)("el.datepicker.startDate"),
                      class: vue.normalizeClass(vue.unref(drpNs).e("editor")),
                      "model-value": vue.unref(minVisibleDate),
                      "validate-event": false,
                      onInput: (val) => handleDateInput(val, "min"),
                      onChange: (val) => handleDateChange(val, "min")
                    }, null, 8, ["disabled", "placeholder", "class", "model-value", "onInput", "onChange"])
                  ], 2),
                  vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", {
                    class: vue.normalizeClass(vue.unref(drpNs).e("time-picker-wrap"))
                  }, [
                    vue.createVNode(vue.unref(ElInput), {
                      size: "small",
                      class: vue.normalizeClass(vue.unref(drpNs).e("editor")),
                      disabled: vue.unref(rangeState).selecting,
                      placeholder: vue.unref(t2)("el.datepicker.startTime"),
                      "model-value": vue.unref(minVisibleTime),
                      "validate-event": false,
                      onFocus: ($event) => minTimePickerVisible.value = true,
                      onInput: (val) => handleTimeInput(val, "min"),
                      onChange: (val) => handleTimeChange(val, "min")
                    }, null, 8, ["class", "disabled", "placeholder", "model-value", "onFocus", "onInput", "onChange"]),
                    vue.createVNode(vue.unref(TimePickPanel), {
                      visible: minTimePickerVisible.value,
                      format: vue.unref(timeFormat),
                      "datetime-role": "start",
                      "parsed-value": leftDate.value,
                      onPick: handleMinTimePick
                    }, null, 8, ["visible", "format", "parsed-value"])
                  ], 2)), [
                    [vue.unref(ClickOutside), handleMinTimeClose]
                  ])
                ], 2),
                vue.createElementVNode("span", null, [
                  vue.createVNode(vue.unref(ElIcon), null, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(arrow_right_default))
                    ]),
                    _: 1
                  })
                ]),
                vue.createElementVNode("span", {
                  class: vue.normalizeClass([vue.unref(drpNs).e("editors-wrap"), "is-right"])
                }, [
                  vue.createElementVNode("span", {
                    class: vue.normalizeClass(vue.unref(drpNs).e("time-picker-wrap"))
                  }, [
                    vue.createVNode(vue.unref(ElInput), {
                      size: "small",
                      class: vue.normalizeClass(vue.unref(drpNs).e("editor")),
                      disabled: vue.unref(rangeState).selecting,
                      placeholder: vue.unref(t2)("el.datepicker.endDate"),
                      "model-value": vue.unref(maxVisibleDate),
                      readonly: !vue.unref(minDate),
                      "validate-event": false,
                      onInput: (val) => handleDateInput(val, "max"),
                      onChange: (val) => handleDateChange(val, "max")
                    }, null, 8, ["class", "disabled", "placeholder", "model-value", "readonly", "onInput", "onChange"])
                  ], 2),
                  vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", {
                    class: vue.normalizeClass(vue.unref(drpNs).e("time-picker-wrap"))
                  }, [
                    vue.createVNode(vue.unref(ElInput), {
                      size: "small",
                      class: vue.normalizeClass(vue.unref(drpNs).e("editor")),
                      disabled: vue.unref(rangeState).selecting,
                      placeholder: vue.unref(t2)("el.datepicker.endTime"),
                      "model-value": vue.unref(maxVisibleTime),
                      readonly: !vue.unref(minDate),
                      "validate-event": false,
                      onFocus: ($event) => vue.unref(minDate) && (maxTimePickerVisible.value = true),
                      onInput: (val) => handleTimeInput(val, "max"),
                      onChange: (val) => handleTimeChange(val, "max")
                    }, null, 8, ["class", "disabled", "placeholder", "model-value", "readonly", "onFocus", "onInput", "onChange"]),
                    vue.createVNode(vue.unref(TimePickPanel), {
                      "datetime-role": "end",
                      visible: maxTimePickerVisible.value,
                      format: vue.unref(timeFormat),
                      "parsed-value": rightDate.value,
                      onPick: handleMaxTimePick
                    }, null, 8, ["visible", "format", "parsed-value"])
                  ], 2)), [
                    [vue.unref(ClickOutside), handleMaxTimeClose]
                  ])
                ], 2)
              ], 2)) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("div", {
                class: vue.normalizeClass([[vue.unref(ppNs).e("content"), vue.unref(drpNs).e("content")], "is-left"])
              }, [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(drpNs).e("header"))
                }, [
                  vue.createElementVNode("button", {
                    type: "button",
                    class: vue.normalizeClass([vue.unref(ppNs).e("icon-btn"), "d-arrow-left"]),
                    "aria-label": vue.unref(t2)(`el.datepicker.prevYear`),
                    onClick: leftPrevYear
                  }, [
                    vue.renderSlot(_ctx.$slots, "prev-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["aria-label"]),
                  vue.createElementVNode("button", {
                    type: "button",
                    class: vue.normalizeClass([vue.unref(ppNs).e("icon-btn"), "arrow-left"]),
                    "aria-label": vue.unref(t2)(`el.datepicker.prevMonth`),
                    onClick: leftPrevMonth
                  }, [
                    vue.renderSlot(_ctx.$slots, "prev-month", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(arrow_left_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["aria-label"]),
                  _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                    key: 0,
                    type: "button",
                    disabled: !vue.unref(enableYearArrow),
                    class: vue.normalizeClass([[vue.unref(ppNs).e("icon-btn"), { "is-disabled": !vue.unref(enableYearArrow) }], "d-arrow-right"]),
                    "aria-label": vue.unref(t2)(`el.datepicker.nextYear`),
                    onClick: leftNextYear
                  }, [
                    vue.renderSlot(_ctx.$slots, "next-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["disabled", "aria-label"])) : vue.createCommentVNode("v-if", true),
                  _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                    key: 1,
                    type: "button",
                    disabled: !vue.unref(enableMonthArrow),
                    class: vue.normalizeClass([[
                      vue.unref(ppNs).e("icon-btn"),
                      { "is-disabled": !vue.unref(enableMonthArrow) }
                    ], "arrow-right"]),
                    "aria-label": vue.unref(t2)(`el.datepicker.nextMonth`),
                    onClick: leftNextMonth
                  }, [
                    vue.renderSlot(_ctx.$slots, "next-month", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(arrow_right_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["disabled", "aria-label"])) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("div", null, vue.toDisplayString(vue.unref(leftLabel)), 1)
                ], 2),
                vue.createVNode(DateTable, {
                  "selection-mode": "range",
                  date: leftDate.value,
                  "min-date": vue.unref(minDate),
                  "max-date": vue.unref(maxDate),
                  "range-state": vue.unref(rangeState),
                  "disabled-date": vue.unref(disabledDate),
                  "cell-class-name": vue.unref(cellClassName),
                  onChangerange: vue.unref(handleChangeRange),
                  onPick: handleRangePick,
                  onSelect: vue.unref(onSelect)
                }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "onSelect"])
              ], 2),
              vue.createElementVNode("div", {
                class: vue.normalizeClass([[vue.unref(ppNs).e("content"), vue.unref(drpNs).e("content")], "is-right"])
              }, [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(drpNs).e("header"))
                }, [
                  _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                    key: 0,
                    type: "button",
                    disabled: !vue.unref(enableYearArrow),
                    class: vue.normalizeClass([[vue.unref(ppNs).e("icon-btn"), { "is-disabled": !vue.unref(enableYearArrow) }], "d-arrow-left"]),
                    "aria-label": vue.unref(t2)(`el.datepicker.prevYear`),
                    onClick: rightPrevYear
                  }, [
                    vue.renderSlot(_ctx.$slots, "prev-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["disabled", "aria-label"])) : vue.createCommentVNode("v-if", true),
                  _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                    key: 1,
                    type: "button",
                    disabled: !vue.unref(enableMonthArrow),
                    class: vue.normalizeClass([[
                      vue.unref(ppNs).e("icon-btn"),
                      { "is-disabled": !vue.unref(enableMonthArrow) }
                    ], "arrow-left"]),
                    "aria-label": vue.unref(t2)(`el.datepicker.prevMonth`),
                    onClick: rightPrevMonth
                  }, [
                    vue.renderSlot(_ctx.$slots, "prev-month", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(arrow_left_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["disabled", "aria-label"])) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("button", {
                    type: "button",
                    "aria-label": vue.unref(t2)(`el.datepicker.nextYear`),
                    class: vue.normalizeClass([vue.unref(ppNs).e("icon-btn"), "d-arrow-right"]),
                    onClick: rightNextYear
                  }, [
                    vue.renderSlot(_ctx.$slots, "next-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["aria-label"]),
                  vue.createElementVNode("button", {
                    type: "button",
                    class: vue.normalizeClass([vue.unref(ppNs).e("icon-btn"), "arrow-right"]),
                    "aria-label": vue.unref(t2)(`el.datepicker.nextMonth`),
                    onClick: rightNextMonth
                  }, [
                    vue.renderSlot(_ctx.$slots, "next-month", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(arrow_right_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["aria-label"]),
                  vue.createElementVNode("div", null, vue.toDisplayString(vue.unref(rightLabel)), 1)
                ], 2),
                vue.createVNode(DateTable, {
                  "selection-mode": "range",
                  date: rightDate.value,
                  "min-date": vue.unref(minDate),
                  "max-date": vue.unref(maxDate),
                  "range-state": vue.unref(rangeState),
                  "disabled-date": vue.unref(disabledDate),
                  "cell-class-name": vue.unref(cellClassName),
                  onChangerange: vue.unref(handleChangeRange),
                  onPick: handleRangePick,
                  onSelect: vue.unref(onSelect)
                }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "cell-class-name", "onChangerange", "onSelect"])
              ], 2)
            ], 2)
          ], 2),
          vue.unref(showTime) ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ppNs).e("footer"))
          }, [
            vue.unref(clearable) ? (vue.openBlock(), vue.createBlock(vue.unref(ElButton), {
              key: 0,
              text: "",
              size: "small",
              class: vue.normalizeClass(vue.unref(ppNs).e("link-btn")),
              onClick: handleClear
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(vue.toDisplayString(vue.unref(t2)("el.datepicker.clear")), 1)
              ]),
              _: 1
            }, 8, ["class"])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(vue.unref(ElButton), {
              plain: "",
              size: "small",
              class: vue.normalizeClass(vue.unref(ppNs).e("link-btn")),
              disabled: vue.unref(btnDisabled),
              onClick: ($event) => vue.unref(handleRangeConfirm)(false)
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(vue.toDisplayString(vue.unref(t2)("el.datepicker.confirm")), 1)
              ]),
              _: 1
            }, 8, ["class", "disabled", "onClick"])
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var DateRangePickPanel = /* @__PURE__ */ _export_sfc(_sfc_main$1t, [["__file", "panel-date-range.vue"]]);
  const panelMonthRangeProps = buildProps({
    ...panelRangeSharedProps
  });
  const panelMonthRangeEmits = [
    "pick",
    "set-picker-option",
    "calendar-change"
  ];
  const useMonthRangeHeader = ({
    unlinkPanels,
    leftDate,
    rightDate
  }) => {
    const { t: t2 } = useLocale();
    const leftPrevYear = () => {
      leftDate.value = leftDate.value.subtract(1, "year");
      if (!unlinkPanels.value) {
        rightDate.value = rightDate.value.subtract(1, "year");
      }
    };
    const rightNextYear = () => {
      if (!unlinkPanels.value) {
        leftDate.value = leftDate.value.add(1, "year");
      }
      rightDate.value = rightDate.value.add(1, "year");
    };
    const leftNextYear = () => {
      leftDate.value = leftDate.value.add(1, "year");
    };
    const rightPrevYear = () => {
      rightDate.value = rightDate.value.subtract(1, "year");
    };
    const leftLabel = vue.computed(() => {
      return `${leftDate.value.year()} ${t2("el.datepicker.year")}`;
    });
    const rightLabel = vue.computed(() => {
      return `${rightDate.value.year()} ${t2("el.datepicker.year")}`;
    });
    const leftYear = vue.computed(() => {
      return leftDate.value.year();
    });
    const rightYear = vue.computed(() => {
      return rightDate.value.year() === leftDate.value.year() ? leftDate.value.year() + 1 : rightDate.value.year();
    });
    return {
      leftPrevYear,
      rightNextYear,
      leftNextYear,
      rightPrevYear,
      leftLabel,
      rightLabel,
      leftYear,
      rightYear
    };
  };
  const unit$1 = "year";
  const __default__$12 = vue.defineComponent({
    name: "DatePickerMonthRange"
  });
  const _sfc_main$1s = /* @__PURE__ */ vue.defineComponent({
    ...__default__$12,
    props: panelMonthRangeProps,
    emits: panelMonthRangeEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const { lang } = useLocale();
      const pickerBase = vue.inject("EP_PICKER_BASE");
      const { shortcuts, disabledDate } = pickerBase.props;
      const format2 = vue.toRef(pickerBase.props, "format");
      const defaultValue = vue.toRef(pickerBase.props, "defaultValue");
      const leftDate = vue.ref(dayjs().locale(lang.value));
      const rightDate = vue.ref(dayjs().locale(lang.value).add(1, unit$1));
      const {
        minDate,
        maxDate,
        rangeState,
        ppNs,
        drpNs,
        handleChangeRange,
        handleRangeConfirm,
        handleShortcutClick,
        onSelect
      } = useRangePicker(props2, {
        defaultValue,
        leftDate,
        rightDate,
        unit: unit$1,
        onParsedValueChanged
      });
      const hasShortcuts = vue.computed(() => !!shortcuts.length);
      const {
        leftPrevYear,
        rightNextYear,
        leftNextYear,
        rightPrevYear,
        leftLabel,
        rightLabel,
        leftYear,
        rightYear
      } = useMonthRangeHeader({
        unlinkPanels: vue.toRef(props2, "unlinkPanels"),
        leftDate,
        rightDate
      });
      const enableYearArrow = vue.computed(() => {
        return props2.unlinkPanels && rightYear.value > leftYear.value + 1;
      });
      const handleRangePick = (val, close2 = true) => {
        const minDate_ = val.minDate;
        const maxDate_ = val.maxDate;
        if (maxDate.value === maxDate_ && minDate.value === minDate_) {
          return;
        }
        emit("calendar-change", [minDate_.toDate(), maxDate_ && maxDate_.toDate()]);
        maxDate.value = maxDate_;
        minDate.value = minDate_;
        if (!close2)
          return;
        handleRangeConfirm();
      };
      const handleClear = () => {
        leftDate.value = getDefaultValue(vue.unref(defaultValue), {
          lang: vue.unref(lang),
          unit: "year",
          unlinkPanels: props2.unlinkPanels
        })[0];
        rightDate.value = leftDate.value.add(1, "year");
        emit("pick", null);
      };
      const formatToString = (value) => {
        return shared.isArray(value) ? value.map((_2) => _2.format(format2.value)) : value.format(format2.value);
      };
      const parseUserInput = (value) => {
        return shared.isArray(value) ? value.map((_2) => dayjs(_2, format2.value).locale(lang.value)) : dayjs(value, format2.value).locale(lang.value);
      };
      function onParsedValueChanged(minDate2, maxDate2) {
        if (props2.unlinkPanels && maxDate2) {
          const minDateYear = (minDate2 == null ? void 0 : minDate2.year()) || 0;
          const maxDateYear = maxDate2.year();
          rightDate.value = minDateYear === maxDateYear ? maxDate2.add(1, unit$1) : maxDate2;
        } else {
          rightDate.value = leftDate.value.add(1, unit$1);
        }
      }
      emit("set-picker-option", ["isValidValue", isValidRange]);
      emit("set-picker-option", ["formatToString", formatToString]);
      emit("set-picker-option", ["parseUserInput", parseUserInput]);
      emit("set-picker-option", ["handleClear", handleClear]);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([
            vue.unref(ppNs).b(),
            vue.unref(drpNs).b(),
            {
              "has-sidebar": Boolean(_ctx.$slots.sidebar) || vue.unref(hasShortcuts)
            }
          ])
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ppNs).e("body-wrapper"))
          }, [
            vue.renderSlot(_ctx.$slots, "sidebar", {
              class: vue.normalizeClass(vue.unref(ppNs).e("sidebar"))
            }),
            vue.unref(hasShortcuts) ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ppNs).e("sidebar"))
            }, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(shortcuts), (shortcut, key) => {
                return vue.openBlock(), vue.createElementBlock("button", {
                  key,
                  type: "button",
                  class: vue.normalizeClass(vue.unref(ppNs).e("shortcut")),
                  onClick: ($event) => vue.unref(handleShortcutClick)(shortcut)
                }, vue.toDisplayString(shortcut.text), 11, ["onClick"]);
              }), 128))
            ], 2)) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ppNs).e("body"))
            }, [
              vue.createElementVNode("div", {
                class: vue.normalizeClass([[vue.unref(ppNs).e("content"), vue.unref(drpNs).e("content")], "is-left"])
              }, [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(drpNs).e("header"))
                }, [
                  vue.createElementVNode("button", {
                    type: "button",
                    class: vue.normalizeClass([vue.unref(ppNs).e("icon-btn"), "d-arrow-left"]),
                    onClick: vue.unref(leftPrevYear)
                  }, [
                    vue.renderSlot(_ctx.$slots, "prev-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["onClick"]),
                  _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                    key: 0,
                    type: "button",
                    disabled: !vue.unref(enableYearArrow),
                    class: vue.normalizeClass([[
                      vue.unref(ppNs).e("icon-btn"),
                      { [vue.unref(ppNs).is("disabled")]: !vue.unref(enableYearArrow) }
                    ], "d-arrow-right"]),
                    onClick: vue.unref(leftNextYear)
                  }, [
                    vue.renderSlot(_ctx.$slots, "next-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["disabled", "onClick"])) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("div", null, vue.toDisplayString(vue.unref(leftLabel)), 1)
                ], 2),
                vue.createVNode(MonthTable, {
                  "selection-mode": "range",
                  date: leftDate.value,
                  "min-date": vue.unref(minDate),
                  "max-date": vue.unref(maxDate),
                  "range-state": vue.unref(rangeState),
                  "disabled-date": vue.unref(disabledDate),
                  onChangerange: vue.unref(handleChangeRange),
                  onPick: handleRangePick,
                  onSelect: vue.unref(onSelect)
                }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "onChangerange", "onSelect"])
              ], 2),
              vue.createElementVNode("div", {
                class: vue.normalizeClass([[vue.unref(ppNs).e("content"), vue.unref(drpNs).e("content")], "is-right"])
              }, [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(drpNs).e("header"))
                }, [
                  _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                    key: 0,
                    type: "button",
                    disabled: !vue.unref(enableYearArrow),
                    class: vue.normalizeClass([[vue.unref(ppNs).e("icon-btn"), { "is-disabled": !vue.unref(enableYearArrow) }], "d-arrow-left"]),
                    onClick: vue.unref(rightPrevYear)
                  }, [
                    vue.renderSlot(_ctx.$slots, "prev-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["disabled", "onClick"])) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("button", {
                    type: "button",
                    class: vue.normalizeClass([vue.unref(ppNs).e("icon-btn"), "d-arrow-right"]),
                    onClick: vue.unref(rightNextYear)
                  }, [
                    vue.renderSlot(_ctx.$slots, "next-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["onClick"]),
                  vue.createElementVNode("div", null, vue.toDisplayString(vue.unref(rightLabel)), 1)
                ], 2),
                vue.createVNode(MonthTable, {
                  "selection-mode": "range",
                  date: rightDate.value,
                  "min-date": vue.unref(minDate),
                  "max-date": vue.unref(maxDate),
                  "range-state": vue.unref(rangeState),
                  "disabled-date": vue.unref(disabledDate),
                  onChangerange: vue.unref(handleChangeRange),
                  onPick: handleRangePick,
                  onSelect: vue.unref(onSelect)
                }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "onChangerange", "onSelect"])
              ], 2)
            ], 2)
          ], 2)
        ], 2);
      };
    }
  });
  var MonthRangePickPanel = /* @__PURE__ */ _export_sfc(_sfc_main$1s, [["__file", "panel-month-range.vue"]]);
  const panelYearRangeProps = buildProps({
    ...panelRangeSharedProps
  });
  const panelYearRangeEmits = [
    "pick",
    "set-picker-option",
    "calendar-change"
  ];
  const useYearRangeHeader = ({
    unlinkPanels,
    leftDate,
    rightDate
  }) => {
    const leftPrevYear = () => {
      leftDate.value = leftDate.value.subtract(10, "year");
      if (!unlinkPanels.value) {
        rightDate.value = rightDate.value.subtract(10, "year");
      }
    };
    const rightNextYear = () => {
      if (!unlinkPanels.value) {
        leftDate.value = leftDate.value.add(10, "year");
      }
      rightDate.value = rightDate.value.add(10, "year");
    };
    const leftNextYear = () => {
      leftDate.value = leftDate.value.add(10, "year");
    };
    const rightPrevYear = () => {
      rightDate.value = rightDate.value.subtract(10, "year");
    };
    const leftLabel = vue.computed(() => {
      const leftStartDate = Math.floor(leftDate.value.year() / 10) * 10;
      return `${leftStartDate}-${leftStartDate + 9}`;
    });
    const rightLabel = vue.computed(() => {
      const rightStartDate = Math.floor(rightDate.value.year() / 10) * 10;
      return `${rightStartDate}-${rightStartDate + 9}`;
    });
    const leftYear = vue.computed(() => {
      const leftEndDate = Math.floor(leftDate.value.year() / 10) * 10 + 9;
      return leftEndDate;
    });
    const rightYear = vue.computed(() => {
      const rightStartDate = Math.floor(rightDate.value.year() / 10) * 10;
      return rightStartDate;
    });
    return {
      leftPrevYear,
      rightNextYear,
      leftNextYear,
      rightPrevYear,
      leftLabel,
      rightLabel,
      leftYear,
      rightYear
    };
  };
  const unit = "year";
  const __default__$11 = vue.defineComponent({
    name: "DatePickerYearRange"
  });
  const _sfc_main$1r = /* @__PURE__ */ vue.defineComponent({
    ...__default__$11,
    props: panelYearRangeProps,
    emits: panelYearRangeEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const { lang } = useLocale();
      const leftDate = vue.ref(dayjs().locale(lang.value));
      const rightDate = vue.ref(leftDate.value.add(10, "year"));
      const { pickerNs: ppNs } = vue.inject(ROOT_PICKER_INJECTION_KEY);
      const drpNs = useNamespace("date-range-picker");
      const hasShortcuts = vue.computed(() => !!shortcuts.length);
      const panelKls = vue.computed(() => [
        ppNs.b(),
        drpNs.b(),
        {
          "has-sidebar": Boolean(vue.useSlots().sidebar) || hasShortcuts.value
        }
      ]);
      const leftPanelKls = vue.computed(() => {
        return {
          content: [ppNs.e("content"), drpNs.e("content"), "is-left"],
          arrowLeftBtn: [ppNs.e("icon-btn"), "d-arrow-left"],
          arrowRightBtn: [
            ppNs.e("icon-btn"),
            { [ppNs.is("disabled")]: !enableYearArrow.value },
            "d-arrow-right"
          ]
        };
      });
      const rightPanelKls = vue.computed(() => {
        return {
          content: [ppNs.e("content"), drpNs.e("content"), "is-right"],
          arrowLeftBtn: [
            ppNs.e("icon-btn"),
            { "is-disabled": !enableYearArrow.value },
            "d-arrow-left"
          ],
          arrowRightBtn: [ppNs.e("icon-btn"), "d-arrow-right"]
        };
      });
      const handleShortcutClick = useShortcut(lang);
      const {
        leftPrevYear,
        rightNextYear,
        leftNextYear,
        rightPrevYear,
        leftLabel,
        rightLabel,
        leftYear,
        rightYear
      } = useYearRangeHeader({
        unlinkPanels: vue.toRef(props2, "unlinkPanels"),
        leftDate,
        rightDate
      });
      const enableYearArrow = vue.computed(() => {
        return props2.unlinkPanels && rightYear.value > leftYear.value + 1;
      });
      const minDate = vue.ref();
      const maxDate = vue.ref();
      const rangeState = vue.ref({
        endDate: null,
        selecting: false
      });
      const handleChangeRange = (val) => {
        rangeState.value = val;
      };
      const handleRangePick = (val, close2 = true) => {
        const minDate_ = val.minDate;
        const maxDate_ = val.maxDate;
        if (maxDate.value === maxDate_ && minDate.value === minDate_) {
          return;
        }
        emit("calendar-change", [minDate_.toDate(), maxDate_ && maxDate_.toDate()]);
        maxDate.value = maxDate_;
        minDate.value = minDate_;
        if (!close2)
          return;
        handleConfirm();
      };
      const handleConfirm = (visible = false) => {
        if (isValidRange([minDate.value, maxDate.value])) {
          emit("pick", [minDate.value, maxDate.value], visible);
        }
      };
      const onSelect = (selecting) => {
        rangeState.value.selecting = selecting;
        if (!selecting) {
          rangeState.value.endDate = null;
        }
      };
      const pickerBase = vue.inject("EP_PICKER_BASE");
      const { shortcuts, disabledDate } = pickerBase.props;
      const format2 = vue.toRef(pickerBase.props, "format");
      const defaultValue = vue.toRef(pickerBase.props, "defaultValue");
      const getDefaultValue2 = () => {
        let start;
        if (shared.isArray(defaultValue.value)) {
          const left2 = dayjs(defaultValue.value[0]);
          let right2 = dayjs(defaultValue.value[1]);
          if (!props2.unlinkPanels) {
            right2 = left2.add(10, unit);
          }
          return [left2, right2];
        } else if (defaultValue.value) {
          start = dayjs(defaultValue.value);
        } else {
          start = dayjs();
        }
        start = start.locale(lang.value);
        return [start, start.add(10, unit)];
      };
      vue.watch(() => defaultValue.value, (val) => {
        if (val) {
          const defaultArr = getDefaultValue2();
          leftDate.value = defaultArr[0];
          rightDate.value = defaultArr[1];
        }
      }, { immediate: true });
      vue.watch(() => props2.parsedValue, (newVal) => {
        if (newVal && newVal.length === 2) {
          minDate.value = newVal[0];
          maxDate.value = newVal[1];
          leftDate.value = minDate.value;
          if (props2.unlinkPanels && maxDate.value) {
            const minDateYear = minDate.value.year();
            const maxDateYear = maxDate.value.year();
            rightDate.value = minDateYear === maxDateYear ? maxDate.value.add(10, "year") : maxDate.value;
          } else {
            rightDate.value = leftDate.value.add(10, "year");
          }
        } else {
          const defaultArr = getDefaultValue2();
          minDate.value = void 0;
          maxDate.value = void 0;
          leftDate.value = defaultArr[0];
          rightDate.value = defaultArr[1];
        }
      }, { immediate: true });
      const parseUserInput = (value) => {
        return shared.isArray(value) ? value.map((_2) => dayjs(_2, format2.value).locale(lang.value)) : dayjs(value, format2.value).locale(lang.value);
      };
      const formatToString = (value) => {
        return shared.isArray(value) ? value.map((day) => day.format(format2.value)) : value.format(format2.value);
      };
      const isValidValue2 = (date) => {
        return isValidRange(date) && (disabledDate ? !disabledDate(date[0].toDate()) && !disabledDate(date[1].toDate()) : true);
      };
      const handleClear = () => {
        const defaultArr = getDefaultValue2();
        leftDate.value = defaultArr[0];
        rightDate.value = defaultArr[1];
        maxDate.value = void 0;
        minDate.value = void 0;
        emit("pick", null);
      };
      emit("set-picker-option", ["isValidValue", isValidValue2]);
      emit("set-picker-option", ["parseUserInput", parseUserInput]);
      emit("set-picker-option", ["formatToString", formatToString]);
      emit("set-picker-option", ["handleClear", handleClear]);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(panelKls))
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ppNs).e("body-wrapper"))
          }, [
            vue.renderSlot(_ctx.$slots, "sidebar", {
              class: vue.normalizeClass(vue.unref(ppNs).e("sidebar"))
            }),
            vue.unref(hasShortcuts) ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ppNs).e("sidebar"))
            }, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(shortcuts), (shortcut, key) => {
                return vue.openBlock(), vue.createElementBlock("button", {
                  key,
                  type: "button",
                  class: vue.normalizeClass(vue.unref(ppNs).e("shortcut")),
                  onClick: ($event) => vue.unref(handleShortcutClick)(shortcut)
                }, vue.toDisplayString(shortcut.text), 11, ["onClick"]);
              }), 128))
            ], 2)) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ppNs).e("body"))
            }, [
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(leftPanelKls).content)
              }, [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(drpNs).e("header"))
                }, [
                  vue.createElementVNode("button", {
                    type: "button",
                    class: vue.normalizeClass(vue.unref(leftPanelKls).arrowLeftBtn),
                    onClick: vue.unref(leftPrevYear)
                  }, [
                    vue.renderSlot(_ctx.$slots, "prev-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["onClick"]),
                  _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                    key: 0,
                    type: "button",
                    disabled: !vue.unref(enableYearArrow),
                    class: vue.normalizeClass(vue.unref(leftPanelKls).arrowRightBtn),
                    onClick: vue.unref(leftNextYear)
                  }, [
                    vue.renderSlot(_ctx.$slots, "next-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["disabled", "onClick"])) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("div", null, vue.toDisplayString(vue.unref(leftLabel)), 1)
                ], 2),
                vue.createVNode(YearTable, {
                  "selection-mode": "range",
                  date: leftDate.value,
                  "min-date": minDate.value,
                  "max-date": maxDate.value,
                  "range-state": rangeState.value,
                  "disabled-date": vue.unref(disabledDate),
                  onChangerange: handleChangeRange,
                  onPick: handleRangePick,
                  onSelect
                }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date"])
              ], 2),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(rightPanelKls).content)
              }, [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(drpNs).e("header"))
                }, [
                  _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                    key: 0,
                    type: "button",
                    disabled: !vue.unref(enableYearArrow),
                    class: vue.normalizeClass(vue.unref(rightPanelKls).arrowLeftBtn),
                    onClick: vue.unref(rightPrevYear)
                  }, [
                    vue.renderSlot(_ctx.$slots, "prev-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_left_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["disabled", "onClick"])) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("button", {
                    type: "button",
                    class: vue.normalizeClass(vue.unref(rightPanelKls).arrowRightBtn),
                    onClick: vue.unref(rightNextYear)
                  }, [
                    vue.renderSlot(_ctx.$slots, "next-year", {}, () => [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(d_arrow_right_default))
                        ]),
                        _: 1
                      })
                    ])
                  ], 10, ["onClick"]),
                  vue.createElementVNode("div", null, vue.toDisplayString(vue.unref(rightLabel)), 1)
                ], 2),
                vue.createVNode(YearTable, {
                  "selection-mode": "range",
                  date: rightDate.value,
                  "min-date": minDate.value,
                  "max-date": maxDate.value,
                  "range-state": rangeState.value,
                  "disabled-date": vue.unref(disabledDate),
                  onChangerange: handleChangeRange,
                  onPick: handleRangePick,
                  onSelect
                }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date"])
              ], 2)
            ], 2)
          ], 2)
        ], 2);
      };
    }
  });
  var YearRangePickPanel = /* @__PURE__ */ _export_sfc(_sfc_main$1r, [["__file", "panel-year-range.vue"]]);
  const getPanel = function(type3) {
    switch (type3) {
      case "daterange":
      case "datetimerange": {
        return DateRangePickPanel;
      }
      case "monthrange": {
        return MonthRangePickPanel;
      }
      case "yearrange": {
        return YearRangePickPanel;
      }
      default: {
        return DatePickPanel;
      }
    }
  };
  dayjs.extend(localeData);
  dayjs.extend(advancedFormat);
  dayjs.extend(customParseFormat);
  dayjs.extend(weekOfYear);
  dayjs.extend(weekYear);
  dayjs.extend(dayOfYear);
  dayjs.extend(isSameOrAfter);
  dayjs.extend(isSameOrBefore);
  var DatePicker = vue.defineComponent({
    name: "ElDatePicker",
    install: null,
    props: datePickerProps,
    emits: ["update:modelValue"],
    setup(props2, {
      expose,
      emit,
      slots
    }) {
      const ns2 = useNamespace("picker-panel");
      vue.provide("ElPopperOptions", vue.reactive(vue.toRef(props2, "popperOptions")));
      vue.provide(ROOT_PICKER_INJECTION_KEY, {
        slots,
        pickerNs: ns2
      });
      const commonPicker = vue.ref();
      const refProps = {
        focus: (focusStartInput = true) => {
          var _a2;
          (_a2 = commonPicker.value) == null ? void 0 : _a2.focus(focusStartInput);
        },
        handleOpen: () => {
          var _a2;
          (_a2 = commonPicker.value) == null ? void 0 : _a2.handleOpen();
        },
        handleClose: () => {
          var _a2;
          (_a2 = commonPicker.value) == null ? void 0 : _a2.handleClose();
        }
      };
      expose(refProps);
      const onModelValueUpdated = (val) => {
        emit("update:modelValue", val);
      };
      return () => {
        var _a2;
        const format2 = (_a2 = props2.format) != null ? _a2 : DEFAULT_FORMATS_DATEPICKER[props2.type] || DEFAULT_FORMATS_DATE;
        const Component = getPanel(props2.type);
        return vue.createVNode(CommonPicker, vue.mergeProps(props2, {
          "format": format2,
          "type": props2.type,
          "ref": commonPicker,
          "onUpdate:modelValue": onModelValueUpdated
        }), {
          default: (scopedProps) => vue.createVNode(Component, scopedProps, {
            "prev-month": slots["prev-month"],
            "next-month": slots["next-month"],
            "prev-year": slots["prev-year"],
            "next-year": slots["next-year"]
          }),
          "range-separator": slots["range-separator"]
        });
      };
    }
  });
  const ElDatePicker = withInstall(DatePicker);
  const descriptionsKey = Symbol("elDescriptions");
  var ElDescriptionsCell = vue.defineComponent({
    name: "ElDescriptionsCell",
    props: {
      cell: {
        type: Object
      },
      tag: {
        type: String,
        default: "td"
      },
      type: {
        type: String
      }
    },
    setup() {
      const descriptions = vue.inject(descriptionsKey, {});
      return {
        descriptions
      };
    },
    render() {
      var _a2;
      const item = getNormalizedProps(this.cell);
      const directives = (((_a2 = this.cell) == null ? void 0 : _a2.dirs) || []).map((dire) => {
        const { dir, arg, modifiers, value } = dire;
        return [dir, value, arg, modifiers];
      });
      const { border, direction: direction2 } = this.descriptions;
      const isVertical = direction2 === "vertical";
      const renderLabel = () => {
        var _a22, _b, _c;
        return ((_c = (_b = (_a22 = this.cell) == null ? void 0 : _a22.children) == null ? void 0 : _b.label) == null ? void 0 : _c.call(_b)) || item.label;
      };
      const renderContent = () => {
        var _a22, _b, _c;
        return (_c = (_b = (_a22 = this.cell) == null ? void 0 : _a22.children) == null ? void 0 : _b.default) == null ? void 0 : _c.call(_b);
      };
      const span = item.span;
      const rowspan = item.rowspan;
      const align = item.align ? `is-${item.align}` : "";
      const labelAlign = item.labelAlign ? `is-${item.labelAlign}` : align;
      const className = item.className;
      const labelClassName = item.labelClassName;
      const style = {
        width: addUnit(item.width),
        minWidth: addUnit(item.minWidth)
      };
      const ns2 = useNamespace("descriptions");
      switch (this.type) {
        case "label":
          return vue.withDirectives(vue.h(this.tag, {
            style,
            class: [
              ns2.e("cell"),
              ns2.e("label"),
              ns2.is("bordered-label", border),
              ns2.is("vertical-label", isVertical),
              labelAlign,
              labelClassName
            ],
            colSpan: isVertical ? span : 1,
            rowspan: isVertical ? 1 : rowspan
          }, renderLabel()), directives);
        case "content":
          return vue.withDirectives(vue.h(this.tag, {
            style,
            class: [
              ns2.e("cell"),
              ns2.e("content"),
              ns2.is("bordered-content", border),
              ns2.is("vertical-content", isVertical),
              align,
              className
            ],
            colSpan: isVertical ? span : span * 2 - 1,
            rowspan: isVertical ? rowspan * 2 - 1 : rowspan
          }, renderContent()), directives);
        default: {
          const label = renderLabel();
          return vue.withDirectives(vue.h("td", {
            style,
            class: [ns2.e("cell"), align],
            colSpan: span,
            rowspan
          }, [
            !isNil(label) ? vue.h("span", {
              class: [ns2.e("label"), labelClassName]
            }, label) : void 0,
            vue.h("span", {
              class: [ns2.e("content"), className]
            }, renderContent())
          ]), directives);
        }
      }
    }
  });
  const descriptionsRowProps = buildProps({
    row: {
      type: definePropType(Array),
      default: () => []
    }
  });
  const __default__$10 = vue.defineComponent({
    name: "ElDescriptionsRow"
  });
  const _sfc_main$1q = /* @__PURE__ */ vue.defineComponent({
    ...__default__$10,
    props: descriptionsRowProps,
    setup(__props) {
      const descriptions = vue.inject(descriptionsKey, {});
      return (_ctx, _cache) => {
        return vue.unref(descriptions).direction === "vertical" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
          vue.createElementVNode("tr", null, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.row, (cell, _index) => {
              return vue.openBlock(), vue.createBlock(vue.unref(ElDescriptionsCell), {
                key: `tr1-${_index}`,
                cell,
                tag: "th",
                type: "label"
              }, null, 8, ["cell"]);
            }), 128))
          ]),
          vue.createElementVNode("tr", null, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.row, (cell, _index) => {
              return vue.openBlock(), vue.createBlock(vue.unref(ElDescriptionsCell), {
                key: `tr2-${_index}`,
                cell,
                tag: "td",
                type: "content"
              }, null, 8, ["cell"]);
            }), 128))
          ])
        ], 64)) : (vue.openBlock(), vue.createElementBlock("tr", { key: 1 }, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.row, (cell, _index) => {
            return vue.openBlock(), vue.createElementBlock(vue.Fragment, {
              key: `tr3-${_index}`
            }, [
              vue.unref(descriptions).border ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                vue.createVNode(vue.unref(ElDescriptionsCell), {
                  cell,
                  tag: "td",
                  type: "label"
                }, null, 8, ["cell"]),
                vue.createVNode(vue.unref(ElDescriptionsCell), {
                  cell,
                  tag: "td",
                  type: "content"
                }, null, 8, ["cell"])
              ], 64)) : (vue.openBlock(), vue.createBlock(vue.unref(ElDescriptionsCell), {
                key: 1,
                cell,
                tag: "td",
                type: "both"
              }, null, 8, ["cell"]))
            ], 64);
          }), 128))
        ]));
      };
    }
  });
  var ElDescriptionsRow = /* @__PURE__ */ _export_sfc(_sfc_main$1q, [["__file", "descriptions-row.vue"]]);
  const descriptionProps = buildProps({
    border: Boolean,
    column: {
      type: Number,
      default: 3
    },
    direction: {
      type: String,
      values: ["horizontal", "vertical"],
      default: "horizontal"
    },
    size: useSizeProp,
    title: {
      type: String,
      default: ""
    },
    extra: {
      type: String,
      default: ""
    }
  });
  const __default__$$ = vue.defineComponent({
    name: "ElDescriptions"
  });
  const _sfc_main$1p = /* @__PURE__ */ vue.defineComponent({
    ...__default__$$,
    props: descriptionProps,
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("descriptions");
      const descriptionsSize = useFormSize();
      const slots = vue.useSlots();
      vue.provide(descriptionsKey, props2);
      const descriptionKls = vue.computed(() => [ns2.b(), ns2.m(descriptionsSize.value)]);
      const filledNode = (node, span, count2, isLast = false) => {
        if (!node.props) {
          node.props = {};
        }
        if (span > count2) {
          node.props.span = count2;
        }
        if (isLast) {
          node.props.span = span;
        }
        return node;
      };
      const getRows = () => {
        if (!slots.default)
          return [];
        const children = flattedChildren(slots.default()).filter((node) => {
          var _a2;
          return ((_a2 = node == null ? void 0 : node.type) == null ? void 0 : _a2.name) === "ElDescriptionsItem";
        });
        const rows = [];
        let temp = [];
        let count2 = props2.column;
        let totalSpan = 0;
        const rowspanTemp = [];
        children.forEach((node, index) => {
          var _a2, _b, _c;
          const span = ((_a2 = node.props) == null ? void 0 : _a2.span) || 1;
          const rowspan = ((_b = node.props) == null ? void 0 : _b.rowspan) || 1;
          const rowNo = rows.length;
          rowspanTemp[rowNo] || (rowspanTemp[rowNo] = 0);
          if (rowspan > 1) {
            for (let i2 = 1; i2 < rowspan; i2++) {
              rowspanTemp[_c = rowNo + i2] || (rowspanTemp[_c] = 0);
              rowspanTemp[rowNo + i2]++;
              totalSpan++;
            }
          }
          if (rowspanTemp[rowNo] > 0) {
            count2 -= rowspanTemp[rowNo];
            rowspanTemp[rowNo] = 0;
          }
          if (index < children.length - 1) {
            totalSpan += span > count2 ? count2 : span;
          }
          if (index === children.length - 1) {
            const lastSpan = props2.column - totalSpan % props2.column;
            temp.push(filledNode(node, lastSpan, count2, true));
            rows.push(temp);
            return;
          }
          if (span < count2) {
            count2 -= span;
            temp.push(node);
          } else {
            temp.push(filledNode(node, span, count2));
            rows.push(temp);
            count2 = props2.column;
            temp = [];
          }
        });
        return rows;
      };
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(descriptionKls))
        }, [
          _ctx.title || _ctx.extra || _ctx.$slots.title || _ctx.$slots.extra ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("header"))
          }, [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).e("title"))
            }, [
              vue.renderSlot(_ctx.$slots, "title", {}, () => [
                vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)
              ])
            ], 2),
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).e("extra"))
            }, [
              vue.renderSlot(_ctx.$slots, "extra", {}, () => [
                vue.createTextVNode(vue.toDisplayString(_ctx.extra), 1)
              ])
            ], 2)
          ], 2)) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("body"))
          }, [
            vue.createElementVNode("table", {
              class: vue.normalizeClass([vue.unref(ns2).e("table"), vue.unref(ns2).is("bordered", _ctx.border)])
            }, [
              vue.createElementVNode("tbody", null, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(getRows(), (row, _index) => {
                  return vue.openBlock(), vue.createBlock(ElDescriptionsRow, {
                    key: _index,
                    row
                  }, null, 8, ["row"]);
                }), 128))
              ])
            ], 2)
          ], 2)
        ], 2);
      };
    }
  });
  var Descriptions = /* @__PURE__ */ _export_sfc(_sfc_main$1p, [["__file", "description.vue"]]);
  const descriptionItemProps = buildProps({
    label: {
      type: String,
      default: ""
    },
    span: {
      type: Number,
      default: 1
    },
    rowspan: {
      type: Number,
      default: 1
    },
    width: {
      type: [String, Number],
      default: ""
    },
    minWidth: {
      type: [String, Number],
      default: ""
    },
    align: {
      type: String,
      default: "left"
    },
    labelAlign: {
      type: String,
      default: ""
    },
    className: {
      type: String,
      default: ""
    },
    labelClassName: {
      type: String,
      default: ""
    }
  });
  const DescriptionItem = vue.defineComponent({
    name: "ElDescriptionsItem",
    props: descriptionItemProps
  });
  const ElDescriptions = withInstall(Descriptions, {
    DescriptionsItem: DescriptionItem
  });
  const ElDescriptionsItem = withNoopInstall(DescriptionItem);
  const overlayProps = buildProps({
    mask: {
      type: Boolean,
      default: true
    },
    customMaskEvent: Boolean,
    overlayClass: {
      type: definePropType([
        String,
        Array,
        Object
      ])
    },
    zIndex: {
      type: definePropType([String, Number])
    }
  });
  const overlayEmits = {
    click: (evt) => evt instanceof MouseEvent
  };
  const BLOCK = "overlay";
  var Overlay$1 = vue.defineComponent({
    name: "ElOverlay",
    props: overlayProps,
    emits: overlayEmits,
    setup(props2, { slots, emit }) {
      const ns2 = useNamespace(BLOCK);
      const onMaskClick = (e) => {
        emit("click", e);
      };
      const { onClick, onMousedown, onMouseup } = useSameTarget(props2.customMaskEvent ? void 0 : onMaskClick);
      return () => {
        return props2.mask ? vue.createVNode("div", {
          class: [ns2.b(), props2.overlayClass],
          style: {
            zIndex: props2.zIndex
          },
          onClick,
          onMousedown,
          onMouseup
        }, [vue.renderSlot(slots, "default")], PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS, ["onClick", "onMouseup", "onMousedown"]) : vue.h("div", {
          class: props2.overlayClass,
          style: {
            zIndex: props2.zIndex,
            position: "fixed",
            top: "0px",
            right: "0px",
            bottom: "0px",
            left: "0px"
          }
        }, [vue.renderSlot(slots, "default")]);
      };
    }
  });
  const ElOverlay = Overlay$1;
  const dialogInjectionKey = Symbol("dialogInjectionKey");
  const dialogContentProps = buildProps({
    center: Boolean,
    alignCenter: Boolean,
    closeIcon: {
      type: iconPropType
    },
    draggable: Boolean,
    overflow: Boolean,
    fullscreen: Boolean,
    showClose: {
      type: Boolean,
      default: true
    },
    title: {
      type: String,
      default: ""
    },
    ariaLevel: {
      type: String,
      default: "2"
    }
  });
  const dialogContentEmits = {
    close: () => true
  };
  const __default__$_ = vue.defineComponent({ name: "ElDialogContent" });
  const _sfc_main$1o = /* @__PURE__ */ vue.defineComponent({
    ...__default__$_,
    props: dialogContentProps,
    emits: dialogContentEmits,
    setup(__props, { expose }) {
      const props2 = __props;
      const { t: t2 } = useLocale();
      const { Close } = CloseComponents;
      const { dialogRef, headerRef, bodyId, ns: ns2, style } = vue.inject(dialogInjectionKey);
      const { focusTrapRef } = vue.inject(FOCUS_TRAP_INJECTION_KEY);
      const dialogKls = vue.computed(() => [
        ns2.b(),
        ns2.is("fullscreen", props2.fullscreen),
        ns2.is("draggable", props2.draggable),
        ns2.is("align-center", props2.alignCenter),
        { [ns2.m("center")]: props2.center }
      ]);
      const composedDialogRef = composeRefs(focusTrapRef, dialogRef);
      const draggable2 = vue.computed(() => props2.draggable);
      const overflow = vue.computed(() => props2.overflow);
      const { resetPosition } = useDraggable(dialogRef, headerRef, draggable2, overflow);
      expose({
        resetPosition
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref: vue.unref(composedDialogRef),
          class: vue.normalizeClass(vue.unref(dialogKls)),
          style: vue.normalizeStyle(vue.unref(style)),
          tabindex: "-1"
        }, [
          vue.createElementVNode("header", {
            ref_key: "headerRef",
            ref: headerRef,
            class: vue.normalizeClass([vue.unref(ns2).e("header"), { "show-close": _ctx.showClose }])
          }, [
            vue.renderSlot(_ctx.$slots, "header", {}, () => [
              vue.createElementVNode("span", {
                role: "heading",
                "aria-level": _ctx.ariaLevel,
                class: vue.normalizeClass(vue.unref(ns2).e("title"))
              }, vue.toDisplayString(_ctx.title), 11, ["aria-level"])
            ]),
            _ctx.showClose ? (vue.openBlock(), vue.createElementBlock("button", {
              key: 0,
              "aria-label": vue.unref(t2)("el.dialog.close"),
              class: vue.normalizeClass(vue.unref(ns2).e("headerbtn")),
              type: "button",
              onClick: ($event) => _ctx.$emit("close")
            }, [
              vue.createVNode(vue.unref(ElIcon), {
                class: vue.normalizeClass(vue.unref(ns2).e("close"))
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.closeIcon || vue.unref(Close))))
                ]),
                _: 1
              }, 8, ["class"])
            ], 10, ["aria-label", "onClick"])) : vue.createCommentVNode("v-if", true)
          ], 2),
          vue.createElementVNode("div", {
            id: vue.unref(bodyId),
            class: vue.normalizeClass(vue.unref(ns2).e("body"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 10, ["id"]),
          _ctx.$slots.footer ? (vue.openBlock(), vue.createElementBlock("footer", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("footer"))
          }, [
            vue.renderSlot(_ctx.$slots, "footer")
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 6);
      };
    }
  });
  var ElDialogContent = /* @__PURE__ */ _export_sfc(_sfc_main$1o, [["__file", "dialog-content.vue"]]);
  const dialogProps = buildProps({
    ...dialogContentProps,
    appendToBody: Boolean,
    appendTo: {
      type: definePropType([String, Object]),
      default: "body"
    },
    beforeClose: {
      type: definePropType(Function)
    },
    destroyOnClose: Boolean,
    closeOnClickModal: {
      type: Boolean,
      default: true
    },
    closeOnPressEscape: {
      type: Boolean,
      default: true
    },
    lockScroll: {
      type: Boolean,
      default: true
    },
    modal: {
      type: Boolean,
      default: true
    },
    openDelay: {
      type: Number,
      default: 0
    },
    closeDelay: {
      type: Number,
      default: 0
    },
    top: {
      type: String
    },
    modelValue: Boolean,
    modalClass: String,
    width: {
      type: [String, Number]
    },
    zIndex: {
      type: Number
    },
    trapFocus: Boolean,
    headerAriaLevel: {
      type: String,
      default: "2"
    }
  });
  const dialogEmits = {
    open: () => true,
    opened: () => true,
    close: () => true,
    closed: () => true,
    [UPDATE_MODEL_EVENT]: (value) => isBoolean$1(value),
    openAutoFocus: () => true,
    closeAutoFocus: () => true
  };
  const useDialog = (props2, targetRef) => {
    var _a2;
    const instance = vue.getCurrentInstance();
    const emit = instance.emit;
    const { nextZIndex } = useZIndex();
    let lastPosition = "";
    const titleId = useId();
    const bodyId = useId();
    const visible = vue.ref(false);
    const closed = vue.ref(false);
    const rendered = vue.ref(false);
    const zIndex2 = vue.ref((_a2 = props2.zIndex) != null ? _a2 : nextZIndex());
    let openTimer = void 0;
    let closeTimer = void 0;
    const namespace = useGlobalConfig("namespace", defaultNamespace);
    const style = vue.computed(() => {
      const style2 = {};
      const varPrefix = `--${namespace.value}-dialog`;
      if (!props2.fullscreen) {
        if (props2.top) {
          style2[`${varPrefix}-margin-top`] = props2.top;
        }
        if (props2.width) {
          style2[`${varPrefix}-width`] = addUnit(props2.width);
        }
      }
      return style2;
    });
    const overlayDialogStyle = vue.computed(() => {
      if (props2.alignCenter) {
        return { display: "flex" };
      }
      return {};
    });
    function afterEnter() {
      emit("opened");
    }
    function afterLeave() {
      emit("closed");
      emit(UPDATE_MODEL_EVENT, false);
      if (props2.destroyOnClose) {
        rendered.value = false;
      }
    }
    function beforeLeave() {
      emit("close");
    }
    function open() {
      closeTimer == null ? void 0 : closeTimer();
      openTimer == null ? void 0 : openTimer();
      if (props2.openDelay && props2.openDelay > 0) {
        ({ stop: openTimer } = useTimeoutFn(() => doOpen(), props2.openDelay));
      } else {
        doOpen();
      }
    }
    function close2() {
      openTimer == null ? void 0 : openTimer();
      closeTimer == null ? void 0 : closeTimer();
      if (props2.closeDelay && props2.closeDelay > 0) {
        ({ stop: closeTimer } = useTimeoutFn(() => doClose(), props2.closeDelay));
      } else {
        doClose();
      }
    }
    function handleClose() {
      function hide(shouldCancel) {
        if (shouldCancel)
          return;
        closed.value = true;
        visible.value = false;
      }
      if (props2.beforeClose) {
        props2.beforeClose(hide);
      } else {
        close2();
      }
    }
    function onModalClick() {
      if (props2.closeOnClickModal) {
        handleClose();
      }
    }
    function doOpen() {
      if (!isClient)
        return;
      visible.value = true;
    }
    function doClose() {
      visible.value = false;
    }
    function onOpenAutoFocus() {
      emit("openAutoFocus");
    }
    function onCloseAutoFocus() {
      emit("closeAutoFocus");
    }
    function onFocusoutPrevented(event) {
      var _a22;
      if (((_a22 = event.detail) == null ? void 0 : _a22.focusReason) === "pointer") {
        event.preventDefault();
      }
    }
    if (props2.lockScroll) {
      useLockscreen(visible);
    }
    function onCloseRequested() {
      if (props2.closeOnPressEscape) {
        handleClose();
      }
    }
    vue.watch(() => props2.modelValue, (val) => {
      if (val) {
        closed.value = false;
        open();
        rendered.value = true;
        zIndex2.value = isUndefined$1(props2.zIndex) ? nextZIndex() : zIndex2.value++;
        vue.nextTick(() => {
          emit("open");
          if (targetRef.value) {
            targetRef.value.scrollTop = 0;
          }
        });
      } else {
        if (visible.value) {
          close2();
        }
      }
    });
    vue.watch(() => props2.fullscreen, (val) => {
      if (!targetRef.value)
        return;
      if (val) {
        lastPosition = targetRef.value.style.transform;
        targetRef.value.style.transform = "";
      } else {
        targetRef.value.style.transform = lastPosition;
      }
    });
    vue.onMounted(() => {
      if (props2.modelValue) {
        visible.value = true;
        rendered.value = true;
        open();
      }
    });
    return {
      afterEnter,
      afterLeave,
      beforeLeave,
      handleClose,
      onModalClick,
      close: close2,
      doClose,
      onOpenAutoFocus,
      onCloseAutoFocus,
      onCloseRequested,
      onFocusoutPrevented,
      titleId,
      bodyId,
      closed,
      style,
      overlayDialogStyle,
      rendered,
      visible,
      zIndex: zIndex2
    };
  };
  const __default__$Z = vue.defineComponent({
    name: "ElDialog",
    inheritAttrs: false
  });
  const _sfc_main$1n = /* @__PURE__ */ vue.defineComponent({
    ...__default__$Z,
    props: dialogProps,
    emits: dialogEmits,
    setup(__props, { expose }) {
      const props2 = __props;
      const slots = vue.useSlots();
      useDeprecated({
        scope: "el-dialog",
        from: "the title slot",
        replacement: "the header slot",
        version: "3.0.0",
        ref: "https://element-plus.org/en-US/component/dialog.html#slots"
      }, vue.computed(() => !!slots.title));
      const ns2 = useNamespace("dialog");
      const dialogRef = vue.ref();
      const headerRef = vue.ref();
      const dialogContentRef = vue.ref();
      const {
        visible,
        titleId,
        bodyId,
        style,
        overlayDialogStyle,
        rendered,
        zIndex: zIndex2,
        afterEnter,
        afterLeave,
        beforeLeave,
        handleClose,
        onModalClick,
        onOpenAutoFocus,
        onCloseAutoFocus,
        onCloseRequested,
        onFocusoutPrevented
      } = useDialog(props2, dialogRef);
      vue.provide(dialogInjectionKey, {
        dialogRef,
        headerRef,
        bodyId,
        ns: ns2,
        rendered,
        style
      });
      const overlayEvent = useSameTarget(onModalClick);
      const draggable2 = vue.computed(() => props2.draggable && !props2.fullscreen);
      const resetPosition = () => {
        var _a2;
        (_a2 = dialogContentRef.value) == null ? void 0 : _a2.resetPosition();
      };
      expose({
        visible,
        dialogContentRef,
        resetPosition
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElTeleport), {
          to: _ctx.appendTo,
          disabled: _ctx.appendTo !== "body" ? false : !_ctx.appendToBody
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(vue.Transition, {
              name: "dialog-fade",
              onAfterEnter: vue.unref(afterEnter),
              onAfterLeave: vue.unref(afterLeave),
              onBeforeLeave: vue.unref(beforeLeave),
              persisted: ""
            }, {
              default: vue.withCtx(() => [
                vue.withDirectives(vue.createVNode(vue.unref(ElOverlay), {
                  "custom-mask-event": "",
                  mask: _ctx.modal,
                  "overlay-class": _ctx.modalClass,
                  "z-index": vue.unref(zIndex2)
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("div", {
                      role: "dialog",
                      "aria-modal": "true",
                      "aria-label": _ctx.title || void 0,
                      "aria-labelledby": !_ctx.title ? vue.unref(titleId) : void 0,
                      "aria-describedby": vue.unref(bodyId),
                      class: vue.normalizeClass(`${vue.unref(ns2).namespace.value}-overlay-dialog`),
                      style: vue.normalizeStyle(vue.unref(overlayDialogStyle)),
                      onClick: vue.unref(overlayEvent).onClick,
                      onMousedown: vue.unref(overlayEvent).onMousedown,
                      onMouseup: vue.unref(overlayEvent).onMouseup
                    }, [
                      vue.createVNode(vue.unref(ElFocusTrap), {
                        loop: "",
                        trapped: vue.unref(visible),
                        "focus-start-el": "container",
                        onFocusAfterTrapped: vue.unref(onOpenAutoFocus),
                        onFocusAfterReleased: vue.unref(onCloseAutoFocus),
                        onFocusoutPrevented: vue.unref(onFocusoutPrevented),
                        onReleaseRequested: vue.unref(onCloseRequested)
                      }, {
                        default: vue.withCtx(() => [
                          vue.unref(rendered) ? (vue.openBlock(), vue.createBlock(ElDialogContent, vue.mergeProps({
                            key: 0,
                            ref_key: "dialogContentRef",
                            ref: dialogContentRef
                          }, _ctx.$attrs, {
                            center: _ctx.center,
                            "align-center": _ctx.alignCenter,
                            "close-icon": _ctx.closeIcon,
                            draggable: vue.unref(draggable2),
                            overflow: _ctx.overflow,
                            fullscreen: _ctx.fullscreen,
                            "show-close": _ctx.showClose,
                            title: _ctx.title,
                            "aria-level": _ctx.headerAriaLevel,
                            onClose: vue.unref(handleClose)
                          }), vue.createSlots({
                            header: vue.withCtx(() => [
                              !_ctx.$slots.title ? vue.renderSlot(_ctx.$slots, "header", {
                                key: 0,
                                close: vue.unref(handleClose),
                                titleId: vue.unref(titleId),
                                titleClass: vue.unref(ns2).e("title")
                              }) : vue.renderSlot(_ctx.$slots, "title", { key: 1 })
                            ]),
                            default: vue.withCtx(() => [
                              vue.renderSlot(_ctx.$slots, "default")
                            ]),
                            _: 2
                          }, [
                            _ctx.$slots.footer ? {
                              name: "footer",
                              fn: vue.withCtx(() => [
                                vue.renderSlot(_ctx.$slots, "footer")
                              ])
                            } : void 0
                          ]), 1040, ["center", "align-center", "close-icon", "draggable", "overflow", "fullscreen", "show-close", "title", "aria-level", "onClose"])) : vue.createCommentVNode("v-if", true)
                        ]),
                        _: 3
                      }, 8, ["trapped", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusoutPrevented", "onReleaseRequested"])
                    ], 46, ["aria-label", "aria-labelledby", "aria-describedby", "onClick", "onMousedown", "onMouseup"])
                  ]),
                  _: 3
                }, 8, ["mask", "overlay-class", "z-index"]), [
                  [vue.vShow, vue.unref(visible)]
                ])
              ]),
              _: 3
            }, 8, ["onAfterEnter", "onAfterLeave", "onBeforeLeave"])
          ]),
          _: 3
        }, 8, ["to", "disabled"]);
      };
    }
  });
  var Dialog = /* @__PURE__ */ _export_sfc(_sfc_main$1n, [["__file", "dialog.vue"]]);
  const ElDialog = withInstall(Dialog);
  const dividerProps = buildProps({
    direction: {
      type: String,
      values: ["horizontal", "vertical"],
      default: "horizontal"
    },
    contentPosition: {
      type: String,
      values: ["left", "center", "right"],
      default: "center"
    },
    borderStyle: {
      type: definePropType(String),
      default: "solid"
    }
  });
  const __default__$Y = vue.defineComponent({
    name: "ElDivider"
  });
  const _sfc_main$1m = /* @__PURE__ */ vue.defineComponent({
    ...__default__$Y,
    props: dividerProps,
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("divider");
      const dividerStyle = vue.computed(() => {
        return ns2.cssVar({
          "border-style": props2.borderStyle
        });
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns2).b(), vue.unref(ns2).m(_ctx.direction)]),
          style: vue.normalizeStyle(vue.unref(dividerStyle)),
          role: "separator"
        }, [
          _ctx.$slots.default && _ctx.direction !== "vertical" ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass([vue.unref(ns2).e("text"), vue.unref(ns2).is(_ctx.contentPosition)])
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 6);
      };
    }
  });
  var Divider = /* @__PURE__ */ _export_sfc(_sfc_main$1m, [["__file", "divider.vue"]]);
  const ElDivider = withInstall(Divider);
  const drawerProps = buildProps({
    ...dialogProps,
    direction: {
      type: String,
      default: "rtl",
      values: ["ltr", "rtl", "ttb", "btt"]
    },
    size: {
      type: [String, Number],
      default: "30%"
    },
    withHeader: {
      type: Boolean,
      default: true
    },
    modalFade: {
      type: Boolean,
      default: true
    },
    headerAriaLevel: {
      type: String,
      default: "2"
    }
  });
  const drawerEmits = dialogEmits;
  const __default__$X = vue.defineComponent({
    name: "ElDrawer",
    inheritAttrs: false
  });
  const _sfc_main$1l = /* @__PURE__ */ vue.defineComponent({
    ...__default__$X,
    props: drawerProps,
    emits: drawerEmits,
    setup(__props, { expose }) {
      const props2 = __props;
      const slots = vue.useSlots();
      useDeprecated({
        scope: "el-drawer",
        from: "the title slot",
        replacement: "the header slot",
        version: "3.0.0",
        ref: "https://element-plus.org/en-US/component/drawer.html#slots"
      }, vue.computed(() => !!slots.title));
      const drawerRef = vue.ref();
      const focusStartRef = vue.ref();
      const ns2 = useNamespace("drawer");
      const { t: t2 } = useLocale();
      const {
        afterEnter,
        afterLeave,
        beforeLeave,
        visible,
        rendered,
        titleId,
        bodyId,
        zIndex: zIndex2,
        onModalClick,
        onOpenAutoFocus,
        onCloseAutoFocus,
        onFocusoutPrevented,
        onCloseRequested,
        handleClose
      } = useDialog(props2, drawerRef);
      const isHorizontal2 = vue.computed(() => props2.direction === "rtl" || props2.direction === "ltr");
      const drawerSize = vue.computed(() => addUnit(props2.size));
      expose({
        handleClose,
        afterEnter,
        afterLeave
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElTeleport), {
          to: _ctx.appendTo,
          disabled: _ctx.appendTo !== "body" ? false : !_ctx.appendToBody
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(vue.Transition, {
              name: vue.unref(ns2).b("fade"),
              onAfterEnter: vue.unref(afterEnter),
              onAfterLeave: vue.unref(afterLeave),
              onBeforeLeave: vue.unref(beforeLeave),
              persisted: ""
            }, {
              default: vue.withCtx(() => [
                vue.withDirectives(vue.createVNode(vue.unref(ElOverlay), {
                  mask: _ctx.modal,
                  "overlay-class": _ctx.modalClass,
                  "z-index": vue.unref(zIndex2),
                  onClick: vue.unref(onModalClick)
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(ElFocusTrap), {
                      loop: "",
                      trapped: vue.unref(visible),
                      "focus-trap-el": drawerRef.value,
                      "focus-start-el": focusStartRef.value,
                      onFocusAfterTrapped: vue.unref(onOpenAutoFocus),
                      onFocusAfterReleased: vue.unref(onCloseAutoFocus),
                      onFocusoutPrevented: vue.unref(onFocusoutPrevented),
                      onReleaseRequested: vue.unref(onCloseRequested)
                    }, {
                      default: vue.withCtx(() => [
                        vue.createElementVNode("div", vue.mergeProps({
                          ref_key: "drawerRef",
                          ref: drawerRef,
                          "aria-modal": "true",
                          "aria-label": _ctx.title || void 0,
                          "aria-labelledby": !_ctx.title ? vue.unref(titleId) : void 0,
                          "aria-describedby": vue.unref(bodyId)
                        }, _ctx.$attrs, {
                          class: [vue.unref(ns2).b(), _ctx.direction, vue.unref(visible) && "open"],
                          style: vue.unref(isHorizontal2) ? "width: " + vue.unref(drawerSize) : "height: " + vue.unref(drawerSize),
                          role: "dialog",
                          onClick: vue.withModifiers(() => {
                          }, ["stop"])
                        }), [
                          vue.createElementVNode("span", {
                            ref_key: "focusStartRef",
                            ref: focusStartRef,
                            class: vue.normalizeClass(vue.unref(ns2).e("sr-focus")),
                            tabindex: "-1"
                          }, null, 2),
                          _ctx.withHeader ? (vue.openBlock(), vue.createElementBlock("header", {
                            key: 0,
                            class: vue.normalizeClass(vue.unref(ns2).e("header"))
                          }, [
                            !_ctx.$slots.title ? vue.renderSlot(_ctx.$slots, "header", {
                              key: 0,
                              close: vue.unref(handleClose),
                              titleId: vue.unref(titleId),
                              titleClass: vue.unref(ns2).e("title")
                            }, () => [
                              !_ctx.$slots.title ? (vue.openBlock(), vue.createElementBlock("span", {
                                key: 0,
                                id: vue.unref(titleId),
                                role: "heading",
                                "aria-level": _ctx.headerAriaLevel,
                                class: vue.normalizeClass(vue.unref(ns2).e("title"))
                              }, vue.toDisplayString(_ctx.title), 11, ["id", "aria-level"])) : vue.createCommentVNode("v-if", true)
                            ]) : vue.renderSlot(_ctx.$slots, "title", { key: 1 }, () => [
                              vue.createCommentVNode(" DEPRECATED SLOT ")
                            ]),
                            _ctx.showClose ? (vue.openBlock(), vue.createElementBlock("button", {
                              key: 2,
                              "aria-label": vue.unref(t2)("el.drawer.close"),
                              class: vue.normalizeClass(vue.unref(ns2).e("close-btn")),
                              type: "button",
                              onClick: vue.unref(handleClose)
                            }, [
                              vue.createVNode(vue.unref(ElIcon), {
                                class: vue.normalizeClass(vue.unref(ns2).e("close"))
                              }, {
                                default: vue.withCtx(() => [
                                  vue.createVNode(vue.unref(close_default))
                                ]),
                                _: 1
                              }, 8, ["class"])
                            ], 10, ["aria-label", "onClick"])) : vue.createCommentVNode("v-if", true)
                          ], 2)) : vue.createCommentVNode("v-if", true),
                          vue.unref(rendered) ? (vue.openBlock(), vue.createElementBlock("div", {
                            key: 1,
                            id: vue.unref(bodyId),
                            class: vue.normalizeClass(vue.unref(ns2).e("body"))
                          }, [
                            vue.renderSlot(_ctx.$slots, "default")
                          ], 10, ["id"])) : vue.createCommentVNode("v-if", true),
                          _ctx.$slots.footer ? (vue.openBlock(), vue.createElementBlock("div", {
                            key: 2,
                            class: vue.normalizeClass(vue.unref(ns2).e("footer"))
                          }, [
                            vue.renderSlot(_ctx.$slots, "footer")
                          ], 2)) : vue.createCommentVNode("v-if", true)
                        ], 16, ["aria-label", "aria-labelledby", "aria-describedby", "onClick"])
                      ]),
                      _: 3
                    }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusoutPrevented", "onReleaseRequested"])
                  ]),
                  _: 3
                }, 8, ["mask", "overlay-class", "z-index", "onClick"]), [
                  [vue.vShow, vue.unref(visible)]
                ])
              ]),
              _: 3
            }, 8, ["name", "onAfterEnter", "onAfterLeave", "onBeforeLeave"])
          ]),
          _: 3
        }, 8, ["to", "disabled"]);
      };
    }
  });
  var Drawer = /* @__PURE__ */ _export_sfc(_sfc_main$1l, [["__file", "drawer.vue"]]);
  const ElDrawer = withInstall(Drawer);
  const _sfc_main$1k = /* @__PURE__ */ vue.defineComponent({
    inheritAttrs: false
  });
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.renderSlot(_ctx.$slots, "default");
  }
  var Collection = /* @__PURE__ */ _export_sfc(_sfc_main$1k, [["render", _sfc_render$n], ["__file", "collection.vue"]]);
  const _sfc_main$1j = /* @__PURE__ */ vue.defineComponent({
    name: "ElCollectionItem",
    inheritAttrs: false
  });
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.renderSlot(_ctx.$slots, "default");
  }
  var CollectionItem = /* @__PURE__ */ _export_sfc(_sfc_main$1j, [["render", _sfc_render$m], ["__file", "collection-item.vue"]]);
  const COLLECTION_ITEM_SIGN = `data-el-collection-item`;
  const createCollectionWithScope = (name) => {
    const COLLECTION_NAME = `El${name}Collection`;
    const COLLECTION_ITEM_NAME = `${COLLECTION_NAME}Item`;
    const COLLECTION_INJECTION_KEY2 = Symbol(COLLECTION_NAME);
    const COLLECTION_ITEM_INJECTION_KEY2 = Symbol(COLLECTION_ITEM_NAME);
    const ElCollection2 = {
      ...Collection,
      name: COLLECTION_NAME,
      setup() {
        const collectionRef = vue.ref(null);
        const itemMap = /* @__PURE__ */ new Map();
        const getItems = () => {
          const collectionEl = vue.unref(collectionRef);
          if (!collectionEl)
            return [];
          const orderedNodes = Array.from(collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`));
          const items = [...itemMap.values()];
          return items.sort((a2, b2) => orderedNodes.indexOf(a2.ref) - orderedNodes.indexOf(b2.ref));
        };
        vue.provide(COLLECTION_INJECTION_KEY2, {
          itemMap,
          getItems,
          collectionRef
        });
      }
    };
    const ElCollectionItem2 = {
      ...CollectionItem,
      name: COLLECTION_ITEM_NAME,
      setup(_2, { attrs: attrs2 }) {
        const collectionItemRef = vue.ref(null);
        const collectionInjection = vue.inject(COLLECTION_INJECTION_KEY2, void 0);
        vue.provide(COLLECTION_ITEM_INJECTION_KEY2, {
          collectionItemRef
        });
        vue.onMounted(() => {
          const collectionItemEl = vue.unref(collectionItemRef);
          if (collectionItemEl) {
            collectionInjection.itemMap.set(collectionItemEl, {
              ref: collectionItemEl,
              ...attrs2
            });
          }
        });
        vue.onBeforeUnmount(() => {
          const collectionItemEl = vue.unref(collectionItemRef);
          collectionInjection.itemMap.delete(collectionItemEl);
        });
      }
    };
    return {
      COLLECTION_INJECTION_KEY: COLLECTION_INJECTION_KEY2,
      COLLECTION_ITEM_INJECTION_KEY: COLLECTION_ITEM_INJECTION_KEY2,
      ElCollection: ElCollection2,
      ElCollectionItem: ElCollectionItem2
    };
  };
  const rovingFocusGroupProps = buildProps({
    style: { type: definePropType([String, Array, Object]) },
    currentTabId: {
      type: definePropType(String)
    },
    defaultCurrentTabId: String,
    loop: Boolean,
    dir: {
      type: String,
      values: ["ltr", "rtl"],
      default: "ltr"
    },
    orientation: {
      type: definePropType(String)
    },
    onBlur: Function,
    onFocus: Function,
    onMousedown: Function
  });
  const {
    ElCollection: ElCollection$1,
    ElCollectionItem: ElCollectionItem$1,
    COLLECTION_INJECTION_KEY: COLLECTION_INJECTION_KEY$1,
    COLLECTION_ITEM_INJECTION_KEY: COLLECTION_ITEM_INJECTION_KEY$1
  } = createCollectionWithScope("RovingFocusGroup");
  const ROVING_FOCUS_GROUP_INJECTION_KEY = Symbol("elRovingFocusGroup");
  const ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY = Symbol("elRovingFocusGroupItem");
  const MAP_KEY_TO_FOCUS_INTENT = {
    ArrowLeft: "prev",
    ArrowUp: "prev",
    ArrowRight: "next",
    ArrowDown: "next",
    PageUp: "first",
    Home: "first",
    PageDown: "last",
    End: "last"
  };
  const getDirectionAwareKey = (key, dir) => {
    if (dir !== "rtl")
      return key;
    switch (key) {
      case EVENT_CODE.right:
        return EVENT_CODE.left;
      case EVENT_CODE.left:
        return EVENT_CODE.right;
      default:
        return key;
    }
  };
  const getFocusIntent = (event, orientation, dir) => {
    const key = getDirectionAwareKey(event.key, dir);
    if (orientation === "vertical" && [EVENT_CODE.left, EVENT_CODE.right].includes(key))
      return void 0;
    if (orientation === "horizontal" && [EVENT_CODE.up, EVENT_CODE.down].includes(key))
      return void 0;
    return MAP_KEY_TO_FOCUS_INTENT[key];
  };
  const reorderArray = (array, atIdx) => {
    return array.map((_2, idx) => array[(idx + atIdx) % array.length]);
  };
  const focusFirst = (elements) => {
    const { activeElement: prevActive } = document;
    for (const element of elements) {
      if (element === prevActive)
        return;
      element.focus();
      if (prevActive !== document.activeElement)
        return;
    }
  };
  const CURRENT_TAB_ID_CHANGE_EVT = "currentTabIdChange";
  const ENTRY_FOCUS_EVT = "rovingFocusGroup.entryFocus";
  const EVT_OPTS = { bubbles: false, cancelable: true };
  const _sfc_main$1i = vue.defineComponent({
    name: "ElRovingFocusGroupImpl",
    inheritAttrs: false,
    props: rovingFocusGroupProps,
    emits: [CURRENT_TAB_ID_CHANGE_EVT, "entryFocus"],
    setup(props2, { emit }) {
      var _a2;
      const currentTabbedId = vue.ref((_a2 = props2.currentTabId || props2.defaultCurrentTabId) != null ? _a2 : null);
      const isBackingOut = vue.ref(false);
      const isClickFocus = vue.ref(false);
      const rovingFocusGroupRef = vue.ref(null);
      const { getItems } = vue.inject(COLLECTION_INJECTION_KEY$1, void 0);
      const rovingFocusGroupRootStyle = vue.computed(() => {
        return [
          {
            outline: "none"
          },
          props2.style
        ];
      });
      const onItemFocus = (tabbedId) => {
        emit(CURRENT_TAB_ID_CHANGE_EVT, tabbedId);
      };
      const onItemShiftTab = () => {
        isBackingOut.value = true;
      };
      const onMousedown = composeEventHandlers((e) => {
        var _a22;
        (_a22 = props2.onMousedown) == null ? void 0 : _a22.call(props2, e);
      }, () => {
        isClickFocus.value = true;
      });
      const onFocus = composeEventHandlers((e) => {
        var _a22;
        (_a22 = props2.onFocus) == null ? void 0 : _a22.call(props2, e);
      }, (e) => {
        const isKeyboardFocus = !vue.unref(isClickFocus);
        const { target, currentTarget } = e;
        if (target === currentTarget && isKeyboardFocus && !vue.unref(isBackingOut)) {
          const entryFocusEvt = new Event(ENTRY_FOCUS_EVT, EVT_OPTS);
          currentTarget == null ? void 0 : currentTarget.dispatchEvent(entryFocusEvt);
          if (!entryFocusEvt.defaultPrevented) {
            const items = getItems().filter((item) => item.focusable);
            const activeItem = items.find((item) => item.active);
            const currentItem = items.find((item) => item.id === vue.unref(currentTabbedId));
            const candidates = [activeItem, currentItem, ...items].filter(Boolean);
            const candidateNodes = candidates.map((item) => item.ref);
            focusFirst(candidateNodes);
          }
        }
        isClickFocus.value = false;
      });
      const onBlur = composeEventHandlers((e) => {
        var _a22;
        (_a22 = props2.onBlur) == null ? void 0 : _a22.call(props2, e);
      }, () => {
        isBackingOut.value = false;
      });
      const handleEntryFocus = (...args) => {
        emit("entryFocus", ...args);
      };
      vue.provide(ROVING_FOCUS_GROUP_INJECTION_KEY, {
        currentTabbedId: vue.readonly(currentTabbedId),
        loop: vue.toRef(props2, "loop"),
        tabIndex: vue.computed(() => {
          return vue.unref(isBackingOut) ? -1 : 0;
        }),
        rovingFocusGroupRef,
        rovingFocusGroupRootStyle,
        orientation: vue.toRef(props2, "orientation"),
        dir: vue.toRef(props2, "dir"),
        onItemFocus,
        onItemShiftTab,
        onBlur,
        onFocus,
        onMousedown
      });
      vue.watch(() => props2.currentTabId, (val) => {
        currentTabbedId.value = val != null ? val : null;
      });
      useEventListener(rovingFocusGroupRef, ENTRY_FOCUS_EVT, handleEntryFocus);
    }
  });
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.renderSlot(_ctx.$slots, "default");
  }
  var ElRovingFocusGroupImpl = /* @__PURE__ */ _export_sfc(_sfc_main$1i, [["render", _sfc_render$l], ["__file", "roving-focus-group-impl.vue"]]);
  const _sfc_main$1h = vue.defineComponent({
    name: "ElRovingFocusGroup",
    components: {
      ElFocusGroupCollection: ElCollection$1,
      ElRovingFocusGroupImpl
    }
  });
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_roving_focus_group_impl = vue.resolveComponent("el-roving-focus-group-impl");
    const _component_el_focus_group_collection = vue.resolveComponent("el-focus-group-collection");
    return vue.openBlock(), vue.createBlock(_component_el_focus_group_collection, null, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_el_roving_focus_group_impl, vue.normalizeProps(vue.guardReactiveProps(_ctx.$attrs)), {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16)
      ]),
      _: 3
    });
  }
  var ElRovingFocusGroup = /* @__PURE__ */ _export_sfc(_sfc_main$1h, [["render", _sfc_render$k], ["__file", "roving-focus-group.vue"]]);
  const _sfc_main$1g = vue.defineComponent({
    components: {
      ElRovingFocusCollectionItem: ElCollectionItem$1
    },
    props: {
      focusable: {
        type: Boolean,
        default: true
      },
      active: {
        type: Boolean,
        default: false
      }
    },
    emits: ["mousedown", "focus", "keydown"],
    setup(props2, { emit }) {
      const { currentTabbedId, loop, onItemFocus, onItemShiftTab } = vue.inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);
      const { getItems } = vue.inject(COLLECTION_INJECTION_KEY$1, void 0);
      const id = useId();
      const rovingFocusGroupItemRef = vue.ref(null);
      const handleMousedown = composeEventHandlers((e) => {
        emit("mousedown", e);
      }, (e) => {
        if (!props2.focusable) {
          e.preventDefault();
        } else {
          onItemFocus(vue.unref(id));
        }
      });
      const handleFocus = composeEventHandlers((e) => {
        emit("focus", e);
      }, () => {
        onItemFocus(vue.unref(id));
      });
      const handleKeydown = composeEventHandlers((e) => {
        emit("keydown", e);
      }, (e) => {
        const { key, shiftKey, target, currentTarget } = e;
        if (key === EVENT_CODE.tab && shiftKey) {
          onItemShiftTab();
          return;
        }
        if (target !== currentTarget)
          return;
        const focusIntent = getFocusIntent(e);
        if (focusIntent) {
          e.preventDefault();
          const items = getItems().filter((item) => item.focusable);
          let elements = items.map((item) => item.ref);
          switch (focusIntent) {
            case "last": {
              elements.reverse();
              break;
            }
            case "prev":
            case "next": {
              if (focusIntent === "prev") {
                elements.reverse();
              }
              const currentIdx = elements.indexOf(currentTarget);
              elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);
              break;
            }
          }
          vue.nextTick(() => {
            focusFirst(elements);
          });
        }
      });
      const isCurrentTab = vue.computed(() => currentTabbedId.value === vue.unref(id));
      vue.provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {
        rovingFocusGroupItemRef,
        tabIndex: vue.computed(() => vue.unref(isCurrentTab) ? 0 : -1),
        handleMousedown,
        handleFocus,
        handleKeydown
      });
      return {
        id,
        handleKeydown,
        handleFocus,
        handleMousedown
      };
    }
  });
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_roving_focus_collection_item = vue.resolveComponent("el-roving-focus-collection-item");
    return vue.openBlock(), vue.createBlock(_component_el_roving_focus_collection_item, {
      id: _ctx.id,
      focusable: _ctx.focusable,
      active: _ctx.active
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
    }, 8, ["id", "focusable", "active"]);
  }
  var ElRovingFocusItem = /* @__PURE__ */ _export_sfc(_sfc_main$1g, [["render", _sfc_render$j], ["__file", "roving-focus-item.vue"]]);
  const dropdownProps = buildProps({
    trigger: useTooltipTriggerProps.trigger,
    effect: {
      ...useTooltipContentProps.effect,
      default: "light"
    },
    type: {
      type: definePropType(String)
    },
    placement: {
      type: definePropType(String),
      default: "bottom"
    },
    popperOptions: {
      type: definePropType(Object),
      default: () => ({})
    },
    id: String,
    size: {
      type: String,
      default: ""
    },
    splitButton: Boolean,
    hideOnClick: {
      type: Boolean,
      default: true
    },
    loop: {
      type: Boolean,
      default: true
    },
    showTimeout: {
      type: Number,
      default: 150
    },
    hideTimeout: {
      type: Number,
      default: 150
    },
    tabindex: {
      type: definePropType([Number, String]),
      default: 0
    },
    maxHeight: {
      type: definePropType([Number, String]),
      default: ""
    },
    popperClass: {
      type: String,
      default: ""
    },
    disabled: Boolean,
    role: {
      type: String,
      default: "menu"
    },
    buttonProps: {
      type: definePropType(Object)
    },
    teleported: useTooltipContentProps.teleported
  });
  const dropdownItemProps = buildProps({
    command: {
      type: [Object, String, Number],
      default: () => ({})
    },
    disabled: Boolean,
    divided: Boolean,
    textValue: String,
    icon: {
      type: iconPropType
    }
  });
  const dropdownMenuProps = buildProps({
    onKeydown: { type: definePropType(Function) }
  });
  const FIRST_KEYS = [
    EVENT_CODE.down,
    EVENT_CODE.pageDown,
    EVENT_CODE.home
  ];
  const LAST_KEYS = [EVENT_CODE.up, EVENT_CODE.pageUp, EVENT_CODE.end];
  const FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];
  const {
    ElCollection,
    ElCollectionItem,
    COLLECTION_INJECTION_KEY,
    COLLECTION_ITEM_INJECTION_KEY
  } = createCollectionWithScope("Dropdown");
  const DROPDOWN_INJECTION_KEY = Symbol("elDropdown");
  const { ButtonGroup: ElButtonGroup } = ElButton;
  const _sfc_main$1f = vue.defineComponent({
    name: "ElDropdown",
    components: {
      ElButton,
      ElButtonGroup,
      ElScrollbar,
      ElDropdownCollection: ElCollection,
      ElTooltip,
      ElRovingFocusGroup,
      ElOnlyChild: OnlyChild,
      ElIcon,
      ArrowDown: arrow_down_default
    },
    props: dropdownProps,
    emits: ["visible-change", "click", "command"],
    setup(props2, { emit }) {
      const _instance = vue.getCurrentInstance();
      const ns2 = useNamespace("dropdown");
      const { t: t2 } = useLocale();
      const triggeringElementRef = vue.ref();
      const referenceElementRef = vue.ref();
      const popperRef = vue.ref(null);
      const contentRef = vue.ref(null);
      const scrollbar = vue.ref(null);
      const currentTabId = vue.ref(null);
      const isUsingKeyboard = vue.ref(false);
      const triggerKeys = [EVENT_CODE.enter, EVENT_CODE.space, EVENT_CODE.down];
      const wrapStyle = vue.computed(() => ({
        maxHeight: addUnit(props2.maxHeight)
      }));
      const dropdownTriggerKls = vue.computed(() => [ns2.m(dropdownSize.value)]);
      const trigger = vue.computed(() => castArray$1(props2.trigger));
      const defaultTriggerId = useId().value;
      const triggerId = vue.computed(() => props2.id || defaultTriggerId);
      vue.watch([triggeringElementRef, trigger], ([triggeringElement, trigger2], [prevTriggeringElement]) => {
        var _a2, _b, _c;
        if ((_a2 = prevTriggeringElement == null ? void 0 : prevTriggeringElement.$el) == null ? void 0 : _a2.removeEventListener) {
          prevTriggeringElement.$el.removeEventListener("pointerenter", onAutofocusTriggerEnter);
        }
        if ((_b = triggeringElement == null ? void 0 : triggeringElement.$el) == null ? void 0 : _b.removeEventListener) {
          triggeringElement.$el.removeEventListener("pointerenter", onAutofocusTriggerEnter);
        }
        if (((_c = triggeringElement == null ? void 0 : triggeringElement.$el) == null ? void 0 : _c.addEventListener) && trigger2.includes("hover")) {
          triggeringElement.$el.addEventListener("pointerenter", onAutofocusTriggerEnter);
        }
      }, { immediate: true });
      vue.onBeforeUnmount(() => {
        var _a2, _b;
        if ((_b = (_a2 = triggeringElementRef.value) == null ? void 0 : _a2.$el) == null ? void 0 : _b.removeEventListener) {
          triggeringElementRef.value.$el.removeEventListener("pointerenter", onAutofocusTriggerEnter);
        }
      });
      function handleClick() {
        handleClose();
      }
      function handleClose() {
        var _a2;
        (_a2 = popperRef.value) == null ? void 0 : _a2.onClose();
      }
      function handleOpen() {
        var _a2;
        (_a2 = popperRef.value) == null ? void 0 : _a2.onOpen();
      }
      const dropdownSize = useFormSize();
      function commandHandler(...args) {
        emit("command", ...args);
      }
      function onAutofocusTriggerEnter() {
        var _a2, _b;
        (_b = (_a2 = triggeringElementRef.value) == null ? void 0 : _a2.$el) == null ? void 0 : _b.focus();
      }
      function onItemEnter() {
      }
      function onItemLeave() {
        const contentEl = vue.unref(contentRef);
        trigger.value.includes("hover") && (contentEl == null ? void 0 : contentEl.focus());
        currentTabId.value = null;
      }
      function handleCurrentTabIdChange(id) {
        currentTabId.value = id;
      }
      function handleEntryFocus(e) {
        if (!isUsingKeyboard.value) {
          e.preventDefault();
          e.stopImmediatePropagation();
        }
      }
      function handleBeforeShowTooltip() {
        emit("visible-change", true);
      }
      function handleShowTooltip(event) {
        if ((event == null ? void 0 : event.type) === "keydown") {
          contentRef.value.focus();
        }
      }
      function handleBeforeHideTooltip() {
        emit("visible-change", false);
      }
      vue.provide(DROPDOWN_INJECTION_KEY, {
        contentRef,
        role: vue.computed(() => props2.role),
        triggerId,
        isUsingKeyboard,
        onItemEnter,
        onItemLeave
      });
      vue.provide("elDropdown", {
        instance: _instance,
        dropdownSize,
        handleClick,
        commandHandler,
        trigger: vue.toRef(props2, "trigger"),
        hideOnClick: vue.toRef(props2, "hideOnClick")
      });
      const onFocusAfterTrapped = (e) => {
        var _a2, _b;
        e.preventDefault();
        (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2, {
          preventScroll: true
        });
      };
      const handlerMainButtonClick = (event) => {
        emit("click", event);
      };
      return {
        t: t2,
        ns: ns2,
        scrollbar,
        wrapStyle,
        dropdownTriggerKls,
        dropdownSize,
        triggerId,
        triggerKeys,
        currentTabId,
        handleCurrentTabIdChange,
        handlerMainButtonClick,
        handleEntryFocus,
        handleClose,
        handleOpen,
        handleBeforeShowTooltip,
        handleShowTooltip,
        handleBeforeHideTooltip,
        onFocusAfterTrapped,
        popperRef,
        contentRef,
        triggeringElementRef,
        referenceElementRef
      };
    }
  });
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    var _a2;
    const _component_el_dropdown_collection = vue.resolveComponent("el-dropdown-collection");
    const _component_el_roving_focus_group = vue.resolveComponent("el-roving-focus-group");
    const _component_el_scrollbar = vue.resolveComponent("el-scrollbar");
    const _component_el_only_child = vue.resolveComponent("el-only-child");
    const _component_el_tooltip = vue.resolveComponent("el-tooltip");
    const _component_el_button = vue.resolveComponent("el-button");
    const _component_arrow_down = vue.resolveComponent("arrow-down");
    const _component_el_icon = vue.resolveComponent("el-icon");
    const _component_el_button_group = vue.resolveComponent("el-button-group");
    return vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([_ctx.ns.b(), _ctx.ns.is("disabled", _ctx.disabled)])
    }, [
      vue.createVNode(_component_el_tooltip, {
        ref: "popperRef",
        role: _ctx.role,
        effect: _ctx.effect,
        "fallback-placements": ["bottom", "top"],
        "popper-options": _ctx.popperOptions,
        "gpu-acceleration": false,
        "hide-after": _ctx.trigger === "hover" ? _ctx.hideTimeout : 0,
        "manual-mode": true,
        placement: _ctx.placement,
        "popper-class": [_ctx.ns.e("popper"), _ctx.popperClass],
        "reference-element": (_a2 = _ctx.referenceElementRef) == null ? void 0 : _a2.$el,
        trigger: _ctx.trigger,
        "trigger-keys": _ctx.triggerKeys,
        "trigger-target-el": _ctx.contentRef,
        "show-after": _ctx.trigger === "hover" ? _ctx.showTimeout : 0,
        "stop-popper-mouse-event": false,
        "virtual-ref": _ctx.triggeringElementRef,
        "virtual-triggering": _ctx.splitButton,
        disabled: _ctx.disabled,
        transition: `${_ctx.ns.namespace.value}-zoom-in-top`,
        teleported: _ctx.teleported,
        pure: "",
        persistent: "",
        onBeforeShow: _ctx.handleBeforeShowTooltip,
        onShow: _ctx.handleShowTooltip,
        onBeforeHide: _ctx.handleBeforeHideTooltip
      }, vue.createSlots({
        content: vue.withCtx(() => [
          vue.createVNode(_component_el_scrollbar, {
            ref: "scrollbar",
            "wrap-style": _ctx.wrapStyle,
            tag: "div",
            "view-class": _ctx.ns.e("list")
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_el_roving_focus_group, {
                loop: _ctx.loop,
                "current-tab-id": _ctx.currentTabId,
                orientation: "horizontal",
                onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,
                onEntryFocus: _ctx.handleEntryFocus
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_el_dropdown_collection, null, {
                    default: vue.withCtx(() => [
                      vue.renderSlot(_ctx.$slots, "dropdown")
                    ]),
                    _: 3
                  })
                ]),
                _: 3
              }, 8, ["loop", "current-tab-id", "onCurrentTabIdChange", "onEntryFocus"])
            ]),
            _: 3
          }, 8, ["wrap-style", "view-class"])
        ]),
        _: 2
      }, [
        !_ctx.splitButton ? {
          name: "default",
          fn: vue.withCtx(() => [
            vue.createVNode(_component_el_only_child, {
              id: _ctx.triggerId,
              ref: "triggeringElementRef",
              role: "button",
              tabindex: _ctx.tabindex
            }, {
              default: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 8, ["id", "tabindex"])
          ])
        } : void 0
      ]), 1032, ["role", "effect", "popper-options", "hide-after", "placement", "popper-class", "reference-element", "trigger", "trigger-keys", "trigger-target-el", "show-after", "virtual-ref", "virtual-triggering", "disabled", "transition", "teleported", "onBeforeShow", "onShow", "onBeforeHide"]),
      _ctx.splitButton ? (vue.openBlock(), vue.createBlock(_component_el_button_group, { key: 0 }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_el_button, vue.mergeProps({ ref: "referenceElementRef" }, _ctx.buttonProps, {
            size: _ctx.dropdownSize,
            type: _ctx.type,
            disabled: _ctx.disabled,
            tabindex: _ctx.tabindex,
            onClick: _ctx.handlerMainButtonClick
          }), {
            default: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16, ["size", "type", "disabled", "tabindex", "onClick"]),
          vue.createVNode(_component_el_button, vue.mergeProps({
            id: _ctx.triggerId,
            ref: "triggeringElementRef"
          }, _ctx.buttonProps, {
            role: "button",
            size: _ctx.dropdownSize,
            type: _ctx.type,
            class: _ctx.ns.e("caret-button"),
            disabled: _ctx.disabled,
            tabindex: _ctx.tabindex,
            "aria-label": _ctx.t("el.dropdown.toggleDropdown")
          }), {
            default: vue.withCtx(() => [
              vue.createVNode(_component_el_icon, {
                class: vue.normalizeClass(_ctx.ns.e("icon"))
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_arrow_down)
                ]),
                _: 1
              }, 8, ["class"])
            ]),
            _: 1
          }, 16, ["id", "size", "type", "class", "disabled", "tabindex", "aria-label"])
        ]),
        _: 3
      })) : vue.createCommentVNode("v-if", true)
    ], 2);
  }
  var Dropdown = /* @__PURE__ */ _export_sfc(_sfc_main$1f, [["render", _sfc_render$i], ["__file", "dropdown.vue"]]);
  const _sfc_main$1e = vue.defineComponent({
    name: "DropdownItemImpl",
    components: {
      ElIcon
    },
    props: dropdownItemProps,
    emits: ["pointermove", "pointerleave", "click", "clickimpl"],
    setup(_2, { emit }) {
      const ns2 = useNamespace("dropdown");
      const { role: menuRole } = vue.inject(DROPDOWN_INJECTION_KEY, void 0);
      const { collectionItemRef: dropdownCollectionItemRef } = vue.inject(COLLECTION_ITEM_INJECTION_KEY, void 0);
      const { collectionItemRef: rovingFocusCollectionItemRef } = vue.inject(COLLECTION_ITEM_INJECTION_KEY$1, void 0);
      const {
        rovingFocusGroupItemRef,
        tabIndex,
        handleFocus,
        handleKeydown: handleItemKeydown,
        handleMousedown
      } = vue.inject(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, void 0);
      const itemRef = composeRefs(dropdownCollectionItemRef, rovingFocusCollectionItemRef, rovingFocusGroupItemRef);
      const role = vue.computed(() => {
        if (menuRole.value === "menu") {
          return "menuitem";
        } else if (menuRole.value === "navigation") {
          return "link";
        }
        return "button";
      });
      const handleKeydown = composeEventHandlers((e) => {
        const { code } = e;
        if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {
          e.preventDefault();
          e.stopImmediatePropagation();
          emit("clickimpl", e);
          return true;
        }
      }, handleItemKeydown);
      return {
        ns: ns2,
        itemRef,
        dataset: {
          [COLLECTION_ITEM_SIGN]: ""
        },
        role,
        tabIndex,
        handleFocus,
        handleKeydown,
        handleMousedown
      };
    }
  });
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_icon = vue.resolveComponent("el-icon");
    return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
      _ctx.divided ? (vue.openBlock(), vue.createElementBlock("li", {
        key: 0,
        role: "separator",
        class: vue.normalizeClass(_ctx.ns.bem("menu", "item", "divided"))
      }, null, 2)) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode("li", vue.mergeProps({ ref: _ctx.itemRef }, { ..._ctx.dataset, ..._ctx.$attrs }, {
        "aria-disabled": _ctx.disabled,
        class: [_ctx.ns.be("menu", "item"), _ctx.ns.is("disabled", _ctx.disabled)],
        tabindex: _ctx.tabIndex,
        role: _ctx.role,
        onClick: (e) => _ctx.$emit("clickimpl", e),
        onFocus: _ctx.handleFocus,
        onKeydown: vue.withModifiers(_ctx.handleKeydown, ["self"]),
        onMousedown: _ctx.handleMousedown,
        onPointermove: (e) => _ctx.$emit("pointermove", e),
        onPointerleave: (e) => _ctx.$emit("pointerleave", e)
      }), [
        _ctx.icon ? (vue.openBlock(), vue.createBlock(_component_el_icon, { key: 0 }, {
          default: vue.withCtx(() => [
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
          ]),
          _: 1
        })) : vue.createCommentVNode("v-if", true),
        vue.renderSlot(_ctx.$slots, "default")
      ], 16, ["aria-disabled", "tabindex", "role", "onClick", "onFocus", "onKeydown", "onMousedown", "onPointermove", "onPointerleave"])
    ], 64);
  }
  var ElDropdownItemImpl = /* @__PURE__ */ _export_sfc(_sfc_main$1e, [["render", _sfc_render$h], ["__file", "dropdown-item-impl.vue"]]);
  const useDropdown = () => {
    const elDropdown = vue.inject("elDropdown", {});
    const _elDropdownSize = vue.computed(() => elDropdown == null ? void 0 : elDropdown.dropdownSize);
    return {
      elDropdown,
      _elDropdownSize
    };
  };
  const _sfc_main$1d = vue.defineComponent({
    name: "ElDropdownItem",
    components: {
      ElDropdownCollectionItem: ElCollectionItem,
      ElRovingFocusItem,
      ElDropdownItemImpl
    },
    inheritAttrs: false,
    props: dropdownItemProps,
    emits: ["pointermove", "pointerleave", "click"],
    setup(props2, { emit, attrs: attrs2 }) {
      const { elDropdown } = useDropdown();
      const _instance = vue.getCurrentInstance();
      const itemRef = vue.ref(null);
      const textContent = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = vue.unref(itemRef)) == null ? void 0 : _a2.textContent) != null ? _b : "";
      });
      const { onItemEnter, onItemLeave } = vue.inject(DROPDOWN_INJECTION_KEY, void 0);
      const handlePointerMove = composeEventHandlers((e) => {
        emit("pointermove", e);
        return e.defaultPrevented;
      }, whenMouse((e) => {
        if (props2.disabled) {
          onItemLeave(e);
          return;
        }
        const target = e.currentTarget;
        if (target === document.activeElement || target.contains(document.activeElement)) {
          return;
        }
        onItemEnter(e);
        if (!e.defaultPrevented) {
          target == null ? void 0 : target.focus();
        }
      }));
      const handlePointerLeave = composeEventHandlers((e) => {
        emit("pointerleave", e);
        return e.defaultPrevented;
      }, whenMouse(onItemLeave));
      const handleClick = composeEventHandlers((e) => {
        if (props2.disabled) {
          return;
        }
        emit("click", e);
        return e.type !== "keydown" && e.defaultPrevented;
      }, (e) => {
        var _a2, _b, _c;
        if (props2.disabled) {
          e.stopImmediatePropagation();
          return;
        }
        if ((_a2 = elDropdown == null ? void 0 : elDropdown.hideOnClick) == null ? void 0 : _a2.value) {
          (_b = elDropdown.handleClick) == null ? void 0 : _b.call(elDropdown);
        }
        (_c = elDropdown.commandHandler) == null ? void 0 : _c.call(elDropdown, props2.command, _instance, e);
      });
      const propsAndAttrs = vue.computed(() => ({ ...props2, ...attrs2 }));
      return {
        handleClick,
        handlePointerMove,
        handlePointerLeave,
        textContent,
        propsAndAttrs
      };
    }
  });
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    var _a2;
    const _component_el_dropdown_item_impl = vue.resolveComponent("el-dropdown-item-impl");
    const _component_el_roving_focus_item = vue.resolveComponent("el-roving-focus-item");
    const _component_el_dropdown_collection_item = vue.resolveComponent("el-dropdown-collection-item");
    return vue.openBlock(), vue.createBlock(_component_el_dropdown_collection_item, {
      disabled: _ctx.disabled,
      "text-value": (_a2 = _ctx.textValue) != null ? _a2 : _ctx.textContent
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_el_roving_focus_item, {
          focusable: !_ctx.disabled
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_el_dropdown_item_impl, vue.mergeProps(_ctx.propsAndAttrs, {
              onPointerleave: _ctx.handlePointerLeave,
              onPointermove: _ctx.handlePointerMove,
              onClickimpl: _ctx.handleClick
            }), {
              default: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 16, ["onPointerleave", "onPointermove", "onClickimpl"])
          ]),
          _: 3
        }, 8, ["focusable"])
      ]),
      _: 3
    }, 8, ["disabled", "text-value"]);
  }
  var DropdownItem = /* @__PURE__ */ _export_sfc(_sfc_main$1d, [["render", _sfc_render$g], ["__file", "dropdown-item.vue"]]);
  const _sfc_main$1c = vue.defineComponent({
    name: "ElDropdownMenu",
    props: dropdownMenuProps,
    setup(props2) {
      const ns2 = useNamespace("dropdown");
      const { _elDropdownSize } = useDropdown();
      const size = _elDropdownSize.value;
      const { focusTrapRef, onKeydown } = vue.inject(FOCUS_TRAP_INJECTION_KEY, void 0);
      const { contentRef, role, triggerId } = vue.inject(DROPDOWN_INJECTION_KEY, void 0);
      const { collectionRef: dropdownCollectionRef, getItems } = vue.inject(COLLECTION_INJECTION_KEY, void 0);
      const {
        rovingFocusGroupRef,
        rovingFocusGroupRootStyle,
        tabIndex,
        onBlur,
        onFocus,
        onMousedown
      } = vue.inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);
      const { collectionRef: rovingFocusGroupCollectionRef } = vue.inject(COLLECTION_INJECTION_KEY$1, void 0);
      const dropdownKls = vue.computed(() => {
        return [ns2.b("menu"), ns2.bm("menu", size == null ? void 0 : size.value)];
      });
      const dropdownListWrapperRef = composeRefs(contentRef, dropdownCollectionRef, focusTrapRef, rovingFocusGroupRef, rovingFocusGroupCollectionRef);
      const composedKeydown = composeEventHandlers((e) => {
        var _a2;
        (_a2 = props2.onKeydown) == null ? void 0 : _a2.call(props2, e);
      }, (e) => {
        const { currentTarget, code, target } = e;
        currentTarget.contains(target);
        if (EVENT_CODE.tab === code) {
          e.stopImmediatePropagation();
        }
        e.preventDefault();
        if (target !== vue.unref(contentRef) || !FIRST_LAST_KEYS.includes(code))
          return;
        const items = getItems().filter((item) => !item.disabled);
        const targets = items.map((item) => item.ref);
        if (LAST_KEYS.includes(code)) {
          targets.reverse();
        }
        focusFirst(targets);
      });
      const handleKeydown = (e) => {
        composedKeydown(e);
        onKeydown(e);
      };
      return {
        size,
        rovingFocusGroupRootStyle,
        tabIndex,
        dropdownKls,
        role,
        triggerId,
        dropdownListWrapperRef,
        handleKeydown,
        onBlur,
        onFocus,
        onMousedown
      };
    }
  });
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("ul", {
      ref: _ctx.dropdownListWrapperRef,
      class: vue.normalizeClass(_ctx.dropdownKls),
      style: vue.normalizeStyle(_ctx.rovingFocusGroupRootStyle),
      tabindex: -1,
      role: _ctx.role,
      "aria-labelledby": _ctx.triggerId,
      onBlur: _ctx.onBlur,
      onFocus: _ctx.onFocus,
      onKeydown: vue.withModifiers(_ctx.handleKeydown, ["self"]),
      onMousedown: vue.withModifiers(_ctx.onMousedown, ["self"])
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 46, ["role", "aria-labelledby", "onBlur", "onFocus", "onKeydown", "onMousedown"]);
  }
  var DropdownMenu = /* @__PURE__ */ _export_sfc(_sfc_main$1c, [["render", _sfc_render$f], ["__file", "dropdown-menu.vue"]]);
  const ElDropdown = withInstall(Dropdown, {
    DropdownItem,
    DropdownMenu
  });
  const ElDropdownItem = withNoopInstall(DropdownItem);
  const ElDropdownMenu = withNoopInstall(DropdownMenu);
  const __default__$W = vue.defineComponent({
    name: "ImgEmpty"
  });
  const _sfc_main$1b = /* @__PURE__ */ vue.defineComponent({
    ...__default__$W,
    setup(__props) {
      const ns2 = useNamespace("empty");
      const id = useId();
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("svg", {
          viewBox: "0 0 79 86",
          version: "1.1",
          xmlns: "http://www.w3.org/2000/svg",
          "xmlns:xlink": "http://www.w3.org/1999/xlink"
        }, [
          vue.createElementVNode("defs", null, [
            vue.createElementVNode("linearGradient", {
              id: `linearGradient-1-${vue.unref(id)}`,
              x1: "38.8503086%",
              y1: "0%",
              x2: "61.1496914%",
              y2: "100%"
            }, [
              vue.createElementVNode("stop", {
                "stop-color": `var(${vue.unref(ns2).cssVarBlockName("fill-color-1")})`,
                offset: "0%"
              }, null, 8, ["stop-color"]),
              vue.createElementVNode("stop", {
                "stop-color": `var(${vue.unref(ns2).cssVarBlockName("fill-color-4")})`,
                offset: "100%"
              }, null, 8, ["stop-color"])
            ], 8, ["id"]),
            vue.createElementVNode("linearGradient", {
              id: `linearGradient-2-${vue.unref(id)}`,
              x1: "0%",
              y1: "9.5%",
              x2: "100%",
              y2: "90.5%"
            }, [
              vue.createElementVNode("stop", {
                "stop-color": `var(${vue.unref(ns2).cssVarBlockName("fill-color-1")})`,
                offset: "0%"
              }, null, 8, ["stop-color"]),
              vue.createElementVNode("stop", {
                "stop-color": `var(${vue.unref(ns2).cssVarBlockName("fill-color-6")})`,
                offset: "100%"
              }, null, 8, ["stop-color"])
            ], 8, ["id"]),
            vue.createElementVNode("rect", {
              id: `path-3-${vue.unref(id)}`,
              x: "0",
              y: "0",
              width: "17",
              height: "36"
            }, null, 8, ["id"])
          ]),
          vue.createElementVNode("g", {
            id: "Illustrations",
            stroke: "none",
            "stroke-width": "1",
            fill: "none",
            "fill-rule": "evenodd"
          }, [
            vue.createElementVNode("g", {
              id: "B-type",
              transform: "translate(-1268.000000, -535.000000)"
            }, [
              vue.createElementVNode("g", {
                id: "Group-2",
                transform: "translate(1268.000000, 535.000000)"
              }, [
                vue.createElementVNode("path", {
                  id: "Oval-Copy-2",
                  d: "M39.5,86 C61.3152476,86 79,83.9106622 79,81.3333333 C79,78.7560045 57.3152476,78 35.5,78 C13.6847524,78 0,78.7560045 0,81.3333333 C0,83.9106622 17.6847524,86 39.5,86 Z",
                  fill: `var(${vue.unref(ns2).cssVarBlockName("fill-color-3")})`
                }, null, 8, ["fill"]),
                vue.createElementVNode("polygon", {
                  id: "Rectangle-Copy-14",
                  fill: `var(${vue.unref(ns2).cssVarBlockName("fill-color-7")})`,
                  transform: "translate(27.500000, 51.500000) scale(1, -1) translate(-27.500000, -51.500000) ",
                  points: "13 58 53 58 42 45 2 45"
                }, null, 8, ["fill"]),
                vue.createElementVNode("g", {
                  id: "Group-Copy",
                  transform: "translate(34.500000, 31.500000) scale(-1, 1) rotate(-25.000000) translate(-34.500000, -31.500000) translate(7.000000, 10.000000)"
                }, [
                  vue.createElementVNode("polygon", {
                    id: "Rectangle-Copy-10",
                    fill: `var(${vue.unref(ns2).cssVarBlockName("fill-color-7")})`,
                    transform: "translate(11.500000, 5.000000) scale(1, -1) translate(-11.500000, -5.000000) ",
                    points: "2.84078316e-14 3 18 3 23 7 5 7"
                  }, null, 8, ["fill"]),
                  vue.createElementVNode("polygon", {
                    id: "Rectangle-Copy-11",
                    fill: `var(${vue.unref(ns2).cssVarBlockName("fill-color-5")})`,
                    points: "-3.69149156e-15 7 38 7 38 43 -3.69149156e-15 43"
                  }, null, 8, ["fill"]),
                  vue.createElementVNode("rect", {
                    id: "Rectangle-Copy-12",
                    fill: `url(#linearGradient-1-${vue.unref(id)})`,
                    transform: "translate(46.500000, 25.000000) scale(-1, 1) translate(-46.500000, -25.000000) ",
                    x: "38",
                    y: "7",
                    width: "17",
                    height: "36"
                  }, null, 8, ["fill"]),
                  vue.createElementVNode("polygon", {
                    id: "Rectangle-Copy-13",
                    fill: `var(${vue.unref(ns2).cssVarBlockName("fill-color-2")})`,
                    transform: "translate(39.500000, 3.500000) scale(-1, 1) translate(-39.500000, -3.500000) ",
                    points: "24 7 41 7 55 -3.63806207e-12 38 -3.63806207e-12"
                  }, null, 8, ["fill"])
                ]),
                vue.createElementVNode("rect", {
                  id: "Rectangle-Copy-15",
                  fill: `url(#linearGradient-2-${vue.unref(id)})`,
                  x: "13",
                  y: "45",
                  width: "40",
                  height: "36"
                }, null, 8, ["fill"]),
                vue.createElementVNode("g", {
                  id: "Rectangle-Copy-17",
                  transform: "translate(53.000000, 45.000000)"
                }, [
                  vue.createElementVNode("use", {
                    id: "Mask",
                    fill: `var(${vue.unref(ns2).cssVarBlockName("fill-color-8")})`,
                    transform: "translate(8.500000, 18.000000) scale(-1, 1) translate(-8.500000, -18.000000) ",
                    "xlink:href": `#path-3-${vue.unref(id)}`
                  }, null, 8, ["fill", "xlink:href"]),
                  vue.createElementVNode("polygon", {
                    id: "Rectangle-Copy",
                    fill: `var(${vue.unref(ns2).cssVarBlockName("fill-color-9")})`,
                    mask: `url(#mask-4-${vue.unref(id)})`,
                    transform: "translate(12.000000, 9.000000) scale(-1, 1) translate(-12.000000, -9.000000) ",
                    points: "7 0 24 0 20 18 7 16.5"
                  }, null, 8, ["fill", "mask"])
                ]),
                vue.createElementVNode("polygon", {
                  id: "Rectangle-Copy-18",
                  fill: `var(${vue.unref(ns2).cssVarBlockName("fill-color-2")})`,
                  transform: "translate(66.000000, 51.500000) scale(-1, 1) translate(-66.000000, -51.500000) ",
                  points: "62 45 79 45 70 58 53 58"
                }, null, 8, ["fill"])
              ])
            ])
          ])
        ]);
      };
    }
  });
  var ImgEmpty = /* @__PURE__ */ _export_sfc(_sfc_main$1b, [["__file", "img-empty.vue"]]);
  const emptyProps = buildProps({
    image: {
      type: String,
      default: ""
    },
    imageSize: Number,
    description: {
      type: String,
      default: ""
    }
  });
  const __default__$V = vue.defineComponent({
    name: "ElEmpty"
  });
  const _sfc_main$1a = /* @__PURE__ */ vue.defineComponent({
    ...__default__$V,
    props: emptyProps,
    setup(__props) {
      const props2 = __props;
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("empty");
      const emptyDescription = vue.computed(() => props2.description || t2("el.table.emptyText"));
      const imageStyle = vue.computed(() => ({
        width: addUnit(props2.imageSize)
      }));
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns2).b())
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("image")),
            style: vue.normalizeStyle(vue.unref(imageStyle))
          }, [
            _ctx.image ? (vue.openBlock(), vue.createElementBlock("img", {
              key: 0,
              src: _ctx.image,
              ondragstart: "return false"
            }, null, 8, ["src"])) : vue.renderSlot(_ctx.$slots, "image", { key: 1 }, () => [
              vue.createVNode(ImgEmpty)
            ])
          ], 6),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("description"))
          }, [
            _ctx.$slots.description ? vue.renderSlot(_ctx.$slots, "description", { key: 0 }) : (vue.openBlock(), vue.createElementBlock("p", { key: 1 }, vue.toDisplayString(vue.unref(emptyDescription)), 1))
          ], 2),
          _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("bottom"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var Empty = /* @__PURE__ */ _export_sfc(_sfc_main$1a, [["__file", "empty.vue"]]);
  const ElEmpty = withInstall(Empty);
  const imageViewerProps = buildProps({
    urlList: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    zIndex: {
      type: Number
    },
    initialIndex: {
      type: Number,
      default: 0
    },
    infinite: {
      type: Boolean,
      default: true
    },
    hideOnClickModal: Boolean,
    teleported: Boolean,
    closeOnPressEscape: {
      type: Boolean,
      default: true
    },
    zoomRate: {
      type: Number,
      default: 1.2
    },
    minScale: {
      type: Number,
      default: 0.2
    },
    maxScale: {
      type: Number,
      default: 7
    },
    crossorigin: {
      type: definePropType(String)
    }
  });
  const imageViewerEmits = {
    close: () => true,
    switch: (index) => isNumber$2(index),
    rotate: (deg) => isNumber$2(deg)
  };
  const __default__$U = vue.defineComponent({
    name: "ElImageViewer"
  });
  const _sfc_main$19 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$U,
    props: imageViewerProps,
    emits: imageViewerEmits,
    setup(__props, { expose, emit }) {
      var _a2;
      const props2 = __props;
      const modes = {
        CONTAIN: {
          name: "contain",
          icon: vue.markRaw(full_screen_default)
        },
        ORIGINAL: {
          name: "original",
          icon: vue.markRaw(scale_to_original_default)
        }
      };
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("image-viewer");
      const { nextZIndex } = useZIndex();
      const wrapper = vue.ref();
      const imgRefs = vue.ref([]);
      const scopeEventListener = vue.effectScope();
      const loading = vue.ref(true);
      const activeIndex = vue.ref(props2.initialIndex);
      const mode = vue.shallowRef(modes.CONTAIN);
      const transform = vue.ref({
        scale: 1,
        deg: 0,
        offsetX: 0,
        offsetY: 0,
        enableTransition: false
      });
      const zIndex2 = vue.ref((_a2 = props2.zIndex) != null ? _a2 : nextZIndex());
      const isSingle = vue.computed(() => {
        const { urlList } = props2;
        return urlList.length <= 1;
      });
      const isFirst = vue.computed(() => {
        return activeIndex.value === 0;
      });
      const isLast = vue.computed(() => {
        return activeIndex.value === props2.urlList.length - 1;
      });
      const currentImg = vue.computed(() => {
        return props2.urlList[activeIndex.value];
      });
      const arrowPrevKls = vue.computed(() => [
        ns2.e("btn"),
        ns2.e("prev"),
        ns2.is("disabled", !props2.infinite && isFirst.value)
      ]);
      const arrowNextKls = vue.computed(() => [
        ns2.e("btn"),
        ns2.e("next"),
        ns2.is("disabled", !props2.infinite && isLast.value)
      ]);
      const imgStyle = vue.computed(() => {
        const { scale, deg, offsetX, offsetY, enableTransition } = transform.value;
        let translateX = offsetX / scale;
        let translateY = offsetY / scale;
        const radian = deg * Math.PI / 180;
        const cosRadian = Math.cos(radian);
        const sinRadian = Math.sin(radian);
        translateX = translateX * cosRadian + translateY * sinRadian;
        translateY = translateY * cosRadian - offsetX / scale * sinRadian;
        const style = {
          transform: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,
          transition: enableTransition ? "transform .3s" : ""
        };
        if (mode.value.name === modes.CONTAIN.name) {
          style.maxWidth = style.maxHeight = "100%";
        }
        return style;
      });
      function hide() {
        unregisterEventListener();
        emit("close");
      }
      function registerEventListener() {
        const keydownHandler = throttle((e) => {
          switch (e.code) {
            case EVENT_CODE.esc:
              props2.closeOnPressEscape && hide();
              break;
            case EVENT_CODE.space:
              toggleMode();
              break;
            case EVENT_CODE.left:
              prev();
              break;
            case EVENT_CODE.up:
              handleActions("zoomIn");
              break;
            case EVENT_CODE.right:
              next();
              break;
            case EVENT_CODE.down:
              handleActions("zoomOut");
              break;
          }
        });
        const mousewheelHandler = throttle((e) => {
          const delta = e.deltaY || e.deltaX;
          handleActions(delta < 0 ? "zoomIn" : "zoomOut", {
            zoomRate: props2.zoomRate,
            enableTransition: false
          });
        });
        scopeEventListener.run(() => {
          useEventListener(document, "keydown", keydownHandler);
          useEventListener(document, "wheel", mousewheelHandler);
        });
      }
      function unregisterEventListener() {
        scopeEventListener.stop();
      }
      function handleImgLoad() {
        loading.value = false;
      }
      function handleImgError(e) {
        loading.value = false;
        e.target.alt = t2("el.image.error");
      }
      function handleMouseDown(e) {
        if (loading.value || e.button !== 0 || !wrapper.value)
          return;
        transform.value.enableTransition = false;
        const { offsetX, offsetY } = transform.value;
        const startX = e.pageX;
        const startY = e.pageY;
        const dragHandler = throttle((ev) => {
          transform.value = {
            ...transform.value,
            offsetX: offsetX + ev.pageX - startX,
            offsetY: offsetY + ev.pageY - startY
          };
        });
        const removeMousemove = useEventListener(document, "mousemove", dragHandler);
        useEventListener(document, "mouseup", () => {
          removeMousemove();
        });
        e.preventDefault();
      }
      function reset() {
        transform.value = {
          scale: 1,
          deg: 0,
          offsetX: 0,
          offsetY: 0,
          enableTransition: false
        };
      }
      function toggleMode() {
        if (loading.value)
          return;
        const modeNames = keysOf(modes);
        const modeValues = Object.values(modes);
        const currentMode = mode.value.name;
        const index = modeValues.findIndex((i2) => i2.name === currentMode);
        const nextIndex = (index + 1) % modeNames.length;
        mode.value = modes[modeNames[nextIndex]];
        reset();
      }
      function setActiveItem(index) {
        const len = props2.urlList.length;
        activeIndex.value = (index + len) % len;
      }
      function prev() {
        if (isFirst.value && !props2.infinite)
          return;
        setActiveItem(activeIndex.value - 1);
      }
      function next() {
        if (isLast.value && !props2.infinite)
          return;
        setActiveItem(activeIndex.value + 1);
      }
      function handleActions(action, options = {}) {
        if (loading.value)
          return;
        const { minScale, maxScale } = props2;
        const { zoomRate, rotateDeg, enableTransition } = {
          zoomRate: props2.zoomRate,
          rotateDeg: 90,
          enableTransition: true,
          ...options
        };
        switch (action) {
          case "zoomOut":
            if (transform.value.scale > minScale) {
              transform.value.scale = Number.parseFloat((transform.value.scale / zoomRate).toFixed(3));
            }
            break;
          case "zoomIn":
            if (transform.value.scale < maxScale) {
              transform.value.scale = Number.parseFloat((transform.value.scale * zoomRate).toFixed(3));
            }
            break;
          case "clockwise":
            transform.value.deg += rotateDeg;
            emit("rotate", transform.value.deg);
            break;
          case "anticlockwise":
            transform.value.deg -= rotateDeg;
            emit("rotate", transform.value.deg);
            break;
        }
        transform.value.enableTransition = enableTransition;
      }
      vue.watch(currentImg, () => {
        vue.nextTick(() => {
          const $img = imgRefs.value[0];
          if (!($img == null ? void 0 : $img.complete)) {
            loading.value = true;
          }
        });
      });
      vue.watch(activeIndex, (val) => {
        reset();
        emit("switch", val);
      });
      vue.onMounted(() => {
        var _a22, _b;
        registerEventListener();
        (_b = (_a22 = wrapper.value) == null ? void 0 : _a22.focus) == null ? void 0 : _b.call(_a22);
      });
      expose({
        setActiveItem
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElTeleport), {
          to: "body",
          disabled: !_ctx.teleported
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(vue.Transition, {
              name: "viewer-fade",
              appear: ""
            }, {
              default: vue.withCtx(() => [
                vue.createElementVNode("div", {
                  ref_key: "wrapper",
                  ref: wrapper,
                  tabindex: -1,
                  class: vue.normalizeClass(vue.unref(ns2).e("wrapper")),
                  style: vue.normalizeStyle({ zIndex: zIndex2.value })
                }, [
                  vue.createElementVNode("div", {
                    class: vue.normalizeClass(vue.unref(ns2).e("mask")),
                    onClick: vue.withModifiers(($event) => _ctx.hideOnClickModal && hide(), ["self"])
                  }, null, 10, ["onClick"]),
                  vue.createCommentVNode(" CLOSE "),
                  vue.createElementVNode("span", {
                    class: vue.normalizeClass([vue.unref(ns2).e("btn"), vue.unref(ns2).e("close")]),
                    onClick: hide
                  }, [
                    vue.createVNode(vue.unref(ElIcon), null, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(close_default))
                      ]),
                      _: 1
                    })
                  ], 2),
                  vue.createCommentVNode(" ARROW "),
                  !vue.unref(isSingle) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                    vue.createElementVNode("span", {
                      class: vue.normalizeClass(vue.unref(arrowPrevKls)),
                      onClick: prev
                    }, [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(arrow_left_default))
                        ]),
                        _: 1
                      })
                    ], 2),
                    vue.createElementVNode("span", {
                      class: vue.normalizeClass(vue.unref(arrowNextKls)),
                      onClick: next
                    }, [
                      vue.createVNode(vue.unref(ElIcon), null, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(arrow_right_default))
                        ]),
                        _: 1
                      })
                    ], 2)
                  ], 64)) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" ACTIONS "),
                  vue.createElementVNode("div", {
                    class: vue.normalizeClass([vue.unref(ns2).e("btn"), vue.unref(ns2).e("actions")])
                  }, [
                    vue.createElementVNode("div", {
                      class: vue.normalizeClass(vue.unref(ns2).e("actions__inner"))
                    }, [
                      vue.createVNode(vue.unref(ElIcon), {
                        onClick: ($event) => handleActions("zoomOut")
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(zoom_out_default))
                        ]),
                        _: 1
                      }, 8, ["onClick"]),
                      vue.createVNode(vue.unref(ElIcon), {
                        onClick: ($event) => handleActions("zoomIn")
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(zoom_in_default))
                        ]),
                        _: 1
                      }, 8, ["onClick"]),
                      vue.createElementVNode("i", {
                        class: vue.normalizeClass(vue.unref(ns2).e("actions__divider"))
                      }, null, 2),
                      vue.createVNode(vue.unref(ElIcon), { onClick: toggleMode }, {
                        default: vue.withCtx(() => [
                          (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(mode).icon)))
                        ]),
                        _: 1
                      }),
                      vue.createElementVNode("i", {
                        class: vue.normalizeClass(vue.unref(ns2).e("actions__divider"))
                      }, null, 2),
                      vue.createVNode(vue.unref(ElIcon), {
                        onClick: ($event) => handleActions("anticlockwise")
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(refresh_left_default))
                        ]),
                        _: 1
                      }, 8, ["onClick"]),
                      vue.createVNode(vue.unref(ElIcon), {
                        onClick: ($event) => handleActions("clockwise")
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(refresh_right_default))
                        ]),
                        _: 1
                      }, 8, ["onClick"])
                    ], 2)
                  ], 2),
                  vue.createCommentVNode(" CANVAS "),
                  vue.createElementVNode("div", {
                    class: vue.normalizeClass(vue.unref(ns2).e("canvas"))
                  }, [
                    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.urlList, (url, i2) => {
                      return vue.withDirectives((vue.openBlock(), vue.createElementBlock("img", {
                        ref_for: true,
                        ref: (el) => imgRefs.value[i2] = el,
                        key: url,
                        src: url,
                        style: vue.normalizeStyle(vue.unref(imgStyle)),
                        class: vue.normalizeClass(vue.unref(ns2).e("img")),
                        crossorigin: _ctx.crossorigin,
                        onLoad: handleImgLoad,
                        onError: handleImgError,
                        onMousedown: handleMouseDown
                      }, null, 46, ["src", "crossorigin"])), [
                        [vue.vShow, i2 === activeIndex.value]
                      ]);
                    }), 128))
                  ], 2),
                  vue.renderSlot(_ctx.$slots, "default")
                ], 6)
              ]),
              _: 3
            })
          ]),
          _: 3
        }, 8, ["disabled"]);
      };
    }
  });
  var ImageViewer = /* @__PURE__ */ _export_sfc(_sfc_main$19, [["__file", "image-viewer.vue"]]);
  const ElImageViewer = withInstall(ImageViewer);
  const imageProps = buildProps({
    hideOnClickModal: Boolean,
    src: {
      type: String,
      default: ""
    },
    fit: {
      type: String,
      values: ["", "contain", "cover", "fill", "none", "scale-down"],
      default: ""
    },
    loading: {
      type: String,
      values: ["eager", "lazy"]
    },
    lazy: Boolean,
    scrollContainer: {
      type: definePropType([String, Object])
    },
    previewSrcList: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    previewTeleported: Boolean,
    zIndex: {
      type: Number
    },
    initialIndex: {
      type: Number,
      default: 0
    },
    infinite: {
      type: Boolean,
      default: true
    },
    closeOnPressEscape: {
      type: Boolean,
      default: true
    },
    zoomRate: {
      type: Number,
      default: 1.2
    },
    minScale: {
      type: Number,
      default: 0.2
    },
    maxScale: {
      type: Number,
      default: 7
    },
    crossorigin: {
      type: definePropType(String)
    }
  });
  const imageEmits = {
    load: (evt) => evt instanceof Event,
    error: (evt) => evt instanceof Event,
    switch: (val) => isNumber$2(val),
    close: () => true,
    show: () => true
  };
  const __default__$T = vue.defineComponent({
    name: "ElImage",
    inheritAttrs: false
  });
  const _sfc_main$18 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$T,
    props: imageProps,
    emits: imageEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      let prevOverflow = "";
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("image");
      const rawAttrs = vue.useAttrs();
      const containerAttrs = vue.computed(() => {
        return fromPairs(Object.entries(rawAttrs).filter(([key]) => /^(data-|on[A-Z])/i.test(key) || ["id", "style"].includes(key)));
      });
      const imgAttrs = useAttrs({
        excludeListeners: true,
        excludeKeys: vue.computed(() => {
          return Object.keys(containerAttrs.value);
        })
      });
      const imageSrc = vue.ref();
      const hasLoadError = vue.ref(false);
      const isLoading = vue.ref(true);
      const showViewer = vue.ref(false);
      const container = vue.ref();
      const _scrollContainer = vue.ref();
      const supportLoading = isClient && "loading" in HTMLImageElement.prototype;
      let stopScrollListener;
      let stopWheelListener;
      const imageKls = vue.computed(() => [
        ns2.e("inner"),
        preview.value && ns2.e("preview"),
        isLoading.value && ns2.is("loading")
      ]);
      const imageStyle = vue.computed(() => {
        const { fit } = props2;
        if (isClient && fit) {
          return { objectFit: fit };
        }
        return {};
      });
      const preview = vue.computed(() => {
        const { previewSrcList } = props2;
        return Array.isArray(previewSrcList) && previewSrcList.length > 0;
      });
      const imageIndex = vue.computed(() => {
        const { previewSrcList, initialIndex } = props2;
        let previewIndex = initialIndex;
        if (initialIndex > previewSrcList.length - 1) {
          previewIndex = 0;
        }
        return previewIndex;
      });
      const isManual = vue.computed(() => {
        if (props2.loading === "eager")
          return false;
        return !supportLoading && props2.loading === "lazy" || props2.lazy;
      });
      const loadImage = () => {
        if (!isClient)
          return;
        isLoading.value = true;
        hasLoadError.value = false;
        imageSrc.value = props2.src;
      };
      function handleLoad(event) {
        isLoading.value = false;
        hasLoadError.value = false;
        emit("load", event);
      }
      function handleError(event) {
        isLoading.value = false;
        hasLoadError.value = true;
        emit("error", event);
      }
      function handleLazyLoad() {
        if (isInContainer(container.value, _scrollContainer.value)) {
          loadImage();
          removeLazyLoadListener();
        }
      }
      const lazyLoadHandler = useThrottleFn(handleLazyLoad, 200, true);
      async function addLazyLoadListener() {
        var _a2;
        if (!isClient)
          return;
        await vue.nextTick();
        const { scrollContainer } = props2;
        if (isElement$2(scrollContainer)) {
          _scrollContainer.value = scrollContainer;
        } else if (shared.isString(scrollContainer) && scrollContainer !== "") {
          _scrollContainer.value = (_a2 = document.querySelector(scrollContainer)) != null ? _a2 : void 0;
        } else if (container.value) {
          _scrollContainer.value = getScrollContainer(container.value);
        }
        if (_scrollContainer.value) {
          stopScrollListener = useEventListener(_scrollContainer, "scroll", lazyLoadHandler);
          setTimeout(() => handleLazyLoad(), 100);
        }
      }
      function removeLazyLoadListener() {
        if (!isClient || !_scrollContainer.value || !lazyLoadHandler)
          return;
        stopScrollListener == null ? void 0 : stopScrollListener();
        _scrollContainer.value = void 0;
      }
      function wheelHandler(e) {
        if (!e.ctrlKey)
          return;
        if (e.deltaY < 0) {
          e.preventDefault();
          return false;
        } else if (e.deltaY > 0) {
          e.preventDefault();
          return false;
        }
      }
      function clickHandler() {
        if (!preview.value)
          return;
        stopWheelListener = useEventListener("wheel", wheelHandler, {
          passive: false
        });
        prevOverflow = document.body.style.overflow;
        document.body.style.overflow = "hidden";
        showViewer.value = true;
        emit("show");
      }
      function closeViewer() {
        stopWheelListener == null ? void 0 : stopWheelListener();
        document.body.style.overflow = prevOverflow;
        showViewer.value = false;
        emit("close");
      }
      function switchViewer(val) {
        emit("switch", val);
      }
      vue.watch(() => props2.src, () => {
        if (isManual.value) {
          isLoading.value = true;
          hasLoadError.value = false;
          removeLazyLoadListener();
          addLazyLoadListener();
        } else {
          loadImage();
        }
      });
      vue.onMounted(() => {
        if (isManual.value) {
          addLazyLoadListener();
        } else {
          loadImage();
        }
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", vue.mergeProps({
          ref_key: "container",
          ref: container
        }, vue.unref(containerAttrs), {
          class: [vue.unref(ns2).b(), _ctx.$attrs.class]
        }), [
          hasLoadError.value ? vue.renderSlot(_ctx.$slots, "error", { key: 0 }, () => [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).e("error"))
            }, vue.toDisplayString(vue.unref(t2)("el.image.error")), 3)
          ]) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
            imageSrc.value !== void 0 ? (vue.openBlock(), vue.createElementBlock("img", vue.mergeProps({ key: 0 }, vue.unref(imgAttrs), {
              src: imageSrc.value,
              loading: _ctx.loading,
              style: vue.unref(imageStyle),
              class: vue.unref(imageKls),
              crossorigin: _ctx.crossorigin,
              onClick: clickHandler,
              onLoad: handleLoad,
              onError: handleError
            }), null, 16, ["src", "loading", "crossorigin"])) : vue.createCommentVNode("v-if", true),
            isLoading.value ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 1,
              class: vue.normalizeClass(vue.unref(ns2).e("wrapper"))
            }, [
              vue.renderSlot(_ctx.$slots, "placeholder", {}, () => [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(ns2).e("placeholder"))
                }, null, 2)
              ])
            ], 2)) : vue.createCommentVNode("v-if", true)
          ], 64)),
          vue.unref(preview) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 2 }, [
            showViewer.value ? (vue.openBlock(), vue.createBlock(vue.unref(ElImageViewer), {
              key: 0,
              "z-index": _ctx.zIndex,
              "initial-index": vue.unref(imageIndex),
              infinite: _ctx.infinite,
              "zoom-rate": _ctx.zoomRate,
              "min-scale": _ctx.minScale,
              "max-scale": _ctx.maxScale,
              "url-list": _ctx.previewSrcList,
              crossorigin: _ctx.crossorigin,
              "hide-on-click-modal": _ctx.hideOnClickModal,
              teleported: _ctx.previewTeleported,
              "close-on-press-escape": _ctx.closeOnPressEscape,
              onClose: closeViewer,
              onSwitch: switchViewer
            }, {
              default: vue.withCtx(() => [
                _ctx.$slots.viewer ? (vue.openBlock(), vue.createElementBlock("div", { key: 0 }, [
                  vue.renderSlot(_ctx.$slots, "viewer")
                ])) : vue.createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 8, ["z-index", "initial-index", "infinite", "zoom-rate", "min-scale", "max-scale", "url-list", "crossorigin", "hide-on-click-modal", "teleported", "close-on-press-escape"])) : vue.createCommentVNode("v-if", true)
          ], 64)) : vue.createCommentVNode("v-if", true)
        ], 16);
      };
    }
  });
  var Image$1 = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["__file", "image.vue"]]);
  const ElImage = withInstall(Image$1);
  const inputNumberProps = buildProps({
    id: {
      type: String,
      default: void 0
    },
    step: {
      type: Number,
      default: 1
    },
    stepStrictly: Boolean,
    max: {
      type: Number,
      default: Number.POSITIVE_INFINITY
    },
    min: {
      type: Number,
      default: Number.NEGATIVE_INFINITY
    },
    modelValue: Number,
    readonly: Boolean,
    disabled: Boolean,
    size: useSizeProp,
    controls: {
      type: Boolean,
      default: true
    },
    controlsPosition: {
      type: String,
      default: "",
      values: ["", "right"]
    },
    valueOnClear: {
      type: [String, Number, null],
      validator: (val) => val === null || isNumber$2(val) || ["min", "max"].includes(val),
      default: null
    },
    name: String,
    placeholder: String,
    precision: {
      type: Number,
      validator: (val) => val >= 0 && val === Number.parseInt(`${val}`, 10)
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    ...useAriaProps(["ariaLabel"])
  });
  const inputNumberEmits = {
    [CHANGE_EVENT]: (cur, prev) => prev !== cur,
    blur: (e) => e instanceof FocusEvent,
    focus: (e) => e instanceof FocusEvent,
    [INPUT_EVENT]: (val) => isNumber$2(val) || isNil(val),
    [UPDATE_MODEL_EVENT]: (val) => isNumber$2(val) || isNil(val)
  };
  const __default__$S = vue.defineComponent({
    name: "ElInputNumber"
  });
  const _sfc_main$17 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$S,
    props: inputNumberProps,
    emits: inputNumberEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("input-number");
      const input = vue.ref();
      const data = vue.reactive({
        currentValue: props2.modelValue,
        userInput: null
      });
      const { formItem } = useFormItem();
      const minDisabled = vue.computed(() => isNumber$2(props2.modelValue) && props2.modelValue <= props2.min);
      const maxDisabled = vue.computed(() => isNumber$2(props2.modelValue) && props2.modelValue >= props2.max);
      const numPrecision = vue.computed(() => {
        const stepPrecision = getPrecision(props2.step);
        if (!isUndefined(props2.precision)) {
          if (stepPrecision > props2.precision) {
            debugWarn("InputNumber", "precision should not be less than the decimal places of step");
          }
          return props2.precision;
        } else {
          return Math.max(getPrecision(props2.modelValue), stepPrecision);
        }
      });
      const controlsAtRight = vue.computed(() => {
        return props2.controls && props2.controlsPosition === "right";
      });
      const inputNumberSize = useFormSize();
      const inputNumberDisabled = useFormDisabled();
      const displayValue = vue.computed(() => {
        if (data.userInput !== null) {
          return data.userInput;
        }
        let currentValue = data.currentValue;
        if (isNil(currentValue))
          return "";
        if (isNumber$2(currentValue)) {
          if (Number.isNaN(currentValue))
            return "";
          if (!isUndefined(props2.precision)) {
            currentValue = currentValue.toFixed(props2.precision);
          }
        }
        return currentValue;
      });
      const toPrecision = (num, pre) => {
        if (isUndefined(pre))
          pre = numPrecision.value;
        if (pre === 0)
          return Math.round(num);
        let snum = String(num);
        const pointPos = snum.indexOf(".");
        if (pointPos === -1)
          return num;
        const nums = snum.replace(".", "").split("");
        const datum = nums[pointPos + pre];
        if (!datum)
          return num;
        const length = snum.length;
        if (snum.charAt(length - 1) === "5") {
          snum = `${snum.slice(0, Math.max(0, length - 1))}6`;
        }
        return Number.parseFloat(Number(snum).toFixed(pre));
      };
      const getPrecision = (value) => {
        if (isNil(value))
          return 0;
        const valueString = value.toString();
        const dotPosition = valueString.indexOf(".");
        let precision = 0;
        if (dotPosition !== -1) {
          precision = valueString.length - dotPosition - 1;
        }
        return precision;
      };
      const ensurePrecision = (val, coefficient = 1) => {
        if (!isNumber$2(val))
          return data.currentValue;
        return toPrecision(val + props2.step * coefficient);
      };
      const increase = () => {
        if (props2.readonly || inputNumberDisabled.value || maxDisabled.value)
          return;
        const value = Number(displayValue.value) || 0;
        const newVal = ensurePrecision(value);
        setCurrentValue(newVal);
        emit(INPUT_EVENT, data.currentValue);
        setCurrentValueToModelValue();
      };
      const decrease = () => {
        if (props2.readonly || inputNumberDisabled.value || minDisabled.value)
          return;
        const value = Number(displayValue.value) || 0;
        const newVal = ensurePrecision(value, -1);
        setCurrentValue(newVal);
        emit(INPUT_EVENT, data.currentValue);
        setCurrentValueToModelValue();
      };
      const verifyValue = (value, update) => {
        const { max: max2, min: min2, step, precision, stepStrictly, valueOnClear } = props2;
        if (max2 < min2) {
          throwError("InputNumber", "min should not be greater than max.");
        }
        let newVal = Number(value);
        if (isNil(value) || Number.isNaN(newVal)) {
          return null;
        }
        if (value === "") {
          if (valueOnClear === null) {
            return null;
          }
          newVal = shared.isString(valueOnClear) ? { min: min2, max: max2 }[valueOnClear] : valueOnClear;
        }
        if (stepStrictly) {
          newVal = toPrecision(Math.round(newVal / step) * step, precision);
          if (newVal !== value) {
            update && emit(UPDATE_MODEL_EVENT, newVal);
          }
        }
        if (!isUndefined(precision)) {
          newVal = toPrecision(newVal, precision);
        }
        if (newVal > max2 || newVal < min2) {
          newVal = newVal > max2 ? max2 : min2;
          update && emit(UPDATE_MODEL_EVENT, newVal);
        }
        return newVal;
      };
      const setCurrentValue = (value, emitChange = true) => {
        var _a2;
        const oldVal = data.currentValue;
        const newVal = verifyValue(value);
        if (!emitChange) {
          emit(UPDATE_MODEL_EVENT, newVal);
          return;
        }
        if (oldVal === newVal && value)
          return;
        data.userInput = null;
        emit(UPDATE_MODEL_EVENT, newVal);
        if (oldVal !== newVal) {
          emit(CHANGE_EVENT, newVal, oldVal);
        }
        if (props2.validateEvent) {
          (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "change").catch((err) => debugWarn(err));
        }
        data.currentValue = newVal;
      };
      const handleInput = (value) => {
        data.userInput = value;
        const newVal = value === "" ? null : Number(value);
        emit(INPUT_EVENT, newVal);
        setCurrentValue(newVal, false);
      };
      const handleInputChange = (value) => {
        const newVal = value !== "" ? Number(value) : "";
        if (isNumber$2(newVal) && !Number.isNaN(newVal) || value === "") {
          setCurrentValue(newVal);
        }
        setCurrentValueToModelValue();
        data.userInput = null;
      };
      const focus = () => {
        var _a2, _b;
        (_b = (_a2 = input.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
      };
      const blur = () => {
        var _a2, _b;
        (_b = (_a2 = input.value) == null ? void 0 : _a2.blur) == null ? void 0 : _b.call(_a2);
      };
      const handleFocus = (event) => {
        emit("focus", event);
      };
      const handleBlur = (event) => {
        var _a2;
        data.userInput = null;
        emit("blur", event);
        if (props2.validateEvent) {
          (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "blur").catch((err) => debugWarn(err));
        }
      };
      const setCurrentValueToModelValue = () => {
        if (data.currentValue !== props2.modelValue) {
          data.currentValue = props2.modelValue;
        }
      };
      const handleWheel = (e) => {
        if (document.activeElement === e.target)
          e.preventDefault();
      };
      vue.watch(() => props2.modelValue, (value, oldValue) => {
        const newValue = verifyValue(value, true);
        if (data.userInput === null && newValue !== oldValue) {
          data.currentValue = newValue;
        }
      }, { immediate: true });
      vue.onMounted(() => {
        var _a2;
        const { min: min2, max: max2, modelValue } = props2;
        const innerInput = (_a2 = input.value) == null ? void 0 : _a2.input;
        innerInput.setAttribute("role", "spinbutton");
        if (Number.isFinite(max2)) {
          innerInput.setAttribute("aria-valuemax", String(max2));
        } else {
          innerInput.removeAttribute("aria-valuemax");
        }
        if (Number.isFinite(min2)) {
          innerInput.setAttribute("aria-valuemin", String(min2));
        } else {
          innerInput.removeAttribute("aria-valuemin");
        }
        innerInput.setAttribute("aria-valuenow", data.currentValue || data.currentValue === 0 ? String(data.currentValue) : "");
        innerInput.setAttribute("aria-disabled", String(inputNumberDisabled.value));
        if (!isNumber$2(modelValue) && modelValue != null) {
          let val = Number(modelValue);
          if (Number.isNaN(val)) {
            val = null;
          }
          emit(UPDATE_MODEL_EVENT, val);
        }
        innerInput.addEventListener("wheel", handleWheel, { passive: false });
      });
      vue.onUpdated(() => {
        var _a2, _b;
        const innerInput = (_a2 = input.value) == null ? void 0 : _a2.input;
        innerInput == null ? void 0 : innerInput.setAttribute("aria-valuenow", `${(_b = data.currentValue) != null ? _b : ""}`);
      });
      expose({
        focus,
        blur
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([
            vue.unref(ns2).b(),
            vue.unref(ns2).m(vue.unref(inputNumberSize)),
            vue.unref(ns2).is("disabled", vue.unref(inputNumberDisabled)),
            vue.unref(ns2).is("without-controls", !_ctx.controls),
            vue.unref(ns2).is("controls-right", vue.unref(controlsAtRight))
          ]),
          onDragstart: vue.withModifiers(() => {
          }, ["prevent"])
        }, [
          _ctx.controls ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", {
            key: 0,
            role: "button",
            "aria-label": vue.unref(t2)("el.inputNumber.decrease"),
            class: vue.normalizeClass([vue.unref(ns2).e("decrease"), vue.unref(ns2).is("disabled", vue.unref(minDisabled))]),
            onKeydown: vue.withKeys(decrease, ["enter"])
          }, [
            vue.renderSlot(_ctx.$slots, "decrease-icon", {}, () => [
              vue.createVNode(vue.unref(ElIcon), null, {
                default: vue.withCtx(() => [
                  vue.unref(controlsAtRight) ? (vue.openBlock(), vue.createBlock(vue.unref(arrow_down_default), { key: 0 })) : (vue.openBlock(), vue.createBlock(vue.unref(minus_default), { key: 1 }))
                ]),
                _: 1
              })
            ])
          ], 42, ["aria-label", "onKeydown"])), [
            [vue.unref(vRepeatClick), decrease]
          ]) : vue.createCommentVNode("v-if", true),
          _ctx.controls ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", {
            key: 1,
            role: "button",
            "aria-label": vue.unref(t2)("el.inputNumber.increase"),
            class: vue.normalizeClass([vue.unref(ns2).e("increase"), vue.unref(ns2).is("disabled", vue.unref(maxDisabled))]),
            onKeydown: vue.withKeys(increase, ["enter"])
          }, [
            vue.renderSlot(_ctx.$slots, "increase-icon", {}, () => [
              vue.createVNode(vue.unref(ElIcon), null, {
                default: vue.withCtx(() => [
                  vue.unref(controlsAtRight) ? (vue.openBlock(), vue.createBlock(vue.unref(arrow_up_default), { key: 0 })) : (vue.openBlock(), vue.createBlock(vue.unref(plus_default), { key: 1 }))
                ]),
                _: 1
              })
            ])
          ], 42, ["aria-label", "onKeydown"])), [
            [vue.unref(vRepeatClick), increase]
          ]) : vue.createCommentVNode("v-if", true),
          vue.createVNode(vue.unref(ElInput), {
            id: _ctx.id,
            ref_key: "input",
            ref: input,
            type: "number",
            step: _ctx.step,
            "model-value": vue.unref(displayValue),
            placeholder: _ctx.placeholder,
            readonly: _ctx.readonly,
            disabled: vue.unref(inputNumberDisabled),
            size: vue.unref(inputNumberSize),
            max: _ctx.max,
            min: _ctx.min,
            name: _ctx.name,
            "aria-label": _ctx.ariaLabel,
            "validate-event": false,
            onKeydown: [
              vue.withKeys(vue.withModifiers(increase, ["prevent"]), ["up"]),
              vue.withKeys(vue.withModifiers(decrease, ["prevent"]), ["down"])
            ],
            onBlur: handleBlur,
            onFocus: handleFocus,
            onInput: handleInput,
            onChange: handleInputChange
          }, vue.createSlots({
            _: 2
          }, [
            _ctx.$slots.prefix ? {
              name: "prefix",
              fn: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "prefix")
              ])
            } : void 0,
            _ctx.$slots.suffix ? {
              name: "suffix",
              fn: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "suffix")
              ])
            } : void 0
          ]), 1032, ["id", "step", "model-value", "placeholder", "readonly", "disabled", "size", "max", "min", "name", "aria-label", "onKeydown"])
        ], 42, ["onDragstart"]);
      };
    }
  });
  var InputNumber = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["__file", "input-number.vue"]]);
  const ElInputNumber = withInstall(InputNumber);
  const linkProps = buildProps({
    type: {
      type: String,
      values: ["primary", "success", "warning", "info", "danger", "default"],
      default: "default"
    },
    underline: {
      type: Boolean,
      default: true
    },
    disabled: Boolean,
    href: { type: String, default: "" },
    target: {
      type: String,
      default: "_self"
    },
    icon: {
      type: iconPropType
    }
  });
  const linkEmits = {
    click: (evt) => evt instanceof MouseEvent
  };
  const __default__$R = vue.defineComponent({
    name: "ElLink"
  });
  const _sfc_main$16 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$R,
    props: linkProps,
    emits: linkEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("link");
      const linkKls = vue.computed(() => [
        ns2.b(),
        ns2.m(props2.type),
        ns2.is("disabled", props2.disabled),
        ns2.is("underline", props2.underline && !props2.disabled)
      ]);
      function handleClick(event) {
        if (!props2.disabled)
          emit("click", event);
      }
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("a", {
          class: vue.normalizeClass(vue.unref(linkKls)),
          href: _ctx.disabled || !_ctx.href ? void 0 : _ctx.href,
          target: _ctx.disabled || !_ctx.href ? void 0 : _ctx.target,
          onClick: handleClick
        }, [
          _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 0 }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
            ]),
            _: 1
          })) : vue.createCommentVNode("v-if", true),
          _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("span", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns2).e("inner"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)) : vue.createCommentVNode("v-if", true),
          _ctx.$slots.icon ? vue.renderSlot(_ctx.$slots, "icon", { key: 2 }) : vue.createCommentVNode("v-if", true)
        ], 10, ["href", "target"]);
      };
    }
  });
  var Link = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["__file", "link.vue"]]);
  const ElLink = withInstall(Link);
  let SubMenu$1 = class SubMenu {
    constructor(parent2, domNode) {
      this.parent = parent2;
      this.domNode = domNode;
      this.subIndex = 0;
      this.subIndex = 0;
      this.init();
    }
    init() {
      this.subMenuItems = this.domNode.querySelectorAll("li");
      this.addListeners();
    }
    gotoSubIndex(idx) {
      if (idx === this.subMenuItems.length) {
        idx = 0;
      } else if (idx < 0) {
        idx = this.subMenuItems.length - 1;
      }
      this.subMenuItems[idx].focus();
      this.subIndex = idx;
    }
    addListeners() {
      const parentNode = this.parent.domNode;
      Array.prototype.forEach.call(this.subMenuItems, (el) => {
        el.addEventListener("keydown", (event) => {
          let prevDef = false;
          switch (event.code) {
            case EVENT_CODE.down: {
              this.gotoSubIndex(this.subIndex + 1);
              prevDef = true;
              break;
            }
            case EVENT_CODE.up: {
              this.gotoSubIndex(this.subIndex - 1);
              prevDef = true;
              break;
            }
            case EVENT_CODE.tab: {
              triggerEvent(parentNode, "mouseleave");
              break;
            }
            case EVENT_CODE.enter:
            case EVENT_CODE.space: {
              prevDef = true;
              event.currentTarget.click();
              break;
            }
          }
          if (prevDef) {
            event.preventDefault();
            event.stopPropagation();
          }
          return false;
        });
      });
    }
  };
  let MenuItem$1 = class MenuItem {
    constructor(domNode, namespace) {
      this.domNode = domNode;
      this.submenu = null;
      this.submenu = null;
      this.init(namespace);
    }
    init(namespace) {
      this.domNode.setAttribute("tabindex", "0");
      const menuChild = this.domNode.querySelector(`.${namespace}-menu`);
      if (menuChild) {
        this.submenu = new SubMenu$1(this, menuChild);
      }
      this.addListeners();
    }
    addListeners() {
      this.domNode.addEventListener("keydown", (event) => {
        let prevDef = false;
        switch (event.code) {
          case EVENT_CODE.down: {
            triggerEvent(event.currentTarget, "mouseenter");
            this.submenu && this.submenu.gotoSubIndex(0);
            prevDef = true;
            break;
          }
          case EVENT_CODE.up: {
            triggerEvent(event.currentTarget, "mouseenter");
            this.submenu && this.submenu.gotoSubIndex(this.submenu.subMenuItems.length - 1);
            prevDef = true;
            break;
          }
          case EVENT_CODE.tab: {
            triggerEvent(event.currentTarget, "mouseleave");
            break;
          }
          case EVENT_CODE.enter:
          case EVENT_CODE.space: {
            prevDef = true;
            event.currentTarget.click();
            break;
          }
        }
        if (prevDef) {
          event.preventDefault();
        }
      });
    }
  };
  let Menu$1 = class Menu {
    constructor(domNode, namespace) {
      this.domNode = domNode;
      this.init(namespace);
    }
    init(namespace) {
      const menuChildren = this.domNode.childNodes;
      Array.from(menuChildren).forEach((child) => {
        if (child.nodeType === 1) {
          new MenuItem$1(child, namespace);
        }
      });
    }
  };
  const _sfc_main$15 = vue.defineComponent({
    name: "ElMenuCollapseTransition",
    setup() {
      const ns2 = useNamespace("menu");
      const listeners = {
        onBeforeEnter: (el) => el.style.opacity = "0.2",
        onEnter(el, done) {
          addClass(el, `${ns2.namespace.value}-opacity-transition`);
          el.style.opacity = "1";
          done();
        },
        onAfterEnter(el) {
          removeClass(el, `${ns2.namespace.value}-opacity-transition`);
          el.style.opacity = "";
        },
        onBeforeLeave(el) {
          if (!el.dataset) {
            el.dataset = {};
          }
          if (hasClass(el, ns2.m("collapse"))) {
            removeClass(el, ns2.m("collapse"));
            el.dataset.oldOverflow = el.style.overflow;
            el.dataset.scrollWidth = el.clientWidth.toString();
            addClass(el, ns2.m("collapse"));
          } else {
            addClass(el, ns2.m("collapse"));
            el.dataset.oldOverflow = el.style.overflow;
            el.dataset.scrollWidth = el.clientWidth.toString();
            removeClass(el, ns2.m("collapse"));
          }
          el.style.width = `${el.scrollWidth}px`;
          el.style.overflow = "hidden";
        },
        onLeave(el) {
          addClass(el, "horizontal-collapse-transition");
          el.style.width = `${el.dataset.scrollWidth}px`;
        }
      };
      return {
        listeners
      };
    }
  });
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createBlock(vue.Transition, vue.mergeProps({ mode: "out-in" }, _ctx.listeners), {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
    }, 16);
  }
  var ElMenuCollapseTransition = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["render", _sfc_render$e], ["__file", "menu-collapse-transition.vue"]]);
  function useMenu(instance, currentIndex) {
    const indexPath = vue.computed(() => {
      let parent2 = instance.parent;
      const path = [currentIndex.value];
      while (parent2.type.name !== "ElMenu") {
        if (parent2.props.index) {
          path.unshift(parent2.props.index);
        }
        parent2 = parent2.parent;
      }
      return path;
    });
    const parentMenu = vue.computed(() => {
      let parent2 = instance.parent;
      while (parent2 && !["ElMenu", "ElSubMenu"].includes(parent2.type.name)) {
        parent2 = parent2.parent;
      }
      return parent2;
    });
    return {
      parentMenu,
      indexPath
    };
  }
  function useMenuColor(props2) {
    const menuBarColor = vue.computed(() => {
      const color = props2.backgroundColor;
      if (!color) {
        return "";
      } else {
        return new TinyColor(color).shade(20).toString();
      }
    });
    return menuBarColor;
  }
  const useMenuCssVar = (props2, level) => {
    const ns2 = useNamespace("menu");
    return vue.computed(() => {
      return ns2.cssVarBlock({
        "text-color": props2.textColor || "",
        "hover-text-color": props2.textColor || "",
        "bg-color": props2.backgroundColor || "",
        "hover-bg-color": useMenuColor(props2).value || "",
        "active-color": props2.activeTextColor || "",
        level: `${level}`
      });
    });
  };
  const subMenuProps = buildProps({
    index: {
      type: String,
      required: true
    },
    showTimeout: Number,
    hideTimeout: Number,
    popperClass: String,
    disabled: Boolean,
    teleported: {
      type: Boolean,
      default: void 0
    },
    popperOffset: Number,
    expandCloseIcon: {
      type: iconPropType
    },
    expandOpenIcon: {
      type: iconPropType
    },
    collapseCloseIcon: {
      type: iconPropType
    },
    collapseOpenIcon: {
      type: iconPropType
    }
  });
  const COMPONENT_NAME$c = "ElSubMenu";
  var SubMenu = vue.defineComponent({
    name: COMPONENT_NAME$c,
    props: subMenuProps,
    setup(props2, { slots, expose }) {
      const instance = vue.getCurrentInstance();
      const { indexPath, parentMenu } = useMenu(instance, vue.computed(() => props2.index));
      const nsMenu = useNamespace("menu");
      const nsSubMenu = useNamespace("sub-menu");
      const rootMenu = vue.inject("rootMenu");
      if (!rootMenu)
        throwError(COMPONENT_NAME$c, "can not inject root menu");
      const subMenu = vue.inject(`subMenu:${parentMenu.value.uid}`);
      if (!subMenu)
        throwError(COMPONENT_NAME$c, "can not inject sub menu");
      const items = vue.ref({});
      const subMenus = vue.ref({});
      let timeout;
      const mouseInChild = vue.ref(false);
      const verticalTitleRef = vue.ref();
      const vPopper = vue.ref(null);
      const currentPlacement = vue.computed(() => mode.value === "horizontal" && isFirstLevel.value ? "bottom-start" : "right-start");
      const subMenuTitleIcon = vue.computed(() => {
        return mode.value === "horizontal" && isFirstLevel.value || mode.value === "vertical" && !rootMenu.props.collapse ? props2.expandCloseIcon && props2.expandOpenIcon ? opened.value ? props2.expandOpenIcon : props2.expandCloseIcon : arrow_down_default : props2.collapseCloseIcon && props2.collapseOpenIcon ? opened.value ? props2.collapseOpenIcon : props2.collapseCloseIcon : arrow_right_default;
      });
      const isFirstLevel = vue.computed(() => {
        return subMenu.level === 0;
      });
      const appendToBody = vue.computed(() => {
        const value = props2.teleported;
        return value === void 0 ? isFirstLevel.value : value;
      });
      const menuTransitionName = vue.computed(() => rootMenu.props.collapse ? `${nsMenu.namespace.value}-zoom-in-left` : `${nsMenu.namespace.value}-zoom-in-top`);
      const fallbackPlacements = vue.computed(() => mode.value === "horizontal" && isFirstLevel.value ? [
        "bottom-start",
        "bottom-end",
        "top-start",
        "top-end",
        "right-start",
        "left-start"
      ] : [
        "right-start",
        "right",
        "right-end",
        "left-start",
        "bottom-start",
        "bottom-end",
        "top-start",
        "top-end"
      ]);
      const opened = vue.computed(() => rootMenu.openedMenus.includes(props2.index));
      const active = vue.computed(() => {
        let isActive = false;
        Object.values(items.value).forEach((item2) => {
          if (item2.active) {
            isActive = true;
          }
        });
        Object.values(subMenus.value).forEach((subItem) => {
          if (subItem.active) {
            isActive = true;
          }
        });
        return isActive;
      });
      const mode = vue.computed(() => rootMenu.props.mode);
      const item = vue.reactive({
        index: props2.index,
        indexPath,
        active
      });
      const ulStyle = useMenuCssVar(rootMenu.props, subMenu.level + 1);
      const subMenuPopperOffset = vue.computed(() => {
        var _a2;
        return (_a2 = props2.popperOffset) != null ? _a2 : rootMenu.props.popperOffset;
      });
      const subMenuPopperClass = vue.computed(() => {
        var _a2;
        return (_a2 = props2.popperClass) != null ? _a2 : rootMenu.props.popperClass;
      });
      const subMenuShowTimeout = vue.computed(() => {
        var _a2;
        return (_a2 = props2.showTimeout) != null ? _a2 : rootMenu.props.showTimeout;
      });
      const subMenuHideTimeout = vue.computed(() => {
        var _a2;
        return (_a2 = props2.hideTimeout) != null ? _a2 : rootMenu.props.hideTimeout;
      });
      const doDestroy = () => {
        var _a2, _b, _c;
        return (_c = (_b = (_a2 = vPopper.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.popperInstanceRef) == null ? void 0 : _c.destroy();
      };
      const handleCollapseToggle = (value) => {
        if (!value) {
          doDestroy();
        }
      };
      const handleClick = () => {
        if (rootMenu.props.menuTrigger === "hover" && rootMenu.props.mode === "horizontal" || rootMenu.props.collapse && rootMenu.props.mode === "vertical" || props2.disabled)
          return;
        rootMenu.handleSubMenuClick({
          index: props2.index,
          indexPath: indexPath.value,
          active: active.value
        });
      };
      const handleMouseenter = (event, showTimeout = subMenuShowTimeout.value) => {
        var _a2;
        if (event.type === "focus") {
          return;
        }
        if (rootMenu.props.menuTrigger === "click" && rootMenu.props.mode === "horizontal" || !rootMenu.props.collapse && rootMenu.props.mode === "vertical" || props2.disabled) {
          subMenu.mouseInChild.value = true;
          return;
        }
        subMenu.mouseInChild.value = true;
        timeout == null ? void 0 : timeout();
        ({ stop: timeout } = useTimeoutFn(() => {
          rootMenu.openMenu(props2.index, indexPath.value);
        }, showTimeout));
        if (appendToBody.value) {
          (_a2 = parentMenu.value.vnode.el) == null ? void 0 : _a2.dispatchEvent(new MouseEvent("mouseenter"));
        }
      };
      const handleMouseleave = (deepDispatch = false) => {
        var _a2;
        if (rootMenu.props.menuTrigger === "click" && rootMenu.props.mode === "horizontal" || !rootMenu.props.collapse && rootMenu.props.mode === "vertical") {
          subMenu.mouseInChild.value = false;
          return;
        }
        timeout == null ? void 0 : timeout();
        subMenu.mouseInChild.value = false;
        ({ stop: timeout } = useTimeoutFn(() => !mouseInChild.value && rootMenu.closeMenu(props2.index, indexPath.value), subMenuHideTimeout.value));
        if (appendToBody.value && deepDispatch) {
          (_a2 = subMenu.handleMouseleave) == null ? void 0 : _a2.call(subMenu, true);
        }
      };
      vue.watch(() => rootMenu.props.collapse, (value) => handleCollapseToggle(Boolean(value)));
      {
        const addSubMenu = (item2) => {
          subMenus.value[item2.index] = item2;
        };
        const removeSubMenu = (item2) => {
          delete subMenus.value[item2.index];
        };
        vue.provide(`subMenu:${instance.uid}`, {
          addSubMenu,
          removeSubMenu,
          handleMouseleave,
          mouseInChild,
          level: subMenu.level + 1
        });
      }
      expose({
        opened
      });
      vue.onMounted(() => {
        rootMenu.addSubMenu(item);
        subMenu.addSubMenu(item);
      });
      vue.onBeforeUnmount(() => {
        subMenu.removeSubMenu(item);
        rootMenu.removeSubMenu(item);
      });
      return () => {
        var _a2;
        const titleTag = [
          (_a2 = slots.title) == null ? void 0 : _a2.call(slots),
          vue.h(ElIcon, {
            class: nsSubMenu.e("icon-arrow"),
            style: {
              transform: opened.value ? props2.expandCloseIcon && props2.expandOpenIcon || props2.collapseCloseIcon && props2.collapseOpenIcon && rootMenu.props.collapse ? "none" : "rotateZ(180deg)" : "none"
            }
          }, {
            default: () => shared.isString(subMenuTitleIcon.value) ? vue.h(instance.appContext.components[subMenuTitleIcon.value]) : vue.h(subMenuTitleIcon.value)
          })
        ];
        const child = rootMenu.isMenuPopup ? vue.h(ElTooltip, {
          ref: vPopper,
          visible: opened.value,
          effect: "light",
          pure: true,
          offset: subMenuPopperOffset.value,
          showArrow: false,
          persistent: true,
          popperClass: subMenuPopperClass.value,
          placement: currentPlacement.value,
          teleported: appendToBody.value,
          fallbackPlacements: fallbackPlacements.value,
          transition: menuTransitionName.value,
          gpuAcceleration: false
        }, {
          content: () => {
            var _a22;
            return vue.h("div", {
              class: [
                nsMenu.m(mode.value),
                nsMenu.m("popup-container"),
                subMenuPopperClass.value
              ],
              onMouseenter: (evt) => handleMouseenter(evt, 100),
              onMouseleave: () => handleMouseleave(true),
              onFocus: (evt) => handleMouseenter(evt, 100)
            }, [
              vue.h("ul", {
                class: [
                  nsMenu.b(),
                  nsMenu.m("popup"),
                  nsMenu.m(`popup-${currentPlacement.value}`)
                ],
                style: ulStyle.value
              }, [(_a22 = slots.default) == null ? void 0 : _a22.call(slots)])
            ]);
          },
          default: () => vue.h("div", {
            class: nsSubMenu.e("title"),
            onClick: handleClick
          }, titleTag)
        }) : vue.h(vue.Fragment, {}, [
          vue.h("div", {
            class: nsSubMenu.e("title"),
            ref: verticalTitleRef,
            onClick: handleClick
          }, titleTag),
          vue.h(ElCollapseTransition, {}, {
            default: () => {
              var _a22;
              return vue.withDirectives(vue.h("ul", {
                role: "menu",
                class: [nsMenu.b(), nsMenu.m("inline")],
                style: ulStyle.value
              }, [(_a22 = slots.default) == null ? void 0 : _a22.call(slots)]), [[vue.vShow, opened.value]]);
            }
          })
        ]);
        return vue.h("li", {
          class: [
            nsSubMenu.b(),
            nsSubMenu.is("active", active.value),
            nsSubMenu.is("opened", opened.value),
            nsSubMenu.is("disabled", props2.disabled)
          ],
          role: "menuitem",
          ariaHaspopup: true,
          ariaExpanded: opened.value,
          onMouseenter: handleMouseenter,
          onMouseleave: () => handleMouseleave(),
          onFocus: handleMouseenter
        }, [child]);
      };
    }
  });
  const menuProps = buildProps({
    mode: {
      type: String,
      values: ["horizontal", "vertical"],
      default: "vertical"
    },
    defaultActive: {
      type: String,
      default: ""
    },
    defaultOpeneds: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    uniqueOpened: Boolean,
    router: Boolean,
    menuTrigger: {
      type: String,
      values: ["hover", "click"],
      default: "hover"
    },
    collapse: Boolean,
    backgroundColor: String,
    textColor: String,
    activeTextColor: String,
    closeOnClickOutside: Boolean,
    collapseTransition: {
      type: Boolean,
      default: true
    },
    ellipsis: {
      type: Boolean,
      default: true
    },
    popperOffset: {
      type: Number,
      default: 6
    },
    ellipsisIcon: {
      type: iconPropType,
      default: () => more_default
    },
    popperEffect: {
      type: definePropType(String),
      default: "dark"
    },
    popperClass: String,
    showTimeout: {
      type: Number,
      default: 300
    },
    hideTimeout: {
      type: Number,
      default: 300
    }
  });
  const checkIndexPath = (indexPath) => Array.isArray(indexPath) && indexPath.every((path) => shared.isString(path));
  const menuEmits = {
    close: (index, indexPath) => shared.isString(index) && checkIndexPath(indexPath),
    open: (index, indexPath) => shared.isString(index) && checkIndexPath(indexPath),
    select: (index, indexPath, item, routerResult) => shared.isString(index) && checkIndexPath(indexPath) && shared.isObject(item) && (routerResult === void 0 || routerResult instanceof Promise)
  };
  var Menu = vue.defineComponent({
    name: "ElMenu",
    props: menuProps,
    emits: menuEmits,
    setup(props2, { emit, slots, expose }) {
      const instance = vue.getCurrentInstance();
      const router2 = instance.appContext.config.globalProperties.$router;
      const menu = vue.ref();
      const nsMenu = useNamespace("menu");
      const nsSubMenu = useNamespace("sub-menu");
      const sliceIndex = vue.ref(-1);
      const openedMenus = vue.ref(props2.defaultOpeneds && !props2.collapse ? props2.defaultOpeneds.slice(0) : []);
      const activeIndex = vue.ref(props2.defaultActive);
      const items = vue.ref({});
      const subMenus = vue.ref({});
      const isMenuPopup = vue.computed(() => {
        return props2.mode === "horizontal" || props2.mode === "vertical" && props2.collapse;
      });
      const initMenu = () => {
        const activeItem = activeIndex.value && items.value[activeIndex.value];
        if (!activeItem || props2.mode === "horizontal" || props2.collapse)
          return;
        const indexPath = activeItem.indexPath;
        indexPath.forEach((index) => {
          const subMenu = subMenus.value[index];
          subMenu && openMenu(index, subMenu.indexPath);
        });
      };
      const openMenu = (index, indexPath) => {
        if (openedMenus.value.includes(index))
          return;
        if (props2.uniqueOpened) {
          openedMenus.value = openedMenus.value.filter((index2) => indexPath.includes(index2));
        }
        openedMenus.value.push(index);
        emit("open", index, indexPath);
      };
      const close2 = (index) => {
        const i2 = openedMenus.value.indexOf(index);
        if (i2 !== -1) {
          openedMenus.value.splice(i2, 1);
        }
      };
      const closeMenu = (index, indexPath) => {
        close2(index);
        emit("close", index, indexPath);
      };
      const handleSubMenuClick = ({
        index,
        indexPath
      }) => {
        const isOpened = openedMenus.value.includes(index);
        if (isOpened) {
          closeMenu(index, indexPath);
        } else {
          openMenu(index, indexPath);
        }
      };
      const handleMenuItemClick = (menuItem) => {
        if (props2.mode === "horizontal" || props2.collapse) {
          openedMenus.value = [];
        }
        const { index, indexPath } = menuItem;
        if (isNil(index) || isNil(indexPath))
          return;
        if (props2.router && router2) {
          const route = menuItem.route || index;
          const routerResult = router2.push(route).then((res) => {
            if (!res)
              activeIndex.value = index;
            return res;
          });
          emit("select", index, indexPath, { index, indexPath, route }, routerResult);
        } else {
          activeIndex.value = index;
          emit("select", index, indexPath, { index, indexPath });
        }
      };
      const updateActiveIndex = (val) => {
        const itemsInData = items.value;
        const item = itemsInData[val] || activeIndex.value && itemsInData[activeIndex.value] || itemsInData[props2.defaultActive];
        if (item) {
          activeIndex.value = item.index;
        } else {
          activeIndex.value = val;
        }
      };
      const calcMenuItemWidth = (menuItem) => {
        const computedStyle = getComputedStyle(menuItem);
        const marginLeft = Number.parseInt(computedStyle.marginLeft, 10);
        const marginRight = Number.parseInt(computedStyle.marginRight, 10);
        return menuItem.offsetWidth + marginLeft + marginRight || 0;
      };
      const calcSliceIndex = () => {
        var _a2, _b;
        if (!menu.value)
          return -1;
        const items2 = Array.from((_b = (_a2 = menu.value) == null ? void 0 : _a2.childNodes) != null ? _b : []).filter((item) => item.nodeName !== "#comment" && (item.nodeName !== "#text" || item.nodeValue));
        const moreItemWidth = 64;
        const computedMenuStyle = getComputedStyle(menu.value);
        const paddingLeft = Number.parseInt(computedMenuStyle.paddingLeft, 10);
        const paddingRight = Number.parseInt(computedMenuStyle.paddingRight, 10);
        const menuWidth = menu.value.clientWidth - paddingLeft - paddingRight;
        let calcWidth = 0;
        let sliceIndex2 = 0;
        items2.forEach((item, index) => {
          calcWidth += calcMenuItemWidth(item);
          if (calcWidth <= menuWidth - moreItemWidth) {
            sliceIndex2 = index + 1;
          }
        });
        return sliceIndex2 === items2.length ? -1 : sliceIndex2;
      };
      const getIndexPath = (index) => subMenus.value[index].indexPath;
      const debounce2 = (fn2, wait = 33.34) => {
        let timmer;
        return () => {
          timmer && clearTimeout(timmer);
          timmer = setTimeout(() => {
            fn2();
          }, wait);
        };
      };
      let isFirstTimeRender = true;
      const handleResize = () => {
        if (sliceIndex.value === calcSliceIndex())
          return;
        const callback = () => {
          sliceIndex.value = -1;
          vue.nextTick(() => {
            sliceIndex.value = calcSliceIndex();
          });
        };
        isFirstTimeRender ? callback() : debounce2(callback)();
        isFirstTimeRender = false;
      };
      vue.watch(() => props2.defaultActive, (currentActive) => {
        if (!items.value[currentActive]) {
          activeIndex.value = "";
        }
        updateActiveIndex(currentActive);
      });
      vue.watch(() => props2.collapse, (value) => {
        if (value)
          openedMenus.value = [];
      });
      vue.watch(items.value, initMenu);
      let resizeStopper;
      vue.watchEffect(() => {
        if (props2.mode === "horizontal" && props2.ellipsis)
          resizeStopper = useResizeObserver(menu, handleResize).stop;
        else
          resizeStopper == null ? void 0 : resizeStopper();
      });
      const mouseInChild = vue.ref(false);
      {
        const addSubMenu = (item) => {
          subMenus.value[item.index] = item;
        };
        const removeSubMenu = (item) => {
          delete subMenus.value[item.index];
        };
        const addMenuItem = (item) => {
          items.value[item.index] = item;
        };
        const removeMenuItem = (item) => {
          delete items.value[item.index];
        };
        vue.provide("rootMenu", vue.reactive({
          props: props2,
          openedMenus,
          items,
          subMenus,
          activeIndex,
          isMenuPopup,
          addMenuItem,
          removeMenuItem,
          addSubMenu,
          removeSubMenu,
          openMenu,
          closeMenu,
          handleMenuItemClick,
          handleSubMenuClick
        }));
        vue.provide(`subMenu:${instance.uid}`, {
          addSubMenu,
          removeSubMenu,
          mouseInChild,
          level: 0
        });
      }
      vue.onMounted(() => {
        if (props2.mode === "horizontal") {
          new Menu$1(instance.vnode.el, nsMenu.namespace.value);
        }
      });
      {
        const open = (index) => {
          const { indexPath } = subMenus.value[index];
          indexPath.forEach((i2) => openMenu(i2, indexPath));
        };
        expose({
          open,
          close: close2,
          handleResize
        });
      }
      const ulStyle = useMenuCssVar(props2, 0);
      return () => {
        var _a2, _b;
        let slot = (_b = (_a2 = slots.default) == null ? void 0 : _a2.call(slots)) != null ? _b : [];
        const vShowMore = [];
        if (props2.mode === "horizontal" && menu.value) {
          const originalSlot = flattedChildren(slot);
          const slotDefault = sliceIndex.value === -1 ? originalSlot : originalSlot.slice(0, sliceIndex.value);
          const slotMore = sliceIndex.value === -1 ? [] : originalSlot.slice(sliceIndex.value);
          if ((slotMore == null ? void 0 : slotMore.length) && props2.ellipsis) {
            slot = slotDefault;
            vShowMore.push(vue.h(SubMenu, {
              index: "sub-menu-more",
              class: nsSubMenu.e("hide-arrow"),
              popperOffset: props2.popperOffset
            }, {
              title: () => vue.h(ElIcon, {
                class: nsSubMenu.e("icon-more")
              }, {
                default: () => vue.h(props2.ellipsisIcon)
              }),
              default: () => slotMore
            }));
          }
        }
        const directives = props2.closeOnClickOutside ? [
          [
            ClickOutside,
            () => {
              if (!openedMenus.value.length)
                return;
              if (!mouseInChild.value) {
                openedMenus.value.forEach((openedMenu) => emit("close", openedMenu, getIndexPath(openedMenu)));
                openedMenus.value = [];
              }
            }
          ]
        ] : [];
        const vMenu = vue.withDirectives(vue.h("ul", {
          key: String(props2.collapse),
          role: "menubar",
          ref: menu,
          style: ulStyle.value,
          class: {
            [nsMenu.b()]: true,
            [nsMenu.m(props2.mode)]: true,
            [nsMenu.m("collapse")]: props2.collapse
          }
        }, [...slot, ...vShowMore]), directives);
        if (props2.collapseTransition && props2.mode === "vertical") {
          return vue.h(ElMenuCollapseTransition, () => vMenu);
        }
        return vMenu;
      };
    }
  });
  const menuItemProps = buildProps({
    index: {
      type: definePropType([String, null]),
      default: null
    },
    route: {
      type: definePropType([String, Object])
    },
    disabled: Boolean
  });
  const menuItemEmits = {
    click: (item) => shared.isString(item.index) && Array.isArray(item.indexPath)
  };
  const COMPONENT_NAME$b = "ElMenuItem";
  const _sfc_main$14 = vue.defineComponent({
    name: COMPONENT_NAME$b,
    components: {
      ElTooltip
    },
    props: menuItemProps,
    emits: menuItemEmits,
    setup(props2, { emit }) {
      const instance = vue.getCurrentInstance();
      const rootMenu = vue.inject("rootMenu");
      const nsMenu = useNamespace("menu");
      const nsMenuItem = useNamespace("menu-item");
      if (!rootMenu)
        throwError(COMPONENT_NAME$b, "can not inject root menu");
      const { parentMenu, indexPath } = useMenu(instance, vue.toRef(props2, "index"));
      const subMenu = vue.inject(`subMenu:${parentMenu.value.uid}`);
      if (!subMenu)
        throwError(COMPONENT_NAME$b, "can not inject sub menu");
      const active = vue.computed(() => props2.index === rootMenu.activeIndex);
      const item = vue.reactive({
        index: props2.index,
        indexPath,
        active
      });
      const handleClick = () => {
        if (!props2.disabled) {
          rootMenu.handleMenuItemClick({
            index: props2.index,
            indexPath: indexPath.value,
            route: props2.route
          });
          emit("click", item);
        }
      };
      vue.onMounted(() => {
        subMenu.addSubMenu(item);
        rootMenu.addMenuItem(item);
      });
      vue.onBeforeUnmount(() => {
        subMenu.removeSubMenu(item);
        rootMenu.removeMenuItem(item);
      });
      return {
        parentMenu,
        rootMenu,
        active,
        nsMenu,
        nsMenuItem,
        handleClick
      };
    }
  });
  function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_tooltip = vue.resolveComponent("el-tooltip");
    return vue.openBlock(), vue.createElementBlock("li", {
      class: vue.normalizeClass([
        _ctx.nsMenuItem.b(),
        _ctx.nsMenuItem.is("active", _ctx.active),
        _ctx.nsMenuItem.is("disabled", _ctx.disabled)
      ]),
      role: "menuitem",
      tabindex: "-1",
      onClick: _ctx.handleClick
    }, [
      _ctx.parentMenu.type.name === "ElMenu" && _ctx.rootMenu.props.collapse && _ctx.$slots.title ? (vue.openBlock(), vue.createBlock(_component_el_tooltip, {
        key: 0,
        effect: _ctx.rootMenu.props.popperEffect,
        placement: "right",
        "fallback-placements": ["left"],
        persistent: ""
      }, {
        content: vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "title")
        ]),
        default: vue.withCtx(() => [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.nsMenu.be("tooltip", "trigger"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)
        ]),
        _: 3
      }, 8, ["effect"])) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
        vue.renderSlot(_ctx.$slots, "default"),
        vue.renderSlot(_ctx.$slots, "title")
      ], 64))
    ], 10, ["onClick"]);
  }
  var MenuItem = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["render", _sfc_render$d], ["__file", "menu-item.vue"]]);
  const menuItemGroupProps = {
    title: String
  };
  const COMPONENT_NAME$a = "ElMenuItemGroup";
  const _sfc_main$13 = vue.defineComponent({
    name: COMPONENT_NAME$a,
    props: menuItemGroupProps,
    setup() {
      const ns2 = useNamespace("menu-item-group");
      return {
        ns: ns2
      };
    }
  });
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("li", {
      class: vue.normalizeClass(_ctx.ns.b())
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("title"))
      }, [
        !_ctx.$slots.title ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
          vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)
        ], 64)) : vue.renderSlot(_ctx.$slots, "title", { key: 1 })
      ], 2),
      vue.createElementVNode("ul", null, [
        vue.renderSlot(_ctx.$slots, "default")
      ])
    ], 2);
  }
  var MenuItemGroup = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["render", _sfc_render$c], ["__file", "menu-item-group.vue"]]);
  const ElMenu = withInstall(Menu, {
    MenuItem,
    MenuItemGroup,
    SubMenu
  });
  const ElMenuItem = withNoopInstall(MenuItem);
  const ElMenuItemGroup = withNoopInstall(MenuItemGroup);
  const ElSubMenu = withNoopInstall(SubMenu);
  const pageHeaderProps = buildProps({
    icon: {
      type: iconPropType,
      default: () => back_default
    },
    title: String,
    content: {
      type: String,
      default: ""
    }
  });
  const pageHeaderEmits = {
    back: () => true
  };
  const __default__$Q = vue.defineComponent({
    name: "ElPageHeader"
  });
  const _sfc_main$12 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$Q,
    props: pageHeaderProps,
    emits: pageHeaderEmits,
    setup(__props, { emit }) {
      const slots = vue.useSlots();
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("page-header");
      const kls = vue.computed(() => {
        return [
          ns2.b(),
          {
            [ns2.m("has-breadcrumb")]: !!slots.breadcrumb,
            [ns2.m("has-extra")]: !!slots.extra,
            [ns2.is("contentful")]: !!slots.default
          }
        ];
      });
      function handleClick() {
        emit("back");
      }
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(kls))
        }, [
          _ctx.$slots.breadcrumb ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("breadcrumb"))
          }, [
            vue.renderSlot(_ctx.$slots, "breadcrumb")
          ], 2)) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("header"))
          }, [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).e("left"))
            }, [
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).e("back")),
                role: "button",
                tabindex: "0",
                onClick: handleClick
              }, [
                _ctx.icon || _ctx.$slots.icon ? (vue.openBlock(), vue.createElementBlock("div", {
                  key: 0,
                  "aria-label": _ctx.title || vue.unref(t2)("el.pageHeader.title"),
                  class: vue.normalizeClass(vue.unref(ns2).e("icon"))
                }, [
                  vue.renderSlot(_ctx.$slots, "icon", {}, () => [
                    _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 0 }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
                      ]),
                      _: 1
                    })) : vue.createCommentVNode("v-if", true)
                  ])
                ], 10, ["aria-label"])) : vue.createCommentVNode("v-if", true),
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(ns2).e("title"))
                }, [
                  vue.renderSlot(_ctx.$slots, "title", {}, () => [
                    vue.createTextVNode(vue.toDisplayString(_ctx.title || vue.unref(t2)("el.pageHeader.title")), 1)
                  ])
                ], 2)
              ], 2),
              vue.createVNode(vue.unref(ElDivider), { direction: "vertical" }),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).e("content"))
              }, [
                vue.renderSlot(_ctx.$slots, "content", {}, () => [
                  vue.createTextVNode(vue.toDisplayString(_ctx.content), 1)
                ])
              ], 2)
            ], 2),
            _ctx.$slots.extra ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ns2).e("extra"))
            }, [
              vue.renderSlot(_ctx.$slots, "extra")
            ], 2)) : vue.createCommentVNode("v-if", true)
          ], 2),
          _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns2).e("main"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var PageHeader = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["__file", "page-header.vue"]]);
  const ElPageHeader = withInstall(PageHeader);
  const elPaginationKey = Symbol("elPaginationKey");
  const paginationPrevProps = buildProps({
    disabled: Boolean,
    currentPage: {
      type: Number,
      default: 1
    },
    prevText: {
      type: String
    },
    prevIcon: {
      type: iconPropType
    }
  });
  const paginationPrevEmits = {
    click: (evt) => evt instanceof MouseEvent
  };
  const __default__$P = vue.defineComponent({
    name: "ElPaginationPrev"
  });
  const _sfc_main$11 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$P,
    props: paginationPrevProps,
    emits: paginationPrevEmits,
    setup(__props) {
      const props2 = __props;
      const { t: t2 } = useLocale();
      const internalDisabled = vue.computed(() => props2.disabled || props2.currentPage <= 1);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("button", {
          type: "button",
          class: "btn-prev",
          disabled: vue.unref(internalDisabled),
          "aria-label": _ctx.prevText || vue.unref(t2)("el.pagination.prev"),
          "aria-disabled": vue.unref(internalDisabled),
          onClick: ($event) => _ctx.$emit("click", $event)
        }, [
          _ctx.prevText ? (vue.openBlock(), vue.createElementBlock("span", { key: 0 }, vue.toDisplayString(_ctx.prevText), 1)) : (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 1 }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.prevIcon)))
            ]),
            _: 1
          }))
        ], 8, ["disabled", "aria-label", "aria-disabled", "onClick"]);
      };
    }
  });
  var Prev = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["__file", "prev.vue"]]);
  const paginationNextProps = buildProps({
    disabled: Boolean,
    currentPage: {
      type: Number,
      default: 1
    },
    pageCount: {
      type: Number,
      default: 50
    },
    nextText: {
      type: String
    },
    nextIcon: {
      type: iconPropType
    }
  });
  const __default__$O = vue.defineComponent({
    name: "ElPaginationNext"
  });
  const _sfc_main$10 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$O,
    props: paginationNextProps,
    emits: ["click"],
    setup(__props) {
      const props2 = __props;
      const { t: t2 } = useLocale();
      const internalDisabled = vue.computed(() => props2.disabled || props2.currentPage === props2.pageCount || props2.pageCount === 0);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("button", {
          type: "button",
          class: "btn-next",
          disabled: vue.unref(internalDisabled),
          "aria-label": _ctx.nextText || vue.unref(t2)("el.pagination.next"),
          "aria-disabled": vue.unref(internalDisabled),
          onClick: ($event) => _ctx.$emit("click", $event)
        }, [
          _ctx.nextText ? (vue.openBlock(), vue.createElementBlock("span", { key: 0 }, vue.toDisplayString(_ctx.nextText), 1)) : (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 1 }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.nextIcon)))
            ]),
            _: 1
          }))
        ], 8, ["disabled", "aria-label", "aria-disabled", "onClick"]);
      };
    }
  });
  var Next = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["__file", "next.vue"]]);
  const selectGroupKey = Symbol("ElSelectGroup");
  const selectKey = Symbol("ElSelect");
  function useOption$1(props2, states) {
    const select = vue.inject(selectKey);
    const selectGroup = vue.inject(selectGroupKey, { disabled: false });
    const itemSelected = vue.computed(() => {
      return contains(castArray$1(select.props.modelValue), props2.value);
    });
    const limitReached = vue.computed(() => {
      var _a2;
      if (select.props.multiple) {
        const modelValue = castArray$1((_a2 = select.props.modelValue) != null ? _a2 : []);
        return !itemSelected.value && modelValue.length >= select.props.multipleLimit && select.props.multipleLimit > 0;
      } else {
        return false;
      }
    });
    const currentLabel = vue.computed(() => {
      return props2.label || (shared.isObject(props2.value) ? "" : props2.value);
    });
    const currentValue = vue.computed(() => {
      return props2.value || props2.label || "";
    });
    const isDisabled = vue.computed(() => {
      return props2.disabled || states.groupDisabled || limitReached.value;
    });
    const instance = vue.getCurrentInstance();
    const contains = (arr = [], target) => {
      if (!shared.isObject(props2.value)) {
        return arr && arr.includes(target);
      } else {
        const valueKey = select.props.valueKey;
        return arr && arr.some((item) => {
          return vue.toRaw(get(item, valueKey)) === get(target, valueKey);
        });
      }
    };
    const hoverItem = () => {
      if (!props2.disabled && !selectGroup.disabled) {
        select.states.hoveringIndex = select.optionsArray.indexOf(instance.proxy);
      }
    };
    const updateOption = (query) => {
      const regexp = new RegExp(escapeStringRegexp(query), "i");
      states.visible = regexp.test(currentLabel.value) || props2.created;
    };
    vue.watch(() => currentLabel.value, () => {
      if (!props2.created && !select.props.remote)
        select.setSelected();
    });
    vue.watch(() => props2.value, (val, oldVal) => {
      const { remote, valueKey } = select.props;
      if (val !== oldVal) {
        select.onOptionDestroy(oldVal, instance.proxy);
        select.onOptionCreate(instance.proxy);
      }
      if (!props2.created && !remote) {
        if (valueKey && shared.isObject(val) && shared.isObject(oldVal) && val[valueKey] === oldVal[valueKey]) {
          return;
        }
        select.setSelected();
      }
    });
    vue.watch(() => selectGroup.disabled, () => {
      states.groupDisabled = selectGroup.disabled;
    }, { immediate: true });
    return {
      select,
      currentLabel,
      currentValue,
      itemSelected,
      isDisabled,
      hoverItem,
      updateOption
    };
  }
  const _sfc_main$$ = vue.defineComponent({
    name: "ElOption",
    componentName: "ElOption",
    props: {
      value: {
        required: true,
        type: [String, Number, Boolean, Object]
      },
      label: [String, Number],
      created: Boolean,
      disabled: Boolean
    },
    setup(props2) {
      const ns2 = useNamespace("select");
      const id = useId();
      const containerKls = vue.computed(() => [
        ns2.be("dropdown", "item"),
        ns2.is("disabled", vue.unref(isDisabled)),
        ns2.is("selected", vue.unref(itemSelected)),
        ns2.is("hovering", vue.unref(hover))
      ]);
      const states = vue.reactive({
        index: -1,
        groupDisabled: false,
        visible: true,
        hover: false
      });
      const {
        currentLabel,
        itemSelected,
        isDisabled,
        select,
        hoverItem,
        updateOption
      } = useOption$1(props2, states);
      const { visible, hover } = vue.toRefs(states);
      const vm = vue.getCurrentInstance().proxy;
      select.onOptionCreate(vm);
      vue.onBeforeUnmount(() => {
        const key = vm.value;
        const { selected } = select.states;
        const selectedOptions = select.props.multiple ? selected : [selected];
        const doesSelected = selectedOptions.some((item) => {
          return item.value === vm.value;
        });
        vue.nextTick(() => {
          if (select.states.cachedOptions.get(key) === vm && !doesSelected) {
            select.states.cachedOptions.delete(key);
          }
        });
        select.onOptionDestroy(key, vm);
      });
      function selectOptionClick() {
        if (!isDisabled.value) {
          select.handleOptionSelect(vm);
        }
      }
      return {
        ns: ns2,
        id,
        containerKls,
        currentLabel,
        itemSelected,
        isDisabled,
        select,
        hoverItem,
        updateOption,
        visible,
        hover,
        selectOptionClick,
        states
      };
    }
  });
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.withDirectives((vue.openBlock(), vue.createElementBlock("li", {
      id: _ctx.id,
      class: vue.normalizeClass(_ctx.containerKls),
      role: "option",
      "aria-disabled": _ctx.isDisabled || void 0,
      "aria-selected": _ctx.itemSelected,
      onMouseenter: _ctx.hoverItem,
      onClick: vue.withModifiers(_ctx.selectOptionClick, ["stop"])
    }, [
      vue.renderSlot(_ctx.$slots, "default", {}, () => [
        vue.createElementVNode("span", null, vue.toDisplayString(_ctx.currentLabel), 1)
      ])
    ], 42, ["id", "aria-disabled", "aria-selected", "onMouseenter", "onClick"])), [
      [vue.vShow, _ctx.visible]
    ]);
  }
  var Option = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["render", _sfc_render$b], ["__file", "option.vue"]]);
  const _sfc_main$_ = vue.defineComponent({
    name: "ElSelectDropdown",
    componentName: "ElSelectDropdown",
    setup() {
      const select = vue.inject(selectKey);
      const ns2 = useNamespace("select");
      const popperClass = vue.computed(() => select.props.popperClass);
      const isMultiple = vue.computed(() => select.props.multiple);
      const isFitInputWidth = vue.computed(() => select.props.fitInputWidth);
      const minWidth = vue.ref("");
      function updateMinWidth() {
        var _a2;
        minWidth.value = `${(_a2 = select.selectRef) == null ? void 0 : _a2.offsetWidth}px`;
      }
      vue.onMounted(() => {
        updateMinWidth();
        useResizeObserver(select.selectRef, updateMinWidth);
      });
      return {
        ns: ns2,
        minWidth,
        popperClass,
        isMultiple,
        isFitInputWidth
      };
    }
  });
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([_ctx.ns.b("dropdown"), _ctx.ns.is("multiple", _ctx.isMultiple), _ctx.popperClass]),
      style: vue.normalizeStyle({ [_ctx.isFitInputWidth ? "width" : "minWidth"]: _ctx.minWidth })
    }, [
      _ctx.$slots.header ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass(_ctx.ns.be("dropdown", "header"))
      }, [
        vue.renderSlot(_ctx.$slots, "header")
      ], 2)) : vue.createCommentVNode("v-if", true),
      vue.renderSlot(_ctx.$slots, "default"),
      _ctx.$slots.footer ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: vue.normalizeClass(_ctx.ns.be("dropdown", "footer"))
      }, [
        vue.renderSlot(_ctx.$slots, "footer")
      ], 2)) : vue.createCommentVNode("v-if", true)
    ], 6);
  }
  var ElSelectMenu$1 = /* @__PURE__ */ _export_sfc(_sfc_main$_, [["render", _sfc_render$a], ["__file", "select-dropdown.vue"]]);
  const MINIMUM_INPUT_WIDTH$1 = 11;
  const useSelect$2 = (props2, emit) => {
    const { t: t2 } = useLocale();
    const contentId = useId();
    const nsSelect = useNamespace("select");
    const nsInput = useNamespace("input");
    const states = vue.reactive({
      inputValue: "",
      options: /* @__PURE__ */ new Map(),
      cachedOptions: /* @__PURE__ */ new Map(),
      disabledOptions: /* @__PURE__ */ new Map(),
      optionValues: [],
      selected: [],
      selectionWidth: 0,
      calculatorWidth: 0,
      collapseItemWidth: 0,
      selectedLabel: "",
      hoveringIndex: -1,
      previousQuery: null,
      inputHovering: false,
      menuVisibleOnFocus: false,
      isBeforeHide: false
    });
    const selectRef = vue.ref(null);
    const selectionRef = vue.ref(null);
    const tooltipRef = vue.ref(null);
    const tagTooltipRef = vue.ref(null);
    const inputRef = vue.ref(null);
    const calculatorRef = vue.ref(null);
    const prefixRef = vue.ref(null);
    const suffixRef = vue.ref(null);
    const menuRef = vue.ref(null);
    const tagMenuRef = vue.ref(null);
    const collapseItemRef = vue.ref(null);
    const scrollbarRef = vue.ref(null);
    const {
      isComposing,
      handleCompositionStart,
      handleCompositionUpdate,
      handleCompositionEnd
    } = useComposition({
      afterComposition: (e) => onInput(e)
    });
    const { wrapperRef, isFocused, handleBlur } = useFocusController(inputRef, {
      beforeFocus() {
        return selectDisabled.value;
      },
      afterFocus() {
        if (props2.automaticDropdown && !expanded.value) {
          expanded.value = true;
          states.menuVisibleOnFocus = true;
        }
      },
      beforeBlur(event) {
        var _a2, _b;
        return ((_a2 = tooltipRef.value) == null ? void 0 : _a2.isFocusInsideContent(event)) || ((_b = tagTooltipRef.value) == null ? void 0 : _b.isFocusInsideContent(event));
      },
      afterBlur() {
        expanded.value = false;
        states.menuVisibleOnFocus = false;
      }
    });
    const expanded = vue.ref(false);
    const hoverOption = vue.ref();
    const { form, formItem } = useFormItem();
    const { inputId } = useFormItemInputId(props2, {
      formItemContext: formItem
    });
    const { valueOnClear, isEmptyValue: isEmptyValue2 } = useEmptyValues(props2);
    const selectDisabled = vue.computed(() => props2.disabled || (form == null ? void 0 : form.disabled));
    const hasModelValue = vue.computed(() => {
      return shared.isArray(props2.modelValue) ? props2.modelValue.length > 0 : !isEmptyValue2(props2.modelValue);
    });
    const showClose = vue.computed(() => {
      return props2.clearable && !selectDisabled.value && states.inputHovering && hasModelValue.value;
    });
    const iconComponent = vue.computed(() => props2.remote && props2.filterable && !props2.remoteShowSuffix ? "" : props2.suffixIcon);
    const iconReverse = vue.computed(() => nsSelect.is("reverse", iconComponent.value && expanded.value));
    const validateState = vue.computed(() => (formItem == null ? void 0 : formItem.validateState) || "");
    const validateIcon = vue.computed(() => ValidateComponentsMap[validateState.value]);
    const debounce$1 = vue.computed(() => props2.remote ? 300 : 0);
    const emptyText = vue.computed(() => {
      if (props2.loading) {
        return props2.loadingText || t2("el.select.loading");
      } else {
        if (props2.remote && !states.inputValue && states.options.size === 0)
          return false;
        if (props2.filterable && states.inputValue && states.options.size > 0 && filteredOptionsCount.value === 0) {
          return props2.noMatchText || t2("el.select.noMatch");
        }
        if (states.options.size === 0) {
          return props2.noDataText || t2("el.select.noData");
        }
      }
      return null;
    });
    const filteredOptionsCount = vue.computed(() => optionsArray.value.filter((option) => option.visible).length);
    const optionsArray = vue.computed(() => {
      const list = Array.from(states.options.values());
      const newList = [];
      states.optionValues.forEach((item) => {
        const index = list.findIndex((i2) => i2.value === item);
        if (index > -1) {
          newList.push(list[index]);
        }
      });
      return newList.length >= list.length ? newList : list;
    });
    const cachedOptionsArray = vue.computed(() => Array.from(states.cachedOptions.values()));
    const showNewOption = vue.computed(() => {
      const hasExistingOption = optionsArray.value.filter((option) => {
        return !option.created;
      }).some((option) => {
        return option.currentLabel === states.inputValue;
      });
      return props2.filterable && props2.allowCreate && states.inputValue !== "" && !hasExistingOption;
    });
    const updateOptions2 = () => {
      if (props2.filterable && shared.isFunction(props2.filterMethod))
        return;
      if (props2.filterable && props2.remote && shared.isFunction(props2.remoteMethod))
        return;
      optionsArray.value.forEach((option) => {
        var _a2;
        (_a2 = option.updateOption) == null ? void 0 : _a2.call(option, states.inputValue);
      });
    };
    const selectSize = useFormSize();
    const collapseTagSize = vue.computed(() => ["small"].includes(selectSize.value) ? "small" : "default");
    const dropdownMenuVisible = vue.computed({
      get() {
        return expanded.value && emptyText.value !== false;
      },
      set(val) {
        expanded.value = val;
      }
    });
    const shouldShowPlaceholder = vue.computed(() => {
      if (props2.multiple && !isUndefined(props2.modelValue)) {
        return castArray$1(props2.modelValue).length === 0 && !states.inputValue;
      }
      const value = shared.isArray(props2.modelValue) ? props2.modelValue[0] : props2.modelValue;
      return props2.filterable || isUndefined(value) ? !states.inputValue : true;
    });
    const currentPlaceholder = vue.computed(() => {
      var _a2;
      const _placeholder = (_a2 = props2.placeholder) != null ? _a2 : t2("el.select.placeholder");
      return props2.multiple || !hasModelValue.value ? _placeholder : states.selectedLabel;
    });
    const mouseEnterEventName = vue.computed(() => isIOS ? null : "mouseenter");
    vue.watch(() => props2.modelValue, (val, oldVal) => {
      if (props2.multiple) {
        if (props2.filterable && !props2.reserveKeyword) {
          states.inputValue = "";
          handleQueryChange("");
        }
      }
      setSelected();
      if (!isEqual$1(val, oldVal) && props2.validateEvent) {
        formItem == null ? void 0 : formItem.validate("change").catch((err) => debugWarn(err));
      }
    }, {
      flush: "post",
      deep: true
    });
    vue.watch(() => expanded.value, (val) => {
      if (val) {
        handleQueryChange(states.inputValue);
      } else {
        states.inputValue = "";
        states.previousQuery = null;
        states.isBeforeHide = true;
      }
      emit("visible-change", val);
    });
    vue.watch(() => states.options.entries(), () => {
      var _a2;
      if (!isClient)
        return;
      const inputs = ((_a2 = selectRef.value) == null ? void 0 : _a2.querySelectorAll("input")) || [];
      if (!props2.filterable && !props2.defaultFirstOption && !isUndefined(props2.modelValue) || !Array.from(inputs).includes(document.activeElement)) {
        setSelected();
      }
      if (props2.defaultFirstOption && (props2.filterable || props2.remote) && filteredOptionsCount.value) {
        checkDefaultFirstOption();
      }
    }, {
      flush: "post"
    });
    vue.watch(() => states.hoveringIndex, (val) => {
      if (isNumber$2(val) && val > -1) {
        hoverOption.value = optionsArray.value[val] || {};
      } else {
        hoverOption.value = {};
      }
      optionsArray.value.forEach((option) => {
        option.hover = hoverOption.value === option;
      });
    });
    vue.watchEffect(() => {
      if (states.isBeforeHide)
        return;
      updateOptions2();
    });
    const handleQueryChange = (val) => {
      if (states.previousQuery === val || isComposing.value) {
        return;
      }
      states.previousQuery = val;
      if (props2.filterable && shared.isFunction(props2.filterMethod)) {
        props2.filterMethod(val);
      } else if (props2.filterable && props2.remote && shared.isFunction(props2.remoteMethod)) {
        props2.remoteMethod(val);
      }
      if (props2.defaultFirstOption && (props2.filterable || props2.remote) && filteredOptionsCount.value) {
        vue.nextTick(checkDefaultFirstOption);
      } else {
        vue.nextTick(updateHoveringIndex);
      }
    };
    const checkDefaultFirstOption = () => {
      const optionsInDropdown = optionsArray.value.filter((n2) => n2.visible && !n2.disabled && !n2.states.groupDisabled);
      const userCreatedOption = optionsInDropdown.find((n2) => n2.created);
      const firstOriginOption = optionsInDropdown[0];
      states.hoveringIndex = getValueIndex(optionsArray.value, userCreatedOption || firstOriginOption);
    };
    const setSelected = () => {
      if (!props2.multiple) {
        const value = shared.isArray(props2.modelValue) ? props2.modelValue[0] : props2.modelValue;
        const option = getOption(value);
        states.selectedLabel = option.currentLabel;
        states.selected = [option];
        return;
      } else {
        states.selectedLabel = "";
      }
      const result = [];
      if (!isUndefined(props2.modelValue)) {
        castArray$1(props2.modelValue).forEach((value) => {
          result.push(getOption(value));
        });
      }
      states.selected = result;
    };
    const getOption = (value) => {
      let option;
      const isObjectValue = shared.toRawType(value).toLowerCase() === "object";
      const isNull = shared.toRawType(value).toLowerCase() === "null";
      const isUndefined2 = shared.toRawType(value).toLowerCase() === "undefined";
      for (let i2 = states.cachedOptions.size - 1; i2 >= 0; i2--) {
        const cachedOption = cachedOptionsArray.value[i2];
        const isEqualValue = isObjectValue ? get(cachedOption.value, props2.valueKey) === get(value, props2.valueKey) : cachedOption.value === value;
        if (isEqualValue) {
          option = {
            value,
            currentLabel: cachedOption.currentLabel,
            get isDisabled() {
              return cachedOption.isDisabled;
            }
          };
          break;
        }
      }
      if (option)
        return option;
      const label = isObjectValue ? value.label : !isNull && !isUndefined2 ? value : "";
      const newOption = {
        value,
        currentLabel: label
      };
      return newOption;
    };
    const updateHoveringIndex = () => {
      states.hoveringIndex = optionsArray.value.findIndex((item) => states.selected.some((selected) => getValueKey(selected) === getValueKey(item)));
    };
    const resetSelectionWidth = () => {
      states.selectionWidth = selectionRef.value.getBoundingClientRect().width;
    };
    const resetCalculatorWidth = () => {
      states.calculatorWidth = calculatorRef.value.getBoundingClientRect().width;
    };
    const resetCollapseItemWidth = () => {
      states.collapseItemWidth = collapseItemRef.value.getBoundingClientRect().width;
    };
    const updateTooltip = () => {
      var _a2, _b;
      (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
    };
    const updateTagTooltip = () => {
      var _a2, _b;
      (_b = (_a2 = tagTooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
    };
    const onInputChange = () => {
      if (states.inputValue.length > 0 && !expanded.value) {
        expanded.value = true;
      }
      handleQueryChange(states.inputValue);
    };
    const onInput = (event) => {
      states.inputValue = event.target.value;
      if (props2.remote) {
        debouncedOnInputChange();
      } else {
        return onInputChange();
      }
    };
    const debouncedOnInputChange = debounce(() => {
      onInputChange();
    }, debounce$1.value);
    const emitChange = (val) => {
      if (!isEqual$1(props2.modelValue, val)) {
        emit(CHANGE_EVENT, val);
      }
    };
    const getLastNotDisabledIndex = (value) => findLastIndex(value, (it2) => !states.disabledOptions.has(it2));
    const deletePrevTag = (e) => {
      if (!props2.multiple)
        return;
      if (e.code === EVENT_CODE.delete)
        return;
      if (e.target.value.length <= 0) {
        const value = castArray$1(props2.modelValue).slice();
        const lastNotDisabledIndex = getLastNotDisabledIndex(value);
        if (lastNotDisabledIndex < 0)
          return;
        const removeTagValue = value[lastNotDisabledIndex];
        value.splice(lastNotDisabledIndex, 1);
        emit(UPDATE_MODEL_EVENT, value);
        emitChange(value);
        emit("remove-tag", removeTagValue);
      }
    };
    const deleteTag = (event, tag) => {
      const index = states.selected.indexOf(tag);
      if (index > -1 && !selectDisabled.value) {
        const value = castArray$1(props2.modelValue).slice();
        value.splice(index, 1);
        emit(UPDATE_MODEL_EVENT, value);
        emitChange(value);
        emit("remove-tag", tag.value);
      }
      event.stopPropagation();
      focus();
    };
    const deleteSelected = (event) => {
      event.stopPropagation();
      const value = props2.multiple ? [] : valueOnClear.value;
      if (props2.multiple) {
        for (const item of states.selected) {
          if (item.isDisabled)
            value.push(item.value);
        }
      }
      emit(UPDATE_MODEL_EVENT, value);
      emitChange(value);
      states.hoveringIndex = -1;
      expanded.value = false;
      emit("clear");
      focus();
    };
    const handleOptionSelect = (option) => {
      var _a2;
      if (props2.multiple) {
        const value = castArray$1((_a2 = props2.modelValue) != null ? _a2 : []).slice();
        const optionIndex = getValueIndex(value, option.value);
        if (optionIndex > -1) {
          value.splice(optionIndex, 1);
        } else if (props2.multipleLimit <= 0 || value.length < props2.multipleLimit) {
          value.push(option.value);
        }
        emit(UPDATE_MODEL_EVENT, value);
        emitChange(value);
        if (option.created) {
          handleQueryChange("");
        }
        if (props2.filterable && !props2.reserveKeyword) {
          states.inputValue = "";
        }
      } else {
        emit(UPDATE_MODEL_EVENT, option.value);
        emitChange(option.value);
        expanded.value = false;
      }
      focus();
      if (expanded.value)
        return;
      vue.nextTick(() => {
        scrollToOption(option);
      });
    };
    const getValueIndex = (arr = [], value) => {
      if (!shared.isObject(value))
        return arr.indexOf(value);
      const valueKey = props2.valueKey;
      let index = -1;
      arr.some((item, i2) => {
        if (vue.toRaw(get(item, valueKey)) === get(value, valueKey)) {
          index = i2;
          return true;
        }
        return false;
      });
      return index;
    };
    const scrollToOption = (option) => {
      var _a2, _b, _c, _d, _e2;
      const targetOption = shared.isArray(option) ? option[0] : option;
      let target = null;
      if (targetOption == null ? void 0 : targetOption.value) {
        const options = optionsArray.value.filter((item) => item.value === targetOption.value);
        if (options.length > 0) {
          target = options[0].$el;
        }
      }
      if (tooltipRef.value && target) {
        const menu = (_d = (_c = (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef) == null ? void 0 : _c.querySelector) == null ? void 0 : _d.call(_c, `.${nsSelect.be("dropdown", "wrap")}`);
        if (menu) {
          scrollIntoView(menu, target);
        }
      }
      (_e2 = scrollbarRef.value) == null ? void 0 : _e2.handleScroll();
    };
    const onOptionCreate = (vm) => {
      states.options.set(vm.value, vm);
      states.cachedOptions.set(vm.value, vm);
      vm.disabled && states.disabledOptions.set(vm.value, vm);
    };
    const onOptionDestroy = (key, vm) => {
      if (states.options.get(key) === vm) {
        states.options.delete(key);
      }
    };
    const popperRef = vue.computed(() => {
      var _a2, _b;
      return (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
    });
    const handleMenuEnter = () => {
      states.isBeforeHide = false;
      vue.nextTick(() => scrollToOption(states.selected));
    };
    const focus = () => {
      var _a2;
      (_a2 = inputRef.value) == null ? void 0 : _a2.focus();
    };
    const blur = () => {
      var _a2;
      if (expanded.value) {
        expanded.value = false;
        vue.nextTick(() => {
          var _a22;
          return (_a22 = inputRef.value) == null ? void 0 : _a22.blur();
        });
        return;
      }
      (_a2 = inputRef.value) == null ? void 0 : _a2.blur();
    };
    const handleClearClick = (event) => {
      deleteSelected(event);
    };
    const handleClickOutside = (event) => {
      expanded.value = false;
      if (isFocused.value) {
        const _event2 = new FocusEvent("focus", event);
        vue.nextTick(() => handleBlur(_event2));
      }
    };
    const handleEsc = () => {
      if (states.inputValue.length > 0) {
        states.inputValue = "";
      } else {
        expanded.value = false;
      }
    };
    const toggleMenu = () => {
      if (selectDisabled.value)
        return;
      if (isIOS)
        states.inputHovering = true;
      if (states.menuVisibleOnFocus) {
        states.menuVisibleOnFocus = false;
      } else {
        expanded.value = !expanded.value;
      }
    };
    const selectOption = () => {
      if (!expanded.value) {
        toggleMenu();
      } else {
        if (optionsArray.value[states.hoveringIndex]) {
          handleOptionSelect(optionsArray.value[states.hoveringIndex]);
        }
      }
    };
    const getValueKey = (item) => {
      return shared.isObject(item.value) ? get(item.value, props2.valueKey) : item.value;
    };
    const optionsAllDisabled = vue.computed(() => optionsArray.value.filter((option) => option.visible).every((option) => option.disabled));
    const showTagList = vue.computed(() => {
      if (!props2.multiple) {
        return [];
      }
      return props2.collapseTags ? states.selected.slice(0, props2.maxCollapseTags) : states.selected;
    });
    const collapseTagList = vue.computed(() => {
      if (!props2.multiple) {
        return [];
      }
      return props2.collapseTags ? states.selected.slice(props2.maxCollapseTags) : [];
    });
    const navigateOptions = (direction2) => {
      if (!expanded.value) {
        expanded.value = true;
        return;
      }
      if (states.options.size === 0 || states.filteredOptionsCount === 0 || isComposing.value)
        return;
      if (!optionsAllDisabled.value) {
        if (direction2 === "next") {
          states.hoveringIndex++;
          if (states.hoveringIndex === states.options.size) {
            states.hoveringIndex = 0;
          }
        } else if (direction2 === "prev") {
          states.hoveringIndex--;
          if (states.hoveringIndex < 0) {
            states.hoveringIndex = states.options.size - 1;
          }
        }
        const option = optionsArray.value[states.hoveringIndex];
        if (option.disabled === true || option.states.groupDisabled === true || !option.visible) {
          navigateOptions(direction2);
        }
        vue.nextTick(() => scrollToOption(hoverOption.value));
      }
    };
    const getGapWidth = () => {
      if (!selectionRef.value)
        return 0;
      const style = window.getComputedStyle(selectionRef.value);
      return Number.parseFloat(style.gap || "6px");
    };
    const tagStyle = vue.computed(() => {
      const gapWidth = getGapWidth();
      const maxWidth = collapseItemRef.value && props2.maxCollapseTags === 1 ? states.selectionWidth - states.collapseItemWidth - gapWidth : states.selectionWidth;
      return { maxWidth: `${maxWidth}px` };
    });
    const collapseTagStyle = vue.computed(() => {
      return { maxWidth: `${states.selectionWidth}px` };
    });
    const inputStyle = vue.computed(() => ({
      width: `${Math.max(states.calculatorWidth, MINIMUM_INPUT_WIDTH$1)}px`
    }));
    useResizeObserver(selectionRef, resetSelectionWidth);
    useResizeObserver(calculatorRef, resetCalculatorWidth);
    useResizeObserver(menuRef, updateTooltip);
    useResizeObserver(wrapperRef, updateTooltip);
    useResizeObserver(tagMenuRef, updateTagTooltip);
    useResizeObserver(collapseItemRef, resetCollapseItemWidth);
    vue.onMounted(() => {
      setSelected();
    });
    return {
      inputId,
      contentId,
      nsSelect,
      nsInput,
      states,
      isFocused,
      expanded,
      optionsArray,
      hoverOption,
      selectSize,
      filteredOptionsCount,
      resetCalculatorWidth,
      updateTooltip,
      updateTagTooltip,
      debouncedOnInputChange,
      onInput,
      deletePrevTag,
      deleteTag,
      deleteSelected,
      handleOptionSelect,
      scrollToOption,
      hasModelValue,
      shouldShowPlaceholder,
      currentPlaceholder,
      mouseEnterEventName,
      showClose,
      iconComponent,
      iconReverse,
      validateState,
      validateIcon,
      showNewOption,
      updateOptions: updateOptions2,
      collapseTagSize,
      setSelected,
      selectDisabled,
      emptyText,
      handleCompositionStart,
      handleCompositionUpdate,
      handleCompositionEnd,
      onOptionCreate,
      onOptionDestroy,
      handleMenuEnter,
      focus,
      blur,
      handleClearClick,
      handleClickOutside,
      handleEsc,
      toggleMenu,
      selectOption,
      getValueKey,
      navigateOptions,
      dropdownMenuVisible,
      showTagList,
      collapseTagList,
      tagStyle,
      collapseTagStyle,
      inputStyle,
      popperRef,
      inputRef,
      tooltipRef,
      tagTooltipRef,
      calculatorRef,
      prefixRef,
      suffixRef,
      selectRef,
      wrapperRef,
      selectionRef,
      scrollbarRef,
      menuRef,
      tagMenuRef,
      collapseItemRef
    };
  };
  var ElOptions = vue.defineComponent({
    name: "ElOptions",
    setup(_2, { slots }) {
      const select = vue.inject(selectKey);
      let cachedValueList = [];
      return () => {
        var _a2, _b;
        const children = (_a2 = slots.default) == null ? void 0 : _a2.call(slots);
        const valueList = [];
        function filterOptions(children2) {
          if (!shared.isArray(children2))
            return;
          children2.forEach((item) => {
            var _a22, _b2, _c, _d;
            const name = (_a22 = (item == null ? void 0 : item.type) || {}) == null ? void 0 : _a22.name;
            if (name === "ElOptionGroup") {
              filterOptions(!shared.isString(item.children) && !shared.isArray(item.children) && shared.isFunction((_b2 = item.children) == null ? void 0 : _b2.default) ? (_c = item.children) == null ? void 0 : _c.default() : item.children);
            } else if (name === "ElOption") {
              valueList.push((_d = item.props) == null ? void 0 : _d.value);
            } else if (shared.isArray(item.children)) {
              filterOptions(item.children);
            }
          });
        }
        if (children.length) {
          filterOptions((_b = children[0]) == null ? void 0 : _b.children);
        }
        if (!isEqual$1(valueList, cachedValueList)) {
          cachedValueList = valueList;
          if (select) {
            select.states.optionValues = valueList;
          }
        }
        return children;
      };
    }
  });
  const SelectProps$1 = buildProps({
    name: String,
    id: String,
    modelValue: {
      type: [Array, String, Number, Boolean, Object],
      default: void 0
    },
    autocomplete: {
      type: String,
      default: "off"
    },
    automaticDropdown: Boolean,
    size: useSizeProp,
    effect: {
      type: definePropType(String),
      default: "light"
    },
    disabled: Boolean,
    clearable: Boolean,
    filterable: Boolean,
    allowCreate: Boolean,
    loading: Boolean,
    popperClass: {
      type: String,
      default: ""
    },
    popperOptions: {
      type: definePropType(Object),
      default: () => ({})
    },
    remote: Boolean,
    loadingText: String,
    noMatchText: String,
    noDataText: String,
    remoteMethod: Function,
    filterMethod: Function,
    multiple: Boolean,
    multipleLimit: {
      type: Number,
      default: 0
    },
    placeholder: {
      type: String
    },
    defaultFirstOption: Boolean,
    reserveKeyword: {
      type: Boolean,
      default: true
    },
    valueKey: {
      type: String,
      default: "value"
    },
    collapseTags: Boolean,
    collapseTagsTooltip: Boolean,
    maxCollapseTags: {
      type: Number,
      default: 1
    },
    teleported: useTooltipContentProps.teleported,
    persistent: {
      type: Boolean,
      default: true
    },
    clearIcon: {
      type: iconPropType,
      default: circle_close_default
    },
    fitInputWidth: Boolean,
    suffixIcon: {
      type: iconPropType,
      default: arrow_down_default
    },
    tagType: { ...tagProps.type, default: "info" },
    tagEffect: { ...tagProps.effect, default: "light" },
    validateEvent: {
      type: Boolean,
      default: true
    },
    remoteShowSuffix: Boolean,
    placement: {
      type: definePropType(String),
      values: Ee,
      default: "bottom-start"
    },
    fallbackPlacements: {
      type: definePropType(Array),
      default: ["bottom-start", "top-start", "right", "left"]
    },
    appendTo: String,
    ...useEmptyValuesProps,
    ...useAriaProps(["ariaLabel"])
  });
  const COMPONENT_NAME$9 = "ElSelect";
  const _sfc_main$Z = vue.defineComponent({
    name: COMPONENT_NAME$9,
    componentName: COMPONENT_NAME$9,
    components: {
      ElSelectMenu: ElSelectMenu$1,
      ElOption: Option,
      ElOptions,
      ElTag,
      ElScrollbar,
      ElTooltip,
      ElIcon
    },
    directives: { ClickOutside },
    props: SelectProps$1,
    emits: [
      UPDATE_MODEL_EVENT,
      CHANGE_EVENT,
      "remove-tag",
      "clear",
      "visible-change",
      "focus",
      "blur"
    ],
    setup(props2, { emit }) {
      const modelValue = vue.computed(() => {
        const { modelValue: rawModelValue, multiple } = props2;
        const fallback = multiple ? [] : void 0;
        if (shared.isArray(rawModelValue)) {
          return multiple ? rawModelValue : fallback;
        }
        return multiple ? fallback : rawModelValue;
      });
      const _props = vue.reactive({
        ...vue.toRefs(props2),
        modelValue
      });
      const API = useSelect$2(_props, emit);
      vue.provide(selectKey, vue.reactive({
        props: _props,
        states: API.states,
        optionsArray: API.optionsArray,
        handleOptionSelect: API.handleOptionSelect,
        onOptionCreate: API.onOptionCreate,
        onOptionDestroy: API.onOptionDestroy,
        selectRef: API.selectRef,
        setSelected: API.setSelected
      }));
      const selectedLabel = vue.computed(() => {
        if (!props2.multiple) {
          return API.states.selectedLabel;
        }
        return API.states.selected.map((i2) => i2.currentLabel);
      });
      return {
        ...API,
        modelValue,
        selectedLabel
      };
    }
  });
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_tag = vue.resolveComponent("el-tag");
    const _component_el_tooltip = vue.resolveComponent("el-tooltip");
    const _component_el_icon = vue.resolveComponent("el-icon");
    const _component_el_option = vue.resolveComponent("el-option");
    const _component_el_options = vue.resolveComponent("el-options");
    const _component_el_scrollbar = vue.resolveComponent("el-scrollbar");
    const _component_el_select_menu = vue.resolveComponent("el-select-menu");
    const _directive_click_outside = vue.resolveDirective("click-outside");
    return vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
      ref: "selectRef",
      class: vue.normalizeClass([_ctx.nsSelect.b(), _ctx.nsSelect.m(_ctx.selectSize)]),
      [vue.toHandlerKey(_ctx.mouseEnterEventName)]: ($event) => _ctx.states.inputHovering = true,
      onMouseleave: ($event) => _ctx.states.inputHovering = false
    }, [
      vue.createVNode(_component_el_tooltip, {
        ref: "tooltipRef",
        visible: _ctx.dropdownMenuVisible,
        placement: _ctx.placement,
        teleported: _ctx.teleported,
        "popper-class": [_ctx.nsSelect.e("popper"), _ctx.popperClass],
        "popper-options": _ctx.popperOptions,
        "fallback-placements": _ctx.fallbackPlacements,
        effect: _ctx.effect,
        pure: "",
        trigger: "click",
        transition: `${_ctx.nsSelect.namespace.value}-zoom-in-top`,
        "stop-popper-mouse-event": false,
        "gpu-acceleration": false,
        persistent: _ctx.persistent,
        "append-to": _ctx.appendTo,
        onBeforeShow: _ctx.handleMenuEnter,
        onHide: ($event) => _ctx.states.isBeforeHide = false
      }, {
        default: vue.withCtx(() => {
          var _a2;
          return [
            vue.createElementVNode("div", {
              ref: "wrapperRef",
              class: vue.normalizeClass([
                _ctx.nsSelect.e("wrapper"),
                _ctx.nsSelect.is("focused", _ctx.isFocused),
                _ctx.nsSelect.is("hovering", _ctx.states.inputHovering),
                _ctx.nsSelect.is("filterable", _ctx.filterable),
                _ctx.nsSelect.is("disabled", _ctx.selectDisabled)
              ]),
              onClick: vue.withModifiers(_ctx.toggleMenu, ["prevent"])
            }, [
              _ctx.$slots.prefix ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                ref: "prefixRef",
                class: vue.normalizeClass(_ctx.nsSelect.e("prefix"))
              }, [
                vue.renderSlot(_ctx.$slots, "prefix")
              ], 2)) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("div", {
                ref: "selectionRef",
                class: vue.normalizeClass([
                  _ctx.nsSelect.e("selection"),
                  _ctx.nsSelect.is("near", _ctx.multiple && !_ctx.$slots.prefix && !!_ctx.states.selected.length)
                ])
              }, [
                _ctx.multiple ? vue.renderSlot(_ctx.$slots, "tag", { key: 0 }, () => [
                  (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.showTagList, (item) => {
                    return vue.openBlock(), vue.createElementBlock("div", {
                      key: _ctx.getValueKey(item),
                      class: vue.normalizeClass(_ctx.nsSelect.e("selected-item"))
                    }, [
                      vue.createVNode(_component_el_tag, {
                        closable: !_ctx.selectDisabled && !item.isDisabled,
                        size: _ctx.collapseTagSize,
                        type: _ctx.tagType,
                        effect: _ctx.tagEffect,
                        "disable-transitions": "",
                        style: vue.normalizeStyle(_ctx.tagStyle),
                        onClose: ($event) => _ctx.deleteTag($event, item)
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("span", {
                            class: vue.normalizeClass(_ctx.nsSelect.e("tags-text"))
                          }, [
                            vue.renderSlot(_ctx.$slots, "label", {
                              label: item.currentLabel,
                              value: item.value
                            }, () => [
                              vue.createTextVNode(vue.toDisplayString(item.currentLabel), 1)
                            ])
                          ], 2)
                        ]),
                        _: 2
                      }, 1032, ["closable", "size", "type", "effect", "style", "onClose"])
                    ], 2);
                  }), 128)),
                  _ctx.collapseTags && _ctx.states.selected.length > _ctx.maxCollapseTags ? (vue.openBlock(), vue.createBlock(_component_el_tooltip, {
                    key: 0,
                    ref: "tagTooltipRef",
                    disabled: _ctx.dropdownMenuVisible || !_ctx.collapseTagsTooltip,
                    "fallback-placements": ["bottom", "top", "right", "left"],
                    effect: _ctx.effect,
                    placement: "bottom",
                    teleported: _ctx.teleported
                  }, {
                    default: vue.withCtx(() => [
                      vue.createElementVNode("div", {
                        ref: "collapseItemRef",
                        class: vue.normalizeClass(_ctx.nsSelect.e("selected-item"))
                      }, [
                        vue.createVNode(_component_el_tag, {
                          closable: false,
                          size: _ctx.collapseTagSize,
                          type: _ctx.tagType,
                          effect: _ctx.tagEffect,
                          "disable-transitions": "",
                          style: vue.normalizeStyle(_ctx.collapseTagStyle)
                        }, {
                          default: vue.withCtx(() => [
                            vue.createElementVNode("span", {
                              class: vue.normalizeClass(_ctx.nsSelect.e("tags-text"))
                            }, " + " + vue.toDisplayString(_ctx.states.selected.length - _ctx.maxCollapseTags), 3)
                          ]),
                          _: 1
                        }, 8, ["size", "type", "effect", "style"])
                      ], 2)
                    ]),
                    content: vue.withCtx(() => [
                      vue.createElementVNode("div", {
                        ref: "tagMenuRef",
                        class: vue.normalizeClass(_ctx.nsSelect.e("selection"))
                      }, [
                        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.collapseTagList, (item) => {
                          return vue.openBlock(), vue.createElementBlock("div", {
                            key: _ctx.getValueKey(item),
                            class: vue.normalizeClass(_ctx.nsSelect.e("selected-item"))
                          }, [
                            vue.createVNode(_component_el_tag, {
                              class: "in-tooltip",
                              closable: !_ctx.selectDisabled && !item.isDisabled,
                              size: _ctx.collapseTagSize,
                              type: _ctx.tagType,
                              effect: _ctx.tagEffect,
                              "disable-transitions": "",
                              onClose: ($event) => _ctx.deleteTag($event, item)
                            }, {
                              default: vue.withCtx(() => [
                                vue.createElementVNode("span", {
                                  class: vue.normalizeClass(_ctx.nsSelect.e("tags-text"))
                                }, [
                                  vue.renderSlot(_ctx.$slots, "label", {
                                    label: item.currentLabel,
                                    value: item.value
                                  }, () => [
                                    vue.createTextVNode(vue.toDisplayString(item.currentLabel), 1)
                                  ])
                                ], 2)
                              ]),
                              _: 2
                            }, 1032, ["closable", "size", "type", "effect", "onClose"])
                          ], 2);
                        }), 128))
                      ], 2)
                    ]),
                    _: 3
                  }, 8, ["disabled", "effect", "teleported"])) : vue.createCommentVNode("v-if", true)
                ]) : vue.createCommentVNode("v-if", true),
                !_ctx.selectDisabled ? (vue.openBlock(), vue.createElementBlock("div", {
                  key: 1,
                  class: vue.normalizeClass([
                    _ctx.nsSelect.e("selected-item"),
                    _ctx.nsSelect.e("input-wrapper"),
                    _ctx.nsSelect.is("hidden", !_ctx.filterable)
                  ])
                }, [
                  vue.withDirectives(vue.createElementVNode("input", {
                    id: _ctx.inputId,
                    ref: "inputRef",
                    "onUpdate:modelValue": ($event) => _ctx.states.inputValue = $event,
                    type: "text",
                    name: _ctx.name,
                    class: vue.normalizeClass([_ctx.nsSelect.e("input"), _ctx.nsSelect.is(_ctx.selectSize)]),
                    disabled: _ctx.selectDisabled,
                    autocomplete: _ctx.autocomplete,
                    style: vue.normalizeStyle(_ctx.inputStyle),
                    role: "combobox",
                    readonly: !_ctx.filterable,
                    spellcheck: "false",
                    "aria-activedescendant": ((_a2 = _ctx.hoverOption) == null ? void 0 : _a2.id) || "",
                    "aria-controls": _ctx.contentId,
                    "aria-expanded": _ctx.dropdownMenuVisible,
                    "aria-label": _ctx.ariaLabel,
                    "aria-autocomplete": "none",
                    "aria-haspopup": "listbox",
                    onKeydown: [
                      vue.withKeys(vue.withModifiers(($event) => _ctx.navigateOptions("next"), ["stop", "prevent"]), ["down"]),
                      vue.withKeys(vue.withModifiers(($event) => _ctx.navigateOptions("prev"), ["stop", "prevent"]), ["up"]),
                      vue.withKeys(vue.withModifiers(_ctx.handleEsc, ["stop", "prevent"]), ["esc"]),
                      vue.withKeys(vue.withModifiers(_ctx.selectOption, ["stop", "prevent"]), ["enter"]),
                      vue.withKeys(vue.withModifiers(_ctx.deletePrevTag, ["stop"]), ["delete"])
                    ],
                    onCompositionstart: _ctx.handleCompositionStart,
                    onCompositionupdate: _ctx.handleCompositionUpdate,
                    onCompositionend: _ctx.handleCompositionEnd,
                    onInput: _ctx.onInput,
                    onClick: vue.withModifiers(_ctx.toggleMenu, ["stop"])
                  }, null, 46, ["id", "onUpdate:modelValue", "name", "disabled", "autocomplete", "readonly", "aria-activedescendant", "aria-controls", "aria-expanded", "aria-label", "onKeydown", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onInput", "onClick"]), [
                    [vue.vModelText, _ctx.states.inputValue]
                  ]),
                  _ctx.filterable ? (vue.openBlock(), vue.createElementBlock("span", {
                    key: 0,
                    ref: "calculatorRef",
                    "aria-hidden": "true",
                    class: vue.normalizeClass(_ctx.nsSelect.e("input-calculator")),
                    textContent: vue.toDisplayString(_ctx.states.inputValue)
                  }, null, 10, ["textContent"])) : vue.createCommentVNode("v-if", true)
                ], 2)) : vue.createCommentVNode("v-if", true),
                _ctx.shouldShowPlaceholder ? (vue.openBlock(), vue.createElementBlock("div", {
                  key: 2,
                  class: vue.normalizeClass([
                    _ctx.nsSelect.e("selected-item"),
                    _ctx.nsSelect.e("placeholder"),
                    _ctx.nsSelect.is("transparent", !_ctx.hasModelValue || _ctx.expanded && !_ctx.states.inputValue)
                  ])
                }, [
                  _ctx.hasModelValue ? vue.renderSlot(_ctx.$slots, "label", {
                    key: 0,
                    label: _ctx.currentPlaceholder,
                    value: _ctx.modelValue
                  }, () => [
                    vue.createElementVNode("span", null, vue.toDisplayString(_ctx.currentPlaceholder), 1)
                  ]) : (vue.openBlock(), vue.createElementBlock("span", { key: 1 }, vue.toDisplayString(_ctx.currentPlaceholder), 1))
                ], 2)) : vue.createCommentVNode("v-if", true)
              ], 2),
              vue.createElementVNode("div", {
                ref: "suffixRef",
                class: vue.normalizeClass(_ctx.nsSelect.e("suffix"))
              }, [
                _ctx.iconComponent && !_ctx.showClose ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                  key: 0,
                  class: vue.normalizeClass([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon"), _ctx.iconReverse])
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.iconComponent)))
                  ]),
                  _: 1
                }, 8, ["class"])) : vue.createCommentVNode("v-if", true),
                _ctx.showClose && _ctx.clearIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                  key: 1,
                  class: vue.normalizeClass([
                    _ctx.nsSelect.e("caret"),
                    _ctx.nsSelect.e("icon"),
                    _ctx.nsSelect.e("clear")
                  ]),
                  onClick: _ctx.handleClearClick
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.clearIcon)))
                  ]),
                  _: 1
                }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-if", true),
                _ctx.validateState && _ctx.validateIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                  key: 2,
                  class: vue.normalizeClass([_ctx.nsInput.e("icon"), _ctx.nsInput.e("validateIcon")])
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.validateIcon)))
                  ]),
                  _: 1
                }, 8, ["class"])) : vue.createCommentVNode("v-if", true)
              ], 2)
            ], 10, ["onClick"])
          ];
        }),
        content: vue.withCtx(() => [
          vue.createVNode(_component_el_select_menu, { ref: "menuRef" }, {
            default: vue.withCtx(() => [
              _ctx.$slots.header ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                class: vue.normalizeClass(_ctx.nsSelect.be("dropdown", "header")),
                onClick: vue.withModifiers(() => {
                }, ["stop"])
              }, [
                vue.renderSlot(_ctx.$slots, "header")
              ], 10, ["onClick"])) : vue.createCommentVNode("v-if", true),
              vue.withDirectives(vue.createVNode(_component_el_scrollbar, {
                id: _ctx.contentId,
                ref: "scrollbarRef",
                tag: "ul",
                "wrap-class": _ctx.nsSelect.be("dropdown", "wrap"),
                "view-class": _ctx.nsSelect.be("dropdown", "list"),
                class: vue.normalizeClass([_ctx.nsSelect.is("empty", _ctx.filteredOptionsCount === 0)]),
                role: "listbox",
                "aria-label": _ctx.ariaLabel,
                "aria-orientation": "vertical"
              }, {
                default: vue.withCtx(() => [
                  _ctx.showNewOption ? (vue.openBlock(), vue.createBlock(_component_el_option, {
                    key: 0,
                    value: _ctx.states.inputValue,
                    created: true
                  }, null, 8, ["value"])) : vue.createCommentVNode("v-if", true),
                  vue.createVNode(_component_el_options, null, {
                    default: vue.withCtx(() => [
                      vue.renderSlot(_ctx.$slots, "default")
                    ]),
                    _: 3
                  })
                ]),
                _: 3
              }, 8, ["id", "wrap-class", "view-class", "class", "aria-label"]), [
                [vue.vShow, _ctx.states.options.size > 0 && !_ctx.loading]
              ]),
              _ctx.$slots.loading && _ctx.loading ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 1,
                class: vue.normalizeClass(_ctx.nsSelect.be("dropdown", "loading"))
              }, [
                vue.renderSlot(_ctx.$slots, "loading")
              ], 2)) : _ctx.loading || _ctx.filteredOptionsCount === 0 ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 2,
                class: vue.normalizeClass(_ctx.nsSelect.be("dropdown", "empty"))
              }, [
                vue.renderSlot(_ctx.$slots, "empty", {}, () => [
                  vue.createElementVNode("span", null, vue.toDisplayString(_ctx.emptyText), 1)
                ])
              ], 2)) : vue.createCommentVNode("v-if", true),
              _ctx.$slots.footer ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 3,
                class: vue.normalizeClass(_ctx.nsSelect.be("dropdown", "footer")),
                onClick: vue.withModifiers(() => {
                }, ["stop"])
              }, [
                vue.renderSlot(_ctx.$slots, "footer")
              ], 10, ["onClick"])) : vue.createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 512)
        ]),
        _: 3
      }, 8, ["visible", "placement", "teleported", "popper-class", "popper-options", "fallback-placements", "effect", "transition", "persistent", "append-to", "onBeforeShow", "onHide"])
    ], 16, ["onMouseleave"])), [
      [_directive_click_outside, _ctx.handleClickOutside, _ctx.popperRef]
    ]);
  }
  var Select$1 = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["render", _sfc_render$9], ["__file", "select.vue"]]);
  const _sfc_main$Y = vue.defineComponent({
    name: "ElOptionGroup",
    componentName: "ElOptionGroup",
    props: {
      label: String,
      disabled: Boolean
    },
    setup(props2) {
      const ns2 = useNamespace("select");
      const groupRef = vue.ref(null);
      const instance = vue.getCurrentInstance();
      const children = vue.ref([]);
      vue.provide(selectGroupKey, vue.reactive({
        ...vue.toRefs(props2)
      }));
      const visible = vue.computed(() => children.value.some((option) => option.visible === true));
      const isOption = (node) => {
        var _a2, _b;
        return ((_a2 = node.type) == null ? void 0 : _a2.name) === "ElOption" && !!((_b = node.component) == null ? void 0 : _b.proxy);
      };
      const flattedChildren2 = (node) => {
        const Nodes = castArray$1(node);
        const children2 = [];
        Nodes.forEach((child) => {
          var _a2, _b;
          if (isOption(child)) {
            children2.push(child.component.proxy);
          } else if ((_a2 = child.children) == null ? void 0 : _a2.length) {
            children2.push(...flattedChildren2(child.children));
          } else if ((_b = child.component) == null ? void 0 : _b.subTree) {
            children2.push(...flattedChildren2(child.component.subTree));
          }
        });
        return children2;
      };
      const updateChildren = () => {
        children.value = flattedChildren2(instance.subTree);
      };
      vue.onMounted(() => {
        updateChildren();
      });
      useMutationObserver(groupRef, updateChildren, {
        attributes: true,
        subtree: true,
        childList: true
      });
      return {
        groupRef,
        visible,
        ns: ns2
      };
    }
  });
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.withDirectives((vue.openBlock(), vue.createElementBlock("ul", {
      ref: "groupRef",
      class: vue.normalizeClass(_ctx.ns.be("group", "wrap"))
    }, [
      vue.createElementVNode("li", {
        class: vue.normalizeClass(_ctx.ns.be("group", "title"))
      }, vue.toDisplayString(_ctx.label), 3),
      vue.createElementVNode("li", null, [
        vue.createElementVNode("ul", {
          class: vue.normalizeClass(_ctx.ns.b("group"))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2)
      ])
    ], 2)), [
      [vue.vShow, _ctx.visible]
    ]);
  }
  var OptionGroup = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["render", _sfc_render$8], ["__file", "option-group.vue"]]);
  const ElSelect = withInstall(Select$1, {
    Option,
    OptionGroup
  });
  const ElOption = withNoopInstall(Option);
  const ElOptionGroup = withNoopInstall(OptionGroup);
  const usePagination = () => vue.inject(elPaginationKey, {});
  const paginationSizesProps = buildProps({
    pageSize: {
      type: Number,
      required: true
    },
    pageSizes: {
      type: definePropType(Array),
      default: () => mutable([10, 20, 30, 40, 50, 100])
    },
    popperClass: {
      type: String
    },
    disabled: Boolean,
    teleported: Boolean,
    size: {
      type: String,
      values: componentSizes
    },
    appendSizeTo: String
  });
  const __default__$N = vue.defineComponent({
    name: "ElPaginationSizes"
  });
  const _sfc_main$X = /* @__PURE__ */ vue.defineComponent({
    ...__default__$N,
    props: paginationSizesProps,
    emits: ["page-size-change"],
    setup(__props, { emit }) {
      const props2 = __props;
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("pagination");
      const pagination = usePagination();
      const innerPageSize = vue.ref(props2.pageSize);
      vue.watch(() => props2.pageSizes, (newVal, oldVal) => {
        if (isEqual$1(newVal, oldVal))
          return;
        if (Array.isArray(newVal)) {
          const pageSize = newVal.includes(props2.pageSize) ? props2.pageSize : props2.pageSizes[0];
          emit("page-size-change", pageSize);
        }
      });
      vue.watch(() => props2.pageSize, (newVal) => {
        innerPageSize.value = newVal;
      });
      const innerPageSizes = vue.computed(() => props2.pageSizes);
      function handleChange(val) {
        var _a2;
        if (val !== innerPageSize.value) {
          innerPageSize.value = val;
          (_a2 = pagination.handleSizeChange) == null ? void 0 : _a2.call(pagination, Number(val));
        }
      }
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass(vue.unref(ns2).e("sizes"))
        }, [
          vue.createVNode(vue.unref(ElSelect), {
            "model-value": innerPageSize.value,
            disabled: _ctx.disabled,
            "popper-class": _ctx.popperClass,
            size: _ctx.size,
            teleported: _ctx.teleported,
            "validate-event": false,
            "append-to": _ctx.appendSizeTo,
            onChange: handleChange
          }, {
            default: vue.withCtx(() => [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(innerPageSizes), (item) => {
                return vue.openBlock(), vue.createBlock(vue.unref(ElOption), {
                  key: item,
                  value: item,
                  label: item + vue.unref(t2)("el.pagination.pagesize")
                }, null, 8, ["value", "label"]);
              }), 128))
            ]),
            _: 1
          }, 8, ["model-value", "disabled", "popper-class", "size", "teleported", "append-to"])
        ], 2);
      };
    }
  });
  var Sizes = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["__file", "sizes.vue"]]);
  const paginationJumperProps = buildProps({
    size: {
      type: String,
      values: componentSizes
    }
  });
  const __default__$M = vue.defineComponent({
    name: "ElPaginationJumper"
  });
  const _sfc_main$W = /* @__PURE__ */ vue.defineComponent({
    ...__default__$M,
    props: paginationJumperProps,
    setup(__props) {
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("pagination");
      const { pageCount, disabled, currentPage, changeEvent } = usePagination();
      const userInput = vue.ref();
      const innerValue = vue.computed(() => {
        var _a2;
        return (_a2 = userInput.value) != null ? _a2 : currentPage == null ? void 0 : currentPage.value;
      });
      function handleInput(val) {
        userInput.value = val ? +val : "";
      }
      function handleChange(val) {
        val = Math.trunc(+val);
        changeEvent == null ? void 0 : changeEvent(val);
        userInput.value = void 0;
      }
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass(vue.unref(ns2).e("jump")),
          disabled: vue.unref(disabled)
        }, [
          vue.createElementVNode("span", {
            class: vue.normalizeClass([vue.unref(ns2).e("goto")])
          }, vue.toDisplayString(vue.unref(t2)("el.pagination.goto")), 3),
          vue.createVNode(vue.unref(ElInput), {
            size: _ctx.size,
            class: vue.normalizeClass([vue.unref(ns2).e("editor"), vue.unref(ns2).is("in-pagination")]),
            min: 1,
            max: vue.unref(pageCount),
            disabled: vue.unref(disabled),
            "model-value": vue.unref(innerValue),
            "validate-event": false,
            "aria-label": vue.unref(t2)("el.pagination.page"),
            type: "number",
            "onUpdate:modelValue": handleInput,
            onChange: handleChange
          }, null, 8, ["size", "class", "max", "disabled", "model-value", "aria-label"]),
          vue.createElementVNode("span", {
            class: vue.normalizeClass([vue.unref(ns2).e("classifier")])
          }, vue.toDisplayString(vue.unref(t2)("el.pagination.pageClassifier")), 3)
        ], 10, ["disabled"]);
      };
    }
  });
  var Jumper = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["__file", "jumper.vue"]]);
  const paginationTotalProps = buildProps({
    total: {
      type: Number,
      default: 1e3
    }
  });
  const __default__$L = vue.defineComponent({
    name: "ElPaginationTotal"
  });
  const _sfc_main$V = /* @__PURE__ */ vue.defineComponent({
    ...__default__$L,
    props: paginationTotalProps,
    setup(__props) {
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("pagination");
      const { disabled } = usePagination();
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass(vue.unref(ns2).e("total")),
          disabled: vue.unref(disabled)
        }, vue.toDisplayString(vue.unref(t2)("el.pagination.total", {
          total: _ctx.total
        })), 11, ["disabled"]);
      };
    }
  });
  var Total = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["__file", "total.vue"]]);
  const paginationPagerProps = buildProps({
    currentPage: {
      type: Number,
      default: 1
    },
    pageCount: {
      type: Number,
      required: true
    },
    pagerCount: {
      type: Number,
      default: 7
    },
    disabled: Boolean
  });
  const __default__$K = vue.defineComponent({
    name: "ElPaginationPager"
  });
  const _sfc_main$U = /* @__PURE__ */ vue.defineComponent({
    ...__default__$K,
    props: paginationPagerProps,
    emits: ["change"],
    setup(__props, { emit }) {
      const props2 = __props;
      const nsPager = useNamespace("pager");
      const nsIcon = useNamespace("icon");
      const { t: t2 } = useLocale();
      const showPrevMore = vue.ref(false);
      const showNextMore = vue.ref(false);
      const quickPrevHover = vue.ref(false);
      const quickNextHover = vue.ref(false);
      const quickPrevFocus = vue.ref(false);
      const quickNextFocus = vue.ref(false);
      const pagers = vue.computed(() => {
        const pagerCount = props2.pagerCount;
        const halfPagerCount = (pagerCount - 1) / 2;
        const currentPage = Number(props2.currentPage);
        const pageCount = Number(props2.pageCount);
        let showPrevMore2 = false;
        let showNextMore2 = false;
        if (pageCount > pagerCount) {
          if (currentPage > pagerCount - halfPagerCount) {
            showPrevMore2 = true;
          }
          if (currentPage < pageCount - halfPagerCount) {
            showNextMore2 = true;
          }
        }
        const array = [];
        if (showPrevMore2 && !showNextMore2) {
          const startPage = pageCount - (pagerCount - 2);
          for (let i2 = startPage; i2 < pageCount; i2++) {
            array.push(i2);
          }
        } else if (!showPrevMore2 && showNextMore2) {
          for (let i2 = 2; i2 < pagerCount; i2++) {
            array.push(i2);
          }
        } else if (showPrevMore2 && showNextMore2) {
          const offset2 = Math.floor(pagerCount / 2) - 1;
          for (let i2 = currentPage - offset2; i2 <= currentPage + offset2; i2++) {
            array.push(i2);
          }
        } else {
          for (let i2 = 2; i2 < pageCount; i2++) {
            array.push(i2);
          }
        }
        return array;
      });
      const prevMoreKls = vue.computed(() => [
        "more",
        "btn-quickprev",
        nsIcon.b(),
        nsPager.is("disabled", props2.disabled)
      ]);
      const nextMoreKls = vue.computed(() => [
        "more",
        "btn-quicknext",
        nsIcon.b(),
        nsPager.is("disabled", props2.disabled)
      ]);
      const tabindex = vue.computed(() => props2.disabled ? -1 : 0);
      vue.watchEffect(() => {
        const halfPagerCount = (props2.pagerCount - 1) / 2;
        showPrevMore.value = false;
        showNextMore.value = false;
        if (props2.pageCount > props2.pagerCount) {
          if (props2.currentPage > props2.pagerCount - halfPagerCount) {
            showPrevMore.value = true;
          }
          if (props2.currentPage < props2.pageCount - halfPagerCount) {
            showNextMore.value = true;
          }
        }
      });
      function onMouseEnter(forward = false) {
        if (props2.disabled)
          return;
        if (forward) {
          quickPrevHover.value = true;
        } else {
          quickNextHover.value = true;
        }
      }
      function onFocus(forward = false) {
        if (forward) {
          quickPrevFocus.value = true;
        } else {
          quickNextFocus.value = true;
        }
      }
      function onEnter(e) {
        const target = e.target;
        if (target.tagName.toLowerCase() === "li" && Array.from(target.classList).includes("number")) {
          const newPage = Number(target.textContent);
          if (newPage !== props2.currentPage) {
            emit("change", newPage);
          }
        } else if (target.tagName.toLowerCase() === "li" && Array.from(target.classList).includes("more")) {
          onPagerClick(e);
        }
      }
      function onPagerClick(event) {
        const target = event.target;
        if (target.tagName.toLowerCase() === "ul" || props2.disabled) {
          return;
        }
        let newPage = Number(target.textContent);
        const pageCount = props2.pageCount;
        const currentPage = props2.currentPage;
        const pagerCountOffset = props2.pagerCount - 2;
        if (target.className.includes("more")) {
          if (target.className.includes("quickprev")) {
            newPage = currentPage - pagerCountOffset;
          } else if (target.className.includes("quicknext")) {
            newPage = currentPage + pagerCountOffset;
          }
        }
        if (!Number.isNaN(+newPage)) {
          if (newPage < 1) {
            newPage = 1;
          }
          if (newPage > pageCount) {
            newPage = pageCount;
          }
        }
        if (newPage !== currentPage) {
          emit("change", newPage);
        }
      }
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("ul", {
          class: vue.normalizeClass(vue.unref(nsPager).b()),
          onClick: onPagerClick,
          onKeyup: vue.withKeys(onEnter, ["enter"])
        }, [
          _ctx.pageCount > 0 ? (vue.openBlock(), vue.createElementBlock("li", {
            key: 0,
            class: vue.normalizeClass([[
              vue.unref(nsPager).is("active", _ctx.currentPage === 1),
              vue.unref(nsPager).is("disabled", _ctx.disabled)
            ], "number"]),
            "aria-current": _ctx.currentPage === 1,
            "aria-label": vue.unref(t2)("el.pagination.currentPage", { pager: 1 }),
            tabindex: vue.unref(tabindex)
          }, " 1 ", 10, ["aria-current", "aria-label", "tabindex"])) : vue.createCommentVNode("v-if", true),
          showPrevMore.value ? (vue.openBlock(), vue.createElementBlock("li", {
            key: 1,
            class: vue.normalizeClass(vue.unref(prevMoreKls)),
            tabindex: vue.unref(tabindex),
            "aria-label": vue.unref(t2)("el.pagination.prevPages", { pager: _ctx.pagerCount - 2 }),
            onMouseenter: ($event) => onMouseEnter(true),
            onMouseleave: ($event) => quickPrevHover.value = false,
            onFocus: ($event) => onFocus(true),
            onBlur: ($event) => quickPrevFocus.value = false
          }, [
            (quickPrevHover.value || quickPrevFocus.value) && !_ctx.disabled ? (vue.openBlock(), vue.createBlock(vue.unref(d_arrow_left_default), { key: 0 })) : (vue.openBlock(), vue.createBlock(vue.unref(more_filled_default), { key: 1 }))
          ], 42, ["tabindex", "aria-label", "onMouseenter", "onMouseleave", "onFocus", "onBlur"])) : vue.createCommentVNode("v-if", true),
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(pagers), (pager) => {
            return vue.openBlock(), vue.createElementBlock("li", {
              key: pager,
              class: vue.normalizeClass([[
                vue.unref(nsPager).is("active", _ctx.currentPage === pager),
                vue.unref(nsPager).is("disabled", _ctx.disabled)
              ], "number"]),
              "aria-current": _ctx.currentPage === pager,
              "aria-label": vue.unref(t2)("el.pagination.currentPage", { pager }),
              tabindex: vue.unref(tabindex)
            }, vue.toDisplayString(pager), 11, ["aria-current", "aria-label", "tabindex"]);
          }), 128)),
          showNextMore.value ? (vue.openBlock(), vue.createElementBlock("li", {
            key: 2,
            class: vue.normalizeClass(vue.unref(nextMoreKls)),
            tabindex: vue.unref(tabindex),
            "aria-label": vue.unref(t2)("el.pagination.nextPages", { pager: _ctx.pagerCount - 2 }),
            onMouseenter: ($event) => onMouseEnter(),
            onMouseleave: ($event) => quickNextHover.value = false,
            onFocus: ($event) => onFocus(),
            onBlur: ($event) => quickNextFocus.value = false
          }, [
            (quickNextHover.value || quickNextFocus.value) && !_ctx.disabled ? (vue.openBlock(), vue.createBlock(vue.unref(d_arrow_right_default), { key: 0 })) : (vue.openBlock(), vue.createBlock(vue.unref(more_filled_default), { key: 1 }))
          ], 42, ["tabindex", "aria-label", "onMouseenter", "onMouseleave", "onFocus", "onBlur"])) : vue.createCommentVNode("v-if", true),
          _ctx.pageCount > 1 ? (vue.openBlock(), vue.createElementBlock("li", {
            key: 3,
            class: vue.normalizeClass([[
              vue.unref(nsPager).is("active", _ctx.currentPage === _ctx.pageCount),
              vue.unref(nsPager).is("disabled", _ctx.disabled)
            ], "number"]),
            "aria-current": _ctx.currentPage === _ctx.pageCount,
            "aria-label": vue.unref(t2)("el.pagination.currentPage", { pager: _ctx.pageCount }),
            tabindex: vue.unref(tabindex)
          }, vue.toDisplayString(_ctx.pageCount), 11, ["aria-current", "aria-label", "tabindex"])) : vue.createCommentVNode("v-if", true)
        ], 42, ["onKeyup"]);
      };
    }
  });
  var Pager = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["__file", "pager.vue"]]);
  const isAbsent = (v2) => typeof v2 !== "number";
  const paginationProps = buildProps({
    pageSize: Number,
    defaultPageSize: Number,
    total: Number,
    pageCount: Number,
    pagerCount: {
      type: Number,
      validator: (value) => {
        return isNumber$2(value) && Math.trunc(value) === value && value > 4 && value < 22 && value % 2 === 1;
      },
      default: 7
    },
    currentPage: Number,
    defaultCurrentPage: Number,
    layout: {
      type: String,
      default: ["prev", "pager", "next", "jumper", "->", "total"].join(", ")
    },
    pageSizes: {
      type: definePropType(Array),
      default: () => mutable([10, 20, 30, 40, 50, 100])
    },
    popperClass: {
      type: String,
      default: ""
    },
    prevText: {
      type: String,
      default: ""
    },
    prevIcon: {
      type: iconPropType,
      default: () => arrow_left_default
    },
    nextText: {
      type: String,
      default: ""
    },
    nextIcon: {
      type: iconPropType,
      default: () => arrow_right_default
    },
    teleported: {
      type: Boolean,
      default: true
    },
    small: Boolean,
    size: useSizeProp,
    background: Boolean,
    disabled: Boolean,
    hideOnSinglePage: Boolean,
    appendSizeTo: String
  });
  const paginationEmits = {
    "update:current-page": (val) => isNumber$2(val),
    "update:page-size": (val) => isNumber$2(val),
    "size-change": (val) => isNumber$2(val),
    change: (currentPage, pageSize) => isNumber$2(currentPage) && isNumber$2(pageSize),
    "current-change": (val) => isNumber$2(val),
    "prev-click": (val) => isNumber$2(val),
    "next-click": (val) => isNumber$2(val)
  };
  const componentName = "ElPagination";
  var Pagination = vue.defineComponent({
    name: componentName,
    props: paginationProps,
    emits: paginationEmits,
    setup(props2, { emit, slots }) {
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("pagination");
      const vnodeProps = vue.getCurrentInstance().vnode.props || {};
      const _globalSize = useGlobalSize();
      const _size = vue.computed(() => {
        var _a2;
        return props2.small ? "small" : (_a2 = props2.size) != null ? _a2 : _globalSize.value;
      });
      useDeprecated({
        from: "small",
        replacement: "size",
        version: "3.0.0",
        scope: "el-pagination",
        ref: "https://element-plus.org/zh-CN/component/pagination.html"
      }, vue.computed(() => !!props2.small));
      const hasCurrentPageListener = "onUpdate:currentPage" in vnodeProps || "onUpdate:current-page" in vnodeProps || "onCurrentChange" in vnodeProps;
      const hasPageSizeListener = "onUpdate:pageSize" in vnodeProps || "onUpdate:page-size" in vnodeProps || "onSizeChange" in vnodeProps;
      const assertValidUsage = vue.computed(() => {
        if (isAbsent(props2.total) && isAbsent(props2.pageCount))
          return false;
        if (!isAbsent(props2.currentPage) && !hasCurrentPageListener)
          return false;
        if (props2.layout.includes("sizes")) {
          if (!isAbsent(props2.pageCount)) {
            if (!hasPageSizeListener)
              return false;
          } else if (!isAbsent(props2.total)) {
            if (!isAbsent(props2.pageSize)) {
              if (!hasPageSizeListener) {
                return false;
              }
            }
          }
        }
        return true;
      });
      const innerPageSize = vue.ref(isAbsent(props2.defaultPageSize) ? 10 : props2.defaultPageSize);
      const innerCurrentPage = vue.ref(isAbsent(props2.defaultCurrentPage) ? 1 : props2.defaultCurrentPage);
      const pageSizeBridge = vue.computed({
        get() {
          return isAbsent(props2.pageSize) ? innerPageSize.value : props2.pageSize;
        },
        set(v2) {
          if (isAbsent(props2.pageSize)) {
            innerPageSize.value = v2;
          }
          if (hasPageSizeListener) {
            emit("update:page-size", v2);
            emit("size-change", v2);
          }
        }
      });
      const pageCountBridge = vue.computed(() => {
        let pageCount = 0;
        if (!isAbsent(props2.pageCount)) {
          pageCount = props2.pageCount;
        } else if (!isAbsent(props2.total)) {
          pageCount = Math.max(1, Math.ceil(props2.total / pageSizeBridge.value));
        }
        return pageCount;
      });
      const currentPageBridge = vue.computed({
        get() {
          return isAbsent(props2.currentPage) ? innerCurrentPage.value : props2.currentPage;
        },
        set(v2) {
          let newCurrentPage = v2;
          if (v2 < 1) {
            newCurrentPage = 1;
          } else if (v2 > pageCountBridge.value) {
            newCurrentPage = pageCountBridge.value;
          }
          if (isAbsent(props2.currentPage)) {
            innerCurrentPage.value = newCurrentPage;
          }
          if (hasCurrentPageListener) {
            emit("update:current-page", newCurrentPage);
            emit("current-change", newCurrentPage);
          }
        }
      });
      vue.watch(pageCountBridge, (val) => {
        if (currentPageBridge.value > val)
          currentPageBridge.value = val;
      });
      vue.watch([currentPageBridge, pageSizeBridge], (value) => {
        emit("change", ...value);
      }, { flush: "post" });
      function handleCurrentChange2(val) {
        currentPageBridge.value = val;
      }
      function handleSizeChange(val) {
        pageSizeBridge.value = val;
        const newPageCount = pageCountBridge.value;
        if (currentPageBridge.value > newPageCount) {
          currentPageBridge.value = newPageCount;
        }
      }
      function prev() {
        if (props2.disabled)
          return;
        currentPageBridge.value -= 1;
        emit("prev-click", currentPageBridge.value);
      }
      function next() {
        if (props2.disabled)
          return;
        currentPageBridge.value += 1;
        emit("next-click", currentPageBridge.value);
      }
      function addClass2(element, cls) {
        if (element) {
          if (!element.props) {
            element.props = {};
          }
          element.props.class = [element.props.class, cls].join(" ");
        }
      }
      vue.provide(elPaginationKey, {
        pageCount: pageCountBridge,
        disabled: vue.computed(() => props2.disabled),
        currentPage: currentPageBridge,
        changeEvent: handleCurrentChange2,
        handleSizeChange
      });
      return () => {
        var _a2, _b;
        if (!assertValidUsage.value) {
          debugWarn(componentName, t2("el.pagination.deprecationWarning"));
          return null;
        }
        if (!props2.layout)
          return null;
        if (props2.hideOnSinglePage && pageCountBridge.value <= 1)
          return null;
        const rootChildren = [];
        const rightWrapperChildren = [];
        const rightWrapperRoot = vue.h("div", { class: ns2.e("rightwrapper") }, rightWrapperChildren);
        const TEMPLATE_MAP = {
          prev: vue.h(Prev, {
            disabled: props2.disabled,
            currentPage: currentPageBridge.value,
            prevText: props2.prevText,
            prevIcon: props2.prevIcon,
            onClick: prev
          }),
          jumper: vue.h(Jumper, {
            size: _size.value
          }),
          pager: vue.h(Pager, {
            currentPage: currentPageBridge.value,
            pageCount: pageCountBridge.value,
            pagerCount: props2.pagerCount,
            onChange: handleCurrentChange2,
            disabled: props2.disabled
          }),
          next: vue.h(Next, {
            disabled: props2.disabled,
            currentPage: currentPageBridge.value,
            pageCount: pageCountBridge.value,
            nextText: props2.nextText,
            nextIcon: props2.nextIcon,
            onClick: next
          }),
          sizes: vue.h(Sizes, {
            pageSize: pageSizeBridge.value,
            pageSizes: props2.pageSizes,
            popperClass: props2.popperClass,
            disabled: props2.disabled,
            teleported: props2.teleported,
            size: _size.value,
            appendSizeTo: props2.appendSizeTo
          }),
          slot: (_b = (_a2 = slots == null ? void 0 : slots.default) == null ? void 0 : _a2.call(slots)) != null ? _b : null,
          total: vue.h(Total, { total: isAbsent(props2.total) ? 0 : props2.total })
        };
        const components = props2.layout.split(",").map((item) => item.trim());
        let haveRightWrapper = false;
        components.forEach((c2) => {
          if (c2 === "->") {
            haveRightWrapper = true;
            return;
          }
          if (!haveRightWrapper) {
            rootChildren.push(TEMPLATE_MAP[c2]);
          } else {
            rightWrapperChildren.push(TEMPLATE_MAP[c2]);
          }
        });
        addClass2(rootChildren[0], ns2.is("first"));
        addClass2(rootChildren[rootChildren.length - 1], ns2.is("last"));
        if (haveRightWrapper && rightWrapperChildren.length > 0) {
          addClass2(rightWrapperChildren[0], ns2.is("first"));
          addClass2(rightWrapperChildren[rightWrapperChildren.length - 1], ns2.is("last"));
          rootChildren.push(rightWrapperRoot);
        }
        return vue.h("div", {
          class: [
            ns2.b(),
            ns2.is("background", props2.background),
            ns2.m(_size.value)
          ]
        }, rootChildren);
      };
    }
  });
  const ElPagination = withInstall(Pagination);
  const popconfirmProps = buildProps({
    title: String,
    confirmButtonText: String,
    cancelButtonText: String,
    confirmButtonType: {
      type: String,
      values: buttonTypes,
      default: "primary"
    },
    cancelButtonType: {
      type: String,
      values: buttonTypes,
      default: "text"
    },
    icon: {
      type: iconPropType,
      default: () => question_filled_default
    },
    iconColor: {
      type: String,
      default: "#f90"
    },
    hideIcon: {
      type: Boolean,
      default: false
    },
    hideAfter: {
      type: Number,
      default: 200
    },
    teleported: useTooltipContentProps.teleported,
    persistent: useTooltipContentProps.persistent,
    width: {
      type: [String, Number],
      default: 150
    }
  });
  const popconfirmEmits = {
    confirm: (e) => e instanceof MouseEvent,
    cancel: (e) => e instanceof MouseEvent
  };
  const __default__$J = vue.defineComponent({
    name: "ElPopconfirm"
  });
  const _sfc_main$T = /* @__PURE__ */ vue.defineComponent({
    ...__default__$J,
    props: popconfirmProps,
    emits: popconfirmEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("popconfirm");
      const tooltipRef = vue.ref();
      const hidePopper = () => {
        var _a2, _b;
        (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.onClose) == null ? void 0 : _b.call(_a2);
      };
      const style = vue.computed(() => {
        return {
          width: addUnit(props2.width)
        };
      });
      const confirm = (e) => {
        emit("confirm", e);
        hidePopper();
      };
      const cancel = (e) => {
        emit("cancel", e);
        hidePopper();
      };
      const finalConfirmButtonText = vue.computed(() => props2.confirmButtonText || t2("el.popconfirm.confirmButtonText"));
      const finalCancelButtonText = vue.computed(() => props2.cancelButtonText || t2("el.popconfirm.cancelButtonText"));
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElTooltip), vue.mergeProps({
          ref_key: "tooltipRef",
          ref: tooltipRef,
          trigger: "click",
          effect: "light"
        }, _ctx.$attrs, {
          "popper-class": `${vue.unref(ns2).namespace.value}-popover`,
          "popper-style": vue.unref(style),
          teleported: _ctx.teleported,
          "fallback-placements": ["bottom", "top", "right", "left"],
          "hide-after": _ctx.hideAfter,
          persistent: _ctx.persistent
        }), {
          content: vue.withCtx(() => [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).b())
            }, [
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).e("main"))
              }, [
                !_ctx.hideIcon && _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                  key: 0,
                  class: vue.normalizeClass(vue.unref(ns2).e("icon")),
                  style: vue.normalizeStyle({ color: _ctx.iconColor })
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
                  ]),
                  _: 1
                }, 8, ["class", "style"])) : vue.createCommentVNode("v-if", true),
                vue.createTextVNode(" " + vue.toDisplayString(_ctx.title), 1)
              ], 2),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).e("action"))
              }, [
                vue.renderSlot(_ctx.$slots, "actions", {
                  confirm,
                  cancel
                }, () => [
                  vue.createVNode(vue.unref(ElButton), {
                    size: "small",
                    type: _ctx.cancelButtonType === "text" ? "" : _ctx.cancelButtonType,
                    text: _ctx.cancelButtonType === "text",
                    onClick: cancel
                  }, {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(vue.toDisplayString(vue.unref(finalCancelButtonText)), 1)
                    ]),
                    _: 1
                  }, 8, ["type", "text"]),
                  vue.createVNode(vue.unref(ElButton), {
                    size: "small",
                    type: _ctx.confirmButtonType === "text" ? "" : _ctx.confirmButtonType,
                    text: _ctx.confirmButtonType === "text",
                    onClick: confirm
                  }, {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(vue.toDisplayString(vue.unref(finalConfirmButtonText)), 1)
                    ]),
                    _: 1
                  }, 8, ["type", "text"])
                ])
              ], 2)
            ], 2)
          ]),
          default: vue.withCtx(() => [
            _ctx.$slots.reference ? vue.renderSlot(_ctx.$slots, "reference", { key: 0 }) : vue.createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 16, ["popper-class", "popper-style", "teleported", "hide-after", "persistent"]);
      };
    }
  });
  var Popconfirm = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["__file", "popconfirm.vue"]]);
  const ElPopconfirm = withInstall(Popconfirm);
  const popoverProps = buildProps({
    trigger: useTooltipTriggerProps.trigger,
    placement: dropdownProps.placement,
    disabled: useTooltipTriggerProps.disabled,
    visible: useTooltipContentProps.visible,
    transition: useTooltipContentProps.transition,
    popperOptions: dropdownProps.popperOptions,
    tabindex: dropdownProps.tabindex,
    content: useTooltipContentProps.content,
    popperStyle: useTooltipContentProps.popperStyle,
    popperClass: useTooltipContentProps.popperClass,
    enterable: {
      ...useTooltipContentProps.enterable,
      default: true
    },
    effect: {
      ...useTooltipContentProps.effect,
      default: "light"
    },
    teleported: useTooltipContentProps.teleported,
    title: String,
    width: {
      type: [String, Number],
      default: 150
    },
    offset: {
      type: Number,
      default: void 0
    },
    showAfter: {
      type: Number,
      default: 0
    },
    hideAfter: {
      type: Number,
      default: 200
    },
    autoClose: {
      type: Number,
      default: 0
    },
    showArrow: {
      type: Boolean,
      default: true
    },
    persistent: {
      type: Boolean,
      default: true
    },
    "onUpdate:visible": {
      type: Function
    }
  });
  const popoverEmits = {
    "update:visible": (value) => isBoolean$1(value),
    "before-enter": () => true,
    "before-leave": () => true,
    "after-enter": () => true,
    "after-leave": () => true
  };
  const updateEventKeyRaw = `onUpdate:visible`;
  const __default__$I = vue.defineComponent({
    name: "ElPopover"
  });
  const _sfc_main$S = /* @__PURE__ */ vue.defineComponent({
    ...__default__$I,
    props: popoverProps,
    emits: popoverEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const onUpdateVisible = vue.computed(() => {
        return props2[updateEventKeyRaw];
      });
      const ns2 = useNamespace("popover");
      const tooltipRef = vue.ref();
      const popperRef = vue.computed(() => {
        var _a2;
        return (_a2 = vue.unref(tooltipRef)) == null ? void 0 : _a2.popperRef;
      });
      const style = vue.computed(() => {
        return [
          {
            width: addUnit(props2.width)
          },
          props2.popperStyle
        ];
      });
      const kls = vue.computed(() => {
        return [ns2.b(), props2.popperClass, { [ns2.m("plain")]: !!props2.content }];
      });
      const gpuAcceleration = vue.computed(() => {
        return props2.transition === `${ns2.namespace.value}-fade-in-linear`;
      });
      const hide = () => {
        var _a2;
        (_a2 = tooltipRef.value) == null ? void 0 : _a2.hide();
      };
      const beforeEnter = () => {
        emit("before-enter");
      };
      const beforeLeave = () => {
        emit("before-leave");
      };
      const afterEnter = () => {
        emit("after-enter");
      };
      const afterLeave = () => {
        emit("update:visible", false);
        emit("after-leave");
      };
      expose({
        popperRef,
        hide
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElTooltip), vue.mergeProps({
          ref_key: "tooltipRef",
          ref: tooltipRef
        }, _ctx.$attrs, {
          trigger: _ctx.trigger,
          placement: _ctx.placement,
          disabled: _ctx.disabled,
          visible: _ctx.visible,
          transition: _ctx.transition,
          "popper-options": _ctx.popperOptions,
          tabindex: _ctx.tabindex,
          content: _ctx.content,
          offset: _ctx.offset,
          "show-after": _ctx.showAfter,
          "hide-after": _ctx.hideAfter,
          "auto-close": _ctx.autoClose,
          "show-arrow": _ctx.showArrow,
          "aria-label": _ctx.title,
          effect: _ctx.effect,
          enterable: _ctx.enterable,
          "popper-class": vue.unref(kls),
          "popper-style": vue.unref(style),
          teleported: _ctx.teleported,
          persistent: _ctx.persistent,
          "gpu-acceleration": vue.unref(gpuAcceleration),
          "onUpdate:visible": vue.unref(onUpdateVisible),
          onBeforeShow: beforeEnter,
          onBeforeHide: beforeLeave,
          onShow: afterEnter,
          onHide: afterLeave
        }), {
          content: vue.withCtx(() => [
            _ctx.title ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ns2).e("title")),
              role: "title"
            }, vue.toDisplayString(_ctx.title), 3)) : vue.createCommentVNode("v-if", true),
            vue.renderSlot(_ctx.$slots, "default", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.content), 1)
            ])
          ]),
          default: vue.withCtx(() => [
            _ctx.$slots.reference ? vue.renderSlot(_ctx.$slots, "reference", { key: 0 }) : vue.createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 16, ["trigger", "placement", "disabled", "visible", "transition", "popper-options", "tabindex", "content", "offset", "show-after", "hide-after", "auto-close", "show-arrow", "aria-label", "effect", "enterable", "popper-class", "popper-style", "teleported", "persistent", "gpu-acceleration", "onUpdate:visible"]);
      };
    }
  });
  var Popover = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["__file", "popover.vue"]]);
  const attachEvents = (el, binding) => {
    const popperComponent = binding.arg || binding.value;
    const popover = popperComponent == null ? void 0 : popperComponent.popperRef;
    if (popover) {
      popover.triggerRef = el;
    }
  };
  var PopoverDirective = {
    mounted(el, binding) {
      attachEvents(el, binding);
    },
    updated(el, binding) {
      attachEvents(el, binding);
    }
  };
  const VPopover = "popover";
  const ElPopoverDirective = withInstallDirective(PopoverDirective, VPopover);
  const ElPopover = withInstall(Popover, {
    directive: ElPopoverDirective
  });
  const progressProps = buildProps({
    type: {
      type: String,
      default: "line",
      values: ["line", "circle", "dashboard"]
    },
    percentage: {
      type: Number,
      default: 0,
      validator: (val) => val >= 0 && val <= 100
    },
    status: {
      type: String,
      default: "",
      values: ["", "success", "exception", "warning"]
    },
    indeterminate: Boolean,
    duration: {
      type: Number,
      default: 3
    },
    strokeWidth: {
      type: Number,
      default: 6
    },
    strokeLinecap: {
      type: definePropType(String),
      default: "round"
    },
    textInside: Boolean,
    width: {
      type: Number,
      default: 126
    },
    showText: {
      type: Boolean,
      default: true
    },
    color: {
      type: definePropType([
        String,
        Array,
        Function
      ]),
      default: ""
    },
    striped: Boolean,
    stripedFlow: Boolean,
    format: {
      type: definePropType(Function),
      default: (percentage) => `${percentage}%`
    }
  });
  const __default__$H = vue.defineComponent({
    name: "ElProgress"
  });
  const _sfc_main$R = /* @__PURE__ */ vue.defineComponent({
    ...__default__$H,
    props: progressProps,
    setup(__props) {
      const props2 = __props;
      const STATUS_COLOR_MAP = {
        success: "#13ce66",
        exception: "#ff4949",
        warning: "#e6a23c",
        default: "#20a0ff"
      };
      const ns2 = useNamespace("progress");
      const barStyle = vue.computed(() => {
        const barStyle2 = {
          width: `${props2.percentage}%`,
          animationDuration: `${props2.duration}s`
        };
        const color = getCurrentColor(props2.percentage);
        if (color.includes("gradient")) {
          barStyle2.background = color;
        } else {
          barStyle2.backgroundColor = color;
        }
        return barStyle2;
      });
      const relativeStrokeWidth = vue.computed(() => (props2.strokeWidth / props2.width * 100).toFixed(1));
      const radius = vue.computed(() => {
        if (["circle", "dashboard"].includes(props2.type)) {
          return Number.parseInt(`${50 - Number.parseFloat(relativeStrokeWidth.value) / 2}`, 10);
        }
        return 0;
      });
      const trackPath = vue.computed(() => {
        const r2 = radius.value;
        const isDashboard = props2.type === "dashboard";
        return `
          M 50 50
          m 0 ${isDashboard ? "" : "-"}${r2}
          a ${r2} ${r2} 0 1 1 0 ${isDashboard ? "-" : ""}${r2 * 2}
          a ${r2} ${r2} 0 1 1 0 ${isDashboard ? "" : "-"}${r2 * 2}
          `;
      });
      const perimeter = vue.computed(() => 2 * Math.PI * radius.value);
      const rate = vue.computed(() => props2.type === "dashboard" ? 0.75 : 1);
      const strokeDashoffset = vue.computed(() => {
        const offset2 = -1 * perimeter.value * (1 - rate.value) / 2;
        return `${offset2}px`;
      });
      const trailPathStyle = vue.computed(() => ({
        strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,
        strokeDashoffset: strokeDashoffset.value
      }));
      const circlePathStyle = vue.computed(() => ({
        strokeDasharray: `${perimeter.value * rate.value * (props2.percentage / 100)}px, ${perimeter.value}px`,
        strokeDashoffset: strokeDashoffset.value,
        transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease, opacity ease 0.6s"
      }));
      const stroke = vue.computed(() => {
        let ret;
        if (props2.color) {
          ret = getCurrentColor(props2.percentage);
        } else {
          ret = STATUS_COLOR_MAP[props2.status] || STATUS_COLOR_MAP.default;
        }
        return ret;
      });
      const statusIcon = vue.computed(() => {
        if (props2.status === "warning") {
          return warning_filled_default;
        }
        if (props2.type === "line") {
          return props2.status === "success" ? circle_check_default : circle_close_default;
        } else {
          return props2.status === "success" ? check_default : close_default;
        }
      });
      const progressTextSize = vue.computed(() => {
        return props2.type === "line" ? 12 + props2.strokeWidth * 0.4 : props2.width * 0.111111 + 2;
      });
      const content = vue.computed(() => props2.format(props2.percentage));
      function getColors(color) {
        const span = 100 / color.length;
        const seriesColors = color.map((seriesColor, index) => {
          if (shared.isString(seriesColor)) {
            return {
              color: seriesColor,
              percentage: (index + 1) * span
            };
          }
          return seriesColor;
        });
        return seriesColors.sort((a2, b2) => a2.percentage - b2.percentage);
      }
      const getCurrentColor = (percentage) => {
        var _a2;
        const { color } = props2;
        if (shared.isFunction(color)) {
          return color(percentage);
        } else if (shared.isString(color)) {
          return color;
        } else {
          const colors = getColors(color);
          for (const color2 of colors) {
            if (color2.percentage > percentage)
              return color2.color;
          }
          return (_a2 = colors[colors.length - 1]) == null ? void 0 : _a2.color;
        }
      };
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([
            vue.unref(ns2).b(),
            vue.unref(ns2).m(_ctx.type),
            vue.unref(ns2).is(_ctx.status),
            {
              [vue.unref(ns2).m("without-text")]: !_ctx.showText,
              [vue.unref(ns2).m("text-inside")]: _ctx.textInside
            }
          ]),
          role: "progressbar",
          "aria-valuenow": _ctx.percentage,
          "aria-valuemin": "0",
          "aria-valuemax": "100"
        }, [
          _ctx.type === "line" ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).b("bar"))
          }, [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).be("bar", "outer")),
              style: vue.normalizeStyle({ height: `${_ctx.strokeWidth}px` })
            }, [
              vue.createElementVNode("div", {
                class: vue.normalizeClass([
                  vue.unref(ns2).be("bar", "inner"),
                  { [vue.unref(ns2).bem("bar", "inner", "indeterminate")]: _ctx.indeterminate },
                  { [vue.unref(ns2).bem("bar", "inner", "striped")]: _ctx.striped },
                  { [vue.unref(ns2).bem("bar", "inner", "striped-flow")]: _ctx.stripedFlow }
                ]),
                style: vue.normalizeStyle(vue.unref(barStyle))
              }, [
                (_ctx.showText || _ctx.$slots.default) && _ctx.textInside ? (vue.openBlock(), vue.createElementBlock("div", {
                  key: 0,
                  class: vue.normalizeClass(vue.unref(ns2).be("bar", "innerText"))
                }, [
                  vue.renderSlot(_ctx.$slots, "default", { percentage: _ctx.percentage }, () => [
                    vue.createElementVNode("span", null, vue.toDisplayString(vue.unref(content)), 1)
                  ])
                ], 2)) : vue.createCommentVNode("v-if", true)
              ], 6)
            ], 6)
          ], 2)) : (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns2).b("circle")),
            style: vue.normalizeStyle({ height: `${_ctx.width}px`, width: `${_ctx.width}px` })
          }, [
            (vue.openBlock(), vue.createElementBlock("svg", { viewBox: "0 0 100 100" }, [
              vue.createElementVNode("path", {
                class: vue.normalizeClass(vue.unref(ns2).be("circle", "track")),
                d: vue.unref(trackPath),
                stroke: `var(${vue.unref(ns2).cssVarName("fill-color-light")}, #e5e9f2)`,
                "stroke-linecap": _ctx.strokeLinecap,
                "stroke-width": vue.unref(relativeStrokeWidth),
                fill: "none",
                style: vue.normalizeStyle(vue.unref(trailPathStyle))
              }, null, 14, ["d", "stroke", "stroke-linecap", "stroke-width"]),
              vue.createElementVNode("path", {
                class: vue.normalizeClass(vue.unref(ns2).be("circle", "path")),
                d: vue.unref(trackPath),
                stroke: vue.unref(stroke),
                fill: "none",
                opacity: _ctx.percentage ? 1 : 0,
                "stroke-linecap": _ctx.strokeLinecap,
                "stroke-width": vue.unref(relativeStrokeWidth),
                style: vue.normalizeStyle(vue.unref(circlePathStyle))
              }, null, 14, ["d", "stroke", "opacity", "stroke-linecap", "stroke-width"])
            ]))
          ], 6)),
          (_ctx.showText || _ctx.$slots.default) && !_ctx.textInside ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 2,
            class: vue.normalizeClass(vue.unref(ns2).e("text")),
            style: vue.normalizeStyle({ fontSize: `${vue.unref(progressTextSize)}px` })
          }, [
            vue.renderSlot(_ctx.$slots, "default", { percentage: _ctx.percentage }, () => [
              !_ctx.status ? (vue.openBlock(), vue.createElementBlock("span", { key: 0 }, vue.toDisplayString(vue.unref(content)), 1)) : (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 1 }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(statusIcon))))
                ]),
                _: 1
              }))
            ])
          ], 6)) : vue.createCommentVNode("v-if", true)
        ], 10, ["aria-valuenow"]);
      };
    }
  });
  var Progress = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["__file", "progress.vue"]]);
  const ElProgress = withInstall(Progress);
  const rateProps = buildProps({
    modelValue: {
      type: Number,
      default: 0
    },
    id: {
      type: String,
      default: void 0
    },
    lowThreshold: {
      type: Number,
      default: 2
    },
    highThreshold: {
      type: Number,
      default: 4
    },
    max: {
      type: Number,
      default: 5
    },
    colors: {
      type: definePropType([Array, Object]),
      default: () => mutable(["", "", ""])
    },
    voidColor: {
      type: String,
      default: ""
    },
    disabledVoidColor: {
      type: String,
      default: ""
    },
    icons: {
      type: definePropType([Array, Object]),
      default: () => [star_filled_default, star_filled_default, star_filled_default]
    },
    voidIcon: {
      type: iconPropType,
      default: () => star_default
    },
    disabledVoidIcon: {
      type: iconPropType,
      default: () => star_filled_default
    },
    disabled: Boolean,
    allowHalf: Boolean,
    showText: Boolean,
    showScore: Boolean,
    textColor: {
      type: String,
      default: ""
    },
    texts: {
      type: definePropType(Array),
      default: () => mutable([
        "Extremely bad",
        "Disappointed",
        "Fair",
        "Satisfied",
        "Surprise"
      ])
    },
    scoreTemplate: {
      type: String,
      default: "{value}"
    },
    size: useSizeProp,
    clearable: Boolean,
    ...useAriaProps(["ariaLabel"])
  });
  const rateEmits = {
    [CHANGE_EVENT]: (value) => isNumber$2(value),
    [UPDATE_MODEL_EVENT]: (value) => isNumber$2(value)
  };
  const __default__$G = vue.defineComponent({
    name: "ElRate"
  });
  const _sfc_main$Q = /* @__PURE__ */ vue.defineComponent({
    ...__default__$G,
    props: rateProps,
    emits: rateEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      function getValueFromMap(value, map2) {
        const isExcludedObject = (val) => shared.isObject(val);
        const matchedKeys = Object.keys(map2).map((key) => +key).filter((key) => {
          const val = map2[key];
          const excluded = isExcludedObject(val) ? val.excluded : false;
          return excluded ? value < key : value <= key;
        }).sort((a2, b2) => a2 - b2);
        const matchedValue = map2[matchedKeys[0]];
        return isExcludedObject(matchedValue) && matchedValue.value || matchedValue;
      }
      const formContext = vue.inject(formContextKey, void 0);
      const formItemContext = vue.inject(formItemContextKey, void 0);
      const rateSize = useFormSize();
      const ns2 = useNamespace("rate");
      const { inputId, isLabeledByFormItem } = useFormItemInputId(props2, {
        formItemContext
      });
      const currentValue = vue.ref(props2.modelValue);
      const hoverIndex = vue.ref(-1);
      const pointerAtLeftHalf = vue.ref(true);
      const rateClasses = vue.computed(() => [ns2.b(), ns2.m(rateSize.value)]);
      const rateDisabled = vue.computed(() => props2.disabled || (formContext == null ? void 0 : formContext.disabled));
      const rateStyles = vue.computed(() => {
        return ns2.cssVarBlock({
          "void-color": props2.voidColor,
          "disabled-void-color": props2.disabledVoidColor,
          "fill-color": activeColor.value
        });
      });
      const text = vue.computed(() => {
        let result = "";
        if (props2.showScore) {
          result = props2.scoreTemplate.replace(/\{\s*value\s*\}/, rateDisabled.value ? `${props2.modelValue}` : `${currentValue.value}`);
        } else if (props2.showText) {
          result = props2.texts[Math.ceil(currentValue.value) - 1];
        }
        return result;
      });
      const valueDecimal = vue.computed(() => props2.modelValue * 100 - Math.floor(props2.modelValue) * 100);
      const colorMap = vue.computed(() => shared.isArray(props2.colors) ? {
        [props2.lowThreshold]: props2.colors[0],
        [props2.highThreshold]: { value: props2.colors[1], excluded: true },
        [props2.max]: props2.colors[2]
      } : props2.colors);
      const activeColor = vue.computed(() => {
        const color = getValueFromMap(currentValue.value, colorMap.value);
        return shared.isObject(color) ? "" : color;
      });
      const decimalStyle = vue.computed(() => {
        let width = "";
        if (rateDisabled.value) {
          width = `${valueDecimal.value}%`;
        } else if (props2.allowHalf) {
          width = "50%";
        }
        return {
          color: activeColor.value,
          width
        };
      });
      const componentMap = vue.computed(() => {
        let icons = shared.isArray(props2.icons) ? [...props2.icons] : { ...props2.icons };
        icons = vue.markRaw(icons);
        return shared.isArray(icons) ? {
          [props2.lowThreshold]: icons[0],
          [props2.highThreshold]: {
            value: icons[1],
            excluded: true
          },
          [props2.max]: icons[2]
        } : icons;
      });
      const decimalIconComponent = vue.computed(() => getValueFromMap(props2.modelValue, componentMap.value));
      const voidComponent = vue.computed(() => rateDisabled.value ? shared.isString(props2.disabledVoidIcon) ? props2.disabledVoidIcon : vue.markRaw(props2.disabledVoidIcon) : shared.isString(props2.voidIcon) ? props2.voidIcon : vue.markRaw(props2.voidIcon));
      const activeComponent = vue.computed(() => getValueFromMap(currentValue.value, componentMap.value));
      function showDecimalIcon(item) {
        const showWhenDisabled = rateDisabled.value && valueDecimal.value > 0 && item - 1 < props2.modelValue && item > props2.modelValue;
        const showWhenAllowHalf = props2.allowHalf && pointerAtLeftHalf.value && item - 0.5 <= currentValue.value && item > currentValue.value;
        return showWhenDisabled || showWhenAllowHalf;
      }
      function emitValue(value) {
        if (props2.clearable && value === props2.modelValue) {
          value = 0;
        }
        emit(UPDATE_MODEL_EVENT, value);
        if (props2.modelValue !== value) {
          emit("change", value);
        }
      }
      function selectValue(value) {
        if (rateDisabled.value) {
          return;
        }
        if (props2.allowHalf && pointerAtLeftHalf.value) {
          emitValue(currentValue.value);
        } else {
          emitValue(value);
        }
      }
      function handleKey(e) {
        if (rateDisabled.value) {
          return;
        }
        let _currentValue = currentValue.value;
        const code = e.code;
        if (code === EVENT_CODE.up || code === EVENT_CODE.right) {
          if (props2.allowHalf) {
            _currentValue += 0.5;
          } else {
            _currentValue += 1;
          }
          e.stopPropagation();
          e.preventDefault();
        } else if (code === EVENT_CODE.left || code === EVENT_CODE.down) {
          if (props2.allowHalf) {
            _currentValue -= 0.5;
          } else {
            _currentValue -= 1;
          }
          e.stopPropagation();
          e.preventDefault();
        }
        _currentValue = _currentValue < 0 ? 0 : _currentValue;
        _currentValue = _currentValue > props2.max ? props2.max : _currentValue;
        emit(UPDATE_MODEL_EVENT, _currentValue);
        emit("change", _currentValue);
        return _currentValue;
      }
      function setCurrentValue(value, event) {
        if (rateDisabled.value) {
          return;
        }
        if (props2.allowHalf && event) {
          let target = event.target;
          if (hasClass(target, ns2.e("item"))) {
            target = target.querySelector(`.${ns2.e("icon")}`);
          }
          if (target.clientWidth === 0 || hasClass(target, ns2.e("decimal"))) {
            target = target.parentNode;
          }
          pointerAtLeftHalf.value = event.offsetX * 2 <= target.clientWidth;
          currentValue.value = pointerAtLeftHalf.value ? value - 0.5 : value;
        } else {
          currentValue.value = value;
        }
        hoverIndex.value = value;
      }
      function resetCurrentValue() {
        if (rateDisabled.value) {
          return;
        }
        if (props2.allowHalf) {
          pointerAtLeftHalf.value = props2.modelValue !== Math.floor(props2.modelValue);
        }
        currentValue.value = props2.modelValue;
        hoverIndex.value = -1;
      }
      vue.watch(() => props2.modelValue, (val) => {
        currentValue.value = val;
        pointerAtLeftHalf.value = props2.modelValue !== Math.floor(props2.modelValue);
      });
      if (!props2.modelValue) {
        emit(UPDATE_MODEL_EVENT, 0);
      }
      expose({
        setCurrentValue,
        resetCurrentValue
      });
      return (_ctx, _cache) => {
        var _a2;
        return vue.openBlock(), vue.createElementBlock("div", {
          id: vue.unref(inputId),
          class: vue.normalizeClass([vue.unref(rateClasses), vue.unref(ns2).is("disabled", vue.unref(rateDisabled))]),
          role: "slider",
          "aria-label": !vue.unref(isLabeledByFormItem) ? _ctx.ariaLabel || "rating" : void 0,
          "aria-labelledby": vue.unref(isLabeledByFormItem) ? (_a2 = vue.unref(formItemContext)) == null ? void 0 : _a2.labelId : void 0,
          "aria-valuenow": currentValue.value,
          "aria-valuetext": vue.unref(text) || void 0,
          "aria-valuemin": "0",
          "aria-valuemax": _ctx.max,
          tabindex: "0",
          style: vue.normalizeStyle(vue.unref(rateStyles)),
          onKeydown: handleKey
        }, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.max, (item, key) => {
            return vue.openBlock(), vue.createElementBlock("span", {
              key,
              class: vue.normalizeClass(vue.unref(ns2).e("item")),
              onMousemove: ($event) => setCurrentValue(item, $event),
              onMouseleave: resetCurrentValue,
              onClick: ($event) => selectValue(item)
            }, [
              vue.createVNode(vue.unref(ElIcon), {
                class: vue.normalizeClass([
                  vue.unref(ns2).e("icon"),
                  { hover: hoverIndex.value === item },
                  vue.unref(ns2).is("active", item <= currentValue.value)
                ])
              }, {
                default: vue.withCtx(() => [
                  !showDecimalIcon(item) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                    vue.withDirectives((vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(activeComponent)), null, null, 512)), [
                      [vue.vShow, item <= currentValue.value]
                    ]),
                    vue.withDirectives((vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(voidComponent)), null, null, 512)), [
                      [vue.vShow, !(item <= currentValue.value)]
                    ])
                  ], 64)) : vue.createCommentVNode("v-if", true),
                  showDecimalIcon(item) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(voidComponent)), {
                      class: vue.normalizeClass([vue.unref(ns2).em("decimal", "box")])
                    }, null, 8, ["class"])),
                    vue.createVNode(vue.unref(ElIcon), {
                      style: vue.normalizeStyle(vue.unref(decimalStyle)),
                      class: vue.normalizeClass([vue.unref(ns2).e("icon"), vue.unref(ns2).e("decimal")])
                    }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(decimalIconComponent))))
                      ]),
                      _: 1
                    }, 8, ["style", "class"])
                  ], 64)) : vue.createCommentVNode("v-if", true)
                ]),
                _: 2
              }, 1032, ["class"])
            ], 42, ["onMousemove", "onClick"]);
          }), 128)),
          _ctx.showText || _ctx.showScore ? (vue.openBlock(), vue.createElementBlock("span", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("text")),
            style: vue.normalizeStyle({ color: _ctx.textColor })
          }, vue.toDisplayString(vue.unref(text)), 7)) : vue.createCommentVNode("v-if", true)
        ], 46, ["id", "aria-label", "aria-labelledby", "aria-valuenow", "aria-valuetext", "aria-valuemax"]);
      };
    }
  });
  var Rate = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["__file", "rate.vue"]]);
  const ElRate = withInstall(Rate);
  const IconMap = {
    success: "icon-success",
    warning: "icon-warning",
    error: "icon-error",
    info: "icon-info"
  };
  const IconComponentMap = {
    [IconMap.success]: circle_check_filled_default,
    [IconMap.warning]: warning_filled_default,
    [IconMap.error]: circle_close_filled_default,
    [IconMap.info]: info_filled_default
  };
  const resultProps = buildProps({
    title: {
      type: String,
      default: ""
    },
    subTitle: {
      type: String,
      default: ""
    },
    icon: {
      type: String,
      values: ["success", "warning", "info", "error"],
      default: "info"
    }
  });
  const __default__$F = vue.defineComponent({
    name: "ElResult"
  });
  const _sfc_main$P = /* @__PURE__ */ vue.defineComponent({
    ...__default__$F,
    props: resultProps,
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("result");
      const resultIcon = vue.computed(() => {
        const icon = props2.icon;
        const iconClass = icon && IconMap[icon] ? IconMap[icon] : "icon-info";
        const iconComponent = IconComponentMap[iconClass] || IconComponentMap["icon-info"];
        return {
          class: iconClass,
          component: iconComponent
        };
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns2).b())
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("icon"))
          }, [
            vue.renderSlot(_ctx.$slots, "icon", {}, () => [
              vue.unref(resultIcon).component ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(resultIcon).component), {
                key: 0,
                class: vue.normalizeClass(vue.unref(resultIcon).class)
              }, null, 8, ["class"])) : vue.createCommentVNode("v-if", true)
            ])
          ], 2),
          _ctx.title || _ctx.$slots.title ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("title"))
          }, [
            vue.renderSlot(_ctx.$slots, "title", {}, () => [
              vue.createElementVNode("p", null, vue.toDisplayString(_ctx.title), 1)
            ])
          ], 2)) : vue.createCommentVNode("v-if", true),
          _ctx.subTitle || _ctx.$slots["sub-title"] ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns2).e("subtitle"))
          }, [
            vue.renderSlot(_ctx.$slots, "sub-title", {}, () => [
              vue.createElementVNode("p", null, vue.toDisplayString(_ctx.subTitle), 1)
            ])
          ], 2)) : vue.createCommentVNode("v-if", true),
          _ctx.$slots.extra ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 2,
            class: vue.normalizeClass(vue.unref(ns2).e("extra"))
          }, [
            vue.renderSlot(_ctx.$slots, "extra")
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var Result = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["__file", "result.vue"]]);
  const ElResult = withInstall(Result);
  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === "number" && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i2 = 0; i2 < newInputs.length; i2++) {
      if (!isEqual(newInputs[i2], lastInputs[i2])) {
        return false;
      }
    }
    return true;
  }
  function memoizeOne(resultFn, isEqual2) {
    if (isEqual2 === void 0) {
      isEqual2 = areInputsEqual;
    }
    var cache2 = null;
    function memoized() {
      var newArgs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i];
      }
      if (cache2 && cache2.lastThis === this && isEqual2(newArgs, cache2.lastArgs)) {
        return cache2.lastResult;
      }
      var lastResult = resultFn.apply(this, newArgs);
      cache2 = {
        lastResult,
        lastArgs: newArgs,
        lastThis: this
      };
      return lastResult;
    }
    memoized.clear = function clear() {
      cache2 = null;
    };
    return memoized;
  }
  const useCache = () => {
    const vm = vue.getCurrentInstance();
    const props2 = vm.proxy.$props;
    return vue.computed(() => {
      const _getItemStyleCache = (_2, __, ___) => ({});
      return props2.perfMode ? memoize(_getItemStyleCache) : memoizeOne(_getItemStyleCache);
    });
  };
  const DEFAULT_DYNAMIC_LIST_ITEM_SIZE = 50;
  const ITEM_RENDER_EVT = "itemRendered";
  const SCROLL_EVT = "scroll";
  const FORWARD = "forward";
  const BACKWARD = "backward";
  const AUTO_ALIGNMENT = "auto";
  const SMART_ALIGNMENT = "smart";
  const START_ALIGNMENT = "start";
  const CENTERED_ALIGNMENT = "center";
  const END_ALIGNMENT = "end";
  const HORIZONTAL = "horizontal";
  const VERTICAL = "vertical";
  const LTR = "ltr";
  const RTL = "rtl";
  const RTL_OFFSET_NAG = "negative";
  const RTL_OFFSET_POS_ASC = "positive-ascending";
  const RTL_OFFSET_POS_DESC = "positive-descending";
  const ScrollbarDirKey = {
    [HORIZONTAL]: "left",
    [VERTICAL]: "top"
  };
  const SCROLLBAR_MIN_SIZE = 20;
  const LayoutKeys = {
    [HORIZONTAL]: "deltaX",
    [VERTICAL]: "deltaY"
  };
  const useWheel = ({ atEndEdge, atStartEdge, layout: layout2 }, onWheelDelta) => {
    let frameHandle;
    let offset2 = 0;
    const hasReachedEdge = (offset22) => {
      const edgeReached = offset22 < 0 && atStartEdge.value || offset22 > 0 && atEndEdge.value;
      return edgeReached;
    };
    const onWheel = (e) => {
      cAF(frameHandle);
      const newOffset = e[LayoutKeys[layout2.value]];
      if (hasReachedEdge(offset2) && hasReachedEdge(offset2 + newOffset))
        return;
      offset2 += newOffset;
      if (!isFirefox()) {
        e.preventDefault();
      }
      frameHandle = rAF(() => {
        onWheelDelta(offset2);
        offset2 = 0;
      });
    };
    return {
      hasReachedEdge,
      onWheel
    };
  };
  const itemSize$1 = buildProp({
    type: definePropType([Number, Function]),
    required: true
  });
  const estimatedItemSize = buildProp({
    type: Number
  });
  const cache = buildProp({
    type: Number,
    default: 2
  });
  const direction = buildProp({
    type: String,
    values: ["ltr", "rtl"],
    default: "ltr"
  });
  const initScrollOffset = buildProp({
    type: Number,
    default: 0
  });
  const total = buildProp({
    type: Number,
    required: true
  });
  const layout = buildProp({
    type: String,
    values: ["horizontal", "vertical"],
    default: VERTICAL
  });
  const virtualizedProps = buildProps({
    className: {
      type: String,
      default: ""
    },
    containerElement: {
      type: definePropType([String, Object]),
      default: "div"
    },
    data: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    direction,
    height: {
      type: [String, Number],
      required: true
    },
    innerElement: {
      type: [String, Object],
      default: "div"
    },
    style: {
      type: definePropType([Object, String, Array])
    },
    useIsScrolling: {
      type: Boolean,
      default: false
    },
    width: {
      type: [Number, String],
      required: false
    },
    perfMode: {
      type: Boolean,
      default: true
    },
    scrollbarAlwaysOn: {
      type: Boolean,
      default: false
    }
  });
  const virtualizedListProps = buildProps({
    cache,
    estimatedItemSize,
    layout,
    initScrollOffset,
    total,
    itemSize: itemSize$1,
    ...virtualizedProps
  });
  const scrollbarSize = {
    type: Number,
    default: 6
  };
  const startGap = { type: Number, default: 0 };
  const endGap = { type: Number, default: 2 };
  const virtualizedGridProps = buildProps({
    columnCache: cache,
    columnWidth: itemSize$1,
    estimatedColumnWidth: estimatedItemSize,
    estimatedRowHeight: estimatedItemSize,
    initScrollLeft: initScrollOffset,
    initScrollTop: initScrollOffset,
    itemKey: {
      type: definePropType(Function),
      default: ({
        columnIndex,
        rowIndex
      }) => `${rowIndex}:${columnIndex}`
    },
    rowCache: cache,
    rowHeight: itemSize$1,
    totalColumn: total,
    totalRow: total,
    hScrollbarSize: scrollbarSize,
    vScrollbarSize: scrollbarSize,
    scrollbarStartGap: startGap,
    scrollbarEndGap: endGap,
    role: String,
    ...virtualizedProps
  });
  const virtualizedScrollbarProps = buildProps({
    alwaysOn: Boolean,
    class: String,
    layout,
    total,
    ratio: {
      type: Number,
      required: true
    },
    clientSize: {
      type: Number,
      required: true
    },
    scrollFrom: {
      type: Number,
      required: true
    },
    scrollbarSize,
    startGap,
    endGap,
    visible: Boolean
  });
  const getScrollDir = (prev, cur) => prev < cur ? FORWARD : BACKWARD;
  const isHorizontal = (dir) => dir === LTR || dir === RTL || dir === HORIZONTAL;
  const isRTL = (dir) => dir === RTL;
  let cachedRTLResult = null;
  function getRTLOffsetType(recalculate = false) {
    if (cachedRTLResult === null || recalculate) {
      const outerDiv = document.createElement("div");
      const outerStyle = outerDiv.style;
      outerStyle.width = "50px";
      outerStyle.height = "50px";
      outerStyle.overflow = "scroll";
      outerStyle.direction = "rtl";
      const innerDiv = document.createElement("div");
      const innerStyle = innerDiv.style;
      innerStyle.width = "100px";
      innerStyle.height = "100px";
      outerDiv.appendChild(innerDiv);
      document.body.appendChild(outerDiv);
      if (outerDiv.scrollLeft > 0) {
        cachedRTLResult = RTL_OFFSET_POS_DESC;
      } else {
        outerDiv.scrollLeft = 1;
        if (outerDiv.scrollLeft === 0) {
          cachedRTLResult = RTL_OFFSET_NAG;
        } else {
          cachedRTLResult = RTL_OFFSET_POS_ASC;
        }
      }
      document.body.removeChild(outerDiv);
      return cachedRTLResult;
    }
    return cachedRTLResult;
  }
  function renderThumbStyle({ move, size, bar }, layout2) {
    const style = {};
    const translate2 = `translate${bar.axis}(${move}px)`;
    style[bar.size] = size;
    style.transform = translate2;
    style.msTransform = translate2;
    style.webkitTransform = translate2;
    if (layout2 === "horizontal") {
      style.height = "100%";
    } else {
      style.width = "100%";
    }
    return style;
  }
  const ScrollBar = vue.defineComponent({
    name: "ElVirtualScrollBar",
    props: virtualizedScrollbarProps,
    emits: ["scroll", "start-move", "stop-move"],
    setup(props2, { emit }) {
      const GAP2 = vue.computed(() => props2.startGap + props2.endGap);
      const nsVirtualScrollbar = useNamespace("virtual-scrollbar");
      const nsScrollbar = useNamespace("scrollbar");
      const trackRef = vue.ref();
      const thumbRef = vue.ref();
      let frameHandle = null;
      let onselectstartStore = null;
      const state2 = vue.reactive({
        isDragging: false,
        traveled: 0
      });
      const bar = vue.computed(() => BAR_MAP[props2.layout]);
      const trackSize = vue.computed(() => props2.clientSize - vue.unref(GAP2));
      const trackStyle = vue.computed(() => ({
        position: "absolute",
        width: `${HORIZONTAL === props2.layout ? trackSize.value : props2.scrollbarSize}px`,
        height: `${HORIZONTAL === props2.layout ? props2.scrollbarSize : trackSize.value}px`,
        [ScrollbarDirKey[props2.layout]]: "2px",
        right: "2px",
        bottom: "2px",
        borderRadius: "4px"
      }));
      const thumbSize = vue.computed(() => {
        const ratio = props2.ratio;
        const clientSize = props2.clientSize;
        if (ratio >= 100) {
          return Number.POSITIVE_INFINITY;
        }
        if (ratio >= 50) {
          return ratio * clientSize / 100;
        }
        const SCROLLBAR_MAX_SIZE = clientSize / 3;
        return Math.floor(Math.min(Math.max(ratio * clientSize, SCROLLBAR_MIN_SIZE), SCROLLBAR_MAX_SIZE));
      });
      const thumbStyle = vue.computed(() => {
        if (!Number.isFinite(thumbSize.value)) {
          return {
            display: "none"
          };
        }
        const thumb = `${thumbSize.value}px`;
        const style = renderThumbStyle({
          bar: bar.value,
          size: thumb,
          move: state2.traveled
        }, props2.layout);
        return style;
      });
      const totalSteps = vue.computed(() => Math.floor(props2.clientSize - thumbSize.value - vue.unref(GAP2)));
      const attachEvents2 = () => {
        window.addEventListener("mousemove", onMouseMove);
        window.addEventListener("mouseup", onMouseUp);
        const thumbEl = vue.unref(thumbRef);
        if (!thumbEl)
          return;
        onselectstartStore = document.onselectstart;
        document.onselectstart = () => false;
        thumbEl.addEventListener("touchmove", onMouseMove, { passive: true });
        thumbEl.addEventListener("touchend", onMouseUp);
      };
      const detachEvents = () => {
        window.removeEventListener("mousemove", onMouseMove);
        window.removeEventListener("mouseup", onMouseUp);
        document.onselectstart = onselectstartStore;
        onselectstartStore = null;
        const thumbEl = vue.unref(thumbRef);
        if (!thumbEl)
          return;
        thumbEl.removeEventListener("touchmove", onMouseMove);
        thumbEl.removeEventListener("touchend", onMouseUp);
      };
      const onThumbMouseDown = (e) => {
        e.stopImmediatePropagation();
        if (e.ctrlKey || [1, 2].includes(e.button)) {
          return;
        }
        state2.isDragging = true;
        state2[bar.value.axis] = e.currentTarget[bar.value.offset] - (e[bar.value.client] - e.currentTarget.getBoundingClientRect()[bar.value.direction]);
        emit("start-move");
        attachEvents2();
      };
      const onMouseUp = () => {
        state2.isDragging = false;
        state2[bar.value.axis] = 0;
        emit("stop-move");
        detachEvents();
      };
      const onMouseMove = (e) => {
        const { isDragging: isDragging2 } = state2;
        if (!isDragging2)
          return;
        if (!thumbRef.value || !trackRef.value)
          return;
        const prevPage = state2[bar.value.axis];
        if (!prevPage)
          return;
        cAF(frameHandle);
        const offset2 = (trackRef.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;
        const thumbClickPosition = thumbRef.value[bar.value.offset] - prevPage;
        const distance = offset2 - thumbClickPosition;
        frameHandle = rAF(() => {
          state2.traveled = Math.max(props2.startGap, Math.min(distance, totalSteps.value));
          emit("scroll", distance, totalSteps.value);
        });
      };
      const clickTrackHandler = (e) => {
        const offset2 = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);
        const thumbHalf = thumbRef.value[bar.value.offset] / 2;
        const distance = offset2 - thumbHalf;
        state2.traveled = Math.max(0, Math.min(distance, totalSteps.value));
        emit("scroll", distance, totalSteps.value);
      };
      vue.watch(() => props2.scrollFrom, (v2) => {
        if (state2.isDragging)
          return;
        state2.traveled = Math.ceil(v2 * totalSteps.value);
      });
      vue.onBeforeUnmount(() => {
        detachEvents();
      });
      return () => {
        return vue.h("div", {
          role: "presentation",
          ref: trackRef,
          class: [
            nsVirtualScrollbar.b(),
            props2.class,
            (props2.alwaysOn || state2.isDragging) && "always-on"
          ],
          style: trackStyle.value,
          onMousedown: vue.withModifiers(clickTrackHandler, ["stop", "prevent"]),
          onTouchstartPrevent: onThumbMouseDown
        }, vue.h("div", {
          ref: thumbRef,
          class: nsScrollbar.e("thumb"),
          style: thumbStyle.value,
          onMousedown: onThumbMouseDown
        }, []));
      };
    }
  });
  const createList = ({
    name,
    getOffset: getOffset2,
    getItemSize,
    getItemOffset,
    getEstimatedTotalSize: getEstimatedTotalSize2,
    getStartIndexForOffset,
    getStopIndexForStartIndex,
    initCache,
    clearCache,
    validateProps
  }) => {
    return vue.defineComponent({
      name: name != null ? name : "ElVirtualList",
      props: virtualizedListProps,
      emits: [ITEM_RENDER_EVT, SCROLL_EVT],
      setup(props2, { emit, expose }) {
        validateProps(props2);
        const instance = vue.getCurrentInstance();
        const ns2 = useNamespace("vl");
        const dynamicSizeCache = vue.ref(initCache(props2, instance));
        const getItemStyleCache = useCache();
        const windowRef = vue.ref();
        const innerRef = vue.ref();
        const scrollbarRef = vue.ref();
        const states = vue.ref({
          isScrolling: false,
          scrollDir: "forward",
          scrollOffset: isNumber$2(props2.initScrollOffset) ? props2.initScrollOffset : 0,
          updateRequested: false,
          isScrollbarDragging: false,
          scrollbarAlwaysOn: props2.scrollbarAlwaysOn
        });
        const itemsToRender = vue.computed(() => {
          const { total: total2, cache: cache2 } = props2;
          const { isScrolling, scrollDir, scrollOffset } = vue.unref(states);
          if (total2 === 0) {
            return [0, 0, 0, 0];
          }
          const startIndex = getStartIndexForOffset(props2, scrollOffset, vue.unref(dynamicSizeCache));
          const stopIndex = getStopIndexForStartIndex(props2, startIndex, scrollOffset, vue.unref(dynamicSizeCache));
          const cacheBackward = !isScrolling || scrollDir === BACKWARD ? Math.max(1, cache2) : 1;
          const cacheForward = !isScrolling || scrollDir === FORWARD ? Math.max(1, cache2) : 1;
          return [
            Math.max(0, startIndex - cacheBackward),
            Math.max(0, Math.min(total2 - 1, stopIndex + cacheForward)),
            startIndex,
            stopIndex
          ];
        });
        const estimatedTotalSize = vue.computed(() => getEstimatedTotalSize2(props2, vue.unref(dynamicSizeCache)));
        const _isHorizontal = vue.computed(() => isHorizontal(props2.layout));
        const windowStyle = vue.computed(() => [
          {
            position: "relative",
            [`overflow-${_isHorizontal.value ? "x" : "y"}`]: "scroll",
            WebkitOverflowScrolling: "touch",
            willChange: "transform"
          },
          {
            direction: props2.direction,
            height: isNumber$2(props2.height) ? `${props2.height}px` : props2.height,
            width: isNumber$2(props2.width) ? `${props2.width}px` : props2.width
          },
          props2.style
        ]);
        const innerStyle = vue.computed(() => {
          const size = vue.unref(estimatedTotalSize);
          const horizontal = vue.unref(_isHorizontal);
          return {
            height: horizontal ? "100%" : `${size}px`,
            pointerEvents: vue.unref(states).isScrolling ? "none" : void 0,
            width: horizontal ? `${size}px` : "100%"
          };
        });
        const clientSize = vue.computed(() => _isHorizontal.value ? props2.width : props2.height);
        const { onWheel } = useWheel({
          atStartEdge: vue.computed(() => states.value.scrollOffset <= 0),
          atEndEdge: vue.computed(() => states.value.scrollOffset >= estimatedTotalSize.value),
          layout: vue.computed(() => props2.layout)
        }, (offset2) => {
          var _a2, _b;
          (_b = (_a2 = scrollbarRef.value).onMouseUp) == null ? void 0 : _b.call(_a2);
          scrollTo(Math.min(states.value.scrollOffset + offset2, estimatedTotalSize.value - clientSize.value));
        });
        useEventListener(windowRef, "wheel", onWheel, {
          passive: false
        });
        const emitEvents = () => {
          const { total: total2 } = props2;
          if (total2 > 0) {
            const [cacheStart, cacheEnd, visibleStart, visibleEnd] = vue.unref(itemsToRender);
            emit(ITEM_RENDER_EVT, cacheStart, cacheEnd, visibleStart, visibleEnd);
          }
          const { scrollDir, scrollOffset, updateRequested } = vue.unref(states);
          emit(SCROLL_EVT, scrollDir, scrollOffset, updateRequested);
        };
        const scrollVertically = (e) => {
          const { clientHeight, scrollHeight, scrollTop } = e.currentTarget;
          const _states = vue.unref(states);
          if (_states.scrollOffset === scrollTop) {
            return;
          }
          const scrollOffset = Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          states.value = {
            ..._states,
            isScrolling: true,
            scrollDir: getScrollDir(_states.scrollOffset, scrollOffset),
            scrollOffset,
            updateRequested: false
          };
          vue.nextTick(resetIsScrolling);
        };
        const scrollHorizontally = (e) => {
          const { clientWidth, scrollLeft, scrollWidth } = e.currentTarget;
          const _states = vue.unref(states);
          if (_states.scrollOffset === scrollLeft) {
            return;
          }
          const { direction: direction2 } = props2;
          let scrollOffset = scrollLeft;
          if (direction2 === RTL) {
            switch (getRTLOffsetType()) {
              case RTL_OFFSET_NAG: {
                scrollOffset = -scrollLeft;
                break;
              }
              case RTL_OFFSET_POS_DESC: {
                scrollOffset = scrollWidth - clientWidth - scrollLeft;
                break;
              }
            }
          }
          scrollOffset = Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
          states.value = {
            ..._states,
            isScrolling: true,
            scrollDir: getScrollDir(_states.scrollOffset, scrollOffset),
            scrollOffset,
            updateRequested: false
          };
          vue.nextTick(resetIsScrolling);
        };
        const onScroll = (e) => {
          vue.unref(_isHorizontal) ? scrollHorizontally(e) : scrollVertically(e);
          emitEvents();
        };
        const onScrollbarScroll = (distanceToGo, totalSteps) => {
          const offset2 = (estimatedTotalSize.value - clientSize.value) / totalSteps * distanceToGo;
          scrollTo(Math.min(estimatedTotalSize.value - clientSize.value, offset2));
        };
        const scrollTo = (offset2) => {
          offset2 = Math.max(offset2, 0);
          if (offset2 === vue.unref(states).scrollOffset) {
            return;
          }
          states.value = {
            ...vue.unref(states),
            scrollOffset: offset2,
            scrollDir: getScrollDir(vue.unref(states).scrollOffset, offset2),
            updateRequested: true
          };
          vue.nextTick(resetIsScrolling);
        };
        const scrollToItem = (idx, alignment = AUTO_ALIGNMENT) => {
          const { scrollOffset } = vue.unref(states);
          idx = Math.max(0, Math.min(idx, props2.total - 1));
          scrollTo(getOffset2(props2, idx, alignment, scrollOffset, vue.unref(dynamicSizeCache)));
        };
        const getItemStyle = (idx) => {
          const { direction: direction2, itemSize: itemSize2, layout: layout2 } = props2;
          const itemStyleCache = getItemStyleCache.value(clearCache && itemSize2, clearCache && layout2, clearCache && direction2);
          let style;
          if (shared.hasOwn(itemStyleCache, String(idx))) {
            style = itemStyleCache[idx];
          } else {
            const offset2 = getItemOffset(props2, idx, vue.unref(dynamicSizeCache));
            const size = getItemSize(props2, idx, vue.unref(dynamicSizeCache));
            const horizontal = vue.unref(_isHorizontal);
            const isRtl = direction2 === RTL;
            const offsetHorizontal = horizontal ? offset2 : 0;
            itemStyleCache[idx] = style = {
              position: "absolute",
              left: isRtl ? void 0 : `${offsetHorizontal}px`,
              right: isRtl ? `${offsetHorizontal}px` : void 0,
              top: !horizontal ? `${offset2}px` : 0,
              height: !horizontal ? `${size}px` : "100%",
              width: horizontal ? `${size}px` : "100%"
            };
          }
          return style;
        };
        const resetIsScrolling = () => {
          states.value.isScrolling = false;
          vue.nextTick(() => {
            getItemStyleCache.value(-1, null, null);
          });
        };
        const resetScrollTop = () => {
          const window2 = windowRef.value;
          if (window2) {
            window2.scrollTop = 0;
          }
        };
        vue.onMounted(() => {
          if (!isClient)
            return;
          const { initScrollOffset: initScrollOffset2 } = props2;
          const windowElement = vue.unref(windowRef);
          if (isNumber$2(initScrollOffset2) && windowElement) {
            if (vue.unref(_isHorizontal)) {
              windowElement.scrollLeft = initScrollOffset2;
            } else {
              windowElement.scrollTop = initScrollOffset2;
            }
          }
          emitEvents();
        });
        vue.onUpdated(() => {
          const { direction: direction2, layout: layout2 } = props2;
          const { scrollOffset, updateRequested } = vue.unref(states);
          const windowElement = vue.unref(windowRef);
          if (updateRequested && windowElement) {
            if (layout2 === HORIZONTAL) {
              if (direction2 === RTL) {
                switch (getRTLOffsetType()) {
                  case RTL_OFFSET_NAG: {
                    windowElement.scrollLeft = -scrollOffset;
                    break;
                  }
                  case RTL_OFFSET_POS_ASC: {
                    windowElement.scrollLeft = scrollOffset;
                    break;
                  }
                  default: {
                    const { clientWidth, scrollWidth } = windowElement;
                    windowElement.scrollLeft = scrollWidth - clientWidth - scrollOffset;
                    break;
                  }
                }
              } else {
                windowElement.scrollLeft = scrollOffset;
              }
            } else {
              windowElement.scrollTop = scrollOffset;
            }
          }
        });
        vue.onActivated(() => {
          vue.unref(windowRef).scrollTop = vue.unref(states).scrollOffset;
        });
        const api = {
          ns: ns2,
          clientSize,
          estimatedTotalSize,
          windowStyle,
          windowRef,
          innerRef,
          innerStyle,
          itemsToRender,
          scrollbarRef,
          states,
          getItemStyle,
          onScroll,
          onScrollbarScroll,
          onWheel,
          scrollTo,
          scrollToItem,
          resetScrollTop
        };
        expose({
          windowRef,
          innerRef,
          getItemStyleCache,
          scrollTo,
          scrollToItem,
          resetScrollTop,
          states
        });
        return api;
      },
      render(ctx) {
        var _a2;
        const {
          $slots,
          className,
          clientSize,
          containerElement,
          data,
          getItemStyle,
          innerElement,
          itemsToRender,
          innerStyle,
          layout: layout2,
          total: total2,
          onScroll,
          onScrollbarScroll,
          states,
          useIsScrolling,
          windowStyle,
          ns: ns2
        } = ctx;
        const [start, end2] = itemsToRender;
        const Container2 = vue.resolveDynamicComponent(containerElement);
        const Inner = vue.resolveDynamicComponent(innerElement);
        const children = [];
        if (total2 > 0) {
          for (let i2 = start; i2 <= end2; i2++) {
            children.push(vue.h(vue.Fragment, { key: i2 }, (_a2 = $slots.default) == null ? void 0 : _a2.call($slots, {
              data,
              index: i2,
              isScrolling: useIsScrolling ? states.isScrolling : void 0,
              style: getItemStyle(i2)
            })));
          }
        }
        const InnerNode = [
          vue.h(Inner, {
            style: innerStyle,
            ref: "innerRef"
          }, !shared.isString(Inner) ? {
            default: () => children
          } : children)
        ];
        const scrollbar = vue.h(ScrollBar, {
          ref: "scrollbarRef",
          clientSize,
          layout: layout2,
          onScroll: onScrollbarScroll,
          ratio: clientSize * 100 / this.estimatedTotalSize,
          scrollFrom: states.scrollOffset / (this.estimatedTotalSize - clientSize),
          total: total2
        });
        const listContainer = vue.h(Container2, {
          class: [ns2.e("window"), className],
          style: windowStyle,
          onScroll,
          ref: "windowRef",
          key: 0
        }, !shared.isString(Container2) ? { default: () => [InnerNode] } : [InnerNode]);
        return vue.h("div", {
          key: 0,
          class: [ns2.e("wrapper"), states.scrollbarAlwaysOn ? "always-on" : ""]
        }, [listContainer, scrollbar]);
      }
    });
  };
  const FixedSizeList = createList({
    name: "ElFixedSizeList",
    getItemOffset: ({ itemSize: itemSize2 }, index) => index * itemSize2,
    getItemSize: ({ itemSize: itemSize2 }) => itemSize2,
    getEstimatedTotalSize: ({ total: total2, itemSize: itemSize2 }) => itemSize2 * total2,
    getOffset: ({ height, total: total2, itemSize: itemSize2, layout: layout2, width }, index, alignment, scrollOffset) => {
      const size = isHorizontal(layout2) ? width : height;
      if (shared.isString(size)) {
        throwError("[ElVirtualList]", `
        You should set
          width/height
        to number when your layout is
          horizontal/vertical
      `);
      }
      const lastItemOffset = Math.max(0, total2 * itemSize2 - size);
      const maxOffset = Math.min(lastItemOffset, index * itemSize2);
      const minOffset = Math.max(0, (index + 1) * itemSize2 - size);
      if (alignment === SMART_ALIGNMENT) {
        if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {
          alignment = AUTO_ALIGNMENT;
        } else {
          alignment = CENTERED_ALIGNMENT;
        }
      }
      switch (alignment) {
        case START_ALIGNMENT: {
          return maxOffset;
        }
        case END_ALIGNMENT: {
          return minOffset;
        }
        case CENTERED_ALIGNMENT: {
          const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
          if (middleOffset < Math.ceil(size / 2)) {
            return 0;
          } else if (middleOffset > lastItemOffset + Math.floor(size / 2)) {
            return lastItemOffset;
          } else {
            return middleOffset;
          }
        }
        case AUTO_ALIGNMENT:
        default: {
          if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
            return scrollOffset;
          } else if (scrollOffset < minOffset) {
            return minOffset;
          } else {
            return maxOffset;
          }
        }
      }
    },
    getStartIndexForOffset: ({ total: total2, itemSize: itemSize2 }, offset2) => Math.max(0, Math.min(total2 - 1, Math.floor(offset2 / itemSize2))),
    getStopIndexForStartIndex: ({ height, total: total2, itemSize: itemSize2, layout: layout2, width }, startIndex, scrollOffset) => {
      const offset2 = startIndex * itemSize2;
      const size = isHorizontal(layout2) ? width : height;
      const numVisibleItems = Math.ceil((size + scrollOffset - offset2) / itemSize2);
      return Math.max(0, Math.min(total2 - 1, startIndex + numVisibleItems - 1));
    },
    initCache() {
      return void 0;
    },
    clearCache: true,
    validateProps() {
    }
  });
  const SCOPE$5 = "ElDynamicSizeList";
  const getItemFromCache$1 = (props2, index, listCache) => {
    const { itemSize: itemSize2 } = props2;
    const { items, lastVisitedIndex } = listCache;
    if (index > lastVisitedIndex) {
      let offset2 = 0;
      if (lastVisitedIndex >= 0) {
        const item = items[lastVisitedIndex];
        offset2 = item.offset + item.size;
      }
      for (let i2 = lastVisitedIndex + 1; i2 <= index; i2++) {
        const size = itemSize2(i2);
        items[i2] = {
          offset: offset2,
          size
        };
        offset2 += size;
      }
      listCache.lastVisitedIndex = index;
    }
    return items[index];
  };
  const findItem$1 = (props2, listCache, offset2) => {
    const { items, lastVisitedIndex } = listCache;
    const lastVisitedOffset = lastVisitedIndex > 0 ? items[lastVisitedIndex].offset : 0;
    if (lastVisitedOffset >= offset2) {
      return bs$1(props2, listCache, 0, lastVisitedIndex, offset2);
    }
    return es$1(props2, listCache, Math.max(0, lastVisitedIndex), offset2);
  };
  const bs$1 = (props2, listCache, low, high, offset2) => {
    while (low <= high) {
      const mid = low + Math.floor((high - low) / 2);
      const currentOffset = getItemFromCache$1(props2, mid, listCache).offset;
      if (currentOffset === offset2) {
        return mid;
      } else if (currentOffset < offset2) {
        low = mid + 1;
      } else if (currentOffset > offset2) {
        high = mid - 1;
      }
    }
    return Math.max(0, low - 1);
  };
  const es$1 = (props2, listCache, index, offset2) => {
    const { total: total2 } = props2;
    let exponent = 1;
    while (index < total2 && getItemFromCache$1(props2, index, listCache).offset < offset2) {
      index += exponent;
      exponent *= 2;
    }
    return bs$1(props2, listCache, Math.floor(index / 2), Math.min(index, total2 - 1), offset2);
  };
  const getEstimatedTotalSize = ({ total: total2 }, { items, estimatedItemSize: estimatedItemSize2, lastVisitedIndex }) => {
    let totalSizeOfMeasuredItems = 0;
    if (lastVisitedIndex >= total2) {
      lastVisitedIndex = total2 - 1;
    }
    if (lastVisitedIndex >= 0) {
      const item = items[lastVisitedIndex];
      totalSizeOfMeasuredItems = item.offset + item.size;
    }
    const numUnmeasuredItems = total2 - lastVisitedIndex - 1;
    const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize2;
    return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
  };
  const DynamicSizeList = createList({
    name: "ElDynamicSizeList",
    getItemOffset: (props2, index, listCache) => getItemFromCache$1(props2, index, listCache).offset,
    getItemSize: (_2, index, { items }) => items[index].size,
    getEstimatedTotalSize,
    getOffset: (props2, index, alignment, scrollOffset, listCache) => {
      const { height, layout: layout2, width } = props2;
      const size = isHorizontal(layout2) ? width : height;
      const item = getItemFromCache$1(props2, index, listCache);
      const estimatedTotalSize = getEstimatedTotalSize(props2, listCache);
      const maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, item.offset));
      const minOffset = Math.max(0, item.offset - size + item.size);
      if (alignment === SMART_ALIGNMENT) {
        if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {
          alignment = AUTO_ALIGNMENT;
        } else {
          alignment = CENTERED_ALIGNMENT;
        }
      }
      switch (alignment) {
        case START_ALIGNMENT: {
          return maxOffset;
        }
        case END_ALIGNMENT: {
          return minOffset;
        }
        case CENTERED_ALIGNMENT: {
          return Math.round(minOffset + (maxOffset - minOffset) / 2);
        }
        case AUTO_ALIGNMENT:
        default: {
          if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
            return scrollOffset;
          } else if (scrollOffset < minOffset) {
            return minOffset;
          } else {
            return maxOffset;
          }
        }
      }
    },
    getStartIndexForOffset: (props2, offset2, listCache) => findItem$1(props2, listCache, offset2),
    getStopIndexForStartIndex: (props2, startIndex, scrollOffset, listCache) => {
      const { height, total: total2, layout: layout2, width } = props2;
      const size = isHorizontal(layout2) ? width : height;
      const item = getItemFromCache$1(props2, startIndex, listCache);
      const maxOffset = scrollOffset + size;
      let offset2 = item.offset + item.size;
      let stopIndex = startIndex;
      while (stopIndex < total2 - 1 && offset2 < maxOffset) {
        stopIndex++;
        offset2 += getItemFromCache$1(props2, stopIndex, listCache).size;
      }
      return stopIndex;
    },
    initCache({ estimatedItemSize: estimatedItemSize2 = DEFAULT_DYNAMIC_LIST_ITEM_SIZE }, instance) {
      const cache2 = {
        items: {},
        estimatedItemSize: estimatedItemSize2,
        lastVisitedIndex: -1
      };
      cache2.clearCacheAfterIndex = (index, forceUpdate = true) => {
        var _a2, _b;
        cache2.lastVisitedIndex = Math.min(cache2.lastVisitedIndex, index - 1);
        (_a2 = instance.exposed) == null ? void 0 : _a2.getItemStyleCache(-1);
        if (forceUpdate) {
          (_b = instance.proxy) == null ? void 0 : _b.$forceUpdate();
        }
      };
      return cache2;
    },
    clearCache: false,
    validateProps: ({ itemSize: itemSize2 }) => {
      {
        if (typeof itemSize2 !== "function") {
          throwError(SCOPE$5, `
          itemSize is required as function, but the given value was ${typeof itemSize2}
        `);
        }
      }
    }
  });
  const useGridWheel = ({ atXEndEdge, atXStartEdge, atYEndEdge, atYStartEdge }, onWheelDelta) => {
    let frameHandle = null;
    let xOffset = 0;
    let yOffset = 0;
    const hasReachedEdge = (x2, y2) => {
      const xEdgeReached = x2 <= 0 && atXStartEdge.value || x2 >= 0 && atXEndEdge.value;
      const yEdgeReached = y2 <= 0 && atYStartEdge.value || y2 >= 0 && atYEndEdge.value;
      return xEdgeReached && yEdgeReached;
    };
    const onWheel = (e) => {
      cAF(frameHandle);
      let x2 = e.deltaX;
      let y2 = e.deltaY;
      if (Math.abs(x2) > Math.abs(y2)) {
        y2 = 0;
      } else {
        x2 = 0;
      }
      if (e.shiftKey && y2 !== 0) {
        x2 = y2;
        y2 = 0;
      }
      if (hasReachedEdge(xOffset, yOffset) && hasReachedEdge(xOffset + x2, yOffset + y2))
        return;
      xOffset += x2;
      yOffset += y2;
      e.preventDefault();
      frameHandle = rAF(() => {
        onWheelDelta(xOffset, yOffset);
        xOffset = 0;
        yOffset = 0;
      });
    };
    return {
      hasReachedEdge,
      onWheel
    };
  };
  const createGrid = ({
    name,
    clearCache,
    getColumnPosition,
    getColumnStartIndexForOffset,
    getColumnStopIndexForStartIndex,
    getEstimatedTotalHeight: getEstimatedTotalHeight2,
    getEstimatedTotalWidth: getEstimatedTotalWidth2,
    getColumnOffset,
    getRowOffset,
    getRowPosition,
    getRowStartIndexForOffset,
    getRowStopIndexForStartIndex,
    initCache,
    injectToInstance,
    validateProps
  }) => {
    return vue.defineComponent({
      name: name != null ? name : "ElVirtualList",
      props: virtualizedGridProps,
      emits: [ITEM_RENDER_EVT, SCROLL_EVT],
      setup(props2, { emit, expose, slots }) {
        const ns2 = useNamespace("vl");
        validateProps(props2);
        const instance = vue.getCurrentInstance();
        const cache2 = vue.ref(initCache(props2, instance));
        injectToInstance == null ? void 0 : injectToInstance(instance, cache2);
        const windowRef = vue.ref();
        const hScrollbar = vue.ref();
        const vScrollbar = vue.ref();
        const innerRef = vue.ref(null);
        const states = vue.ref({
          isScrolling: false,
          scrollLeft: isNumber$2(props2.initScrollLeft) ? props2.initScrollLeft : 0,
          scrollTop: isNumber$2(props2.initScrollTop) ? props2.initScrollTop : 0,
          updateRequested: false,
          xAxisScrollDir: FORWARD,
          yAxisScrollDir: FORWARD
        });
        const getItemStyleCache = useCache();
        const parsedHeight = vue.computed(() => Number.parseInt(`${props2.height}`, 10));
        const parsedWidth = vue.computed(() => Number.parseInt(`${props2.width}`, 10));
        const columnsToRender = vue.computed(() => {
          const { totalColumn, totalRow, columnCache } = props2;
          const { isScrolling, xAxisScrollDir, scrollLeft } = vue.unref(states);
          if (totalColumn === 0 || totalRow === 0) {
            return [0, 0, 0, 0];
          }
          const startIndex = getColumnStartIndexForOffset(props2, scrollLeft, vue.unref(cache2));
          const stopIndex = getColumnStopIndexForStartIndex(props2, startIndex, scrollLeft, vue.unref(cache2));
          const cacheBackward = !isScrolling || xAxisScrollDir === BACKWARD ? Math.max(1, columnCache) : 1;
          const cacheForward = !isScrolling || xAxisScrollDir === FORWARD ? Math.max(1, columnCache) : 1;
          return [
            Math.max(0, startIndex - cacheBackward),
            Math.max(0, Math.min(totalColumn - 1, stopIndex + cacheForward)),
            startIndex,
            stopIndex
          ];
        });
        const rowsToRender = vue.computed(() => {
          const { totalColumn, totalRow, rowCache } = props2;
          const { isScrolling, yAxisScrollDir, scrollTop } = vue.unref(states);
          if (totalColumn === 0 || totalRow === 0) {
            return [0, 0, 0, 0];
          }
          const startIndex = getRowStartIndexForOffset(props2, scrollTop, vue.unref(cache2));
          const stopIndex = getRowStopIndexForStartIndex(props2, startIndex, scrollTop, vue.unref(cache2));
          const cacheBackward = !isScrolling || yAxisScrollDir === BACKWARD ? Math.max(1, rowCache) : 1;
          const cacheForward = !isScrolling || yAxisScrollDir === FORWARD ? Math.max(1, rowCache) : 1;
          return [
            Math.max(0, startIndex - cacheBackward),
            Math.max(0, Math.min(totalRow - 1, stopIndex + cacheForward)),
            startIndex,
            stopIndex
          ];
        });
        const estimatedTotalHeight = vue.computed(() => getEstimatedTotalHeight2(props2, vue.unref(cache2)));
        const estimatedTotalWidth = vue.computed(() => getEstimatedTotalWidth2(props2, vue.unref(cache2)));
        const windowStyle = vue.computed(() => {
          var _a2;
          return [
            {
              position: "relative",
              overflow: "hidden",
              WebkitOverflowScrolling: "touch",
              willChange: "transform"
            },
            {
              direction: props2.direction,
              height: isNumber$2(props2.height) ? `${props2.height}px` : props2.height,
              width: isNumber$2(props2.width) ? `${props2.width}px` : props2.width
            },
            (_a2 = props2.style) != null ? _a2 : {}
          ];
        });
        const innerStyle = vue.computed(() => {
          const width = `${vue.unref(estimatedTotalWidth)}px`;
          const height = `${vue.unref(estimatedTotalHeight)}px`;
          return {
            height,
            pointerEvents: vue.unref(states).isScrolling ? "none" : void 0,
            width
          };
        });
        const emitEvents = () => {
          const { totalColumn, totalRow } = props2;
          if (totalColumn > 0 && totalRow > 0) {
            const [
              columnCacheStart,
              columnCacheEnd,
              columnVisibleStart,
              columnVisibleEnd
            ] = vue.unref(columnsToRender);
            const [rowCacheStart, rowCacheEnd, rowVisibleStart, rowVisibleEnd] = vue.unref(rowsToRender);
            emit(ITEM_RENDER_EVT, {
              columnCacheStart,
              columnCacheEnd,
              rowCacheStart,
              rowCacheEnd,
              columnVisibleStart,
              columnVisibleEnd,
              rowVisibleStart,
              rowVisibleEnd
            });
          }
          const {
            scrollLeft,
            scrollTop,
            updateRequested,
            xAxisScrollDir,
            yAxisScrollDir
          } = vue.unref(states);
          emit(SCROLL_EVT, {
            xAxisScrollDir,
            scrollLeft,
            yAxisScrollDir,
            scrollTop,
            updateRequested
          });
        };
        const onScroll = (e) => {
          const {
            clientHeight,
            clientWidth,
            scrollHeight,
            scrollLeft,
            scrollTop,
            scrollWidth
          } = e.currentTarget;
          const _states = vue.unref(states);
          if (_states.scrollTop === scrollTop && _states.scrollLeft === scrollLeft) {
            return;
          }
          let _scrollLeft = scrollLeft;
          if (isRTL(props2.direction)) {
            switch (getRTLOffsetType()) {
              case RTL_OFFSET_NAG:
                _scrollLeft = -scrollLeft;
                break;
              case RTL_OFFSET_POS_DESC:
                _scrollLeft = scrollWidth - clientWidth - scrollLeft;
                break;
            }
          }
          states.value = {
            ..._states,
            isScrolling: true,
            scrollLeft: _scrollLeft,
            scrollTop: Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight)),
            updateRequested: true,
            xAxisScrollDir: getScrollDir(_states.scrollLeft, _scrollLeft),
            yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop)
          };
          vue.nextTick(() => resetIsScrolling());
          onUpdated();
          emitEvents();
        };
        const onVerticalScroll = (distance, totalSteps) => {
          const height = vue.unref(parsedHeight);
          const offset2 = (estimatedTotalHeight.value - height) / totalSteps * distance;
          scrollTo({
            scrollTop: Math.min(estimatedTotalHeight.value - height, offset2)
          });
        };
        const onHorizontalScroll = (distance, totalSteps) => {
          const width = vue.unref(parsedWidth);
          const offset2 = (estimatedTotalWidth.value - width) / totalSteps * distance;
          scrollTo({
            scrollLeft: Math.min(estimatedTotalWidth.value - width, offset2)
          });
        };
        const { onWheel } = useGridWheel({
          atXStartEdge: vue.computed(() => states.value.scrollLeft <= 0),
          atXEndEdge: vue.computed(() => states.value.scrollLeft >= estimatedTotalWidth.value - vue.unref(parsedWidth)),
          atYStartEdge: vue.computed(() => states.value.scrollTop <= 0),
          atYEndEdge: vue.computed(() => states.value.scrollTop >= estimatedTotalHeight.value - vue.unref(parsedHeight))
        }, (x2, y2) => {
          var _a2, _b, _c, _d;
          (_b = (_a2 = hScrollbar.value) == null ? void 0 : _a2.onMouseUp) == null ? void 0 : _b.call(_a2);
          (_d = (_c = vScrollbar.value) == null ? void 0 : _c.onMouseUp) == null ? void 0 : _d.call(_c);
          const width = vue.unref(parsedWidth);
          const height = vue.unref(parsedHeight);
          scrollTo({
            scrollLeft: Math.min(states.value.scrollLeft + x2, estimatedTotalWidth.value - width),
            scrollTop: Math.min(states.value.scrollTop + y2, estimatedTotalHeight.value - height)
          });
        });
        useEventListener(windowRef, "wheel", onWheel, {
          passive: false
        });
        const scrollTo = ({
          scrollLeft = states.value.scrollLeft,
          scrollTop = states.value.scrollTop
        }) => {
          scrollLeft = Math.max(scrollLeft, 0);
          scrollTop = Math.max(scrollTop, 0);
          const _states = vue.unref(states);
          if (scrollTop === _states.scrollTop && scrollLeft === _states.scrollLeft) {
            return;
          }
          states.value = {
            ..._states,
            xAxisScrollDir: getScrollDir(_states.scrollLeft, scrollLeft),
            yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),
            scrollLeft,
            scrollTop,
            updateRequested: true
          };
          vue.nextTick(() => resetIsScrolling());
          onUpdated();
          emitEvents();
        };
        const scrollToItem = (rowIndex = 0, columnIdx = 0, alignment = AUTO_ALIGNMENT) => {
          const _states = vue.unref(states);
          columnIdx = Math.max(0, Math.min(columnIdx, props2.totalColumn - 1));
          rowIndex = Math.max(0, Math.min(rowIndex, props2.totalRow - 1));
          const scrollBarWidth2 = getScrollBarWidth(ns2.namespace.value);
          const _cache = vue.unref(cache2);
          const estimatedHeight = getEstimatedTotalHeight2(props2, _cache);
          const estimatedWidth = getEstimatedTotalWidth2(props2, _cache);
          scrollTo({
            scrollLeft: getColumnOffset(props2, columnIdx, alignment, _states.scrollLeft, _cache, estimatedWidth > props2.width ? scrollBarWidth2 : 0),
            scrollTop: getRowOffset(props2, rowIndex, alignment, _states.scrollTop, _cache, estimatedHeight > props2.height ? scrollBarWidth2 : 0)
          });
        };
        const getItemStyle = (rowIndex, columnIndex) => {
          const { columnWidth, direction: direction2, rowHeight } = props2;
          const itemStyleCache = getItemStyleCache.value(clearCache && columnWidth, clearCache && rowHeight, clearCache && direction2);
          const key = `${rowIndex},${columnIndex}`;
          if (shared.hasOwn(itemStyleCache, key)) {
            return itemStyleCache[key];
          } else {
            const [, left2] = getColumnPosition(props2, columnIndex, vue.unref(cache2));
            const _cache = vue.unref(cache2);
            const rtl = isRTL(direction2);
            const [height, top] = getRowPosition(props2, rowIndex, _cache);
            const [width] = getColumnPosition(props2, columnIndex, _cache);
            itemStyleCache[key] = {
              position: "absolute",
              left: rtl ? void 0 : `${left2}px`,
              right: rtl ? `${left2}px` : void 0,
              top: `${top}px`,
              height: `${height}px`,
              width: `${width}px`
            };
            return itemStyleCache[key];
          }
        };
        const resetIsScrolling = () => {
          states.value.isScrolling = false;
          vue.nextTick(() => {
            getItemStyleCache.value(-1, null, null);
          });
        };
        vue.onMounted(() => {
          if (!isClient)
            return;
          const { initScrollLeft, initScrollTop } = props2;
          const windowElement = vue.unref(windowRef);
          if (windowElement) {
            if (isNumber$2(initScrollLeft)) {
              windowElement.scrollLeft = initScrollLeft;
            }
            if (isNumber$2(initScrollTop)) {
              windowElement.scrollTop = initScrollTop;
            }
          }
          emitEvents();
        });
        const onUpdated = () => {
          const { direction: direction2 } = props2;
          const { scrollLeft, scrollTop, updateRequested } = vue.unref(states);
          const windowElement = vue.unref(windowRef);
          if (updateRequested && windowElement) {
            if (direction2 === RTL) {
              switch (getRTLOffsetType()) {
                case RTL_OFFSET_NAG: {
                  windowElement.scrollLeft = -scrollLeft;
                  break;
                }
                case RTL_OFFSET_POS_ASC: {
                  windowElement.scrollLeft = scrollLeft;
                  break;
                }
                default: {
                  const { clientWidth, scrollWidth } = windowElement;
                  windowElement.scrollLeft = scrollWidth - clientWidth - scrollLeft;
                  break;
                }
              }
            } else {
              windowElement.scrollLeft = Math.max(0, scrollLeft);
            }
            windowElement.scrollTop = Math.max(0, scrollTop);
          }
        };
        const { resetAfterColumnIndex, resetAfterRowIndex, resetAfter } = instance.proxy;
        expose({
          windowRef,
          innerRef,
          getItemStyleCache,
          scrollTo,
          scrollToItem,
          states,
          resetAfterColumnIndex,
          resetAfterRowIndex,
          resetAfter
        });
        const renderScrollbars = () => {
          const {
            scrollbarAlwaysOn,
            scrollbarStartGap,
            scrollbarEndGap,
            totalColumn,
            totalRow
          } = props2;
          const width = vue.unref(parsedWidth);
          const height = vue.unref(parsedHeight);
          const estimatedWidth = vue.unref(estimatedTotalWidth);
          const estimatedHeight = vue.unref(estimatedTotalHeight);
          const { scrollLeft, scrollTop } = vue.unref(states);
          const horizontalScrollbar = vue.h(ScrollBar, {
            ref: hScrollbar,
            alwaysOn: scrollbarAlwaysOn,
            startGap: scrollbarStartGap,
            endGap: scrollbarEndGap,
            class: ns2.e("horizontal"),
            clientSize: width,
            layout: "horizontal",
            onScroll: onHorizontalScroll,
            ratio: width * 100 / estimatedWidth,
            scrollFrom: scrollLeft / (estimatedWidth - width),
            total: totalRow,
            visible: true
          });
          const verticalScrollbar = vue.h(ScrollBar, {
            ref: vScrollbar,
            alwaysOn: scrollbarAlwaysOn,
            startGap: scrollbarStartGap,
            endGap: scrollbarEndGap,
            class: ns2.e("vertical"),
            clientSize: height,
            layout: "vertical",
            onScroll: onVerticalScroll,
            ratio: height * 100 / estimatedHeight,
            scrollFrom: scrollTop / (estimatedHeight - height),
            total: totalColumn,
            visible: true
          });
          return {
            horizontalScrollbar,
            verticalScrollbar
          };
        };
        const renderItems = () => {
          var _a2;
          const [columnStart, columnEnd] = vue.unref(columnsToRender);
          const [rowStart, rowEnd] = vue.unref(rowsToRender);
          const { data, totalColumn, totalRow, useIsScrolling, itemKey } = props2;
          const children = [];
          if (totalRow > 0 && totalColumn > 0) {
            for (let row = rowStart; row <= rowEnd; row++) {
              for (let column = columnStart; column <= columnEnd; column++) {
                const key = itemKey({ columnIndex: column, data, rowIndex: row });
                children.push(vue.h(vue.Fragment, { key }, (_a2 = slots.default) == null ? void 0 : _a2.call(slots, {
                  columnIndex: column,
                  data,
                  isScrolling: useIsScrolling ? vue.unref(states).isScrolling : void 0,
                  style: getItemStyle(row, column),
                  rowIndex: row
                })));
              }
            }
          }
          return children;
        };
        const renderInner = () => {
          const Inner = vue.resolveDynamicComponent(props2.innerElement);
          const children = renderItems();
          return [
            vue.h(Inner, {
              style: vue.unref(innerStyle),
              ref: innerRef
            }, !shared.isString(Inner) ? {
              default: () => children
            } : children)
          ];
        };
        const renderWindow = () => {
          const Container2 = vue.resolveDynamicComponent(props2.containerElement);
          const { horizontalScrollbar, verticalScrollbar } = renderScrollbars();
          const Inner = renderInner();
          return vue.h("div", {
            key: 0,
            class: ns2.e("wrapper"),
            role: props2.role
          }, [
            vue.h(Container2, {
              class: props2.className,
              style: vue.unref(windowStyle),
              onScroll,
              ref: windowRef
            }, !shared.isString(Container2) ? { default: () => Inner } : Inner),
            horizontalScrollbar,
            verticalScrollbar
          ]);
        };
        return renderWindow;
      }
    });
  };
  const SCOPE$4 = "ElFixedSizeGrid";
  const FixedSizeGrid = createGrid({
    name: "ElFixedSizeGrid",
    getColumnPosition: ({ columnWidth }, index) => [
      columnWidth,
      index * columnWidth
    ],
    getRowPosition: ({ rowHeight }, index) => [
      rowHeight,
      index * rowHeight
    ],
    getEstimatedTotalHeight: ({ totalRow, rowHeight }) => rowHeight * totalRow,
    getEstimatedTotalWidth: ({ totalColumn, columnWidth }) => columnWidth * totalColumn,
    getColumnOffset: ({ totalColumn, columnWidth, width }, columnIndex, alignment, scrollLeft, _2, scrollBarWidth2) => {
      width = Number(width);
      const lastColumnOffset = Math.max(0, totalColumn * columnWidth - width);
      const maxOffset = Math.min(lastColumnOffset, columnIndex * columnWidth);
      const minOffset = Math.max(0, columnIndex * columnWidth - width + scrollBarWidth2 + columnWidth);
      if (alignment === "smart") {
        if (scrollLeft >= minOffset - width && scrollLeft <= maxOffset + width) {
          alignment = AUTO_ALIGNMENT;
        } else {
          alignment = CENTERED_ALIGNMENT;
        }
      }
      switch (alignment) {
        case START_ALIGNMENT:
          return maxOffset;
        case END_ALIGNMENT:
          return minOffset;
        case CENTERED_ALIGNMENT: {
          const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
          if (middleOffset < Math.ceil(width / 2)) {
            return 0;
          } else if (middleOffset > lastColumnOffset + Math.floor(width / 2)) {
            return lastColumnOffset;
          } else {
            return middleOffset;
          }
        }
        case AUTO_ALIGNMENT:
        default:
          if (scrollLeft >= minOffset && scrollLeft <= maxOffset) {
            return scrollLeft;
          } else if (minOffset > maxOffset) {
            return minOffset;
          } else if (scrollLeft < minOffset) {
            return minOffset;
          } else {
            return maxOffset;
          }
      }
    },
    getRowOffset: ({ rowHeight, height, totalRow }, rowIndex, align, scrollTop, _2, scrollBarWidth2) => {
      height = Number(height);
      const lastRowOffset = Math.max(0, totalRow * rowHeight - height);
      const maxOffset = Math.min(lastRowOffset, rowIndex * rowHeight);
      const minOffset = Math.max(0, rowIndex * rowHeight - height + scrollBarWidth2 + rowHeight);
      if (align === SMART_ALIGNMENT) {
        if (scrollTop >= minOffset - height && scrollTop <= maxOffset + height) {
          align = AUTO_ALIGNMENT;
        } else {
          align = CENTERED_ALIGNMENT;
        }
      }
      switch (align) {
        case START_ALIGNMENT:
          return maxOffset;
        case END_ALIGNMENT:
          return minOffset;
        case CENTERED_ALIGNMENT: {
          const middleOffset = Math.round(minOffset + (maxOffset - minOffset) / 2);
          if (middleOffset < Math.ceil(height / 2)) {
            return 0;
          } else if (middleOffset > lastRowOffset + Math.floor(height / 2)) {
            return lastRowOffset;
          } else {
            return middleOffset;
          }
        }
        case AUTO_ALIGNMENT:
        default:
          if (scrollTop >= minOffset && scrollTop <= maxOffset) {
            return scrollTop;
          } else if (minOffset > maxOffset) {
            return minOffset;
          } else if (scrollTop < minOffset) {
            return minOffset;
          } else {
            return maxOffset;
          }
      }
    },
    getColumnStartIndexForOffset: ({ columnWidth, totalColumn }, scrollLeft) => Math.max(0, Math.min(totalColumn - 1, Math.floor(scrollLeft / columnWidth))),
    getColumnStopIndexForStartIndex: ({ columnWidth, totalColumn, width }, startIndex, scrollLeft) => {
      const left2 = startIndex * columnWidth;
      const visibleColumnsCount = Math.ceil((width + scrollLeft - left2) / columnWidth);
      return Math.max(0, Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1));
    },
    getRowStartIndexForOffset: ({ rowHeight, totalRow }, scrollTop) => Math.max(0, Math.min(totalRow - 1, Math.floor(scrollTop / rowHeight))),
    getRowStopIndexForStartIndex: ({ rowHeight, totalRow, height }, startIndex, scrollTop) => {
      const top = startIndex * rowHeight;
      const numVisibleRows = Math.ceil((height + scrollTop - top) / rowHeight);
      return Math.max(0, Math.min(totalRow - 1, startIndex + numVisibleRows - 1));
    },
    initCache: () => void 0,
    clearCache: true,
    validateProps: ({ columnWidth, rowHeight }) => {
      {
        if (!isNumber$2(columnWidth)) {
          throwError(SCOPE$4, `
          "columnWidth" must be passed as number,
            instead ${typeof columnWidth} was given.
        `);
        }
        if (!isNumber$2(rowHeight)) {
          throwError(SCOPE$4, `
          "columnWidth" must be passed as number,
            instead ${typeof rowHeight} was given.
        `);
        }
      }
    }
  });
  const { max: max$1, min, floor } = Math;
  const SCOPE$3 = "ElDynamicSizeGrid";
  const ACCESS_SIZER_KEY_MAP = {
    column: "columnWidth",
    row: "rowHeight"
  };
  const ACCESS_LAST_VISITED_KEY_MAP = {
    column: "lastVisitedColumnIndex",
    row: "lastVisitedRowIndex"
  };
  const getItemFromCache = (props2, index, gridCache, type3) => {
    const [cachedItems, sizer, lastVisited] = [
      gridCache[type3],
      props2[ACCESS_SIZER_KEY_MAP[type3]],
      gridCache[ACCESS_LAST_VISITED_KEY_MAP[type3]]
    ];
    if (index > lastVisited) {
      let offset2 = 0;
      if (lastVisited >= 0) {
        const item = cachedItems[lastVisited];
        offset2 = item.offset + item.size;
      }
      for (let i2 = lastVisited + 1; i2 <= index; i2++) {
        const size = sizer(i2);
        cachedItems[i2] = {
          offset: offset2,
          size
        };
        offset2 += size;
      }
      gridCache[ACCESS_LAST_VISITED_KEY_MAP[type3]] = index;
    }
    return cachedItems[index];
  };
  const bs = (props2, gridCache, low, high, offset2, type3) => {
    while (low <= high) {
      const mid = low + floor((high - low) / 2);
      const currentOffset = getItemFromCache(props2, mid, gridCache, type3).offset;
      if (currentOffset === offset2) {
        return mid;
      } else if (currentOffset < offset2) {
        low = mid + 1;
      } else {
        high = mid - 1;
      }
    }
    return max$1(0, low - 1);
  };
  const es = (props2, gridCache, idx, offset2, type3) => {
    const total2 = type3 === "column" ? props2.totalColumn : props2.totalRow;
    let exponent = 1;
    while (idx < total2 && getItemFromCache(props2, idx, gridCache, type3).offset < offset2) {
      idx += exponent;
      exponent *= 2;
    }
    return bs(props2, gridCache, floor(idx / 2), min(idx, total2 - 1), offset2, type3);
  };
  const findItem = (props2, gridCache, offset2, type3) => {
    const [cache2, lastVisitedIndex] = [
      gridCache[type3],
      gridCache[ACCESS_LAST_VISITED_KEY_MAP[type3]]
    ];
    const lastVisitedItemOffset = lastVisitedIndex > 0 ? cache2[lastVisitedIndex].offset : 0;
    if (lastVisitedItemOffset >= offset2) {
      return bs(props2, gridCache, 0, lastVisitedIndex, offset2, type3);
    }
    return es(props2, gridCache, max$1(0, lastVisitedIndex), offset2, type3);
  };
  const getEstimatedTotalHeight = ({ totalRow }, { estimatedRowHeight, lastVisitedRowIndex, row }) => {
    let sizeOfVisitedRows = 0;
    if (lastVisitedRowIndex >= totalRow) {
      lastVisitedRowIndex = totalRow - 1;
    }
    if (lastVisitedRowIndex >= 0) {
      const item = row[lastVisitedRowIndex];
      sizeOfVisitedRows = item.offset + item.size;
    }
    const unvisitedItems = totalRow - lastVisitedRowIndex - 1;
    const sizeOfUnvisitedItems = unvisitedItems * estimatedRowHeight;
    return sizeOfVisitedRows + sizeOfUnvisitedItems;
  };
  const getEstimatedTotalWidth = ({ totalColumn }, { column, estimatedColumnWidth, lastVisitedColumnIndex }) => {
    let sizeOfVisitedColumns = 0;
    if (lastVisitedColumnIndex > totalColumn) {
      lastVisitedColumnIndex = totalColumn - 1;
    }
    if (lastVisitedColumnIndex >= 0) {
      const item = column[lastVisitedColumnIndex];
      sizeOfVisitedColumns = item.offset + item.size;
    }
    const unvisitedItems = totalColumn - lastVisitedColumnIndex - 1;
    const sizeOfUnvisitedItems = unvisitedItems * estimatedColumnWidth;
    return sizeOfVisitedColumns + sizeOfUnvisitedItems;
  };
  const ACCESS_ESTIMATED_SIZE_KEY_MAP = {
    column: getEstimatedTotalWidth,
    row: getEstimatedTotalHeight
  };
  const getOffset$1 = (props2, index, alignment, scrollOffset, cache2, type3, scrollBarWidth2) => {
    const [size, estimatedSizeAssociates] = [
      type3 === "row" ? props2.height : props2.width,
      ACCESS_ESTIMATED_SIZE_KEY_MAP[type3]
    ];
    const item = getItemFromCache(props2, index, cache2, type3);
    const estimatedSize = estimatedSizeAssociates(props2, cache2);
    const maxOffset = max$1(0, min(estimatedSize - size, item.offset));
    const minOffset = max$1(0, item.offset - size + scrollBarWidth2 + item.size);
    if (alignment === SMART_ALIGNMENT) {
      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {
        alignment = AUTO_ALIGNMENT;
      } else {
        alignment = CENTERED_ALIGNMENT;
      }
    }
    switch (alignment) {
      case START_ALIGNMENT: {
        return maxOffset;
      }
      case END_ALIGNMENT: {
        return minOffset;
      }
      case CENTERED_ALIGNMENT: {
        return Math.round(minOffset + (maxOffset - minOffset) / 2);
      }
      case AUTO_ALIGNMENT:
      default: {
        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {
          return scrollOffset;
        } else if (minOffset > maxOffset) {
          return minOffset;
        } else if (scrollOffset < minOffset) {
          return minOffset;
        } else {
          return maxOffset;
        }
      }
    }
  };
  const DynamicSizeGrid = createGrid({
    name: "ElDynamicSizeGrid",
    getColumnPosition: (props2, idx, cache2) => {
      const item = getItemFromCache(props2, idx, cache2, "column");
      return [item.size, item.offset];
    },
    getRowPosition: (props2, idx, cache2) => {
      const item = getItemFromCache(props2, idx, cache2, "row");
      return [item.size, item.offset];
    },
    getColumnOffset: (props2, columnIndex, alignment, scrollLeft, cache2, scrollBarWidth2) => getOffset$1(props2, columnIndex, alignment, scrollLeft, cache2, "column", scrollBarWidth2),
    getRowOffset: (props2, rowIndex, alignment, scrollTop, cache2, scrollBarWidth2) => getOffset$1(props2, rowIndex, alignment, scrollTop, cache2, "row", scrollBarWidth2),
    getColumnStartIndexForOffset: (props2, scrollLeft, cache2) => findItem(props2, cache2, scrollLeft, "column"),
    getColumnStopIndexForStartIndex: (props2, startIndex, scrollLeft, cache2) => {
      const item = getItemFromCache(props2, startIndex, cache2, "column");
      const maxOffset = scrollLeft + props2.width;
      let offset2 = item.offset + item.size;
      let stopIndex = startIndex;
      while (stopIndex < props2.totalColumn - 1 && offset2 < maxOffset) {
        stopIndex++;
        offset2 += getItemFromCache(props2, startIndex, cache2, "column").size;
      }
      return stopIndex;
    },
    getEstimatedTotalHeight,
    getEstimatedTotalWidth,
    getRowStartIndexForOffset: (props2, scrollTop, cache2) => findItem(props2, cache2, scrollTop, "row"),
    getRowStopIndexForStartIndex: (props2, startIndex, scrollTop, cache2) => {
      const { totalRow, height } = props2;
      const item = getItemFromCache(props2, startIndex, cache2, "row");
      const maxOffset = scrollTop + height;
      let offset2 = item.size + item.offset;
      let stopIndex = startIndex;
      while (stopIndex < totalRow - 1 && offset2 < maxOffset) {
        stopIndex++;
        offset2 += getItemFromCache(props2, stopIndex, cache2, "row").size;
      }
      return stopIndex;
    },
    injectToInstance: (instance, cache2) => {
      const resetAfter = ({ columnIndex, rowIndex }, forceUpdate) => {
        var _a2, _b;
        forceUpdate = isUndefined(forceUpdate) ? true : forceUpdate;
        if (isNumber$2(columnIndex)) {
          cache2.value.lastVisitedColumnIndex = Math.min(cache2.value.lastVisitedColumnIndex, columnIndex - 1);
        }
        if (isNumber$2(rowIndex)) {
          cache2.value.lastVisitedRowIndex = Math.min(cache2.value.lastVisitedRowIndex, rowIndex - 1);
        }
        (_a2 = instance.exposed) == null ? void 0 : _a2.getItemStyleCache.value(-1, null, null);
        if (forceUpdate)
          (_b = instance.proxy) == null ? void 0 : _b.$forceUpdate();
      };
      const resetAfterColumnIndex = (columnIndex, forceUpdate) => {
        resetAfter({
          columnIndex
        }, forceUpdate);
      };
      const resetAfterRowIndex = (rowIndex, forceUpdate) => {
        resetAfter({
          rowIndex
        }, forceUpdate);
      };
      Object.assign(instance.proxy, {
        resetAfterColumnIndex,
        resetAfterRowIndex,
        resetAfter
      });
    },
    initCache: ({
      estimatedColumnWidth = DEFAULT_DYNAMIC_LIST_ITEM_SIZE,
      estimatedRowHeight = DEFAULT_DYNAMIC_LIST_ITEM_SIZE
    }) => {
      const cache2 = {
        column: {},
        estimatedColumnWidth,
        estimatedRowHeight,
        lastVisitedColumnIndex: -1,
        lastVisitedRowIndex: -1,
        row: {}
      };
      return cache2;
    },
    clearCache: false,
    validateProps: ({ columnWidth, rowHeight }) => {
      {
        if (!shared.isFunction(columnWidth)) {
          throwError(SCOPE$3, `
          "columnWidth" must be passed as function,
            instead ${typeof columnWidth} was given.
        `);
        }
        if (!shared.isFunction(rowHeight)) {
          throwError(SCOPE$3, `
          "rowHeight" must be passed as function,
            instead ${typeof rowHeight} was given.
        `);
        }
      }
    }
  });
  const _sfc_main$O = vue.defineComponent({
    props: {
      item: {
        type: Object,
        required: true
      },
      style: {
        type: Object
      },
      height: Number
    },
    setup() {
      const ns2 = useNamespace("select");
      return {
        ns: ns2
      };
    }
  });
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(_ctx.ns.be("group", "title")),
      style: vue.normalizeStyle({ ..._ctx.style, lineHeight: `${_ctx.height}px` })
    }, vue.toDisplayString(_ctx.item.label), 7);
  }
  var GroupItem = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$7], ["__file", "group-item.vue"]]);
  function useOption(props2, { emit }) {
    return {
      hoverItem: () => {
        if (!props2.disabled) {
          emit("hover", props2.index);
        }
      },
      selectOptionClick: () => {
        if (!props2.disabled) {
          emit("select", props2.item, props2.index);
        }
      }
    };
  }
  const defaultProps$3 = {
    label: "label",
    value: "value",
    disabled: "disabled",
    options: "options"
  };
  function useProps(props2) {
    const aliasProps = vue.computed(() => ({ ...defaultProps$3, ...props2.props }));
    const getLabel = (option) => get(option, aliasProps.value.label);
    const getValue2 = (option) => get(option, aliasProps.value.value);
    const getDisabled = (option) => get(option, aliasProps.value.disabled);
    const getOptions = (option) => get(option, aliasProps.value.options);
    return {
      aliasProps,
      getLabel,
      getValue: getValue2,
      getDisabled,
      getOptions
    };
  }
  const SelectProps = buildProps({
    allowCreate: Boolean,
    autocomplete: {
      type: definePropType(String),
      default: "none"
    },
    automaticDropdown: Boolean,
    clearable: Boolean,
    clearIcon: {
      type: iconPropType,
      default: circle_close_default
    },
    effect: {
      type: definePropType(String),
      default: "light"
    },
    collapseTags: Boolean,
    collapseTagsTooltip: Boolean,
    maxCollapseTags: {
      type: Number,
      default: 1
    },
    defaultFirstOption: Boolean,
    disabled: Boolean,
    estimatedOptionHeight: {
      type: Number,
      default: void 0
    },
    filterable: Boolean,
    filterMethod: Function,
    height: {
      type: Number,
      default: 274
    },
    itemHeight: {
      type: Number,
      default: 34
    },
    id: String,
    loading: Boolean,
    loadingText: String,
    modelValue: {
      type: definePropType([Array, String, Number, Boolean, Object])
    },
    multiple: Boolean,
    multipleLimit: {
      type: Number,
      default: 0
    },
    name: String,
    noDataText: String,
    noMatchText: String,
    remoteMethod: Function,
    reserveKeyword: {
      type: Boolean,
      default: true
    },
    options: {
      type: definePropType(Array),
      required: true
    },
    placeholder: {
      type: String
    },
    teleported: useTooltipContentProps.teleported,
    persistent: {
      type: Boolean,
      default: true
    },
    popperClass: {
      type: String,
      default: ""
    },
    popperOptions: {
      type: definePropType(Object),
      default: () => ({})
    },
    remote: Boolean,
    size: useSizeProp,
    props: {
      type: definePropType(Object),
      default: () => defaultProps$3
    },
    valueKey: {
      type: String,
      default: "value"
    },
    scrollbarAlwaysOn: Boolean,
    validateEvent: {
      type: Boolean,
      default: true
    },
    placement: {
      type: definePropType(String),
      values: Ee,
      default: "bottom-start"
    },
    fallbackPlacements: {
      type: definePropType(Array),
      default: ["bottom-start", "top-start", "right", "left"]
    },
    tagType: { ...tagProps.type, default: "info" },
    tagEffect: { ...tagProps.effect, default: "light" },
    ...useEmptyValuesProps,
    ...useAriaProps(["ariaLabel"])
  });
  const OptionProps = buildProps({
    data: Array,
    disabled: Boolean,
    hovering: Boolean,
    item: {
      type: definePropType(Object),
      required: true
    },
    index: Number,
    style: Object,
    selected: Boolean,
    created: Boolean
  });
  const selectEmits = {
    [UPDATE_MODEL_EVENT]: (val) => true,
    [CHANGE_EVENT]: (val) => true,
    "remove-tag": (val) => true,
    "visible-change": (visible) => true,
    focus: (evt) => evt instanceof FocusEvent,
    blur: (evt) => evt instanceof FocusEvent,
    clear: () => true
  };
  const optionEmits = {
    hover: (index) => isNumber$2(index),
    select: (val, index) => true
  };
  const selectV2InjectionKey = Symbol("ElSelectV2Injection");
  const _sfc_main$N = vue.defineComponent({
    props: OptionProps,
    emits: optionEmits,
    setup(props2, { emit }) {
      const select = vue.inject(selectV2InjectionKey);
      const ns2 = useNamespace("select");
      const { hoverItem, selectOptionClick } = useOption(props2, { emit });
      const { getLabel } = useProps(select.props);
      return {
        ns: ns2,
        hoverItem,
        selectOptionClick,
        getLabel
      };
    }
  });
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("li", {
      "aria-selected": _ctx.selected,
      style: vue.normalizeStyle(_ctx.style),
      class: vue.normalizeClass([
        _ctx.ns.be("dropdown", "item"),
        _ctx.ns.is("selected", _ctx.selected),
        _ctx.ns.is("disabled", _ctx.disabled),
        _ctx.ns.is("created", _ctx.created),
        _ctx.ns.is("hovering", _ctx.hovering)
      ]),
      onMouseenter: _ctx.hoverItem,
      onClick: vue.withModifiers(_ctx.selectOptionClick, ["stop"])
    }, [
      vue.renderSlot(_ctx.$slots, "default", {
        item: _ctx.item,
        index: _ctx.index,
        disabled: _ctx.disabled
      }, () => [
        vue.createElementVNode("span", null, vue.toDisplayString(_ctx.getLabel(_ctx.item)), 1)
      ])
    ], 46, ["aria-selected", "onMouseenter", "onClick"]);
  }
  var OptionItem = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$6], ["__file", "option-item.vue"]]);
  const props = {
    loading: Boolean,
    data: {
      type: Array,
      required: true
    },
    hoveringIndex: Number,
    width: Number
  };
  var ElSelectMenu = vue.defineComponent({
    name: "ElSelectDropdown",
    props,
    setup(props2, {
      slots,
      expose
    }) {
      const select = vue.inject(selectV2InjectionKey);
      const ns2 = useNamespace("select");
      const {
        getLabel,
        getValue: getValue2,
        getDisabled
      } = useProps(select.props);
      const cachedHeights = vue.ref([]);
      const listRef = vue.ref();
      const size = vue.computed(() => props2.data.length);
      vue.watch(() => size.value, () => {
        var _a2, _b;
        (_b = (_a2 = select.tooltipRef.value).updatePopper) == null ? void 0 : _b.call(_a2);
      });
      const isSized = vue.computed(() => isUndefined(select.props.estimatedOptionHeight));
      const listProps = vue.computed(() => {
        if (isSized.value) {
          return {
            itemSize: select.props.itemHeight
          };
        }
        return {
          estimatedSize: select.props.estimatedOptionHeight,
          itemSize: (idx) => cachedHeights.value[idx]
        };
      });
      const contains = (arr = [], target) => {
        const {
          props: {
            valueKey
          }
        } = select;
        if (!shared.isObject(target)) {
          return arr.includes(target);
        }
        return arr && arr.some((item) => {
          return vue.toRaw(get(item, valueKey)) === get(target, valueKey);
        });
      };
      const isEqual2 = (selected, target) => {
        if (!shared.isObject(target)) {
          return selected === target;
        } else {
          const {
            valueKey
          } = select.props;
          return get(selected, valueKey) === get(target, valueKey);
        }
      };
      const isItemSelected = (modelValue, target) => {
        if (select.props.multiple) {
          return contains(modelValue, getValue2(target));
        }
        return isEqual2(modelValue, getValue2(target));
      };
      const isItemDisabled = (modelValue, selected) => {
        const {
          disabled,
          multiple,
          multipleLimit
        } = select.props;
        return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);
      };
      const isItemHovering = (target) => props2.hoveringIndex === target;
      const scrollToItem = (index) => {
        const list = listRef.value;
        if (list) {
          list.scrollToItem(index);
        }
      };
      const resetScrollTop = () => {
        const list = listRef.value;
        if (list) {
          list.resetScrollTop();
        }
      };
      const exposed = {
        listRef,
        isSized,
        isItemDisabled,
        isItemHovering,
        isItemSelected,
        scrollToItem,
        resetScrollTop
      };
      expose(exposed);
      const Item = (itemProps) => {
        const {
          index,
          data,
          style
        } = itemProps;
        const sized = vue.unref(isSized);
        const {
          itemSize: itemSize2,
          estimatedSize
        } = vue.unref(listProps);
        const {
          modelValue
        } = select.props;
        const {
          onSelect,
          onHover
        } = select;
        const item = data[index];
        if (item.type === "Group") {
          return vue.createVNode(GroupItem, {
            "item": item,
            "style": style,
            "height": sized ? itemSize2 : estimatedSize
          }, null);
        }
        const isSelected = isItemSelected(modelValue, item);
        const isDisabled = isItemDisabled(modelValue, isSelected);
        const isHovering = isItemHovering(index);
        return vue.createVNode(OptionItem, vue.mergeProps(itemProps, {
          "selected": isSelected,
          "disabled": getDisabled(item) || isDisabled,
          "created": !!item.created,
          "hovering": isHovering,
          "item": item,
          "onSelect": onSelect,
          "onHover": onHover
        }), {
          default: (props3) => {
            var _a2;
            return ((_a2 = slots.default) == null ? void 0 : _a2.call(slots, props3)) || vue.createVNode("span", null, [getLabel(item)]);
          }
        });
      };
      const {
        onKeyboardNavigate,
        onKeyboardSelect
      } = select;
      const onForward = () => {
        onKeyboardNavigate("forward");
      };
      const onBackward = () => {
        onKeyboardNavigate("backward");
      };
      const onKeydown = (e) => {
        const {
          code
        } = e;
        const {
          tab,
          esc,
          down: down2,
          up: up2,
          enter
        } = EVENT_CODE;
        if (code !== tab) {
          e.preventDefault();
          e.stopPropagation();
        }
        switch (code) {
          case tab:
          case esc: {
            break;
          }
          case down2: {
            onForward();
            break;
          }
          case up2: {
            onBackward();
            break;
          }
          case enter: {
            onKeyboardSelect();
            break;
          }
        }
      };
      return () => {
        var _a2, _b, _c, _d;
        const {
          data,
          width
        } = props2;
        const {
          height,
          multiple,
          scrollbarAlwaysOn
        } = select.props;
        const List = vue.unref(isSized) ? FixedSizeList : DynamicSizeList;
        return vue.createVNode("div", {
          "class": [ns2.b("dropdown"), ns2.is("multiple", multiple)],
          "style": {
            width: `${width}px`
          }
        }, [(_a2 = slots.header) == null ? void 0 : _a2.call(slots), ((_b = slots.loading) == null ? void 0 : _b.call(slots)) || ((_c = slots.empty) == null ? void 0 : _c.call(slots)) || vue.createVNode(List, vue.mergeProps({
          "ref": listRef
        }, vue.unref(listProps), {
          "className": ns2.be("dropdown", "list"),
          "scrollbarAlwaysOn": scrollbarAlwaysOn,
          "data": data,
          "height": height,
          "width": width,
          "total": data.length,
          "onKeydown": onKeydown
        }), {
          default: (props3) => vue.createVNode(Item, props3, null)
        }), (_d = slots.footer) == null ? void 0 : _d.call(slots)]);
      };
    }
  });
  function useAllowCreate(props2, states) {
    const { aliasProps, getLabel, getValue: getValue2 } = useProps(props2);
    const createOptionCount = vue.ref(0);
    const cachedSelectedOption = vue.ref();
    const enableAllowCreateMode = vue.computed(() => {
      return props2.allowCreate && props2.filterable;
    });
    function hasExistingOption(query) {
      const hasOption = (option) => getLabel(option) === query;
      return props2.options && props2.options.some(hasOption) || states.createdOptions.some(hasOption);
    }
    function selectNewOption(option) {
      if (!enableAllowCreateMode.value) {
        return;
      }
      if (props2.multiple && option.created) {
        createOptionCount.value++;
      } else {
        cachedSelectedOption.value = option;
      }
    }
    function createNewOption(query) {
      if (enableAllowCreateMode.value) {
        if (query && query.length > 0) {
          if (hasExistingOption(query)) {
            return;
          }
          const newOption = {
            [aliasProps.value.value]: query,
            [aliasProps.value.label]: query,
            created: true,
            [aliasProps.value.disabled]: false
          };
          if (states.createdOptions.length >= createOptionCount.value) {
            states.createdOptions[createOptionCount.value] = newOption;
          } else {
            states.createdOptions.push(newOption);
          }
        } else {
          if (props2.multiple) {
            states.createdOptions.length = createOptionCount.value;
          } else {
            const selectedOption = cachedSelectedOption.value;
            states.createdOptions.length = 0;
            if (selectedOption && selectedOption.created) {
              states.createdOptions.push(selectedOption);
            }
          }
        }
      }
    }
    function removeNewOption(option) {
      if (!enableAllowCreateMode.value || !option || !option.created || option.created && props2.reserveKeyword && states.inputValue === getLabel(option)) {
        return;
      }
      const idx = states.createdOptions.findIndex((it2) => getValue2(it2) === getValue2(option));
      if (~idx) {
        states.createdOptions.splice(idx, 1);
        createOptionCount.value--;
      }
    }
    function clearAllNewOption() {
      if (enableAllowCreateMode.value) {
        states.createdOptions.length = 0;
        createOptionCount.value = 0;
      }
    }
    return {
      createNewOption,
      removeNewOption,
      selectNewOption,
      clearAllNewOption
    };
  }
  const MINIMUM_INPUT_WIDTH = 11;
  const useSelect$1 = (props2, emit) => {
    const { t: t2 } = useLocale();
    const nsSelect = useNamespace("select");
    const nsInput = useNamespace("input");
    const { form: elForm, formItem: elFormItem } = useFormItem();
    const { inputId } = useFormItemInputId(props2, {
      formItemContext: elFormItem
    });
    const { aliasProps, getLabel, getValue: getValue2, getDisabled, getOptions } = useProps(props2);
    const { valueOnClear, isEmptyValue: isEmptyValue2 } = useEmptyValues(props2);
    const states = vue.reactive({
      inputValue: "",
      cachedOptions: [],
      createdOptions: [],
      hoveringIndex: -1,
      inputHovering: false,
      selectionWidth: 0,
      calculatorWidth: 0,
      collapseItemWidth: 0,
      previousQuery: null,
      previousValue: void 0,
      selectedLabel: "",
      menuVisibleOnFocus: false,
      isBeforeHide: false
    });
    const popperSize = vue.ref(-1);
    const selectRef = vue.ref();
    const selectionRef = vue.ref();
    const tooltipRef = vue.ref();
    const tagTooltipRef = vue.ref();
    const inputRef = vue.ref();
    const calculatorRef = vue.ref();
    const prefixRef = vue.ref();
    const suffixRef = vue.ref();
    const menuRef = vue.ref();
    const tagMenuRef = vue.ref();
    const collapseItemRef = vue.ref();
    const {
      isComposing,
      handleCompositionStart,
      handleCompositionEnd,
      handleCompositionUpdate
    } = useComposition({
      afterComposition: (e) => onInput(e)
    });
    const { wrapperRef, isFocused, handleBlur } = useFocusController(inputRef, {
      beforeFocus() {
        return selectDisabled.value;
      },
      afterFocus() {
        if (props2.automaticDropdown && !expanded.value) {
          expanded.value = true;
          states.menuVisibleOnFocus = true;
        }
      },
      beforeBlur(event) {
        var _a2, _b;
        return ((_a2 = tooltipRef.value) == null ? void 0 : _a2.isFocusInsideContent(event)) || ((_b = tagTooltipRef.value) == null ? void 0 : _b.isFocusInsideContent(event));
      },
      afterBlur() {
        expanded.value = false;
        states.menuVisibleOnFocus = false;
      }
    });
    const allOptions = vue.ref([]);
    const filteredOptions = vue.ref([]);
    const expanded = vue.ref(false);
    const selectDisabled = vue.computed(() => props2.disabled || (elForm == null ? void 0 : elForm.disabled));
    const popupHeight = vue.computed(() => {
      const totalHeight = filteredOptions.value.length * props2.itemHeight;
      return totalHeight > props2.height ? props2.height : totalHeight;
    });
    const hasModelValue = vue.computed(() => {
      return props2.multiple ? shared.isArray(props2.modelValue) && props2.modelValue.length > 0 : !isEmptyValue2(props2.modelValue);
    });
    const showClearBtn = vue.computed(() => {
      return props2.clearable && !selectDisabled.value && states.inputHovering && hasModelValue.value;
    });
    const iconComponent = vue.computed(() => props2.remote && props2.filterable ? "" : arrow_down_default);
    const iconReverse = vue.computed(() => iconComponent.value && nsSelect.is("reverse", expanded.value));
    const validateState = vue.computed(() => (elFormItem == null ? void 0 : elFormItem.validateState) || "");
    const validateIcon = vue.computed(() => {
      if (!validateState.value)
        return;
      return ValidateComponentsMap[validateState.value];
    });
    const debounce$1 = vue.computed(() => props2.remote ? 300 : 0);
    const emptyText = vue.computed(() => {
      if (props2.loading) {
        return props2.loadingText || t2("el.select.loading");
      } else {
        if (props2.remote && !states.inputValue && allOptions.value.length === 0)
          return false;
        if (props2.filterable && states.inputValue && allOptions.value.length > 0 && filteredOptions.value.length === 0) {
          return props2.noMatchText || t2("el.select.noMatch");
        }
        if (allOptions.value.length === 0) {
          return props2.noDataText || t2("el.select.noData");
        }
      }
      return null;
    });
    const filterOptions = (query) => {
      const isValidOption = (o2) => {
        if (props2.filterable && shared.isFunction(props2.filterMethod))
          return true;
        if (props2.filterable && props2.remote && shared.isFunction(props2.remoteMethod))
          return true;
        const regexp = new RegExp(escapeStringRegexp(query), "i");
        return query ? regexp.test(getLabel(o2) || "") : true;
      };
      if (props2.loading) {
        return [];
      }
      return [...states.createdOptions, ...props2.options].reduce((all, item) => {
        const options = getOptions(item);
        if (shared.isArray(options)) {
          const filtered = options.filter(isValidOption);
          if (filtered.length > 0) {
            all.push({
              label: getLabel(item),
              type: "Group"
            }, ...filtered);
          }
        } else if (props2.remote || isValidOption(item)) {
          all.push(item);
        }
        return all;
      }, []);
    };
    const updateOptions2 = () => {
      allOptions.value = filterOptions("");
      filteredOptions.value = filterOptions(states.inputValue);
    };
    const allOptionsValueMap = vue.computed(() => {
      const valueMap = /* @__PURE__ */ new Map();
      allOptions.value.forEach((option, index) => {
        valueMap.set(getValueKey(getValue2(option)), { option, index });
      });
      return valueMap;
    });
    const filteredOptionsValueMap = vue.computed(() => {
      const valueMap = /* @__PURE__ */ new Map();
      filteredOptions.value.forEach((option, index) => {
        valueMap.set(getValueKey(getValue2(option)), { option, index });
      });
      return valueMap;
    });
    const optionsAllDisabled = vue.computed(() => filteredOptions.value.every((option) => getDisabled(option)));
    const selectSize = useFormSize();
    const collapseTagSize = vue.computed(() => selectSize.value === "small" ? "small" : "default");
    const calculatePopperSize = () => {
      var _a2;
      popperSize.value = ((_a2 = selectRef.value) == null ? void 0 : _a2.offsetWidth) || 200;
    };
    const getGapWidth = () => {
      if (!selectionRef.value)
        return 0;
      const style = window.getComputedStyle(selectionRef.value);
      return Number.parseFloat(style.gap || "6px");
    };
    const tagStyle = vue.computed(() => {
      const gapWidth = getGapWidth();
      const maxWidth = collapseItemRef.value && props2.maxCollapseTags === 1 ? states.selectionWidth - states.collapseItemWidth - gapWidth : states.selectionWidth;
      return { maxWidth: `${maxWidth}px` };
    });
    const collapseTagStyle = vue.computed(() => {
      return { maxWidth: `${states.selectionWidth}px` };
    });
    const inputStyle = vue.computed(() => ({
      width: `${Math.max(states.calculatorWidth, MINIMUM_INPUT_WIDTH)}px`
    }));
    const shouldShowPlaceholder = vue.computed(() => {
      if (shared.isArray(props2.modelValue)) {
        return props2.modelValue.length === 0 && !states.inputValue;
      }
      return props2.filterable ? !states.inputValue : true;
    });
    const currentPlaceholder = vue.computed(() => {
      var _a2;
      const _placeholder = (_a2 = props2.placeholder) != null ? _a2 : t2("el.select.placeholder");
      return props2.multiple || !hasModelValue.value ? _placeholder : states.selectedLabel;
    });
    const popperRef = vue.computed(() => {
      var _a2, _b;
      return (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
    });
    const indexRef = vue.computed(() => {
      if (props2.multiple) {
        const len = props2.modelValue.length;
        if (props2.modelValue.length > 0 && filteredOptionsValueMap.value.has(props2.modelValue[len - 1])) {
          const { index } = filteredOptionsValueMap.value.get(props2.modelValue[len - 1]);
          return index;
        }
      } else {
        if (props2.modelValue && filteredOptionsValueMap.value.has(props2.modelValue)) {
          const { index } = filteredOptionsValueMap.value.get(props2.modelValue);
          return index;
        }
      }
      return -1;
    });
    const dropdownMenuVisible = vue.computed({
      get() {
        return expanded.value && emptyText.value !== false;
      },
      set(val) {
        expanded.value = val;
      }
    });
    const showTagList = vue.computed(() => {
      if (!props2.multiple) {
        return [];
      }
      return props2.collapseTags ? states.cachedOptions.slice(0, props2.maxCollapseTags) : states.cachedOptions;
    });
    const collapseTagList = vue.computed(() => {
      if (!props2.multiple) {
        return [];
      }
      return props2.collapseTags ? states.cachedOptions.slice(props2.maxCollapseTags) : [];
    });
    const {
      createNewOption,
      removeNewOption,
      selectNewOption,
      clearAllNewOption
    } = useAllowCreate(props2, states);
    const toggleMenu = () => {
      if (selectDisabled.value)
        return;
      if (states.menuVisibleOnFocus) {
        states.menuVisibleOnFocus = false;
      } else {
        expanded.value = !expanded.value;
      }
    };
    const onInputChange = () => {
      if (states.inputValue.length > 0 && !expanded.value) {
        expanded.value = true;
      }
      createNewOption(states.inputValue);
      handleQueryChange(states.inputValue);
    };
    const debouncedOnInputChange = debounce(onInputChange, debounce$1.value);
    const handleQueryChange = (val) => {
      if (states.previousQuery === val || isComposing.value) {
        return;
      }
      states.previousQuery = val;
      if (props2.filterable && shared.isFunction(props2.filterMethod)) {
        props2.filterMethod(val);
      } else if (props2.filterable && props2.remote && shared.isFunction(props2.remoteMethod)) {
        props2.remoteMethod(val);
      }
      if (props2.defaultFirstOption && (props2.filterable || props2.remote) && filteredOptions.value.length) {
        vue.nextTick(checkDefaultFirstOption);
      } else {
        vue.nextTick(updateHoveringIndex);
      }
    };
    const checkDefaultFirstOption = () => {
      const optionsInDropdown = filteredOptions.value.filter((n2) => !n2.disabled && n2.type !== "Group");
      const userCreatedOption = optionsInDropdown.find((n2) => n2.created);
      const firstOriginOption = optionsInDropdown[0];
      states.hoveringIndex = getValueIndex(filteredOptions.value, userCreatedOption || firstOriginOption);
    };
    const emitChange = (val) => {
      if (!isEqual$1(props2.modelValue, val)) {
        emit(CHANGE_EVENT, val);
      }
    };
    const update = (val) => {
      emit(UPDATE_MODEL_EVENT, val);
      emitChange(val);
      states.previousValue = props2.multiple ? String(val) : val;
    };
    const getValueIndex = (arr = [], value) => {
      if (!shared.isObject(value)) {
        return arr.indexOf(value);
      }
      const valueKey = props2.valueKey;
      let index = -1;
      arr.some((item, i2) => {
        if (get(item, valueKey) === get(value, valueKey)) {
          index = i2;
          return true;
        }
        return false;
      });
      return index;
    };
    const getValueKey = (item) => {
      return shared.isObject(item) ? get(item, props2.valueKey) : item;
    };
    const handleResize = () => {
      calculatePopperSize();
    };
    const resetSelectionWidth = () => {
      states.selectionWidth = selectionRef.value.getBoundingClientRect().width;
    };
    const resetCalculatorWidth = () => {
      states.calculatorWidth = calculatorRef.value.getBoundingClientRect().width;
    };
    const resetCollapseItemWidth = () => {
      states.collapseItemWidth = collapseItemRef.value.getBoundingClientRect().width;
    };
    const updateTooltip = () => {
      var _a2, _b;
      (_b = (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
    };
    const updateTagTooltip = () => {
      var _a2, _b;
      (_b = (_a2 = tagTooltipRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
    };
    const onSelect = (option) => {
      if (props2.multiple) {
        let selectedOptions = props2.modelValue.slice();
        const index = getValueIndex(selectedOptions, getValue2(option));
        if (index > -1) {
          selectedOptions = [
            ...selectedOptions.slice(0, index),
            ...selectedOptions.slice(index + 1)
          ];
          states.cachedOptions.splice(index, 1);
          removeNewOption(option);
        } else if (props2.multipleLimit <= 0 || selectedOptions.length < props2.multipleLimit) {
          selectedOptions = [...selectedOptions, getValue2(option)];
          states.cachedOptions.push(option);
          selectNewOption(option);
        }
        update(selectedOptions);
        if (option.created) {
          handleQueryChange("");
        }
        if (props2.filterable && !props2.reserveKeyword) {
          states.inputValue = "";
        }
      } else {
        states.selectedLabel = getLabel(option);
        update(getValue2(option));
        expanded.value = false;
        selectNewOption(option);
        if (!option.created) {
          clearAllNewOption();
        }
      }
      focus();
    };
    const deleteTag = (event, option) => {
      let selectedOptions = props2.modelValue.slice();
      const index = getValueIndex(selectedOptions, getValue2(option));
      if (index > -1 && !selectDisabled.value) {
        selectedOptions = [
          ...props2.modelValue.slice(0, index),
          ...props2.modelValue.slice(index + 1)
        ];
        states.cachedOptions.splice(index, 1);
        update(selectedOptions);
        emit("remove-tag", getValue2(option));
        removeNewOption(option);
      }
      event.stopPropagation();
      focus();
    };
    const focus = () => {
      var _a2;
      (_a2 = inputRef.value) == null ? void 0 : _a2.focus();
    };
    const blur = () => {
      var _a2;
      if (expanded.value) {
        expanded.value = false;
        vue.nextTick(() => {
          var _a22;
          return (_a22 = inputRef.value) == null ? void 0 : _a22.blur();
        });
        return;
      }
      (_a2 = inputRef.value) == null ? void 0 : _a2.blur();
    };
    const handleEsc = () => {
      if (states.inputValue.length > 0) {
        states.inputValue = "";
      } else {
        expanded.value = false;
      }
    };
    const getLastNotDisabledIndex = (value) => findLastIndex(value, (it2) => !states.cachedOptions.some((option) => getValue2(option) === it2 && getDisabled(option)));
    const handleDel = (e) => {
      if (!props2.multiple)
        return;
      if (e.code === EVENT_CODE.delete)
        return;
      if (states.inputValue.length === 0) {
        e.preventDefault();
        const selected = props2.modelValue.slice();
        const lastNotDisabledIndex = getLastNotDisabledIndex(selected);
        if (lastNotDisabledIndex < 0)
          return;
        const removeTagValue = selected[lastNotDisabledIndex];
        selected.splice(lastNotDisabledIndex, 1);
        const option = states.cachedOptions[lastNotDisabledIndex];
        states.cachedOptions.splice(lastNotDisabledIndex, 1);
        removeNewOption(option);
        update(selected);
        emit("remove-tag", removeTagValue);
      }
    };
    const handleClear = () => {
      let emptyValue;
      if (shared.isArray(props2.modelValue)) {
        emptyValue = [];
      } else {
        emptyValue = valueOnClear.value;
      }
      if (props2.multiple) {
        states.cachedOptions = [];
      } else {
        states.selectedLabel = "";
      }
      expanded.value = false;
      update(emptyValue);
      emit("clear");
      clearAllNewOption();
      focus();
    };
    const onKeyboardNavigate = (direction2, hoveringIndex = void 0) => {
      const options = filteredOptions.value;
      if (!["forward", "backward"].includes(direction2) || selectDisabled.value || options.length <= 0 || optionsAllDisabled.value || isComposing.value) {
        return;
      }
      if (!expanded.value) {
        return toggleMenu();
      }
      if (hoveringIndex === void 0) {
        hoveringIndex = states.hoveringIndex;
      }
      let newIndex = -1;
      if (direction2 === "forward") {
        newIndex = hoveringIndex + 1;
        if (newIndex >= options.length) {
          newIndex = 0;
        }
      } else if (direction2 === "backward") {
        newIndex = hoveringIndex - 1;
        if (newIndex < 0 || newIndex >= options.length) {
          newIndex = options.length - 1;
        }
      }
      const option = options[newIndex];
      if (getDisabled(option) || option.type === "Group") {
        return onKeyboardNavigate(direction2, newIndex);
      } else {
        states.hoveringIndex = newIndex;
        scrollToItem(newIndex);
      }
    };
    const onKeyboardSelect = () => {
      if (!expanded.value) {
        return toggleMenu();
      } else if (~states.hoveringIndex && filteredOptions.value[states.hoveringIndex]) {
        onSelect(filteredOptions.value[states.hoveringIndex]);
      }
    };
    const onHoverOption = (idx) => {
      states.hoveringIndex = idx != null ? idx : -1;
    };
    const updateHoveringIndex = () => {
      if (!props2.multiple) {
        states.hoveringIndex = filteredOptions.value.findIndex((item) => {
          return getValueKey(item) === getValueKey(props2.modelValue);
        });
      } else {
        states.hoveringIndex = filteredOptions.value.findIndex((item) => props2.modelValue.some((modelValue) => getValueKey(modelValue) === getValueKey(item)));
      }
    };
    const onInput = (event) => {
      states.inputValue = event.target.value;
      if (props2.remote) {
        debouncedOnInputChange();
      } else {
        return onInputChange();
      }
    };
    const handleClickOutside = (event) => {
      expanded.value = false;
      if (isFocused.value) {
        const _event2 = new FocusEvent("focus", event);
        handleBlur(_event2);
      }
    };
    const handleMenuEnter = () => {
      states.isBeforeHide = false;
      return vue.nextTick(() => {
        if (~indexRef.value) {
          scrollToItem(states.hoveringIndex);
        }
      });
    };
    const scrollToItem = (index) => {
      menuRef.value.scrollToItem(index);
    };
    const getOption = (value, cachedOptions) => {
      const selectValue = getValueKey(value);
      if (allOptionsValueMap.value.has(selectValue)) {
        const { option } = allOptionsValueMap.value.get(selectValue);
        return option;
      }
      if (cachedOptions && cachedOptions.length) {
        const option = cachedOptions.find((option2) => getValueKey(getValue2(option2)) === selectValue);
        if (option) {
          return option;
        }
      }
      return {
        [aliasProps.value.value]: value,
        [aliasProps.value.label]: value
      };
    };
    const initStates = (needUpdateSelectedLabel = false) => {
      if (props2.multiple) {
        if (props2.modelValue.length > 0) {
          const cachedOptions = states.cachedOptions.slice();
          states.cachedOptions.length = 0;
          states.previousValue = props2.modelValue.toString();
          for (const value of props2.modelValue) {
            const option = getOption(value, cachedOptions);
            states.cachedOptions.push(option);
          }
        } else {
          states.cachedOptions = [];
          states.previousValue = void 0;
        }
      } else {
        if (hasModelValue.value) {
          states.previousValue = props2.modelValue;
          const options = filteredOptions.value;
          const selectedItemIndex = options.findIndex((option) => getValueKey(getValue2(option)) === getValueKey(props2.modelValue));
          if (~selectedItemIndex) {
            states.selectedLabel = getLabel(options[selectedItemIndex]);
          } else {
            if (!states.selectedLabel || needUpdateSelectedLabel) {
              states.selectedLabel = getValueKey(props2.modelValue);
            }
          }
        } else {
          states.selectedLabel = "";
          states.previousValue = void 0;
        }
      }
      clearAllNewOption();
      calculatePopperSize();
    };
    vue.watch(expanded, (val) => {
      if (val) {
        handleQueryChange("");
      } else {
        states.inputValue = "";
        states.previousQuery = null;
        states.isBeforeHide = true;
        createNewOption("");
      }
      emit("visible-change", val);
    });
    vue.watch(() => props2.modelValue, (val, oldVal) => {
      var _a2;
      if (!val || props2.multiple && val.toString() !== states.previousValue || !props2.multiple && getValueKey(val) !== getValueKey(states.previousValue)) {
        initStates(true);
      }
      if (!isEqual$1(val, oldVal) && props2.validateEvent) {
        (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn(err));
      }
    }, {
      deep: true
    });
    vue.watch(() => props2.options, () => {
      const input = inputRef.value;
      if (!input || input && document.activeElement !== input) {
        initStates();
      }
    }, {
      deep: true,
      flush: "post"
    });
    vue.watch(() => filteredOptions.value, () => {
      return menuRef.value && vue.nextTick(menuRef.value.resetScrollTop);
    });
    vue.watchEffect(() => {
      if (states.isBeforeHide)
        return;
      updateOptions2();
    });
    vue.watchEffect(() => {
      const { valueKey, options } = props2;
      const duplicateValue = /* @__PURE__ */ new Map();
      for (const item of options) {
        const optionValue = getValue2(item);
        let v2 = optionValue;
        if (shared.isObject(v2)) {
          v2 = get(optionValue, valueKey);
        }
        if (duplicateValue.get(v2)) {
          debugWarn("ElSelectV2", `The option values you provided seem to be duplicated, which may cause some problems, please check.`);
          break;
        } else {
          duplicateValue.set(v2, true);
        }
      }
    });
    vue.onMounted(() => {
      initStates();
    });
    useResizeObserver(selectRef, handleResize);
    useResizeObserver(selectionRef, resetSelectionWidth);
    useResizeObserver(calculatorRef, resetCalculatorWidth);
    useResizeObserver(menuRef, updateTooltip);
    useResizeObserver(wrapperRef, updateTooltip);
    useResizeObserver(tagMenuRef, updateTagTooltip);
    useResizeObserver(collapseItemRef, resetCollapseItemWidth);
    return {
      inputId,
      collapseTagSize,
      currentPlaceholder,
      expanded,
      emptyText,
      popupHeight,
      debounce: debounce$1,
      allOptions,
      filteredOptions,
      iconComponent,
      iconReverse,
      tagStyle,
      collapseTagStyle,
      inputStyle,
      popperSize,
      dropdownMenuVisible,
      hasModelValue,
      shouldShowPlaceholder,
      selectDisabled,
      selectSize,
      showClearBtn,
      states,
      isFocused,
      nsSelect,
      nsInput,
      calculatorRef,
      inputRef,
      menuRef,
      tagMenuRef,
      tooltipRef,
      tagTooltipRef,
      selectRef,
      wrapperRef,
      selectionRef,
      prefixRef,
      suffixRef,
      collapseItemRef,
      popperRef,
      validateState,
      validateIcon,
      showTagList,
      collapseTagList,
      debouncedOnInputChange,
      deleteTag,
      getLabel,
      getValue: getValue2,
      getDisabled,
      getValueKey,
      handleClear,
      handleClickOutside,
      handleDel,
      handleEsc,
      focus,
      blur,
      handleMenuEnter,
      handleResize,
      resetSelectionWidth,
      resetCalculatorWidth,
      updateTooltip,
      updateTagTooltip,
      updateOptions: updateOptions2,
      toggleMenu,
      scrollTo: scrollToItem,
      onInput,
      onKeyboardNavigate,
      onKeyboardSelect,
      onSelect,
      onHover: onHoverOption,
      handleCompositionStart,
      handleCompositionEnd,
      handleCompositionUpdate
    };
  };
  const _sfc_main$M = vue.defineComponent({
    name: "ElSelectV2",
    components: {
      ElSelectMenu,
      ElTag,
      ElTooltip,
      ElIcon
    },
    directives: { ClickOutside },
    props: SelectProps,
    emits: selectEmits,
    setup(props2, { emit }) {
      const modelValue = vue.computed(() => {
        const { modelValue: rawModelValue, multiple } = props2;
        const fallback = multiple ? [] : void 0;
        if (shared.isArray(rawModelValue)) {
          return multiple ? rawModelValue : fallback;
        }
        return multiple ? fallback : rawModelValue;
      });
      const API = useSelect$1(vue.reactive({
        ...vue.toRefs(props2),
        modelValue
      }), emit);
      vue.provide(selectV2InjectionKey, {
        props: vue.reactive({
          ...vue.toRefs(props2),
          height: API.popupHeight,
          modelValue
        }),
        expanded: API.expanded,
        tooltipRef: API.tooltipRef,
        onSelect: API.onSelect,
        onHover: API.onHover,
        onKeyboardNavigate: API.onKeyboardNavigate,
        onKeyboardSelect: API.onKeyboardSelect
      });
      const selectedLabel = vue.computed(() => {
        if (!props2.multiple) {
          return API.states.selectedLabel;
        }
        return API.states.cachedOptions.map((i2) => i2.label);
      });
      return {
        ...API,
        modelValue,
        selectedLabel
      };
    }
  });
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_tag = vue.resolveComponent("el-tag");
    const _component_el_tooltip = vue.resolveComponent("el-tooltip");
    const _component_el_icon = vue.resolveComponent("el-icon");
    const _component_el_select_menu = vue.resolveComponent("el-select-menu");
    const _directive_click_outside = vue.resolveDirective("click-outside");
    return vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
      ref: "selectRef",
      class: vue.normalizeClass([_ctx.nsSelect.b(), _ctx.nsSelect.m(_ctx.selectSize)]),
      onMouseenter: ($event) => _ctx.states.inputHovering = true,
      onMouseleave: ($event) => _ctx.states.inputHovering = false
    }, [
      vue.createVNode(_component_el_tooltip, {
        ref: "tooltipRef",
        visible: _ctx.dropdownMenuVisible,
        teleported: _ctx.teleported,
        "popper-class": [_ctx.nsSelect.e("popper"), _ctx.popperClass],
        "gpu-acceleration": false,
        "stop-popper-mouse-event": false,
        "popper-options": _ctx.popperOptions,
        "fallback-placements": _ctx.fallbackPlacements,
        effect: _ctx.effect,
        placement: _ctx.placement,
        pure: "",
        transition: `${_ctx.nsSelect.namespace.value}-zoom-in-top`,
        trigger: "click",
        persistent: _ctx.persistent,
        onBeforeShow: _ctx.handleMenuEnter,
        onHide: ($event) => _ctx.states.isBeforeHide = false
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("div", {
            ref: "wrapperRef",
            class: vue.normalizeClass([
              _ctx.nsSelect.e("wrapper"),
              _ctx.nsSelect.is("focused", _ctx.isFocused),
              _ctx.nsSelect.is("hovering", _ctx.states.inputHovering),
              _ctx.nsSelect.is("filterable", _ctx.filterable),
              _ctx.nsSelect.is("disabled", _ctx.selectDisabled)
            ]),
            onClick: vue.withModifiers(_ctx.toggleMenu, ["prevent"])
          }, [
            _ctx.$slots.prefix ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              ref: "prefixRef",
              class: vue.normalizeClass(_ctx.nsSelect.e("prefix"))
            }, [
              vue.renderSlot(_ctx.$slots, "prefix")
            ], 2)) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("div", {
              ref: "selectionRef",
              class: vue.normalizeClass([
                _ctx.nsSelect.e("selection"),
                _ctx.nsSelect.is("near", _ctx.multiple && !_ctx.$slots.prefix && !!_ctx.modelValue.length)
              ])
            }, [
              _ctx.multiple ? vue.renderSlot(_ctx.$slots, "tag", { key: 0 }, () => [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.showTagList, (item) => {
                  return vue.openBlock(), vue.createElementBlock("div", {
                    key: _ctx.getValueKey(_ctx.getValue(item)),
                    class: vue.normalizeClass(_ctx.nsSelect.e("selected-item"))
                  }, [
                    vue.createVNode(_component_el_tag, {
                      closable: !_ctx.selectDisabled && !_ctx.getDisabled(item),
                      size: _ctx.collapseTagSize,
                      type: _ctx.tagType,
                      effect: _ctx.tagEffect,
                      "disable-transitions": "",
                      style: vue.normalizeStyle(_ctx.tagStyle),
                      onClose: ($event) => _ctx.deleteTag($event, item)
                    }, {
                      default: vue.withCtx(() => [
                        vue.createElementVNode("span", {
                          class: vue.normalizeClass(_ctx.nsSelect.e("tags-text"))
                        }, [
                          vue.renderSlot(_ctx.$slots, "label", {
                            label: _ctx.getLabel(item),
                            value: _ctx.getValue(item)
                          }, () => [
                            vue.createTextVNode(vue.toDisplayString(_ctx.getLabel(item)), 1)
                          ])
                        ], 2)
                      ]),
                      _: 2
                    }, 1032, ["closable", "size", "type", "effect", "style", "onClose"])
                  ], 2);
                }), 128)),
                _ctx.collapseTags && _ctx.modelValue.length > _ctx.maxCollapseTags ? (vue.openBlock(), vue.createBlock(_component_el_tooltip, {
                  key: 0,
                  ref: "tagTooltipRef",
                  disabled: _ctx.dropdownMenuVisible || !_ctx.collapseTagsTooltip,
                  "fallback-placements": ["bottom", "top", "right", "left"],
                  effect: _ctx.effect,
                  placement: "bottom",
                  teleported: _ctx.teleported
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("div", {
                      ref: "collapseItemRef",
                      class: vue.normalizeClass(_ctx.nsSelect.e("selected-item"))
                    }, [
                      vue.createVNode(_component_el_tag, {
                        closable: false,
                        size: _ctx.collapseTagSize,
                        type: _ctx.tagType,
                        effect: _ctx.tagEffect,
                        style: vue.normalizeStyle(_ctx.collapseTagStyle),
                        "disable-transitions": ""
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("span", {
                            class: vue.normalizeClass(_ctx.nsSelect.e("tags-text"))
                          }, " + " + vue.toDisplayString(_ctx.modelValue.length - _ctx.maxCollapseTags), 3)
                        ]),
                        _: 1
                      }, 8, ["size", "type", "effect", "style"])
                    ], 2)
                  ]),
                  content: vue.withCtx(() => [
                    vue.createElementVNode("div", {
                      ref: "tagMenuRef",
                      class: vue.normalizeClass(_ctx.nsSelect.e("selection"))
                    }, [
                      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.collapseTagList, (selected) => {
                        return vue.openBlock(), vue.createElementBlock("div", {
                          key: _ctx.getValueKey(_ctx.getValue(selected)),
                          class: vue.normalizeClass(_ctx.nsSelect.e("selected-item"))
                        }, [
                          vue.createVNode(_component_el_tag, {
                            class: "in-tooltip",
                            closable: !_ctx.selectDisabled && !_ctx.getDisabled(selected),
                            size: _ctx.collapseTagSize,
                            type: _ctx.tagType,
                            effect: _ctx.tagEffect,
                            "disable-transitions": "",
                            onClose: ($event) => _ctx.deleteTag($event, selected)
                          }, {
                            default: vue.withCtx(() => [
                              vue.createElementVNode("span", {
                                class: vue.normalizeClass(_ctx.nsSelect.e("tags-text"))
                              }, [
                                vue.renderSlot(_ctx.$slots, "label", {
                                  label: _ctx.getLabel(selected),
                                  value: _ctx.getValue(selected)
                                }, () => [
                                  vue.createTextVNode(vue.toDisplayString(_ctx.getLabel(selected)), 1)
                                ])
                              ], 2)
                            ]),
                            _: 2
                          }, 1032, ["closable", "size", "type", "effect", "onClose"])
                        ], 2);
                      }), 128))
                    ], 2)
                  ]),
                  _: 3
                }, 8, ["disabled", "effect", "teleported"])) : vue.createCommentVNode("v-if", true)
              ]) : vue.createCommentVNode("v-if", true),
              !_ctx.selectDisabled ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 1,
                class: vue.normalizeClass([
                  _ctx.nsSelect.e("selected-item"),
                  _ctx.nsSelect.e("input-wrapper"),
                  _ctx.nsSelect.is("hidden", !_ctx.filterable)
                ])
              }, [
                vue.withDirectives(vue.createElementVNode("input", {
                  id: _ctx.inputId,
                  ref: "inputRef",
                  "onUpdate:modelValue": ($event) => _ctx.states.inputValue = $event,
                  style: vue.normalizeStyle(_ctx.inputStyle),
                  autocomplete: _ctx.autocomplete,
                  "aria-autocomplete": "list",
                  "aria-haspopup": "listbox",
                  autocapitalize: "off",
                  "aria-expanded": _ctx.expanded,
                  "aria-label": _ctx.ariaLabel,
                  class: vue.normalizeClass([_ctx.nsSelect.e("input"), _ctx.nsSelect.is(_ctx.selectSize)]),
                  disabled: _ctx.selectDisabled,
                  role: "combobox",
                  readonly: !_ctx.filterable,
                  spellcheck: "false",
                  type: "text",
                  name: _ctx.name,
                  onInput: _ctx.onInput,
                  onCompositionstart: _ctx.handleCompositionStart,
                  onCompositionupdate: _ctx.handleCompositionUpdate,
                  onCompositionend: _ctx.handleCompositionEnd,
                  onKeydown: [
                    vue.withKeys(vue.withModifiers(($event) => _ctx.onKeyboardNavigate("backward"), ["stop", "prevent"]), ["up"]),
                    vue.withKeys(vue.withModifiers(($event) => _ctx.onKeyboardNavigate("forward"), ["stop", "prevent"]), ["down"]),
                    vue.withKeys(vue.withModifiers(_ctx.onKeyboardSelect, ["stop", "prevent"]), ["enter"]),
                    vue.withKeys(vue.withModifiers(_ctx.handleEsc, ["stop", "prevent"]), ["esc"]),
                    vue.withKeys(vue.withModifiers(_ctx.handleDel, ["stop"]), ["delete"])
                  ],
                  onClick: vue.withModifiers(_ctx.toggleMenu, ["stop"])
                }, null, 46, ["id", "onUpdate:modelValue", "autocomplete", "aria-expanded", "aria-label", "disabled", "readonly", "name", "onInput", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onKeydown", "onClick"]), [
                  [vue.vModelText, _ctx.states.inputValue]
                ]),
                _ctx.filterable ? (vue.openBlock(), vue.createElementBlock("span", {
                  key: 0,
                  ref: "calculatorRef",
                  "aria-hidden": "true",
                  class: vue.normalizeClass(_ctx.nsSelect.e("input-calculator")),
                  textContent: vue.toDisplayString(_ctx.states.inputValue)
                }, null, 10, ["textContent"])) : vue.createCommentVNode("v-if", true)
              ], 2)) : vue.createCommentVNode("v-if", true),
              _ctx.shouldShowPlaceholder ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 2,
                class: vue.normalizeClass([
                  _ctx.nsSelect.e("selected-item"),
                  _ctx.nsSelect.e("placeholder"),
                  _ctx.nsSelect.is("transparent", !_ctx.hasModelValue || _ctx.expanded && !_ctx.states.inputValue)
                ])
              }, [
                _ctx.hasModelValue ? vue.renderSlot(_ctx.$slots, "label", {
                  key: 0,
                  label: _ctx.currentPlaceholder,
                  value: _ctx.modelValue
                }, () => [
                  vue.createElementVNode("span", null, vue.toDisplayString(_ctx.currentPlaceholder), 1)
                ]) : (vue.openBlock(), vue.createElementBlock("span", { key: 1 }, vue.toDisplayString(_ctx.currentPlaceholder), 1))
              ], 2)) : vue.createCommentVNode("v-if", true)
            ], 2),
            vue.createElementVNode("div", {
              ref: "suffixRef",
              class: vue.normalizeClass(_ctx.nsSelect.e("suffix"))
            }, [
              _ctx.iconComponent ? vue.withDirectives((vue.openBlock(), vue.createBlock(_component_el_icon, {
                key: 0,
                class: vue.normalizeClass([_ctx.nsSelect.e("caret"), _ctx.nsInput.e("icon"), _ctx.iconReverse])
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.iconComponent)))
                ]),
                _: 1
              }, 8, ["class"])), [
                [vue.vShow, !_ctx.showClearBtn]
              ]) : vue.createCommentVNode("v-if", true),
              _ctx.showClearBtn && _ctx.clearIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                key: 1,
                class: vue.normalizeClass([
                  _ctx.nsSelect.e("caret"),
                  _ctx.nsInput.e("icon"),
                  _ctx.nsSelect.e("clear")
                ]),
                onClick: vue.withModifiers(_ctx.handleClear, ["prevent", "stop"])
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.clearIcon)))
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-if", true),
              _ctx.validateState && _ctx.validateIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                key: 2,
                class: vue.normalizeClass([_ctx.nsInput.e("icon"), _ctx.nsInput.e("validateIcon")])
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.validateIcon)))
                ]),
                _: 1
              }, 8, ["class"])) : vue.createCommentVNode("v-if", true)
            ], 2)
          ], 10, ["onClick"])
        ]),
        content: vue.withCtx(() => [
          vue.createVNode(_component_el_select_menu, {
            ref: "menuRef",
            data: _ctx.filteredOptions,
            width: _ctx.popperSize,
            "hovering-index": _ctx.states.hoveringIndex,
            "scrollbar-always-on": _ctx.scrollbarAlwaysOn
          }, vue.createSlots({
            default: vue.withCtx((scope) => [
              vue.renderSlot(_ctx.$slots, "default", vue.normalizeProps(vue.guardReactiveProps(scope)))
            ]),
            _: 2
          }, [
            _ctx.$slots.header ? {
              name: "header",
              fn: vue.withCtx(() => [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(_ctx.nsSelect.be("dropdown", "header"))
                }, [
                  vue.renderSlot(_ctx.$slots, "header")
                ], 2)
              ])
            } : void 0,
            _ctx.$slots.loading && _ctx.loading ? {
              name: "loading",
              fn: vue.withCtx(() => [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(_ctx.nsSelect.be("dropdown", "loading"))
                }, [
                  vue.renderSlot(_ctx.$slots, "loading")
                ], 2)
              ])
            } : _ctx.loading || _ctx.filteredOptions.length === 0 ? {
              name: "empty",
              fn: vue.withCtx(() => [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(_ctx.nsSelect.be("dropdown", "empty"))
                }, [
                  vue.renderSlot(_ctx.$slots, "empty", {}, () => [
                    vue.createElementVNode("span", null, vue.toDisplayString(_ctx.emptyText), 1)
                  ])
                ], 2)
              ])
            } : void 0,
            _ctx.$slots.footer ? {
              name: "footer",
              fn: vue.withCtx(() => [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(_ctx.nsSelect.be("dropdown", "footer"))
                }, [
                  vue.renderSlot(_ctx.$slots, "footer")
                ], 2)
              ])
            } : void 0
          ]), 1032, ["data", "width", "hovering-index", "scrollbar-always-on"])
        ]),
        _: 3
      }, 8, ["visible", "teleported", "popper-class", "popper-options", "fallback-placements", "effect", "placement", "transition", "persistent", "onBeforeShow", "onHide"])
    ], 42, ["onMouseenter", "onMouseleave"])), [
      [_directive_click_outside, _ctx.handleClickOutside, _ctx.popperRef]
    ]);
  }
  var Select = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["render", _sfc_render$5], ["__file", "select.vue"]]);
  const ElSelectV2 = withInstall(Select);
  const skeletonProps = buildProps({
    animated: {
      type: Boolean,
      default: false
    },
    count: {
      type: Number,
      default: 1
    },
    rows: {
      type: Number,
      default: 3
    },
    loading: {
      type: Boolean,
      default: true
    },
    throttle: {
      type: Number
    }
  });
  const skeletonItemProps = buildProps({
    variant: {
      type: String,
      values: [
        "circle",
        "rect",
        "h1",
        "h3",
        "text",
        "caption",
        "p",
        "image",
        "button"
      ],
      default: "text"
    }
  });
  const __default__$E = vue.defineComponent({
    name: "ElSkeletonItem"
  });
  const _sfc_main$L = /* @__PURE__ */ vue.defineComponent({
    ...__default__$E,
    props: skeletonItemProps,
    setup(__props) {
      const ns2 = useNamespace("skeleton");
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns2).e("item"), vue.unref(ns2).e(_ctx.variant)])
        }, [
          _ctx.variant === "image" ? (vue.openBlock(), vue.createBlock(vue.unref(picture_filled_default), { key: 0 })) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var SkeletonItem = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["__file", "skeleton-item.vue"]]);
  const __default__$D = vue.defineComponent({
    name: "ElSkeleton"
  });
  const _sfc_main$K = /* @__PURE__ */ vue.defineComponent({
    ...__default__$D,
    props: skeletonProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const ns2 = useNamespace("skeleton");
      const uiLoading = useThrottleRender(vue.toRef(props2, "loading"), props2.throttle);
      expose({
        uiLoading
      });
      return (_ctx, _cache) => {
        return vue.unref(uiLoading) ? (vue.openBlock(), vue.createElementBlock("div", vue.mergeProps({
          key: 0,
          class: [vue.unref(ns2).b(), vue.unref(ns2).is("animated", _ctx.animated)]
        }, _ctx.$attrs), [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.count, (i2) => {
            return vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: i2 }, [
              _ctx.loading ? vue.renderSlot(_ctx.$slots, "template", { key: i2 }, () => [
                vue.createVNode(SkeletonItem, {
                  class: vue.normalizeClass(vue.unref(ns2).is("first")),
                  variant: "p"
                }, null, 8, ["class"]),
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.rows, (item) => {
                  return vue.openBlock(), vue.createBlock(SkeletonItem, {
                    key: item,
                    class: vue.normalizeClass([
                      vue.unref(ns2).e("paragraph"),
                      vue.unref(ns2).is("last", item === _ctx.rows && _ctx.rows > 1)
                    ]),
                    variant: "p"
                  }, null, 8, ["class"]);
                }), 128))
              ]) : vue.createCommentVNode("v-if", true)
            ], 64);
          }), 128))
        ], 16)) : vue.renderSlot(_ctx.$slots, "default", vue.normalizeProps(vue.mergeProps({ key: 1 }, _ctx.$attrs)));
      };
    }
  });
  var Skeleton = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["__file", "skeleton.vue"]]);
  const ElSkeleton = withInstall(Skeleton, {
    SkeletonItem
  });
  const ElSkeletonItem = withNoopInstall(SkeletonItem);
  const sliderContextKey = Symbol("sliderContextKey");
  const sliderProps = buildProps({
    modelValue: {
      type: definePropType([Number, Array]),
      default: 0
    },
    id: {
      type: String,
      default: void 0
    },
    min: {
      type: Number,
      default: 0
    },
    max: {
      type: Number,
      default: 100
    },
    step: {
      type: Number,
      default: 1
    },
    showInput: Boolean,
    showInputControls: {
      type: Boolean,
      default: true
    },
    size: useSizeProp,
    inputSize: useSizeProp,
    showStops: Boolean,
    showTooltip: {
      type: Boolean,
      default: true
    },
    formatTooltip: {
      type: definePropType(Function),
      default: void 0
    },
    disabled: Boolean,
    range: Boolean,
    vertical: Boolean,
    height: String,
    debounce: {
      type: Number,
      default: 300
    },
    rangeStartLabel: {
      type: String,
      default: void 0
    },
    rangeEndLabel: {
      type: String,
      default: void 0
    },
    formatValueText: {
      type: definePropType(Function),
      default: void 0
    },
    tooltipClass: {
      type: String,
      default: void 0
    },
    placement: {
      type: String,
      values: Ee,
      default: "top"
    },
    marks: {
      type: definePropType(Object)
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    ...useAriaProps(["ariaLabel"])
  });
  const isValidValue$1 = (value) => isNumber$2(value) || shared.isArray(value) && value.every(isNumber$2);
  const sliderEmits = {
    [UPDATE_MODEL_EVENT]: isValidValue$1,
    [INPUT_EVENT]: isValidValue$1,
    [CHANGE_EVENT]: isValidValue$1
  };
  const useLifecycle = (props2, initData, resetSize) => {
    const sliderWrapper = vue.ref();
    vue.onMounted(async () => {
      if (props2.range) {
        if (Array.isArray(props2.modelValue)) {
          initData.firstValue = Math.max(props2.min, props2.modelValue[0]);
          initData.secondValue = Math.min(props2.max, props2.modelValue[1]);
        } else {
          initData.firstValue = props2.min;
          initData.secondValue = props2.max;
        }
        initData.oldValue = [initData.firstValue, initData.secondValue];
      } else {
        if (typeof props2.modelValue !== "number" || Number.isNaN(props2.modelValue)) {
          initData.firstValue = props2.min;
        } else {
          initData.firstValue = Math.min(props2.max, Math.max(props2.min, props2.modelValue));
        }
        initData.oldValue = initData.firstValue;
      }
      useEventListener(window, "resize", resetSize);
      await vue.nextTick();
      resetSize();
    });
    return {
      sliderWrapper
    };
  };
  const useMarks = (props2) => {
    return vue.computed(() => {
      if (!props2.marks) {
        return [];
      }
      const marksKeys = Object.keys(props2.marks);
      return marksKeys.map(Number.parseFloat).sort((a2, b2) => a2 - b2).filter((point) => point <= props2.max && point >= props2.min).map((point) => ({
        point,
        position: (point - props2.min) * 100 / (props2.max - props2.min),
        mark: props2.marks[point]
      }));
    });
  };
  const useSlide = (props2, initData, emit) => {
    const { form: elForm, formItem: elFormItem } = useFormItem();
    const slider = vue.shallowRef();
    const firstButton = vue.ref();
    const secondButton = vue.ref();
    const buttonRefs = {
      firstButton,
      secondButton
    };
    const sliderDisabled = vue.computed(() => {
      return props2.disabled || (elForm == null ? void 0 : elForm.disabled) || false;
    });
    const minValue = vue.computed(() => {
      return Math.min(initData.firstValue, initData.secondValue);
    });
    const maxValue = vue.computed(() => {
      return Math.max(initData.firstValue, initData.secondValue);
    });
    const barSize = vue.computed(() => {
      return props2.range ? `${100 * (maxValue.value - minValue.value) / (props2.max - props2.min)}%` : `${100 * (initData.firstValue - props2.min) / (props2.max - props2.min)}%`;
    });
    const barStart = vue.computed(() => {
      return props2.range ? `${100 * (minValue.value - props2.min) / (props2.max - props2.min)}%` : "0%";
    });
    const runwayStyle = vue.computed(() => {
      return props2.vertical ? { height: props2.height } : {};
    });
    const barStyle = vue.computed(() => {
      return props2.vertical ? {
        height: barSize.value,
        bottom: barStart.value
      } : {
        width: barSize.value,
        left: barStart.value
      };
    });
    const resetSize = () => {
      if (slider.value) {
        initData.sliderSize = slider.value[`client${props2.vertical ? "Height" : "Width"}`];
      }
    };
    const getButtonRefByPercent = (percent) => {
      const targetValue = props2.min + percent * (props2.max - props2.min) / 100;
      if (!props2.range) {
        return firstButton;
      }
      let buttonRefName;
      if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {
        buttonRefName = initData.firstValue < initData.secondValue ? "firstButton" : "secondButton";
      } else {
        buttonRefName = initData.firstValue > initData.secondValue ? "firstButton" : "secondButton";
      }
      return buttonRefs[buttonRefName];
    };
    const setPosition = (percent) => {
      const buttonRef = getButtonRefByPercent(percent);
      buttonRef.value.setPosition(percent);
      return buttonRef;
    };
    const setFirstValue = (firstValue) => {
      initData.firstValue = firstValue != null ? firstValue : props2.min;
      _emit(props2.range ? [minValue.value, maxValue.value] : firstValue != null ? firstValue : props2.min);
    };
    const setSecondValue = (secondValue) => {
      initData.secondValue = secondValue;
      if (props2.range) {
        _emit([minValue.value, maxValue.value]);
      }
    };
    const _emit = (val) => {
      emit(UPDATE_MODEL_EVENT, val);
      emit(INPUT_EVENT, val);
    };
    const emitChange = async () => {
      await vue.nextTick();
      emit(CHANGE_EVENT, props2.range ? [minValue.value, maxValue.value] : props2.modelValue);
    };
    const handleSliderPointerEvent = (event) => {
      var _a2, _b, _c, _d, _e2, _f;
      if (sliderDisabled.value || initData.dragging)
        return;
      resetSize();
      let newPercent = 0;
      if (props2.vertical) {
        const clientY = (_c = (_b = (_a2 = event.touches) == null ? void 0 : _a2.item(0)) == null ? void 0 : _b.clientY) != null ? _c : event.clientY;
        const sliderOffsetBottom = slider.value.getBoundingClientRect().bottom;
        newPercent = (sliderOffsetBottom - clientY) / initData.sliderSize * 100;
      } else {
        const clientX = (_f = (_e2 = (_d = event.touches) == null ? void 0 : _d.item(0)) == null ? void 0 : _e2.clientX) != null ? _f : event.clientX;
        const sliderOffsetLeft = slider.value.getBoundingClientRect().left;
        newPercent = (clientX - sliderOffsetLeft) / initData.sliderSize * 100;
      }
      if (newPercent < 0 || newPercent > 100)
        return;
      return setPosition(newPercent);
    };
    const onSliderWrapperPrevent = (event) => {
      var _a2, _b;
      if (((_a2 = buttonRefs["firstButton"].value) == null ? void 0 : _a2.dragging) || ((_b = buttonRefs["secondButton"].value) == null ? void 0 : _b.dragging)) {
        event.preventDefault();
      }
    };
    const onSliderDown = async (event) => {
      const buttonRef = handleSliderPointerEvent(event);
      if (buttonRef) {
        await vue.nextTick();
        buttonRef.value.onButtonDown(event);
      }
    };
    const onSliderClick = (event) => {
      const buttonRef = handleSliderPointerEvent(event);
      if (buttonRef) {
        emitChange();
      }
    };
    const onSliderMarkerDown = (position) => {
      if (sliderDisabled.value || initData.dragging)
        return;
      setPosition(position);
    };
    return {
      elFormItem,
      slider,
      firstButton,
      secondButton,
      sliderDisabled,
      minValue,
      maxValue,
      runwayStyle,
      barStyle,
      resetSize,
      setPosition,
      emitChange,
      onSliderWrapperPrevent,
      onSliderClick,
      onSliderDown,
      onSliderMarkerDown,
      setFirstValue,
      setSecondValue
    };
  };
  const { left, down, right, up, home, end, pageUp, pageDown } = EVENT_CODE;
  const useTooltip = (props2, formatTooltip, showTooltip) => {
    const tooltip = vue.ref();
    const tooltipVisible = vue.ref(false);
    const enableFormat = vue.computed(() => {
      return formatTooltip.value instanceof Function;
    });
    const formatValue = vue.computed(() => {
      return enableFormat.value && formatTooltip.value(props2.modelValue) || props2.modelValue;
    });
    const displayTooltip = debounce(() => {
      showTooltip.value && (tooltipVisible.value = true);
    }, 50);
    const hideTooltip = debounce(() => {
      showTooltip.value && (tooltipVisible.value = false);
    }, 50);
    return {
      tooltip,
      tooltipVisible,
      formatValue,
      displayTooltip,
      hideTooltip
    };
  };
  const useSliderButton = (props2, initData, emit) => {
    const {
      disabled,
      min: min2,
      max: max2,
      step,
      showTooltip,
      precision,
      sliderSize,
      formatTooltip,
      emitChange,
      resetSize,
      updateDragging
    } = vue.inject(sliderContextKey);
    const { tooltip, tooltipVisible, formatValue, displayTooltip, hideTooltip } = useTooltip(props2, formatTooltip, showTooltip);
    const button = vue.ref();
    const currentPosition = vue.computed(() => {
      return `${(props2.modelValue - min2.value) / (max2.value - min2.value) * 100}%`;
    });
    const wrapperStyle = vue.computed(() => {
      return props2.vertical ? { bottom: currentPosition.value } : { left: currentPosition.value };
    });
    const handleMouseEnter = () => {
      initData.hovering = true;
      displayTooltip();
    };
    const handleMouseLeave = () => {
      initData.hovering = false;
      if (!initData.dragging) {
        hideTooltip();
      }
    };
    const onButtonDown = (event) => {
      if (disabled.value)
        return;
      event.preventDefault();
      onDragStart(event);
      window.addEventListener("mousemove", onDragging);
      window.addEventListener("touchmove", onDragging);
      window.addEventListener("mouseup", onDragEnd);
      window.addEventListener("touchend", onDragEnd);
      window.addEventListener("contextmenu", onDragEnd);
      button.value.focus();
    };
    const incrementPosition = (amount) => {
      if (disabled.value)
        return;
      initData.newPosition = Number.parseFloat(currentPosition.value) + amount / (max2.value - min2.value) * 100;
      setPosition(initData.newPosition);
      emitChange();
    };
    const onLeftKeyDown = () => {
      incrementPosition(-step.value);
    };
    const onRightKeyDown = () => {
      incrementPosition(step.value);
    };
    const onPageDownKeyDown = () => {
      incrementPosition(-step.value * 4);
    };
    const onPageUpKeyDown = () => {
      incrementPosition(step.value * 4);
    };
    const onHomeKeyDown = () => {
      if (disabled.value)
        return;
      setPosition(0);
      emitChange();
    };
    const onEndKeyDown = () => {
      if (disabled.value)
        return;
      setPosition(100);
      emitChange();
    };
    const onKeyDown = (event) => {
      let isPreventDefault = true;
      if ([left, down].includes(event.key)) {
        onLeftKeyDown();
      } else if ([right, up].includes(event.key)) {
        onRightKeyDown();
      } else if (event.key === home) {
        onHomeKeyDown();
      } else if (event.key === end) {
        onEndKeyDown();
      } else if (event.key === pageDown) {
        onPageDownKeyDown();
      } else if (event.key === pageUp) {
        onPageUpKeyDown();
      } else {
        isPreventDefault = false;
      }
      isPreventDefault && event.preventDefault();
    };
    const getClientXY2 = (event) => {
      let clientX;
      let clientY;
      if (event.type.startsWith("touch")) {
        clientY = event.touches[0].clientY;
        clientX = event.touches[0].clientX;
      } else {
        clientY = event.clientY;
        clientX = event.clientX;
      }
      return {
        clientX,
        clientY
      };
    };
    const onDragStart = (event) => {
      initData.dragging = true;
      initData.isClick = true;
      const { clientX, clientY } = getClientXY2(event);
      if (props2.vertical) {
        initData.startY = clientY;
      } else {
        initData.startX = clientX;
      }
      initData.startPosition = Number.parseFloat(currentPosition.value);
      initData.newPosition = initData.startPosition;
    };
    const onDragging = (event) => {
      if (initData.dragging) {
        initData.isClick = false;
        displayTooltip();
        resetSize();
        let diff;
        const { clientX, clientY } = getClientXY2(event);
        if (props2.vertical) {
          initData.currentY = clientY;
          diff = (initData.startY - initData.currentY) / sliderSize.value * 100;
        } else {
          initData.currentX = clientX;
          diff = (initData.currentX - initData.startX) / sliderSize.value * 100;
        }
        initData.newPosition = initData.startPosition + diff;
        setPosition(initData.newPosition);
      }
    };
    const onDragEnd = () => {
      if (initData.dragging) {
        setTimeout(() => {
          initData.dragging = false;
          if (!initData.hovering) {
            hideTooltip();
          }
          if (!initData.isClick) {
            setPosition(initData.newPosition);
          }
          emitChange();
        }, 0);
        window.removeEventListener("mousemove", onDragging);
        window.removeEventListener("touchmove", onDragging);
        window.removeEventListener("mouseup", onDragEnd);
        window.removeEventListener("touchend", onDragEnd);
        window.removeEventListener("contextmenu", onDragEnd);
      }
    };
    const setPosition = async (newPosition) => {
      if (newPosition === null || Number.isNaN(+newPosition))
        return;
      if (newPosition < 0) {
        newPosition = 0;
      } else if (newPosition > 100) {
        newPosition = 100;
      }
      const lengthPerStep = 100 / ((max2.value - min2.value) / step.value);
      const steps = Math.round(newPosition / lengthPerStep);
      let value = steps * lengthPerStep * (max2.value - min2.value) * 0.01 + min2.value;
      value = Number.parseFloat(value.toFixed(precision.value));
      if (value !== props2.modelValue) {
        emit(UPDATE_MODEL_EVENT, value);
      }
      if (!initData.dragging && props2.modelValue !== initData.oldValue) {
        initData.oldValue = props2.modelValue;
      }
      await vue.nextTick();
      initData.dragging && displayTooltip();
      tooltip.value.updatePopper();
    };
    vue.watch(() => initData.dragging, (val) => {
      updateDragging(val);
    });
    useEventListener(button, "touchstart", onButtonDown, { passive: false });
    return {
      disabled,
      button,
      tooltip,
      tooltipVisible,
      showTooltip,
      wrapperStyle,
      formatValue,
      handleMouseEnter,
      handleMouseLeave,
      onButtonDown,
      onKeyDown,
      setPosition
    };
  };
  const useStops = (props2, initData, minValue, maxValue) => {
    const stops = vue.computed(() => {
      if (!props2.showStops || props2.min > props2.max)
        return [];
      if (props2.step === 0) {
        debugWarn("ElSlider", "step should not be 0.");
        return [];
      }
      const stopCount = (props2.max - props2.min) / props2.step;
      const stepWidth = 100 * props2.step / (props2.max - props2.min);
      const result = Array.from({ length: stopCount - 1 }).map((_2, index) => (index + 1) * stepWidth);
      if (props2.range) {
        return result.filter((step) => {
          return step < 100 * (minValue.value - props2.min) / (props2.max - props2.min) || step > 100 * (maxValue.value - props2.min) / (props2.max - props2.min);
        });
      } else {
        return result.filter((step) => step > 100 * (initData.firstValue - props2.min) / (props2.max - props2.min));
      }
    });
    const getStopStyle = (position) => {
      return props2.vertical ? { bottom: `${position}%` } : { left: `${position}%` };
    };
    return {
      stops,
      getStopStyle
    };
  };
  const useWatch = (props2, initData, minValue, maxValue, emit, elFormItem) => {
    const _emit = (val) => {
      emit(UPDATE_MODEL_EVENT, val);
      emit(INPUT_EVENT, val);
    };
    const valueChanged = () => {
      if (props2.range) {
        return ![minValue.value, maxValue.value].every((item, index) => item === initData.oldValue[index]);
      } else {
        return props2.modelValue !== initData.oldValue;
      }
    };
    const setValues = () => {
      var _a2, _b;
      if (props2.min > props2.max) {
        throwError("Slider", "min should not be greater than max.");
      }
      const val = props2.modelValue;
      if (props2.range && Array.isArray(val)) {
        if (val[1] < props2.min) {
          _emit([props2.min, props2.min]);
        } else if (val[0] > props2.max) {
          _emit([props2.max, props2.max]);
        } else if (val[0] < props2.min) {
          _emit([props2.min, val[1]]);
        } else if (val[1] > props2.max) {
          _emit([val[0], props2.max]);
        } else {
          initData.firstValue = val[0];
          initData.secondValue = val[1];
          if (valueChanged()) {
            if (props2.validateEvent) {
              (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn(err));
            }
            initData.oldValue = val.slice();
          }
        }
      } else if (!props2.range && typeof val === "number" && !Number.isNaN(val)) {
        if (val < props2.min) {
          _emit(props2.min);
        } else if (val > props2.max) {
          _emit(props2.max);
        } else {
          initData.firstValue = val;
          if (valueChanged()) {
            if (props2.validateEvent) {
              (_b = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _b.call(elFormItem, "change").catch((err) => debugWarn(err));
            }
            initData.oldValue = val;
          }
        }
      }
    };
    setValues();
    vue.watch(() => initData.dragging, (val) => {
      if (!val) {
        setValues();
      }
    });
    vue.watch(() => props2.modelValue, (val, oldVal) => {
      if (initData.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every((item, index) => item === oldVal[index]) && initData.firstValue === val[0] && initData.secondValue === val[1]) {
        return;
      }
      setValues();
    }, {
      deep: true
    });
    vue.watch(() => [props2.min, props2.max], () => {
      setValues();
    });
  };
  const sliderButtonProps = buildProps({
    modelValue: {
      type: Number,
      default: 0
    },
    vertical: Boolean,
    tooltipClass: String,
    placement: {
      type: String,
      values: Ee,
      default: "top"
    }
  });
  const sliderButtonEmits = {
    [UPDATE_MODEL_EVENT]: (value) => isNumber$2(value)
  };
  const __default__$C = vue.defineComponent({
    name: "ElSliderButton"
  });
  const _sfc_main$J = /* @__PURE__ */ vue.defineComponent({
    ...__default__$C,
    props: sliderButtonProps,
    emits: sliderButtonEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const ns2 = useNamespace("slider");
      const initData = vue.reactive({
        hovering: false,
        dragging: false,
        isClick: false,
        startX: 0,
        currentX: 0,
        startY: 0,
        currentY: 0,
        startPosition: 0,
        newPosition: 0,
        oldValue: props2.modelValue
      });
      const {
        disabled,
        button,
        tooltip,
        showTooltip,
        tooltipVisible,
        wrapperStyle,
        formatValue,
        handleMouseEnter,
        handleMouseLeave,
        onButtonDown,
        onKeyDown,
        setPosition
      } = useSliderButton(props2, initData, emit);
      const { hovering, dragging } = vue.toRefs(initData);
      expose({
        onButtonDown,
        onKeyDown,
        setPosition,
        hovering,
        dragging
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "button",
          ref: button,
          class: vue.normalizeClass([vue.unref(ns2).e("button-wrapper"), { hover: vue.unref(hovering), dragging: vue.unref(dragging) }]),
          style: vue.normalizeStyle(vue.unref(wrapperStyle)),
          tabindex: vue.unref(disabled) ? -1 : 0,
          onMouseenter: vue.unref(handleMouseEnter),
          onMouseleave: vue.unref(handleMouseLeave),
          onMousedown: vue.unref(onButtonDown),
          onFocus: vue.unref(handleMouseEnter),
          onBlur: vue.unref(handleMouseLeave),
          onKeydown: vue.unref(onKeyDown)
        }, [
          vue.createVNode(vue.unref(ElTooltip), {
            ref_key: "tooltip",
            ref: tooltip,
            visible: vue.unref(tooltipVisible),
            placement: _ctx.placement,
            "fallback-placements": ["top", "bottom", "right", "left"],
            "stop-popper-mouse-event": false,
            "popper-class": _ctx.tooltipClass,
            disabled: !vue.unref(showTooltip),
            persistent: ""
          }, {
            content: vue.withCtx(() => [
              vue.createElementVNode("span", null, vue.toDisplayString(vue.unref(formatValue)), 1)
            ]),
            default: vue.withCtx(() => [
              vue.createElementVNode("div", {
                class: vue.normalizeClass([vue.unref(ns2).e("button"), { hover: vue.unref(hovering), dragging: vue.unref(dragging) }])
              }, null, 2)
            ]),
            _: 1
          }, 8, ["visible", "placement", "popper-class", "disabled"])
        ], 46, ["tabindex", "onMouseenter", "onMouseleave", "onMousedown", "onFocus", "onBlur", "onKeydown"]);
      };
    }
  });
  var SliderButton = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["__file", "button.vue"]]);
  const sliderMarkerProps = buildProps({
    mark: {
      type: definePropType([String, Object]),
      default: void 0
    }
  });
  var SliderMarker = vue.defineComponent({
    name: "ElSliderMarker",
    props: sliderMarkerProps,
    setup(props2) {
      const ns2 = useNamespace("slider");
      const label = vue.computed(() => {
        return shared.isString(props2.mark) ? props2.mark : props2.mark.label;
      });
      const style = vue.computed(() => shared.isString(props2.mark) ? void 0 : props2.mark.style);
      return () => vue.h("div", {
        class: ns2.e("marks-text"),
        style: style.value
      }, label.value);
    }
  });
  const __default__$B = vue.defineComponent({
    name: "ElSlider"
  });
  const _sfc_main$I = /* @__PURE__ */ vue.defineComponent({
    ...__default__$B,
    props: sliderProps,
    emits: sliderEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const ns2 = useNamespace("slider");
      const { t: t2 } = useLocale();
      const initData = vue.reactive({
        firstValue: 0,
        secondValue: 0,
        oldValue: 0,
        dragging: false,
        sliderSize: 1
      });
      const {
        elFormItem,
        slider,
        firstButton,
        secondButton,
        sliderDisabled,
        minValue,
        maxValue,
        runwayStyle,
        barStyle,
        resetSize,
        emitChange,
        onSliderWrapperPrevent,
        onSliderClick,
        onSliderDown,
        onSliderMarkerDown,
        setFirstValue,
        setSecondValue
      } = useSlide(props2, initData, emit);
      const { stops, getStopStyle } = useStops(props2, initData, minValue, maxValue);
      const { inputId, isLabeledByFormItem } = useFormItemInputId(props2, {
        formItemContext: elFormItem
      });
      const sliderWrapperSize = useFormSize();
      const sliderInputSize = vue.computed(() => props2.inputSize || sliderWrapperSize.value);
      const groupLabel = vue.computed(() => {
        return props2.ariaLabel || t2("el.slider.defaultLabel", {
          min: props2.min,
          max: props2.max
        });
      });
      const firstButtonLabel = vue.computed(() => {
        if (props2.range) {
          return props2.rangeStartLabel || t2("el.slider.defaultRangeStartLabel");
        } else {
          return groupLabel.value;
        }
      });
      const firstValueText = vue.computed(() => {
        return props2.formatValueText ? props2.formatValueText(firstValue.value) : `${firstValue.value}`;
      });
      const secondButtonLabel = vue.computed(() => {
        return props2.rangeEndLabel || t2("el.slider.defaultRangeEndLabel");
      });
      const secondValueText = vue.computed(() => {
        return props2.formatValueText ? props2.formatValueText(secondValue.value) : `${secondValue.value}`;
      });
      const sliderKls = vue.computed(() => [
        ns2.b(),
        ns2.m(sliderWrapperSize.value),
        ns2.is("vertical", props2.vertical),
        { [ns2.m("with-input")]: props2.showInput }
      ]);
      const markList = useMarks(props2);
      useWatch(props2, initData, minValue, maxValue, emit, elFormItem);
      const precision = vue.computed(() => {
        const precisions = [props2.min, props2.max, props2.step].map((item) => {
          const decimal = `${item}`.split(".")[1];
          return decimal ? decimal.length : 0;
        });
        return Math.max.apply(null, precisions);
      });
      const { sliderWrapper } = useLifecycle(props2, initData, resetSize);
      const { firstValue, secondValue, sliderSize } = vue.toRefs(initData);
      const updateDragging = (val) => {
        initData.dragging = val;
      };
      useEventListener(sliderWrapper, "touchstart", onSliderWrapperPrevent, {
        passive: false
      });
      useEventListener(sliderWrapper, "touchmove", onSliderWrapperPrevent, {
        passive: false
      });
      vue.provide(sliderContextKey, {
        ...vue.toRefs(props2),
        sliderSize,
        disabled: sliderDisabled,
        precision,
        emitChange,
        resetSize,
        updateDragging
      });
      expose({
        onSliderClick
      });
      return (_ctx, _cache) => {
        var _a2, _b;
        return vue.openBlock(), vue.createElementBlock("div", {
          id: _ctx.range ? vue.unref(inputId) : void 0,
          ref_key: "sliderWrapper",
          ref: sliderWrapper,
          class: vue.normalizeClass(vue.unref(sliderKls)),
          role: _ctx.range ? "group" : void 0,
          "aria-label": _ctx.range && !vue.unref(isLabeledByFormItem) ? vue.unref(groupLabel) : void 0,
          "aria-labelledby": _ctx.range && vue.unref(isLabeledByFormItem) ? (_a2 = vue.unref(elFormItem)) == null ? void 0 : _a2.labelId : void 0
        }, [
          vue.createElementVNode("div", {
            ref_key: "slider",
            ref: slider,
            class: vue.normalizeClass([
              vue.unref(ns2).e("runway"),
              { "show-input": _ctx.showInput && !_ctx.range },
              vue.unref(ns2).is("disabled", vue.unref(sliderDisabled))
            ]),
            style: vue.normalizeStyle(vue.unref(runwayStyle)),
            onMousedown: vue.unref(onSliderDown),
            onTouchstartPassive: vue.unref(onSliderDown)
          }, [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).e("bar")),
              style: vue.normalizeStyle(vue.unref(barStyle))
            }, null, 6),
            vue.createVNode(SliderButton, {
              id: !_ctx.range ? vue.unref(inputId) : void 0,
              ref_key: "firstButton",
              ref: firstButton,
              "model-value": vue.unref(firstValue),
              vertical: _ctx.vertical,
              "tooltip-class": _ctx.tooltipClass,
              placement: _ctx.placement,
              role: "slider",
              "aria-label": _ctx.range || !vue.unref(isLabeledByFormItem) ? vue.unref(firstButtonLabel) : void 0,
              "aria-labelledby": !_ctx.range && vue.unref(isLabeledByFormItem) ? (_b = vue.unref(elFormItem)) == null ? void 0 : _b.labelId : void 0,
              "aria-valuemin": _ctx.min,
              "aria-valuemax": _ctx.range ? vue.unref(secondValue) : _ctx.max,
              "aria-valuenow": vue.unref(firstValue),
              "aria-valuetext": vue.unref(firstValueText),
              "aria-orientation": _ctx.vertical ? "vertical" : "horizontal",
              "aria-disabled": vue.unref(sliderDisabled),
              "onUpdate:modelValue": vue.unref(setFirstValue)
            }, null, 8, ["id", "model-value", "vertical", "tooltip-class", "placement", "aria-label", "aria-labelledby", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-valuetext", "aria-orientation", "aria-disabled", "onUpdate:modelValue"]),
            _ctx.range ? (vue.openBlock(), vue.createBlock(SliderButton, {
              key: 0,
              ref_key: "secondButton",
              ref: secondButton,
              "model-value": vue.unref(secondValue),
              vertical: _ctx.vertical,
              "tooltip-class": _ctx.tooltipClass,
              placement: _ctx.placement,
              role: "slider",
              "aria-label": vue.unref(secondButtonLabel),
              "aria-valuemin": vue.unref(firstValue),
              "aria-valuemax": _ctx.max,
              "aria-valuenow": vue.unref(secondValue),
              "aria-valuetext": vue.unref(secondValueText),
              "aria-orientation": _ctx.vertical ? "vertical" : "horizontal",
              "aria-disabled": vue.unref(sliderDisabled),
              "onUpdate:modelValue": vue.unref(setSecondValue)
            }, null, 8, ["model-value", "vertical", "tooltip-class", "placement", "aria-label", "aria-valuemin", "aria-valuemax", "aria-valuenow", "aria-valuetext", "aria-orientation", "aria-disabled", "onUpdate:modelValue"])) : vue.createCommentVNode("v-if", true),
            _ctx.showStops ? (vue.openBlock(), vue.createElementBlock("div", { key: 1 }, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(stops), (item, key) => {
                return vue.openBlock(), vue.createElementBlock("div", {
                  key,
                  class: vue.normalizeClass(vue.unref(ns2).e("stop")),
                  style: vue.normalizeStyle(vue.unref(getStopStyle)(item))
                }, null, 6);
              }), 128))
            ])) : vue.createCommentVNode("v-if", true),
            vue.unref(markList).length > 0 ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 2 }, [
              vue.createElementVNode("div", null, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(markList), (item, key) => {
                  return vue.openBlock(), vue.createElementBlock("div", {
                    key,
                    style: vue.normalizeStyle(vue.unref(getStopStyle)(item.position)),
                    class: vue.normalizeClass([vue.unref(ns2).e("stop"), vue.unref(ns2).e("marks-stop")])
                  }, null, 6);
                }), 128))
              ]),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).e("marks"))
              }, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(markList), (item, key) => {
                  return vue.openBlock(), vue.createBlock(vue.unref(SliderMarker), {
                    key,
                    mark: item.mark,
                    style: vue.normalizeStyle(vue.unref(getStopStyle)(item.position)),
                    onMousedown: vue.withModifiers(($event) => vue.unref(onSliderMarkerDown)(item.position), ["stop"])
                  }, null, 8, ["mark", "style", "onMousedown"]);
                }), 128))
              ], 2)
            ], 64)) : vue.createCommentVNode("v-if", true)
          ], 46, ["onMousedown", "onTouchstartPassive"]),
          _ctx.showInput && !_ctx.range ? (vue.openBlock(), vue.createBlock(vue.unref(ElInputNumber), {
            key: 0,
            ref: "input",
            "model-value": vue.unref(firstValue),
            class: vue.normalizeClass(vue.unref(ns2).e("input")),
            step: _ctx.step,
            disabled: vue.unref(sliderDisabled),
            controls: _ctx.showInputControls,
            min: _ctx.min,
            max: _ctx.max,
            precision: vue.unref(precision),
            debounce: _ctx.debounce,
            size: vue.unref(sliderInputSize),
            "onUpdate:modelValue": vue.unref(setFirstValue),
            onChange: vue.unref(emitChange)
          }, null, 8, ["model-value", "class", "step", "disabled", "controls", "min", "max", "precision", "debounce", "size", "onUpdate:modelValue", "onChange"])) : vue.createCommentVNode("v-if", true)
        ], 10, ["id", "role", "aria-label", "aria-labelledby"]);
      };
    }
  });
  var Slider = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["__file", "slider.vue"]]);
  const ElSlider = withInstall(Slider);
  const spaceItemProps = buildProps({
    prefixCls: {
      type: String
    }
  });
  const SpaceItem = vue.defineComponent({
    name: "ElSpaceItem",
    props: spaceItemProps,
    setup(props2, { slots }) {
      const ns2 = useNamespace("space");
      const classes = vue.computed(() => `${props2.prefixCls || ns2.b()}__item`);
      return () => vue.h("div", { class: classes.value }, vue.renderSlot(slots, "default"));
    }
  });
  const SIZE_MAP = {
    small: 8,
    default: 12,
    large: 16
  };
  function useSpace(props2) {
    const ns2 = useNamespace("space");
    const classes = vue.computed(() => [ns2.b(), ns2.m(props2.direction), props2.class]);
    const horizontalSize = vue.ref(0);
    const verticalSize = vue.ref(0);
    const containerStyle = vue.computed(() => {
      const wrapKls = props2.wrap || props2.fill ? { flexWrap: "wrap" } : {};
      const alignment = {
        alignItems: props2.alignment
      };
      const gap = {
        rowGap: `${verticalSize.value}px`,
        columnGap: `${horizontalSize.value}px`
      };
      return [wrapKls, alignment, gap, props2.style];
    });
    const itemStyle = vue.computed(() => {
      return props2.fill ? { flexGrow: 1, minWidth: `${props2.fillRatio}%` } : {};
    });
    vue.watchEffect(() => {
      const { size = "small", wrap, direction: dir, fill } = props2;
      if (shared.isArray(size)) {
        const [h2 = 0, v2 = 0] = size;
        horizontalSize.value = h2;
        verticalSize.value = v2;
      } else {
        let val;
        if (isNumber$2(size)) {
          val = size;
        } else {
          val = SIZE_MAP[size || "small"] || SIZE_MAP.small;
        }
        if ((wrap || fill) && dir === "horizontal") {
          horizontalSize.value = verticalSize.value = val;
        } else {
          if (dir === "horizontal") {
            horizontalSize.value = val;
            verticalSize.value = 0;
          } else {
            verticalSize.value = val;
            horizontalSize.value = 0;
          }
        }
      }
    });
    return {
      classes,
      containerStyle,
      itemStyle
    };
  }
  const spaceProps = buildProps({
    direction: {
      type: String,
      values: ["horizontal", "vertical"],
      default: "horizontal"
    },
    class: {
      type: definePropType([
        String,
        Object,
        Array
      ]),
      default: ""
    },
    style: {
      type: definePropType([String, Array, Object]),
      default: ""
    },
    alignment: {
      type: definePropType(String),
      default: "center"
    },
    prefixCls: {
      type: String
    },
    spacer: {
      type: definePropType([Object, String, Number, Array]),
      default: null,
      validator: (val) => vue.isVNode(val) || isNumber$2(val) || shared.isString(val)
    },
    wrap: Boolean,
    fill: Boolean,
    fillRatio: {
      type: Number,
      default: 100
    },
    size: {
      type: [String, Array, Number],
      values: componentSizes,
      validator: (val) => {
        return isNumber$2(val) || shared.isArray(val) && val.length === 2 && val.every(isNumber$2);
      }
    }
  });
  const Space = vue.defineComponent({
    name: "ElSpace",
    props: spaceProps,
    setup(props2, { slots }) {
      const { classes, containerStyle, itemStyle } = useSpace(props2);
      function extractChildren(children, parentKey = "", extractedChildren = []) {
        const { prefixCls } = props2;
        children.forEach((child, loopKey) => {
          if (isFragment(child)) {
            if (shared.isArray(child.children)) {
              child.children.forEach((nested, key) => {
                if (isFragment(nested) && shared.isArray(nested.children)) {
                  extractChildren(nested.children, `${parentKey + key}-`, extractedChildren);
                } else {
                  extractedChildren.push(vue.createVNode(SpaceItem, {
                    style: itemStyle.value,
                    prefixCls,
                    key: `nested-${parentKey + key}`
                  }, {
                    default: () => [nested]
                  }, PatchFlags.PROPS | PatchFlags.STYLE, ["style", "prefixCls"]));
                }
              });
            }
          } else if (isValidElementNode(child)) {
            extractedChildren.push(vue.createVNode(SpaceItem, {
              style: itemStyle.value,
              prefixCls,
              key: `LoopKey${parentKey + loopKey}`
            }, {
              default: () => [child]
            }, PatchFlags.PROPS | PatchFlags.STYLE, ["style", "prefixCls"]));
          }
        });
        return extractedChildren;
      }
      return () => {
        var _a2;
        const { spacer, direction: direction2 } = props2;
        const children = vue.renderSlot(slots, "default", { key: 0 }, () => []);
        if (((_a2 = children.children) != null ? _a2 : []).length === 0)
          return null;
        if (shared.isArray(children.children)) {
          let extractedChildren = extractChildren(children.children);
          if (spacer) {
            const len = extractedChildren.length - 1;
            extractedChildren = extractedChildren.reduce((acc, child, idx) => {
              const children2 = [...acc, child];
              if (idx !== len) {
                children2.push(vue.createVNode("span", {
                  style: [
                    itemStyle.value,
                    direction2 === "vertical" ? "width: 100%" : null
                  ],
                  key: idx
                }, [
                  vue.isVNode(spacer) ? spacer : vue.createTextVNode(spacer, PatchFlags.TEXT)
                ], PatchFlags.STYLE));
              }
              return children2;
            }, []);
          }
          return vue.createVNode("div", {
            class: classes.value,
            style: containerStyle.value
          }, extractedChildren, PatchFlags.STYLE | PatchFlags.CLASS);
        }
        return children.children;
      };
    }
  });
  const ElSpace = withInstall(Space);
  const statisticProps = buildProps({
    decimalSeparator: {
      type: String,
      default: "."
    },
    groupSeparator: {
      type: String,
      default: ","
    },
    precision: {
      type: Number,
      default: 0
    },
    formatter: Function,
    value: {
      type: definePropType([Number, Object]),
      default: 0
    },
    prefix: String,
    suffix: String,
    title: String,
    valueStyle: {
      type: definePropType([String, Object, Array])
    }
  });
  const __default__$A = vue.defineComponent({
    name: "ElStatistic"
  });
  const _sfc_main$H = /* @__PURE__ */ vue.defineComponent({
    ...__default__$A,
    props: statisticProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const ns2 = useNamespace("statistic");
      const displayValue = vue.computed(() => {
        const { value, formatter: formatter2, precision, decimalSeparator, groupSeparator } = props2;
        if (shared.isFunction(formatter2))
          return formatter2(value);
        if (!isNumber$2(value) || Number.isNaN(value))
          return value;
        let [integer, decimal = ""] = String(value).split(".");
        decimal = decimal.padEnd(precision, "0").slice(0, precision > 0 ? precision : 0);
        integer = integer.replace(/\B(?=(\d{3})+(?!\d))/g, groupSeparator);
        return [integer, decimal].join(decimal ? decimalSeparator : "");
      });
      expose({
        displayValue
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns2).b())
        }, [
          _ctx.$slots.title || _ctx.title ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("head"))
          }, [
            vue.renderSlot(_ctx.$slots, "title", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)
            ])
          ], 2)) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("content"))
          }, [
            _ctx.$slots.prefix || _ctx.prefix ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ns2).e("prefix"))
            }, [
              vue.renderSlot(_ctx.$slots, "prefix", {}, () => [
                vue.createElementVNode("span", null, vue.toDisplayString(_ctx.prefix), 1)
              ])
            ], 2)) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("span", {
              class: vue.normalizeClass(vue.unref(ns2).e("number")),
              style: vue.normalizeStyle(_ctx.valueStyle)
            }, vue.toDisplayString(vue.unref(displayValue)), 7),
            _ctx.$slots.suffix || _ctx.suffix ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 1,
              class: vue.normalizeClass(vue.unref(ns2).e("suffix"))
            }, [
              vue.renderSlot(_ctx.$slots, "suffix", {}, () => [
                vue.createElementVNode("span", null, vue.toDisplayString(_ctx.suffix), 1)
              ])
            ], 2)) : vue.createCommentVNode("v-if", true)
          ], 2)
        ], 2);
      };
    }
  });
  var Statistic = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["__file", "statistic.vue"]]);
  const ElStatistic = withInstall(Statistic);
  const countdownProps = buildProps({
    format: {
      type: String,
      default: "HH:mm:ss"
    },
    prefix: String,
    suffix: String,
    title: String,
    value: {
      type: definePropType([Number, Object]),
      default: 0
    },
    valueStyle: {
      type: definePropType([String, Object, Array])
    }
  });
  const countdownEmits = {
    finish: () => true,
    [CHANGE_EVENT]: (value) => isNumber$2(value)
  };
  const timeUnits = [
    ["Y", 1e3 * 60 * 60 * 24 * 365],
    ["M", 1e3 * 60 * 60 * 24 * 30],
    ["D", 1e3 * 60 * 60 * 24],
    ["H", 1e3 * 60 * 60],
    ["m", 1e3 * 60],
    ["s", 1e3],
    ["S", 1]
  ];
  const getTime = (value) => {
    return isNumber$2(value) ? new Date(value).getTime() : value.valueOf();
  };
  const formatTime$1 = (timestamp, format2) => {
    let timeLeft = timestamp;
    const escapeRegex = /\[([^\]]*)]/g;
    const replacedText = timeUnits.reduce((current, [name, unit2]) => {
      const replaceRegex = new RegExp(`${name}+(?![^\\[\\]]*\\])`, "g");
      if (replaceRegex.test(current)) {
        const value = Math.floor(timeLeft / unit2);
        timeLeft -= value * unit2;
        return current.replace(replaceRegex, (match) => String(value).padStart(match.length, "0"));
      }
      return current;
    }, format2);
    return replacedText.replace(escapeRegex, "$1");
  };
  const __default__$z = vue.defineComponent({
    name: "ElCountdown"
  });
  const _sfc_main$G = /* @__PURE__ */ vue.defineComponent({
    ...__default__$z,
    props: countdownProps,
    emits: countdownEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      let timer;
      const rawValue = vue.ref(0);
      const displayValue = vue.computed(() => formatTime$1(rawValue.value, props2.format));
      const formatter2 = (val) => formatTime$1(val, props2.format);
      const stopTimer = () => {
        if (timer) {
          cAF(timer);
          timer = void 0;
        }
      };
      const startTimer = () => {
        const timestamp = getTime(props2.value);
        const frameFunc = () => {
          let diff = timestamp - Date.now();
          emit("change", diff);
          if (diff <= 0) {
            diff = 0;
            stopTimer();
            emit("finish");
          } else {
            timer = rAF(frameFunc);
          }
          rawValue.value = diff;
        };
        timer = rAF(frameFunc);
      };
      vue.onMounted(() => {
        rawValue.value = getTime(props2.value) - Date.now();
        vue.watch(() => [props2.value, props2.format], () => {
          stopTimer();
          startTimer();
        }, {
          immediate: true
        });
      });
      vue.onBeforeUnmount(() => {
        stopTimer();
      });
      expose({
        displayValue
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElStatistic), {
          value: rawValue.value,
          title: _ctx.title,
          prefix: _ctx.prefix,
          suffix: _ctx.suffix,
          "value-style": _ctx.valueStyle,
          formatter: formatter2
        }, vue.createSlots({
          _: 2
        }, [
          vue.renderList(_ctx.$slots, (_2, name) => {
            return {
              name,
              fn: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, name)
              ])
            };
          })
        ]), 1032, ["value", "title", "prefix", "suffix", "value-style"]);
      };
    }
  });
  var Countdown = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["__file", "countdown.vue"]]);
  const ElCountdown = withInstall(Countdown);
  const stepsProps = buildProps({
    space: {
      type: [Number, String],
      default: ""
    },
    active: {
      type: Number,
      default: 0
    },
    direction: {
      type: String,
      default: "horizontal",
      values: ["horizontal", "vertical"]
    },
    alignCenter: {
      type: Boolean
    },
    simple: {
      type: Boolean
    },
    finishStatus: {
      type: String,
      values: ["wait", "process", "finish", "error", "success"],
      default: "finish"
    },
    processStatus: {
      type: String,
      values: ["wait", "process", "finish", "error", "success"],
      default: "process"
    }
  });
  const stepsEmits = {
    [CHANGE_EVENT]: (newVal, oldVal) => [newVal, oldVal].every(isNumber$2)
  };
  const __default__$y = vue.defineComponent({
    name: "ElSteps"
  });
  const _sfc_main$F = /* @__PURE__ */ vue.defineComponent({
    ...__default__$y,
    props: stepsProps,
    emits: stepsEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("steps");
      const {
        children: steps,
        addChild: addStep,
        removeChild: removeStep
      } = useOrderedChildren(vue.getCurrentInstance(), "ElStep");
      vue.watch(steps, () => {
        steps.value.forEach((instance, index) => {
          instance.setIndex(index);
        });
      });
      vue.provide("ElSteps", { props: props2, steps, addStep, removeStep });
      vue.watch(() => props2.active, (newVal, oldVal) => {
        emit(CHANGE_EVENT, newVal, oldVal);
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns2).b(), vue.unref(ns2).m(_ctx.simple ? "simple" : _ctx.direction)])
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  var Steps = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["__file", "steps.vue"]]);
  const stepProps = buildProps({
    title: {
      type: String,
      default: ""
    },
    icon: {
      type: iconPropType
    },
    description: {
      type: String,
      default: ""
    },
    status: {
      type: String,
      values: ["", "wait", "process", "finish", "error", "success"],
      default: ""
    }
  });
  const __default__$x = vue.defineComponent({
    name: "ElStep"
  });
  const _sfc_main$E = vue.defineComponent({
    ...__default__$x,
    props: stepProps,
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("step");
      const index = vue.ref(-1);
      const lineStyle = vue.ref({});
      const internalStatus = vue.ref("");
      const parent2 = vue.inject("ElSteps");
      const currentInstance = vue.getCurrentInstance();
      vue.onMounted(() => {
        vue.watch([
          () => parent2.props.active,
          () => parent2.props.processStatus,
          () => parent2.props.finishStatus
        ], ([active]) => {
          updateStatus(active);
        }, { immediate: true });
      });
      vue.onBeforeUnmount(() => {
        parent2.removeStep(stepItemState.uid);
      });
      const currentStatus = vue.computed(() => {
        return props2.status || internalStatus.value;
      });
      const prevStatus = vue.computed(() => {
        const prevStep = parent2.steps.value[index.value - 1];
        return prevStep ? prevStep.currentStatus : "wait";
      });
      const isCenter = vue.computed(() => {
        return parent2.props.alignCenter;
      });
      const isVertical = vue.computed(() => {
        return parent2.props.direction === "vertical";
      });
      const isSimple = vue.computed(() => {
        return parent2.props.simple;
      });
      const stepsCount = vue.computed(() => {
        return parent2.steps.value.length;
      });
      const isLast = vue.computed(() => {
        var _a2;
        return ((_a2 = parent2.steps.value[stepsCount.value - 1]) == null ? void 0 : _a2.uid) === (currentInstance == null ? void 0 : currentInstance.uid);
      });
      const space = vue.computed(() => {
        return isSimple.value ? "" : parent2.props.space;
      });
      const containerKls = vue.computed(() => {
        return [
          ns2.b(),
          ns2.is(isSimple.value ? "simple" : parent2.props.direction),
          ns2.is("flex", isLast.value && !space.value && !isCenter.value),
          ns2.is("center", isCenter.value && !isVertical.value && !isSimple.value)
        ];
      });
      const style = vue.computed(() => {
        const style2 = {
          flexBasis: isNumber$2(space.value) ? `${space.value}px` : space.value ? space.value : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`
        };
        if (isVertical.value)
          return style2;
        if (isLast.value) {
          style2.maxWidth = `${100 / stepsCount.value}%`;
        }
        return style2;
      });
      const setIndex = (val) => {
        index.value = val;
      };
      const calcProgress = (status) => {
        const isWait = status === "wait";
        const style2 = {
          transitionDelay: `${isWait ? "-" : ""}${150 * index.value}ms`
        };
        const step = status === parent2.props.processStatus || isWait ? 0 : 100;
        style2.borderWidth = step && !isSimple.value ? "1px" : 0;
        style2[parent2.props.direction === "vertical" ? "height" : "width"] = `${step}%`;
        lineStyle.value = style2;
      };
      const updateStatus = (activeIndex) => {
        if (activeIndex > index.value) {
          internalStatus.value = parent2.props.finishStatus;
        } else if (activeIndex === index.value && prevStatus.value !== "error") {
          internalStatus.value = parent2.props.processStatus;
        } else {
          internalStatus.value = "wait";
        }
        const prevChild = parent2.steps.value[index.value - 1];
        if (prevChild)
          prevChild.calcProgress(internalStatus.value);
      };
      const stepItemState = vue.reactive({
        uid: currentInstance.uid,
        currentStatus,
        setIndex,
        calcProgress
      });
      parent2.addStep(stepItemState);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          style: vue.normalizeStyle(vue.unref(style)),
          class: vue.normalizeClass(vue.unref(containerKls))
        }, [
          vue.createCommentVNode(" icon & line "),
          vue.createElementVNode("div", {
            class: vue.normalizeClass([vue.unref(ns2).e("head"), vue.unref(ns2).is(vue.unref(currentStatus))])
          }, [
            !vue.unref(isSimple) ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ns2).e("line"))
            }, [
              vue.createElementVNode("i", {
                class: vue.normalizeClass(vue.unref(ns2).e("line-inner")),
                style: vue.normalizeStyle(lineStyle.value)
              }, null, 6)
            ], 2)) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("div", {
              class: vue.normalizeClass([vue.unref(ns2).e("icon"), vue.unref(ns2).is(_ctx.icon || _ctx.$slots.icon ? "icon" : "text")])
            }, [
              vue.renderSlot(_ctx.$slots, "icon", {}, () => [
                _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                  key: 0,
                  class: vue.normalizeClass(vue.unref(ns2).e("icon-inner"))
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
                  ]),
                  _: 1
                }, 8, ["class"])) : vue.unref(currentStatus) === "success" ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                  key: 1,
                  class: vue.normalizeClass([vue.unref(ns2).e("icon-inner"), vue.unref(ns2).is("status")])
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(check_default))
                  ]),
                  _: 1
                }, 8, ["class"])) : vue.unref(currentStatus) === "error" ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                  key: 2,
                  class: vue.normalizeClass([vue.unref(ns2).e("icon-inner"), vue.unref(ns2).is("status")])
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(close_default))
                  ]),
                  _: 1
                }, 8, ["class"])) : !vue.unref(isSimple) ? (vue.openBlock(), vue.createElementBlock("div", {
                  key: 3,
                  class: vue.normalizeClass(vue.unref(ns2).e("icon-inner"))
                }, vue.toDisplayString(index.value + 1), 3)) : vue.createCommentVNode("v-if", true)
              ])
            ], 2)
          ], 2),
          vue.createCommentVNode(" title & description "),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("main"))
          }, [
            vue.createElementVNode("div", {
              class: vue.normalizeClass([vue.unref(ns2).e("title"), vue.unref(ns2).is(vue.unref(currentStatus))])
            }, [
              vue.renderSlot(_ctx.$slots, "title", {}, () => [
                vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)
              ])
            ], 2),
            vue.unref(isSimple) ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ns2).e("arrow"))
            }, null, 2)) : (vue.openBlock(), vue.createElementBlock("div", {
              key: 1,
              class: vue.normalizeClass([vue.unref(ns2).e("description"), vue.unref(ns2).is(vue.unref(currentStatus))])
            }, [
              vue.renderSlot(_ctx.$slots, "description", {}, () => [
                vue.createTextVNode(vue.toDisplayString(_ctx.description), 1)
              ])
            ], 2))
          ], 2)
        ], 6);
      };
    }
  });
  var Step = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["__file", "item.vue"]]);
  const ElSteps = withInstall(Steps, {
    Step
  });
  const ElStep = withNoopInstall(Step);
  const switchProps = buildProps({
    modelValue: {
      type: [Boolean, String, Number],
      default: false
    },
    disabled: Boolean,
    loading: Boolean,
    size: {
      type: String,
      validator: isValidComponentSize
    },
    width: {
      type: [String, Number],
      default: ""
    },
    inlinePrompt: Boolean,
    inactiveActionIcon: {
      type: iconPropType
    },
    activeActionIcon: {
      type: iconPropType
    },
    activeIcon: {
      type: iconPropType
    },
    inactiveIcon: {
      type: iconPropType
    },
    activeText: {
      type: String,
      default: ""
    },
    inactiveText: {
      type: String,
      default: ""
    },
    activeValue: {
      type: [Boolean, String, Number],
      default: true
    },
    inactiveValue: {
      type: [Boolean, String, Number],
      default: false
    },
    name: {
      type: String,
      default: ""
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    beforeChange: {
      type: definePropType(Function)
    },
    id: String,
    tabindex: {
      type: [String, Number]
    },
    ...useAriaProps(["ariaLabel"])
  });
  const switchEmits = {
    [UPDATE_MODEL_EVENT]: (val) => isBoolean$1(val) || shared.isString(val) || isNumber$2(val),
    [CHANGE_EVENT]: (val) => isBoolean$1(val) || shared.isString(val) || isNumber$2(val),
    [INPUT_EVENT]: (val) => isBoolean$1(val) || shared.isString(val) || isNumber$2(val)
  };
  const COMPONENT_NAME$8 = "ElSwitch";
  const __default__$w = vue.defineComponent({
    name: COMPONENT_NAME$8
  });
  const _sfc_main$D = /* @__PURE__ */ vue.defineComponent({
    ...__default__$w,
    props: switchProps,
    emits: switchEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const { formItem } = useFormItem();
      const switchSize = useFormSize();
      const ns2 = useNamespace("switch");
      const { inputId } = useFormItemInputId(props2, {
        formItemContext: formItem
      });
      const switchDisabled = useFormDisabled(vue.computed(() => props2.loading));
      const isControlled = vue.ref(props2.modelValue !== false);
      const input = vue.ref();
      const core = vue.ref();
      const switchKls = vue.computed(() => [
        ns2.b(),
        ns2.m(switchSize.value),
        ns2.is("disabled", switchDisabled.value),
        ns2.is("checked", checked.value)
      ]);
      const labelLeftKls = vue.computed(() => [
        ns2.e("label"),
        ns2.em("label", "left"),
        ns2.is("active", !checked.value)
      ]);
      const labelRightKls = vue.computed(() => [
        ns2.e("label"),
        ns2.em("label", "right"),
        ns2.is("active", checked.value)
      ]);
      const coreStyle = vue.computed(() => ({
        width: addUnit(props2.width)
      }));
      vue.watch(() => props2.modelValue, () => {
        isControlled.value = true;
      });
      const actualValue = vue.computed(() => {
        return isControlled.value ? props2.modelValue : false;
      });
      const checked = vue.computed(() => actualValue.value === props2.activeValue);
      if (![props2.activeValue, props2.inactiveValue].includes(actualValue.value)) {
        emit(UPDATE_MODEL_EVENT, props2.inactiveValue);
        emit(CHANGE_EVENT, props2.inactiveValue);
        emit(INPUT_EVENT, props2.inactiveValue);
      }
      vue.watch(checked, (val) => {
        var _a2;
        input.value.checked = val;
        if (props2.validateEvent) {
          (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "change").catch((err) => debugWarn(err));
        }
      });
      const handleChange = () => {
        const val = checked.value ? props2.inactiveValue : props2.activeValue;
        emit(UPDATE_MODEL_EVENT, val);
        emit(CHANGE_EVENT, val);
        emit(INPUT_EVENT, val);
        vue.nextTick(() => {
          input.value.checked = checked.value;
        });
      };
      const switchValue = () => {
        if (switchDisabled.value)
          return;
        const { beforeChange } = props2;
        if (!beforeChange) {
          handleChange();
          return;
        }
        const shouldChange = beforeChange();
        const isPromiseOrBool = [
          shared.isPromise(shouldChange),
          isBoolean$1(shouldChange)
        ].includes(true);
        if (!isPromiseOrBool) {
          throwError(COMPONENT_NAME$8, "beforeChange must return type `Promise<boolean>` or `boolean`");
        }
        if (shared.isPromise(shouldChange)) {
          shouldChange.then((result) => {
            if (result) {
              handleChange();
            }
          }).catch((e) => {
            debugWarn(COMPONENT_NAME$8, `some error occurred: ${e}`);
          });
        } else if (shouldChange) {
          handleChange();
        }
      };
      const focus = () => {
        var _a2, _b;
        (_b = (_a2 = input.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
      };
      vue.onMounted(() => {
        input.value.checked = checked.value;
      });
      expose({
        focus,
        checked
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(switchKls)),
          onClick: vue.withModifiers(switchValue, ["prevent"])
        }, [
          vue.createElementVNode("input", {
            id: vue.unref(inputId),
            ref_key: "input",
            ref: input,
            class: vue.normalizeClass(vue.unref(ns2).e("input")),
            type: "checkbox",
            role: "switch",
            "aria-checked": vue.unref(checked),
            "aria-disabled": vue.unref(switchDisabled),
            "aria-label": _ctx.ariaLabel,
            name: _ctx.name,
            "true-value": _ctx.activeValue,
            "false-value": _ctx.inactiveValue,
            disabled: vue.unref(switchDisabled),
            tabindex: _ctx.tabindex,
            onChange: handleChange,
            onKeydown: vue.withKeys(switchValue, ["enter"])
          }, null, 42, ["id", "aria-checked", "aria-disabled", "aria-label", "name", "true-value", "false-value", "disabled", "tabindex", "onKeydown"]),
          !_ctx.inlinePrompt && (_ctx.inactiveIcon || _ctx.inactiveText) ? (vue.openBlock(), vue.createElementBlock("span", {
            key: 0,
            class: vue.normalizeClass(vue.unref(labelLeftKls))
          }, [
            _ctx.inactiveIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 0 }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.inactiveIcon)))
              ]),
              _: 1
            })) : vue.createCommentVNode("v-if", true),
            !_ctx.inactiveIcon && _ctx.inactiveText ? (vue.openBlock(), vue.createElementBlock("span", {
              key: 1,
              "aria-hidden": vue.unref(checked)
            }, vue.toDisplayString(_ctx.inactiveText), 9, ["aria-hidden"])) : vue.createCommentVNode("v-if", true)
          ], 2)) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("span", {
            ref_key: "core",
            ref: core,
            class: vue.normalizeClass(vue.unref(ns2).e("core")),
            style: vue.normalizeStyle(vue.unref(coreStyle))
          }, [
            _ctx.inlinePrompt ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ns2).e("inner"))
            }, [
              _ctx.activeIcon || _ctx.inactiveIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 0,
                class: vue.normalizeClass(vue.unref(ns2).is("icon"))
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(checked) ? _ctx.activeIcon : _ctx.inactiveIcon)))
                ]),
                _: 1
              }, 8, ["class"])) : _ctx.activeText || _ctx.inactiveText ? (vue.openBlock(), vue.createElementBlock("span", {
                key: 1,
                class: vue.normalizeClass(vue.unref(ns2).is("text")),
                "aria-hidden": !vue.unref(checked)
              }, vue.toDisplayString(vue.unref(checked) ? _ctx.activeText : _ctx.inactiveText), 11, ["aria-hidden"])) : vue.createCommentVNode("v-if", true)
            ], 2)) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).e("action"))
            }, [
              _ctx.loading ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 0,
                class: vue.normalizeClass(vue.unref(ns2).is("loading"))
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(vue.unref(loading_default))
                ]),
                _: 1
              }, 8, ["class"])) : vue.unref(checked) ? vue.renderSlot(_ctx.$slots, "active-action", { key: 1 }, () => [
                _ctx.activeActionIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 0 }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.activeActionIcon)))
                  ]),
                  _: 1
                })) : vue.createCommentVNode("v-if", true)
              ]) : !vue.unref(checked) ? vue.renderSlot(_ctx.$slots, "inactive-action", { key: 2 }, () => [
                _ctx.inactiveActionIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 0 }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.inactiveActionIcon)))
                  ]),
                  _: 1
                })) : vue.createCommentVNode("v-if", true)
              ]) : vue.createCommentVNode("v-if", true)
            ], 2)
          ], 6),
          !_ctx.inlinePrompt && (_ctx.activeIcon || _ctx.activeText) ? (vue.openBlock(), vue.createElementBlock("span", {
            key: 1,
            class: vue.normalizeClass(vue.unref(labelRightKls))
          }, [
            _ctx.activeIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 0 }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.activeIcon)))
              ]),
              _: 1
            })) : vue.createCommentVNode("v-if", true),
            !_ctx.activeIcon && _ctx.activeText ? (vue.openBlock(), vue.createElementBlock("span", {
              key: 1,
              "aria-hidden": !vue.unref(checked)
            }, vue.toDisplayString(_ctx.activeText), 9, ["aria-hidden"])) : vue.createCommentVNode("v-if", true)
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 10, ["onClick"]);
      };
    }
  });
  var Switch = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["__file", "switch.vue"]]);
  const ElSwitch = withInstall(Switch);
  const getCell = function(event) {
    var _a2;
    return (_a2 = event.target) == null ? void 0 : _a2.closest("td");
  };
  const orderBy = function(array, sortKey, reverse, sortMethod, sortBy) {
    if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {
      return array;
    }
    if (typeof reverse === "string") {
      reverse = reverse === "descending" ? -1 : 1;
    } else {
      reverse = reverse && reverse < 0 ? -1 : 1;
    }
    const getKey = sortMethod ? null : function(value, index) {
      if (sortBy) {
        if (!Array.isArray(sortBy)) {
          sortBy = [sortBy];
        }
        return sortBy.map((by) => {
          if (typeof by === "string") {
            return get(value, by);
          } else {
            return by(value, index, array);
          }
        });
      }
      if (sortKey !== "$key") {
        if (shared.isObject(value) && "$value" in value)
          value = value.$value;
      }
      return [shared.isObject(value) ? get(value, sortKey) : value];
    };
    const compare = function(a2, b2) {
      if (sortMethod) {
        return sortMethod(a2.value, b2.value);
      }
      for (let i2 = 0, len = a2.key.length; i2 < len; i2++) {
        if (a2.key[i2] < b2.key[i2]) {
          return -1;
        }
        if (a2.key[i2] > b2.key[i2]) {
          return 1;
        }
      }
      return 0;
    };
    return array.map((value, index) => {
      return {
        value,
        index,
        key: getKey ? getKey(value, index) : null
      };
    }).sort((a2, b2) => {
      let order2 = compare(a2, b2);
      if (!order2) {
        order2 = a2.index - b2.index;
      }
      return order2 * +reverse;
    }).map((item) => item.value);
  };
  const getColumnById = function(table, columnId) {
    let column = null;
    table.columns.forEach((item) => {
      if (item.id === columnId) {
        column = item;
      }
    });
    return column;
  };
  const getColumnByKey = function(table, columnKey) {
    let column = null;
    for (let i2 = 0; i2 < table.columns.length; i2++) {
      const item = table.columns[i2];
      if (item.columnKey === columnKey) {
        column = item;
        break;
      }
    }
    if (!column)
      throwError("ElTable", `No column matching with column-key: ${columnKey}`);
    return column;
  };
  const getColumnByCell = function(table, cell, namespace) {
    const matches = (cell.className || "").match(new RegExp(`${namespace}-table_[^\\s]+`, "gm"));
    if (matches) {
      return getColumnById(table, matches[0]);
    }
    return null;
  };
  const getRowIdentity = (row, rowKey2) => {
    if (!row)
      throw new Error("Row is required when get row identity");
    if (typeof rowKey2 === "string") {
      if (!rowKey2.includes(".")) {
        return `${row[rowKey2]}`;
      }
      const key = rowKey2.split(".");
      let current = row;
      for (const element of key) {
        current = current[element];
      }
      return `${current}`;
    } else if (typeof rowKey2 === "function") {
      return rowKey2.call(null, row);
    }
  };
  const getKeysMap = function(array, rowKey2) {
    const arrayMap2 = {};
    (array || []).forEach((row, index) => {
      arrayMap2[getRowIdentity(row, rowKey2)] = { row, index };
    });
    return arrayMap2;
  };
  function mergeOptions(defaults2, config) {
    const options = {};
    let key;
    for (key in defaults2) {
      options[key] = defaults2[key];
    }
    for (key in config) {
      if (shared.hasOwn(config, key)) {
        const value = config[key];
        if (typeof value !== "undefined") {
          options[key] = value;
        }
      }
    }
    return options;
  }
  function parseWidth(width) {
    if (width === "")
      return width;
    if (width !== void 0) {
      width = Number.parseInt(width, 10);
      if (Number.isNaN(width)) {
        width = "";
      }
    }
    return width;
  }
  function parseMinWidth(minWidth) {
    if (minWidth === "")
      return minWidth;
    if (minWidth !== void 0) {
      minWidth = parseWidth(minWidth);
      if (Number.isNaN(minWidth)) {
        minWidth = 80;
      }
    }
    return minWidth;
  }
  function parseHeight(height) {
    if (typeof height === "number") {
      return height;
    }
    if (typeof height === "string") {
      if (/^\d+(?:px)?$/.test(height)) {
        return Number.parseInt(height, 10);
      } else {
        return height;
      }
    }
    return null;
  }
  function compose(...funcs) {
    if (funcs.length === 0) {
      return (arg) => arg;
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce((a2, b2) => (...args) => a2(b2(...args)));
  }
  function toggleRowStatus(statusArr, row, newVal, tableTreeProps, selectable, rowIndex) {
    let _rowIndex = rowIndex != null ? rowIndex : 0;
    let changed = false;
    const index = statusArr.indexOf(row);
    const included = index !== -1;
    const isRowSelectable = selectable == null ? void 0 : selectable.call(null, row, rowIndex);
    const toggleStatus = (type3) => {
      if (type3 === "add") {
        statusArr.push(row);
      } else {
        statusArr.splice(index, 1);
      }
      changed = true;
    };
    const getChildrenCount = (row2) => {
      let count2 = 0;
      const children = (tableTreeProps == null ? void 0 : tableTreeProps.children) && row2[tableTreeProps.children];
      if (children && shared.isArray(children)) {
        count2 += children.length;
        children.forEach((item) => {
          count2 += getChildrenCount(item);
        });
      }
      return count2;
    };
    if (!selectable || isRowSelectable) {
      if (isBoolean$1(newVal)) {
        if (newVal && !included) {
          toggleStatus("add");
        } else if (!newVal && included) {
          toggleStatus("remove");
        }
      } else {
        included ? toggleStatus("remove") : toggleStatus("add");
      }
    }
    if (!(tableTreeProps == null ? void 0 : tableTreeProps.checkStrictly) && (tableTreeProps == null ? void 0 : tableTreeProps.children) && shared.isArray(row[tableTreeProps.children])) {
      row[tableTreeProps.children].forEach((item) => {
        toggleRowStatus(statusArr, item, newVal != null ? newVal : !included, tableTreeProps, selectable, _rowIndex + 1);
        _rowIndex += getChildrenCount(item) + 1;
      });
    }
    return changed;
  }
  function walkTreeNode(root2, cb, childrenKey = "children", lazyKey = "hasChildren") {
    const isNil2 = (array) => !(Array.isArray(array) && array.length);
    function _walker(parent2, children, level) {
      cb(parent2, children, level);
      children.forEach((item) => {
        if (item[lazyKey]) {
          cb(item, null, level + 1);
          return;
        }
        const children2 = item[childrenKey];
        if (!isNil2(children2)) {
          _walker(item, children2, level + 1);
        }
      });
    }
    root2.forEach((item) => {
      if (item[lazyKey]) {
        cb(item, null, 0);
        return;
      }
      const children = item[childrenKey];
      if (!isNil2(children)) {
        _walker(item, children, 0);
      }
    });
  }
  let removePopper = null;
  function createTablePopper(props2, popperContent, trigger, table) {
    if ((removePopper == null ? void 0 : removePopper.trigger) === trigger) {
      return;
    }
    removePopper == null ? void 0 : removePopper();
    const parentNode = table == null ? void 0 : table.refs.tableWrapper;
    const ns2 = parentNode == null ? void 0 : parentNode.dataset.prefix;
    const popperOptions = {
      strategy: "fixed",
      ...props2.popperOptions
    };
    const vm = vue.createVNode(ElTooltip, {
      content: popperContent,
      virtualTriggering: true,
      virtualRef: trigger,
      appendTo: parentNode,
      placement: "top",
      transition: "none",
      offset: 0,
      hideAfter: 0,
      ...props2,
      popperOptions,
      onHide: () => {
        removePopper == null ? void 0 : removePopper();
      }
    });
    vm.appContext = { ...table.appContext, ...table };
    const container = document.createElement("div");
    vue.render(vm, container);
    vm.component.exposed.onOpen();
    const scrollContainer = parentNode == null ? void 0 : parentNode.querySelector(`.${ns2}-scrollbar__wrap`);
    removePopper = () => {
      vue.render(null, container);
      scrollContainer == null ? void 0 : scrollContainer.removeEventListener("scroll", removePopper);
      removePopper = null;
    };
    removePopper.trigger = trigger;
    scrollContainer == null ? void 0 : scrollContainer.addEventListener("scroll", removePopper);
  }
  function getCurrentColumns(column) {
    if (column.children) {
      return flatMap(column.children, getCurrentColumns);
    } else {
      return [column];
    }
  }
  function getColSpan(colSpan, column) {
    return colSpan + column.colSpan;
  }
  const isFixedColumn = (index, fixed, store2, realColumns) => {
    let start = 0;
    let after = index;
    const columns2 = store2.states.columns.value;
    if (realColumns) {
      const curColumns = getCurrentColumns(realColumns[index]);
      const preColumns = columns2.slice(0, columns2.indexOf(curColumns[0]));
      start = preColumns.reduce(getColSpan, 0);
      after = start + curColumns.reduce(getColSpan, 0) - 1;
    } else {
      start = index;
    }
    let fixedLayout;
    switch (fixed) {
      case "left":
        if (after < store2.states.fixedLeafColumnsLength.value) {
          fixedLayout = "left";
        }
        break;
      case "right":
        if (start >= columns2.length - store2.states.rightFixedLeafColumnsLength.value) {
          fixedLayout = "right";
        }
        break;
      default:
        if (after < store2.states.fixedLeafColumnsLength.value) {
          fixedLayout = "left";
        } else if (start >= columns2.length - store2.states.rightFixedLeafColumnsLength.value) {
          fixedLayout = "right";
        }
    }
    return fixedLayout ? {
      direction: fixedLayout,
      start,
      after
    } : {};
  };
  const getFixedColumnsClass = (namespace, index, fixed, store2, realColumns, offset2 = 0) => {
    const classes = [];
    const { direction: direction2, start, after } = isFixedColumn(index, fixed, store2, realColumns);
    if (direction2) {
      const isLeft = direction2 === "left";
      classes.push(`${namespace}-fixed-column--${direction2}`);
      if (isLeft && after + offset2 === store2.states.fixedLeafColumnsLength.value - 1) {
        classes.push("is-last-column");
      } else if (!isLeft && start - offset2 === store2.states.columns.value.length - store2.states.rightFixedLeafColumnsLength.value) {
        classes.push("is-first-column");
      }
    }
    return classes;
  };
  function getOffset(offset2, column) {
    return offset2 + (column.realWidth === null || Number.isNaN(column.realWidth) ? Number(column.width) : column.realWidth);
  }
  const getFixedColumnOffset = (index, fixed, store2, realColumns) => {
    const {
      direction: direction2,
      start = 0,
      after = 0
    } = isFixedColumn(index, fixed, store2, realColumns);
    if (!direction2) {
      return;
    }
    const styles = {};
    const isLeft = direction2 === "left";
    const columns2 = store2.states.columns.value;
    if (isLeft) {
      styles.left = columns2.slice(0, start).reduce(getOffset, 0);
    } else {
      styles.right = columns2.slice(after + 1).reverse().reduce(getOffset, 0);
    }
    return styles;
  };
  const ensurePosition = (style, key) => {
    if (!style)
      return;
    if (!Number.isNaN(style[key])) {
      style[key] = `${style[key]}px`;
    }
  };
  function useExpand(watcherData) {
    const instance = vue.getCurrentInstance();
    const defaultExpandAll = vue.ref(false);
    const expandRows = vue.ref([]);
    const updateExpandRows = () => {
      const data = watcherData.data.value || [];
      const rowKey2 = watcherData.rowKey.value;
      if (defaultExpandAll.value) {
        expandRows.value = data.slice();
      } else if (rowKey2) {
        const expandRowsMap = getKeysMap(expandRows.value, rowKey2);
        expandRows.value = data.reduce((prev, row) => {
          const rowId = getRowIdentity(row, rowKey2);
          const rowInfo = expandRowsMap[rowId];
          if (rowInfo) {
            prev.push(row);
          }
          return prev;
        }, []);
      } else {
        expandRows.value = [];
      }
    };
    const toggleRowExpansion = (row, expanded) => {
      const changed = toggleRowStatus(expandRows.value, row, expanded);
      if (changed) {
        instance.emit("expand-change", row, expandRows.value.slice());
      }
    };
    const setExpandRowKeys = (rowKeys) => {
      instance.store.assertRowKey();
      const data = watcherData.data.value || [];
      const rowKey2 = watcherData.rowKey.value;
      const keysMap = getKeysMap(data, rowKey2);
      expandRows.value = rowKeys.reduce((prev, cur) => {
        const info = keysMap[cur];
        if (info) {
          prev.push(info.row);
        }
        return prev;
      }, []);
    };
    const isRowExpanded = (row) => {
      const rowKey2 = watcherData.rowKey.value;
      if (rowKey2) {
        const expandMap = getKeysMap(expandRows.value, rowKey2);
        return !!expandMap[getRowIdentity(row, rowKey2)];
      }
      return expandRows.value.includes(row);
    };
    return {
      updateExpandRows,
      toggleRowExpansion,
      setExpandRowKeys,
      isRowExpanded,
      states: {
        expandRows,
        defaultExpandAll
      }
    };
  }
  function useCurrent(watcherData) {
    const instance = vue.getCurrentInstance();
    const _currentRowKey = vue.ref(null);
    const currentRow = vue.ref(null);
    const setCurrentRowKey = (key) => {
      instance.store.assertRowKey();
      _currentRowKey.value = key;
      setCurrentRowByKey(key);
    };
    const restoreCurrentRowKey = () => {
      _currentRowKey.value = null;
    };
    const setCurrentRowByKey = (key) => {
      const { data, rowKey: rowKey2 } = watcherData;
      let _currentRow = null;
      if (rowKey2.value) {
        _currentRow = (vue.unref(data) || []).find((item) => getRowIdentity(item, rowKey2.value) === key);
      }
      currentRow.value = _currentRow;
      instance.emit("current-change", currentRow.value, null);
    };
    const updateCurrentRow = (_currentRow) => {
      const oldCurrentRow = currentRow.value;
      if (_currentRow && _currentRow !== oldCurrentRow) {
        currentRow.value = _currentRow;
        instance.emit("current-change", currentRow.value, oldCurrentRow);
        return;
      }
      if (!_currentRow && oldCurrentRow) {
        currentRow.value = null;
        instance.emit("current-change", null, oldCurrentRow);
      }
    };
    const updateCurrentRowData = () => {
      const rowKey2 = watcherData.rowKey.value;
      const data = watcherData.data.value || [];
      const oldCurrentRow = currentRow.value;
      if (!data.includes(oldCurrentRow) && oldCurrentRow) {
        if (rowKey2) {
          const currentRowKey = getRowIdentity(oldCurrentRow, rowKey2);
          setCurrentRowByKey(currentRowKey);
        } else {
          currentRow.value = null;
        }
        if (currentRow.value === null) {
          instance.emit("current-change", null, oldCurrentRow);
        }
      } else if (_currentRowKey.value) {
        setCurrentRowByKey(_currentRowKey.value);
        restoreCurrentRowKey();
      }
    };
    return {
      setCurrentRowKey,
      restoreCurrentRowKey,
      setCurrentRowByKey,
      updateCurrentRow,
      updateCurrentRowData,
      states: {
        _currentRowKey,
        currentRow
      }
    };
  }
  function useTree$2(watcherData) {
    const expandRowKeys = vue.ref([]);
    const treeData = vue.ref({});
    const indent = vue.ref(16);
    const lazy = vue.ref(false);
    const lazyTreeNodeMap = vue.ref({});
    const lazyColumnIdentifier = vue.ref("hasChildren");
    const childrenColumnName = vue.ref("children");
    const checkStrictly = vue.ref(false);
    const instance = vue.getCurrentInstance();
    const normalizedData = vue.computed(() => {
      if (!watcherData.rowKey.value)
        return {};
      const data = watcherData.data.value || [];
      return normalize(data);
    });
    const normalizedLazyNode = vue.computed(() => {
      const rowKey2 = watcherData.rowKey.value;
      const keys2 = Object.keys(lazyTreeNodeMap.value);
      const res = {};
      if (!keys2.length)
        return res;
      keys2.forEach((key) => {
        if (lazyTreeNodeMap.value[key].length) {
          const item = { children: [] };
          lazyTreeNodeMap.value[key].forEach((row) => {
            const currentRowKey = getRowIdentity(row, rowKey2);
            item.children.push(currentRowKey);
            if (row[lazyColumnIdentifier.value] && !res[currentRowKey]) {
              res[currentRowKey] = { children: [] };
            }
          });
          res[key] = item;
        }
      });
      return res;
    });
    const normalize = (data) => {
      const rowKey2 = watcherData.rowKey.value;
      const res = {};
      walkTreeNode(data, (parent2, children, level) => {
        const parentId = getRowIdentity(parent2, rowKey2);
        if (Array.isArray(children)) {
          res[parentId] = {
            children: children.map((row) => getRowIdentity(row, rowKey2)),
            level
          };
        } else if (lazy.value) {
          res[parentId] = {
            children: [],
            lazy: true,
            level
          };
        }
      }, childrenColumnName.value, lazyColumnIdentifier.value);
      return res;
    };
    const updateTreeData = (ifChangeExpandRowKeys = false, ifExpandAll = ((_a2) => (_a2 = instance.store) == null ? void 0 : _a2.states.defaultExpandAll.value)()) => {
      var _a2;
      const nested = normalizedData.value;
      const normalizedLazyNode_ = normalizedLazyNode.value;
      const keys2 = Object.keys(nested);
      const newTreeData = {};
      if (keys2.length) {
        const oldTreeData = vue.unref(treeData);
        const rootLazyRowKeys = [];
        const getExpanded = (oldValue, key) => {
          if (ifChangeExpandRowKeys) {
            if (expandRowKeys.value) {
              return ifExpandAll || expandRowKeys.value.includes(key);
            } else {
              return !!(ifExpandAll || (oldValue == null ? void 0 : oldValue.expanded));
            }
          } else {
            const included = ifExpandAll || expandRowKeys.value && expandRowKeys.value.includes(key);
            return !!((oldValue == null ? void 0 : oldValue.expanded) || included);
          }
        };
        keys2.forEach((key) => {
          const oldValue = oldTreeData[key];
          const newValue = { ...nested[key] };
          newValue.expanded = getExpanded(oldValue, key);
          if (newValue.lazy) {
            const { loaded = false, loading = false } = oldValue || {};
            newValue.loaded = !!loaded;
            newValue.loading = !!loading;
            rootLazyRowKeys.push(key);
          }
          newTreeData[key] = newValue;
        });
        const lazyKeys = Object.keys(normalizedLazyNode_);
        if (lazy.value && lazyKeys.length && rootLazyRowKeys.length) {
          lazyKeys.forEach((key) => {
            const oldValue = oldTreeData[key];
            const lazyNodeChildren = normalizedLazyNode_[key].children;
            if (rootLazyRowKeys.includes(key)) {
              if (newTreeData[key].children.length !== 0) {
                throw new Error("[ElTable]children must be an empty array.");
              }
              newTreeData[key].children = lazyNodeChildren;
            } else {
              const { loaded = false, loading = false } = oldValue || {};
              newTreeData[key] = {
                lazy: true,
                loaded: !!loaded,
                loading: !!loading,
                expanded: getExpanded(oldValue, key),
                children: lazyNodeChildren,
                level: ""
              };
            }
          });
        }
      }
      treeData.value = newTreeData;
      (_a2 = instance.store) == null ? void 0 : _a2.updateTableScrollY();
    };
    vue.watch(() => expandRowKeys.value, () => {
      updateTreeData(true);
    });
    vue.watch(() => normalizedData.value, () => {
      updateTreeData();
    });
    vue.watch(() => normalizedLazyNode.value, () => {
      updateTreeData();
    });
    const updateTreeExpandKeys = (value) => {
      expandRowKeys.value = value;
      updateTreeData();
    };
    const toggleTreeExpansion = (row, expanded) => {
      instance.store.assertRowKey();
      const rowKey2 = watcherData.rowKey.value;
      const id = getRowIdentity(row, rowKey2);
      const data = id && treeData.value[id];
      if (id && data && "expanded" in data) {
        const oldExpanded = data.expanded;
        expanded = typeof expanded === "undefined" ? !data.expanded : expanded;
        treeData.value[id].expanded = expanded;
        if (oldExpanded !== expanded) {
          instance.emit("expand-change", row, expanded);
        }
        instance.store.updateTableScrollY();
      }
    };
    const loadOrToggle = (row) => {
      instance.store.assertRowKey();
      const rowKey2 = watcherData.rowKey.value;
      const id = getRowIdentity(row, rowKey2);
      const data = treeData.value[id];
      if (lazy.value && data && "loaded" in data && !data.loaded) {
        loadData(row, id, data);
      } else {
        toggleTreeExpansion(row, void 0);
      }
    };
    const loadData = (row, key, treeNode) => {
      const { load } = instance.props;
      if (load && !treeData.value[key].loaded) {
        treeData.value[key].loading = true;
        load(row, treeNode, (data) => {
          if (!Array.isArray(data)) {
            throw new TypeError("[ElTable] data must be an array");
          }
          treeData.value[key].loading = false;
          treeData.value[key].loaded = true;
          treeData.value[key].expanded = true;
          if (data.length) {
            lazyTreeNodeMap.value[key] = data;
          }
          instance.emit("expand-change", row, true);
        });
      }
    };
    const updateKeyChildren = (key, data) => {
      const { lazy: lazy2, rowKey: rowKey2 } = instance.props;
      if (!lazy2)
        return;
      if (!rowKey2)
        throw new Error("[Table] rowKey is required in updateKeyChild");
      if (lazyTreeNodeMap.value[key]) {
        lazyTreeNodeMap.value[key] = data;
      }
    };
    return {
      loadData,
      loadOrToggle,
      toggleTreeExpansion,
      updateTreeExpandKeys,
      updateTreeData,
      updateKeyChildren,
      normalize,
      states: {
        expandRowKeys,
        treeData,
        indent,
        lazy,
        lazyTreeNodeMap,
        lazyColumnIdentifier,
        childrenColumnName,
        checkStrictly
      }
    };
  }
  const sortData = (data, states) => {
    const sortingColumn = states.sortingColumn;
    if (!sortingColumn || typeof sortingColumn.sortable === "string") {
      return data;
    }
    return orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);
  };
  const doFlattenColumns = (columns2) => {
    const result = [];
    columns2.forEach((column) => {
      if (column.children && column.children.length > 0) {
        result.push.apply(result, doFlattenColumns(column.children));
      } else {
        result.push(column);
      }
    });
    return result;
  };
  function useWatcher$1() {
    var _a2;
    const instance = vue.getCurrentInstance();
    const { size: tableSize } = vue.toRefs((_a2 = instance.proxy) == null ? void 0 : _a2.$props);
    const rowKey2 = vue.ref(null);
    const data = vue.ref([]);
    const _data = vue.ref([]);
    const isComplex = vue.ref(false);
    const _columns = vue.ref([]);
    const originColumns = vue.ref([]);
    const columns2 = vue.ref([]);
    const fixedColumns = vue.ref([]);
    const rightFixedColumns = vue.ref([]);
    const leafColumns = vue.ref([]);
    const fixedLeafColumns = vue.ref([]);
    const rightFixedLeafColumns = vue.ref([]);
    const updateOrderFns = [];
    const leafColumnsLength = vue.ref(0);
    const fixedLeafColumnsLength = vue.ref(0);
    const rightFixedLeafColumnsLength = vue.ref(0);
    const isAllSelected = vue.ref(false);
    const selection = vue.ref([]);
    const reserveSelection = vue.ref(false);
    const selectOnIndeterminate = vue.ref(false);
    const selectable = vue.ref(null);
    const filters = vue.ref({});
    const filteredData = vue.ref(null);
    const sortingColumn = vue.ref(null);
    const sortProp = vue.ref(null);
    const sortOrder = vue.ref(null);
    const hoverRow = vue.ref(null);
    vue.watch(data, () => instance.state && scheduleLayout(false), {
      deep: true
    });
    const assertRowKey = () => {
      if (!rowKey2.value)
        throw new Error("[ElTable] prop row-key is required");
    };
    const updateChildFixed = (column) => {
      var _a22;
      (_a22 = column.children) == null ? void 0 : _a22.forEach((childColumn) => {
        childColumn.fixed = column.fixed;
        updateChildFixed(childColumn);
      });
    };
    let selectionInitialFixed = void 0;
    const updateColumns = () => {
      _columns.value.forEach((column) => {
        updateChildFixed(column);
      });
      fixedColumns.value = _columns.value.filter((column) => column.fixed === true || column.fixed === "left");
      rightFixedColumns.value = _columns.value.filter((column) => column.fixed === "right");
      if (isUndefined(selectionInitialFixed) && _columns.value[0] && _columns.value[0].type === "selection") {
        selectionInitialFixed = Boolean(_columns.value[0].fixed);
      }
      if (fixedColumns.value.length > 0 && _columns.value[0] && _columns.value[0].type === "selection") {
        if (!_columns.value[0].fixed) {
          _columns.value[0].fixed = true;
          fixedColumns.value.unshift(_columns.value[0]);
        } else {
          const hasNotSelectionColumns = fixedColumns.value.some((column) => column.type !== "selection");
          if (!hasNotSelectionColumns) {
            _columns.value[0].fixed = selectionInitialFixed;
            if (!selectionInitialFixed)
              fixedColumns.value.shift();
          } else {
            selectionInitialFixed = void 0;
          }
        }
      }
      const notFixedColumns = _columns.value.filter((column) => !column.fixed);
      originColumns.value = [].concat(fixedColumns.value).concat(notFixedColumns).concat(rightFixedColumns.value);
      const leafColumns2 = doFlattenColumns(notFixedColumns);
      const fixedLeafColumns2 = doFlattenColumns(fixedColumns.value);
      const rightFixedLeafColumns2 = doFlattenColumns(rightFixedColumns.value);
      leafColumnsLength.value = leafColumns2.length;
      fixedLeafColumnsLength.value = fixedLeafColumns2.length;
      rightFixedLeafColumnsLength.value = rightFixedLeafColumns2.length;
      columns2.value = [].concat(fixedLeafColumns2).concat(leafColumns2).concat(rightFixedLeafColumns2);
      isComplex.value = fixedColumns.value.length > 0 || rightFixedColumns.value.length > 0;
    };
    const scheduleLayout = (needUpdateColumns, immediate = false) => {
      if (needUpdateColumns) {
        updateColumns();
      }
      if (immediate) {
        instance.state.doLayout();
      } else {
        instance.state.debouncedUpdateLayout();
      }
    };
    const isSelected = (row) => {
      return selection.value.some((item) => isEqual$1(item, row));
    };
    const clearSelection = () => {
      isAllSelected.value = false;
      const oldSelection = selection.value;
      selection.value = [];
      if (oldSelection.length) {
        instance.emit("selection-change", []);
      }
    };
    const cleanSelection = () => {
      let deleted;
      if (rowKey2.value) {
        deleted = [];
        const selectedMap = getKeysMap(selection.value, rowKey2.value);
        const dataMap = getKeysMap(data.value, rowKey2.value);
        for (const key in selectedMap) {
          if (shared.hasOwn(selectedMap, key) && !dataMap[key]) {
            deleted.push(selectedMap[key].row);
          }
        }
      } else {
        deleted = selection.value.filter((item) => !data.value.includes(item));
      }
      if (deleted.length) {
        const newSelection = selection.value.filter((item) => !deleted.includes(item));
        selection.value = newSelection;
        instance.emit("selection-change", newSelection.slice());
      }
    };
    const getSelectionRows = () => {
      return (selection.value || []).slice();
    };
    const toggleRowSelection = (row, selected, emitChange = true, ignoreSelectable = false) => {
      var _a22, _b, _c, _d;
      const treeProps2 = {
        children: (_b = (_a22 = instance == null ? void 0 : instance.store) == null ? void 0 : _a22.states) == null ? void 0 : _b.childrenColumnName.value,
        checkStrictly: (_d = (_c = instance == null ? void 0 : instance.store) == null ? void 0 : _c.states) == null ? void 0 : _d.checkStrictly.value
      };
      const changed = toggleRowStatus(selection.value, row, selected, treeProps2, ignoreSelectable ? void 0 : selectable.value);
      if (changed) {
        const newSelection = (selection.value || []).slice();
        if (emitChange) {
          instance.emit("select", newSelection, row);
        }
        instance.emit("selection-change", newSelection);
      }
    };
    const _toggleAllSelection = () => {
      var _a22, _b;
      const value = selectOnIndeterminate.value ? !isAllSelected.value : !(isAllSelected.value || selection.value.length);
      isAllSelected.value = value;
      let selectionChanged = false;
      let childrenCount = 0;
      const rowKey22 = (_b = (_a22 = instance == null ? void 0 : instance.store) == null ? void 0 : _a22.states) == null ? void 0 : _b.rowKey.value;
      const { childrenColumnName } = instance.store.states;
      const treeProps2 = {
        children: childrenColumnName.value,
        checkStrictly: false
      };
      data.value.forEach((row, index) => {
        const rowIndex = index + childrenCount;
        if (toggleRowStatus(selection.value, row, value, treeProps2, selectable.value, rowIndex)) {
          selectionChanged = true;
        }
        childrenCount += getChildrenCount(getRowIdentity(row, rowKey22));
      });
      if (selectionChanged) {
        instance.emit("selection-change", selection.value ? selection.value.slice() : []);
      }
      instance.emit("select-all", (selection.value || []).slice());
    };
    const updateSelectionByRowKey = () => {
      const selectedMap = getKeysMap(selection.value, rowKey2.value);
      data.value.forEach((row) => {
        const rowId = getRowIdentity(row, rowKey2.value);
        const rowInfo = selectedMap[rowId];
        if (rowInfo) {
          selection.value[rowInfo.index] = row;
        }
      });
    };
    const updateAllSelected = () => {
      var _a22;
      if (((_a22 = data.value) == null ? void 0 : _a22.length) === 0) {
        isAllSelected.value = false;
        return;
      }
      const { childrenColumnName } = instance.store.states;
      const selectedMap = rowKey2.value ? getKeysMap(selection.value, rowKey2.value) : void 0;
      let rowIndex = 0;
      let selectedCount = 0;
      const isSelected2 = (row) => {
        if (selectedMap) {
          return !!selectedMap[getRowIdentity(row, rowKey2.value)];
        } else {
          return selection.value.includes(row);
        }
      };
      const checkSelectedStatus = (data2) => {
        var _a3;
        for (const row of data2) {
          const isRowSelectable = selectable.value && selectable.value.call(null, row, rowIndex);
          if (!isSelected2(row)) {
            if (!selectable.value || isRowSelectable) {
              return false;
            }
          } else {
            selectedCount++;
          }
          rowIndex++;
          if (((_a3 = row[childrenColumnName.value]) == null ? void 0 : _a3.length) && !checkSelectedStatus(row[childrenColumnName.value])) {
            return false;
          }
        }
        return true;
      };
      const isAllSelected_ = checkSelectedStatus(data.value || []);
      isAllSelected.value = selectedCount === 0 ? false : isAllSelected_;
    };
    const getChildrenCount = (rowKey22) => {
      var _a22;
      if (!instance || !instance.store)
        return 0;
      const { treeData } = instance.store.states;
      let count2 = 0;
      const children = (_a22 = treeData.value[rowKey22]) == null ? void 0 : _a22.children;
      if (children) {
        count2 += children.length;
        children.forEach((childKey) => {
          count2 += getChildrenCount(childKey);
        });
      }
      return count2;
    };
    const updateFilters = (columns22, values) => {
      if (!Array.isArray(columns22)) {
        columns22 = [columns22];
      }
      const filters_ = {};
      columns22.forEach((col) => {
        filters.value[col.id] = values;
        filters_[col.columnKey || col.id] = values;
      });
      return filters_;
    };
    const updateSort = (column, prop, order2) => {
      if (sortingColumn.value && sortingColumn.value !== column) {
        sortingColumn.value.order = null;
      }
      sortingColumn.value = column;
      sortProp.value = prop;
      sortOrder.value = order2;
    };
    const execFilter = () => {
      let sourceData = vue.unref(_data);
      Object.keys(filters.value).forEach((columnId) => {
        const values = filters.value[columnId];
        if (!values || values.length === 0)
          return;
        const column = getColumnById({
          columns: columns2.value
        }, columnId);
        if (column && column.filterMethod) {
          sourceData = sourceData.filter((row) => {
            return values.some((value) => column.filterMethod.call(null, value, row, column));
          });
        }
      });
      filteredData.value = sourceData;
    };
    const execSort = () => {
      data.value = sortData(filteredData.value, {
        sortingColumn: sortingColumn.value,
        sortProp: sortProp.value,
        sortOrder: sortOrder.value
      });
    };
    const execQuery = (ignore = void 0) => {
      if (!(ignore && ignore.filter)) {
        execFilter();
      }
      execSort();
    };
    const clearFilter = (columnKeys) => {
      const { tableHeaderRef } = instance.refs;
      if (!tableHeaderRef)
        return;
      const panels = Object.assign({}, tableHeaderRef.filterPanels);
      const keys2 = Object.keys(panels);
      if (!keys2.length)
        return;
      if (typeof columnKeys === "string") {
        columnKeys = [columnKeys];
      }
      if (Array.isArray(columnKeys)) {
        const columns_ = columnKeys.map((key) => getColumnByKey({
          columns: columns2.value
        }, key));
        keys2.forEach((key) => {
          const column = columns_.find((col) => col.id === key);
          if (column) {
            column.filteredValue = [];
          }
        });
        instance.store.commit("filterChange", {
          column: columns_,
          values: [],
          silent: true,
          multi: true
        });
      } else {
        keys2.forEach((key) => {
          const column = columns2.value.find((col) => col.id === key);
          if (column) {
            column.filteredValue = [];
          }
        });
        filters.value = {};
        instance.store.commit("filterChange", {
          column: {},
          values: [],
          silent: true
        });
      }
    };
    const clearSort = () => {
      if (!sortingColumn.value)
        return;
      updateSort(null, null, null);
      instance.store.commit("changeSortCondition", {
        silent: true
      });
    };
    const {
      setExpandRowKeys,
      toggleRowExpansion,
      updateExpandRows,
      states: expandStates,
      isRowExpanded
    } = useExpand({
      data,
      rowKey: rowKey2
    });
    const {
      updateTreeExpandKeys,
      toggleTreeExpansion,
      updateTreeData,
      updateKeyChildren,
      loadOrToggle,
      states: treeStates
    } = useTree$2({
      data,
      rowKey: rowKey2
    });
    const {
      updateCurrentRowData,
      updateCurrentRow,
      setCurrentRowKey,
      states: currentData
    } = useCurrent({
      data,
      rowKey: rowKey2
    });
    const setExpandRowKeysAdapter = (val) => {
      setExpandRowKeys(val);
      updateTreeExpandKeys(val);
    };
    const toggleRowExpansionAdapter = (row, expanded) => {
      const hasExpandColumn = columns2.value.some(({ type: type3 }) => type3 === "expand");
      if (hasExpandColumn) {
        toggleRowExpansion(row, expanded);
      } else {
        toggleTreeExpansion(row, expanded);
      }
    };
    return {
      assertRowKey,
      updateColumns,
      scheduleLayout,
      isSelected,
      clearSelection,
      cleanSelection,
      getSelectionRows,
      toggleRowSelection,
      _toggleAllSelection,
      toggleAllSelection: null,
      updateSelectionByRowKey,
      updateAllSelected,
      updateFilters,
      updateCurrentRow,
      updateSort,
      execFilter,
      execSort,
      execQuery,
      clearFilter,
      clearSort,
      toggleRowExpansion,
      setExpandRowKeysAdapter,
      setCurrentRowKey,
      toggleRowExpansionAdapter,
      isRowExpanded,
      updateExpandRows,
      updateCurrentRowData,
      loadOrToggle,
      updateTreeData,
      updateKeyChildren,
      states: {
        tableSize,
        rowKey: rowKey2,
        data,
        _data,
        isComplex,
        _columns,
        originColumns,
        columns: columns2,
        fixedColumns,
        rightFixedColumns,
        leafColumns,
        fixedLeafColumns,
        rightFixedLeafColumns,
        updateOrderFns,
        leafColumnsLength,
        fixedLeafColumnsLength,
        rightFixedLeafColumnsLength,
        isAllSelected,
        selection,
        reserveSelection,
        selectOnIndeterminate,
        selectable,
        filters,
        filteredData,
        sortingColumn,
        sortProp,
        sortOrder,
        hoverRow,
        ...expandStates,
        ...treeStates,
        ...currentData
      }
    };
  }
  function replaceColumn(array, column) {
    return array.map((item) => {
      var _a2;
      if (item.id === column.id) {
        return column;
      } else if ((_a2 = item.children) == null ? void 0 : _a2.length) {
        item.children = replaceColumn(item.children, column);
      }
      return item;
    });
  }
  function sortColumn(array) {
    array.forEach((item) => {
      var _a2, _b;
      item.no = (_a2 = item.getColumnIndex) == null ? void 0 : _a2.call(item);
      if ((_b = item.children) == null ? void 0 : _b.length) {
        sortColumn(item.children);
      }
    });
    array.sort((cur, pre) => cur.no - pre.no);
  }
  function useStore() {
    const instance = vue.getCurrentInstance();
    const watcher = useWatcher$1();
    const ns2 = useNamespace("table");
    const mutations2 = {
      setData(states, data) {
        const dataInstanceChanged = vue.unref(states._data) !== data;
        states.data.value = data;
        states._data.value = data;
        instance.store.execQuery();
        instance.store.updateCurrentRowData();
        instance.store.updateExpandRows();
        instance.store.updateTreeData(instance.store.states.defaultExpandAll.value);
        if (vue.unref(states.reserveSelection)) {
          instance.store.assertRowKey();
          instance.store.updateSelectionByRowKey();
        } else {
          if (dataInstanceChanged) {
            instance.store.clearSelection();
          } else {
            instance.store.cleanSelection();
          }
        }
        instance.store.updateAllSelected();
        if (instance.$ready) {
          instance.store.scheduleLayout();
        }
      },
      insertColumn(states, column, parent2, updateColumnOrder) {
        const array = vue.unref(states._columns);
        let newColumns = [];
        if (!parent2) {
          array.push(column);
          newColumns = array;
        } else {
          if (parent2 && !parent2.children) {
            parent2.children = [];
          }
          parent2.children.push(column);
          newColumns = replaceColumn(array, parent2);
        }
        sortColumn(newColumns);
        states._columns.value = newColumns;
        states.updateOrderFns.push(updateColumnOrder);
        if (column.type === "selection") {
          states.selectable.value = column.selectable;
          states.reserveSelection.value = column.reserveSelection;
        }
        if (instance.$ready) {
          instance.store.updateColumns();
          instance.store.scheduleLayout();
        }
      },
      updateColumnOrder(states, column) {
        var _a2;
        const newColumnIndex = (_a2 = column.getColumnIndex) == null ? void 0 : _a2.call(column);
        if (newColumnIndex === column.no)
          return;
        sortColumn(states._columns.value);
        if (instance.$ready) {
          instance.store.updateColumns();
        }
      },
      removeColumn(states, column, parent2, updateColumnOrder) {
        const array = vue.unref(states._columns) || [];
        if (parent2) {
          parent2.children.splice(parent2.children.findIndex((item) => item.id === column.id), 1);
          vue.nextTick(() => {
            var _a2;
            if (((_a2 = parent2.children) == null ? void 0 : _a2.length) === 0) {
              delete parent2.children;
            }
          });
          states._columns.value = replaceColumn(array, parent2);
        } else {
          const index = array.indexOf(column);
          if (index > -1) {
            array.splice(index, 1);
            states._columns.value = array;
          }
        }
        const updateFnIndex = states.updateOrderFns.indexOf(updateColumnOrder);
        updateFnIndex > -1 && states.updateOrderFns.splice(updateFnIndex, 1);
        if (instance.$ready) {
          instance.store.updateColumns();
          instance.store.scheduleLayout();
        }
      },
      sort(states, options) {
        const { prop, order: order2, init } = options;
        if (prop) {
          const column = vue.unref(states.columns).find((column2) => column2.property === prop);
          if (column) {
            column.order = order2;
            instance.store.updateSort(column, prop, order2);
            instance.store.commit("changeSortCondition", { init });
          }
        }
      },
      changeSortCondition(states, options) {
        const { sortingColumn, sortProp, sortOrder } = states;
        const columnValue = vue.unref(sortingColumn), propValue = vue.unref(sortProp), orderValue = vue.unref(sortOrder);
        if (orderValue === null) {
          states.sortingColumn.value = null;
          states.sortProp.value = null;
        }
        const ignore = { filter: true };
        instance.store.execQuery(ignore);
        if (!options || !(options.silent || options.init)) {
          instance.emit("sort-change", {
            column: columnValue,
            prop: propValue,
            order: orderValue
          });
        }
        instance.store.updateTableScrollY();
      },
      filterChange(_states, options) {
        const { column, values, silent } = options;
        const newFilters = instance.store.updateFilters(column, values);
        instance.store.execQuery();
        if (!silent) {
          instance.emit("filter-change", newFilters);
        }
        instance.store.updateTableScrollY();
      },
      toggleAllSelection() {
        instance.store.toggleAllSelection();
      },
      rowSelectedChanged(_states, row) {
        instance.store.toggleRowSelection(row);
        instance.store.updateAllSelected();
      },
      setHoverRow(states, row) {
        states.hoverRow.value = row;
      },
      setCurrentRow(_states, row) {
        instance.store.updateCurrentRow(row);
      }
    };
    const commit = function(name, ...args) {
      const mutations22 = instance.store.mutations;
      if (mutations22[name]) {
        mutations22[name].apply(instance, [instance.store.states].concat(args));
      } else {
        throw new Error(`Action not found: ${name}`);
      }
    };
    const updateTableScrollY = function() {
      vue.nextTick(() => instance.layout.updateScrollY.apply(instance.layout));
    };
    return {
      ns: ns2,
      ...watcher,
      mutations: mutations2,
      commit,
      updateTableScrollY
    };
  }
  const InitialStateMap = {
    rowKey: "rowKey",
    defaultExpandAll: "defaultExpandAll",
    selectOnIndeterminate: "selectOnIndeterminate",
    indent: "indent",
    lazy: "lazy",
    data: "data",
    ["treeProps.hasChildren"]: {
      key: "lazyColumnIdentifier",
      default: "hasChildren"
    },
    ["treeProps.children"]: {
      key: "childrenColumnName",
      default: "children"
    },
    ["treeProps.checkStrictly"]: {
      key: "checkStrictly",
      default: false
    }
  };
  function createStore(table, props2) {
    if (!table) {
      throw new Error("Table is required.");
    }
    const store2 = useStore();
    store2.toggleAllSelection = debounce(store2._toggleAllSelection, 10);
    Object.keys(InitialStateMap).forEach((key) => {
      handleValue(getArrKeysValue(props2, key), key, store2);
    });
    proxyTableProps(store2, props2);
    return store2;
  }
  function proxyTableProps(store2, props2) {
    Object.keys(InitialStateMap).forEach((key) => {
      vue.watch(() => getArrKeysValue(props2, key), (value) => {
        handleValue(value, key, store2);
      });
    });
  }
  function handleValue(value, propsKey, store2) {
    let newVal = value;
    let storeKey2 = InitialStateMap[propsKey];
    if (typeof InitialStateMap[propsKey] === "object") {
      storeKey2 = storeKey2.key;
      newVal = newVal || InitialStateMap[propsKey].default;
    }
    store2.states[storeKey2].value = newVal;
  }
  function getArrKeysValue(props2, keys2) {
    if (keys2.includes(".")) {
      const keyList = keys2.split(".");
      let value = props2;
      keyList.forEach((key) => {
        value = value[key];
      });
      return value;
    } else {
      return props2[keys2];
    }
  }
  class TableLayout {
    constructor(options) {
      this.observers = [];
      this.table = null;
      this.store = null;
      this.columns = [];
      this.fit = true;
      this.showHeader = true;
      this.height = vue.ref(null);
      this.scrollX = vue.ref(false);
      this.scrollY = vue.ref(false);
      this.bodyWidth = vue.ref(null);
      this.fixedWidth = vue.ref(null);
      this.rightFixedWidth = vue.ref(null);
      this.gutterWidth = 0;
      for (const name in options) {
        if (shared.hasOwn(options, name)) {
          if (vue.isRef(this[name])) {
            this[name].value = options[name];
          } else {
            this[name] = options[name];
          }
        }
      }
      if (!this.table) {
        throw new Error("Table is required for Table Layout");
      }
      if (!this.store) {
        throw new Error("Store is required for Table Layout");
      }
    }
    updateScrollY() {
      const height = this.height.value;
      if (height === null)
        return false;
      const scrollBarRef = this.table.refs.scrollBarRef;
      if (this.table.vnode.el && (scrollBarRef == null ? void 0 : scrollBarRef.wrapRef)) {
        let scrollY = true;
        const prevScrollY = this.scrollY.value;
        scrollY = scrollBarRef.wrapRef.scrollHeight > scrollBarRef.wrapRef.clientHeight;
        this.scrollY.value = scrollY;
        return prevScrollY !== scrollY;
      }
      return false;
    }
    setHeight(value, prop = "height") {
      if (!isClient)
        return;
      const el = this.table.vnode.el;
      value = parseHeight(value);
      this.height.value = Number(value);
      if (!el && (value || value === 0))
        return vue.nextTick(() => this.setHeight(value, prop));
      if (typeof value === "number") {
        el.style[prop] = `${value}px`;
        this.updateElsHeight();
      } else if (typeof value === "string") {
        el.style[prop] = value;
        this.updateElsHeight();
      }
    }
    setMaxHeight(value) {
      this.setHeight(value, "max-height");
    }
    getFlattenColumns() {
      const flattenColumns = [];
      const columns2 = this.table.store.states.columns.value;
      columns2.forEach((column) => {
        if (column.isColumnGroup) {
          flattenColumns.push.apply(flattenColumns, column.columns);
        } else {
          flattenColumns.push(column);
        }
      });
      return flattenColumns;
    }
    updateElsHeight() {
      this.updateScrollY();
      this.notifyObservers("scrollable");
    }
    headerDisplayNone(elm) {
      if (!elm)
        return true;
      let headerChild = elm;
      while (headerChild.tagName !== "DIV") {
        if (getComputedStyle(headerChild).display === "none") {
          return true;
        }
        headerChild = headerChild.parentElement;
      }
      return false;
    }
    updateColumnsWidth() {
      if (!isClient)
        return;
      const fit = this.fit;
      const bodyWidth = this.table.vnode.el.clientWidth;
      let bodyMinWidth = 0;
      const flattenColumns = this.getFlattenColumns();
      const flexColumns = flattenColumns.filter((column) => typeof column.width !== "number");
      flattenColumns.forEach((column) => {
        if (typeof column.width === "number" && column.realWidth)
          column.realWidth = null;
      });
      if (flexColumns.length > 0 && fit) {
        flattenColumns.forEach((column) => {
          bodyMinWidth += Number(column.width || column.minWidth || 80);
        });
        if (bodyMinWidth <= bodyWidth) {
          this.scrollX.value = false;
          const totalFlexWidth = bodyWidth - bodyMinWidth;
          if (flexColumns.length === 1) {
            flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth;
          } else {
            const allColumnsWidth = flexColumns.reduce((prev, column) => prev + Number(column.minWidth || 80), 0);
            const flexWidthPerPixel = totalFlexWidth / allColumnsWidth;
            let noneFirstWidth = 0;
            flexColumns.forEach((column, index) => {
              if (index === 0)
                return;
              const flexWidth = Math.floor(Number(column.minWidth || 80) * flexWidthPerPixel);
              noneFirstWidth += flexWidth;
              column.realWidth = Number(column.minWidth || 80) + flexWidth;
            });
            flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;
          }
        } else {
          this.scrollX.value = true;
          flexColumns.forEach((column) => {
            column.realWidth = Number(column.minWidth);
          });
        }
        this.bodyWidth.value = Math.max(bodyMinWidth, bodyWidth);
        this.table.state.resizeState.value.width = this.bodyWidth.value;
      } else {
        flattenColumns.forEach((column) => {
          if (!column.width && !column.minWidth) {
            column.realWidth = 80;
          } else {
            column.realWidth = Number(column.width || column.minWidth);
          }
          bodyMinWidth += column.realWidth;
        });
        this.scrollX.value = bodyMinWidth > bodyWidth;
        this.bodyWidth.value = bodyMinWidth;
      }
      const fixedColumns = this.store.states.fixedColumns.value;
      if (fixedColumns.length > 0) {
        let fixedWidth = 0;
        fixedColumns.forEach((column) => {
          fixedWidth += Number(column.realWidth || column.width);
        });
        this.fixedWidth.value = fixedWidth;
      }
      const rightFixedColumns = this.store.states.rightFixedColumns.value;
      if (rightFixedColumns.length > 0) {
        let rightFixedWidth = 0;
        rightFixedColumns.forEach((column) => {
          rightFixedWidth += Number(column.realWidth || column.width);
        });
        this.rightFixedWidth.value = rightFixedWidth;
      }
      this.notifyObservers("columns");
    }
    addObserver(observer) {
      this.observers.push(observer);
    }
    removeObserver(observer) {
      const index = this.observers.indexOf(observer);
      if (index !== -1) {
        this.observers.splice(index, 1);
      }
    }
    notifyObservers(event) {
      const observers = this.observers;
      observers.forEach((observer) => {
        var _a2, _b;
        switch (event) {
          case "columns":
            (_a2 = observer.state) == null ? void 0 : _a2.onColumnsChange(this);
            break;
          case "scrollable":
            (_b = observer.state) == null ? void 0 : _b.onScrollableChange(this);
            break;
          default:
            throw new Error(`Table Layout don't have event ${event}.`);
        }
      });
    }
  }
  const { CheckboxGroup: ElCheckboxGroup } = ElCheckbox;
  const _sfc_main$C = vue.defineComponent({
    name: "ElTableFilterPanel",
    components: {
      ElCheckbox,
      ElCheckboxGroup,
      ElScrollbar,
      ElTooltip,
      ElIcon,
      ArrowDown: arrow_down_default,
      ArrowUp: arrow_up_default
    },
    directives: { ClickOutside },
    props: {
      placement: {
        type: String,
        default: "bottom-start"
      },
      store: {
        type: Object
      },
      column: {
        type: Object
      },
      upDataColumn: {
        type: Function
      },
      appendTo: {
        type: String
      }
    },
    setup(props2) {
      const instance = vue.getCurrentInstance();
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("table-filter");
      const parent2 = instance == null ? void 0 : instance.parent;
      if (!parent2.filterPanels.value[props2.column.id]) {
        parent2.filterPanels.value[props2.column.id] = instance;
      }
      const tooltipVisible = vue.ref(false);
      const tooltip = vue.ref(null);
      const filters = vue.computed(() => {
        return props2.column && props2.column.filters;
      });
      const filterClassName = vue.computed(() => {
        if (props2.column.filterClassName) {
          return `${ns2.b()} ${props2.column.filterClassName}`;
        }
        return ns2.b();
      });
      const filterValue = vue.computed({
        get: () => {
          var _a2;
          return (((_a2 = props2.column) == null ? void 0 : _a2.filteredValue) || [])[0];
        },
        set: (value) => {
          if (filteredValue.value) {
            if (typeof value !== "undefined" && value !== null) {
              filteredValue.value.splice(0, 1, value);
            } else {
              filteredValue.value.splice(0, 1);
            }
          }
        }
      });
      const filteredValue = vue.computed({
        get() {
          if (props2.column) {
            return props2.column.filteredValue || [];
          }
          return [];
        },
        set(value) {
          if (props2.column) {
            props2.upDataColumn("filteredValue", value);
          }
        }
      });
      const multiple = vue.computed(() => {
        if (props2.column) {
          return props2.column.filterMultiple;
        }
        return true;
      });
      const isActive = (filter) => {
        return filter.value === filterValue.value;
      };
      const hidden = () => {
        tooltipVisible.value = false;
      };
      const showFilterPanel = (e) => {
        e.stopPropagation();
        tooltipVisible.value = !tooltipVisible.value;
      };
      const hideFilterPanel = () => {
        tooltipVisible.value = false;
      };
      const handleConfirm = () => {
        confirmFilter(filteredValue.value);
        hidden();
      };
      const handleReset = () => {
        filteredValue.value = [];
        confirmFilter(filteredValue.value);
        hidden();
      };
      const handleSelect = (_filterValue) => {
        filterValue.value = _filterValue;
        if (typeof _filterValue !== "undefined" && _filterValue !== null) {
          confirmFilter(filteredValue.value);
        } else {
          confirmFilter([]);
        }
        hidden();
      };
      const confirmFilter = (filteredValue2) => {
        props2.store.commit("filterChange", {
          column: props2.column,
          values: filteredValue2
        });
        props2.store.updateAllSelected();
      };
      vue.watch(tooltipVisible, (value) => {
        if (props2.column) {
          props2.upDataColumn("filterOpened", value);
        }
      }, {
        immediate: true
      });
      const popperPaneRef = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = tooltip.value) == null ? void 0 : _a2.popperRef) == null ? void 0 : _b.contentRef;
      });
      return {
        tooltipVisible,
        multiple,
        filterClassName,
        filteredValue,
        filterValue,
        filters,
        handleConfirm,
        handleReset,
        handleSelect,
        isActive,
        t: t2,
        ns: ns2,
        showFilterPanel,
        hideFilterPanel,
        popperPaneRef,
        tooltip
      };
    }
  });
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_checkbox = vue.resolveComponent("el-checkbox");
    const _component_el_checkbox_group = vue.resolveComponent("el-checkbox-group");
    const _component_el_scrollbar = vue.resolveComponent("el-scrollbar");
    const _component_arrow_up = vue.resolveComponent("arrow-up");
    const _component_arrow_down = vue.resolveComponent("arrow-down");
    const _component_el_icon = vue.resolveComponent("el-icon");
    const _component_el_tooltip = vue.resolveComponent("el-tooltip");
    const _directive_click_outside = vue.resolveDirective("click-outside");
    return vue.openBlock(), vue.createBlock(_component_el_tooltip, {
      ref: "tooltip",
      visible: _ctx.tooltipVisible,
      offset: 0,
      placement: _ctx.placement,
      "show-arrow": false,
      "stop-popper-mouse-event": false,
      teleported: "",
      effect: "light",
      pure: "",
      "popper-class": _ctx.filterClassName,
      persistent: "",
      "append-to": _ctx.appendTo
    }, {
      content: vue.withCtx(() => [
        _ctx.multiple ? (vue.openBlock(), vue.createElementBlock("div", { key: 0 }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.e("content"))
          }, [
            vue.createVNode(_component_el_scrollbar, {
              "wrap-class": _ctx.ns.e("wrap")
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_el_checkbox_group, {
                  modelValue: _ctx.filteredValue,
                  "onUpdate:modelValue": ($event) => _ctx.filteredValue = $event,
                  class: vue.normalizeClass(_ctx.ns.e("checkbox-group"))
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.filters, (filter) => {
                      return vue.openBlock(), vue.createBlock(_component_el_checkbox, {
                        key: filter.value,
                        value: filter.value
                      }, {
                        default: vue.withCtx(() => [
                          vue.createTextVNode(vue.toDisplayString(filter.text), 1)
                        ]),
                        _: 2
                      }, 1032, ["value"]);
                    }), 128))
                  ]),
                  _: 1
                }, 8, ["modelValue", "onUpdate:modelValue", "class"])
              ]),
              _: 1
            }, 8, ["wrap-class"])
          ], 2),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.e("bottom"))
          }, [
            vue.createElementVNode("button", {
              class: vue.normalizeClass({ [_ctx.ns.is("disabled")]: _ctx.filteredValue.length === 0 }),
              disabled: _ctx.filteredValue.length === 0,
              type: "button",
              onClick: _ctx.handleConfirm
            }, vue.toDisplayString(_ctx.t("el.table.confirmFilter")), 11, ["disabled", "onClick"]),
            vue.createElementVNode("button", {
              type: "button",
              onClick: _ctx.handleReset
            }, vue.toDisplayString(_ctx.t("el.table.resetFilter")), 9, ["onClick"])
          ], 2)
        ])) : (vue.openBlock(), vue.createElementBlock("ul", {
          key: 1,
          class: vue.normalizeClass(_ctx.ns.e("list"))
        }, [
          vue.createElementVNode("li", {
            class: vue.normalizeClass([
              _ctx.ns.e("list-item"),
              {
                [_ctx.ns.is("active")]: _ctx.filterValue === void 0 || _ctx.filterValue === null
              }
            ]),
            onClick: ($event) => _ctx.handleSelect(null)
          }, vue.toDisplayString(_ctx.t("el.table.clearFilter")), 11, ["onClick"]),
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.filters, (filter) => {
            return vue.openBlock(), vue.createElementBlock("li", {
              key: filter.value,
              class: vue.normalizeClass([_ctx.ns.e("list-item"), _ctx.ns.is("active", _ctx.isActive(filter))]),
              label: filter.value,
              onClick: ($event) => _ctx.handleSelect(filter.value)
            }, vue.toDisplayString(filter.text), 11, ["label", "onClick"]);
          }), 128))
        ], 2))
      ]),
      default: vue.withCtx(() => [
        vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass([
            `${_ctx.ns.namespace.value}-table__column-filter-trigger`,
            `${_ctx.ns.namespace.value}-none-outline`
          ]),
          onClick: _ctx.showFilterPanel
        }, [
          vue.createVNode(_component_el_icon, null, {
            default: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "filter-icon", {}, () => [
                _ctx.column.filterOpened ? (vue.openBlock(), vue.createBlock(_component_arrow_up, { key: 0 })) : (vue.openBlock(), vue.createBlock(_component_arrow_down, { key: 1 }))
              ])
            ]),
            _: 3
          })
        ], 10, ["onClick"])), [
          [_directive_click_outside, _ctx.hideFilterPanel, _ctx.popperPaneRef]
        ])
      ]),
      _: 3
    }, 8, ["visible", "placement", "popper-class", "append-to"]);
  }
  var FilterPanel = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$4], ["__file", "filter-panel.vue"]]);
  function useLayoutObserver(root2) {
    const instance = vue.getCurrentInstance();
    vue.onBeforeMount(() => {
      tableLayout.value.addObserver(instance);
    });
    vue.onMounted(() => {
      onColumnsChange(tableLayout.value);
      onScrollableChange(tableLayout.value);
    });
    vue.onUpdated(() => {
      onColumnsChange(tableLayout.value);
      onScrollableChange(tableLayout.value);
    });
    vue.onUnmounted(() => {
      tableLayout.value.removeObserver(instance);
    });
    const tableLayout = vue.computed(() => {
      const layout2 = root2.layout;
      if (!layout2) {
        throw new Error("Can not find table layout.");
      }
      return layout2;
    });
    const onColumnsChange = (layout2) => {
      var _a2;
      const cols = ((_a2 = root2.vnode.el) == null ? void 0 : _a2.querySelectorAll("colgroup > col")) || [];
      if (!cols.length)
        return;
      const flattenColumns = layout2.getFlattenColumns();
      const columnsMap = {};
      flattenColumns.forEach((column) => {
        columnsMap[column.id] = column;
      });
      for (let i2 = 0, j2 = cols.length; i2 < j2; i2++) {
        const col = cols[i2];
        const name = col.getAttribute("name");
        const column = columnsMap[name];
        if (column) {
          col.setAttribute("width", column.realWidth || column.width);
        }
      }
    };
    const onScrollableChange = (layout2) => {
      var _a2, _b;
      const cols = ((_a2 = root2.vnode.el) == null ? void 0 : _a2.querySelectorAll("colgroup > col[name=gutter]")) || [];
      for (let i2 = 0, j2 = cols.length; i2 < j2; i2++) {
        const col = cols[i2];
        col.setAttribute("width", layout2.scrollY.value ? layout2.gutterWidth : "0");
      }
      const ths = ((_b = root2.vnode.el) == null ? void 0 : _b.querySelectorAll("th.gutter")) || [];
      for (let i2 = 0, j2 = ths.length; i2 < j2; i2++) {
        const th = ths[i2];
        th.style.width = layout2.scrollY.value ? `${layout2.gutterWidth}px` : "0";
        th.style.display = layout2.scrollY.value ? "" : "none";
      }
    };
    return {
      tableLayout: tableLayout.value,
      onColumnsChange,
      onScrollableChange
    };
  }
  const TABLE_INJECTION_KEY = Symbol("ElTable");
  function useEvent(props2, emit) {
    const instance = vue.getCurrentInstance();
    const parent2 = vue.inject(TABLE_INJECTION_KEY);
    const handleFilterClick = (event) => {
      event.stopPropagation();
      return;
    };
    const handleHeaderClick = (event, column) => {
      if (!column.filters && column.sortable) {
        handleSortClick(event, column, false);
      } else if (column.filterable && !column.sortable) {
        handleFilterClick(event);
      }
      parent2 == null ? void 0 : parent2.emit("header-click", column, event);
    };
    const handleHeaderContextMenu = (event, column) => {
      parent2 == null ? void 0 : parent2.emit("header-contextmenu", column, event);
    };
    const draggingColumn = vue.ref(null);
    const dragging = vue.ref(false);
    const dragState = vue.ref({});
    const handleMouseDown = (event, column) => {
      if (!isClient)
        return;
      if (column.children && column.children.length > 0)
        return;
      if (draggingColumn.value && props2.border) {
        dragging.value = true;
        const table = parent2;
        emit("set-drag-visible", true);
        const tableEl = table == null ? void 0 : table.vnode.el;
        const tableLeft = tableEl.getBoundingClientRect().left;
        const columnEl = instance.vnode.el.querySelector(`th.${column.id}`);
        const columnRect = columnEl.getBoundingClientRect();
        const minLeft = columnRect.left - tableLeft + 30;
        addClass(columnEl, "noclick");
        dragState.value = {
          startMouseLeft: event.clientX,
          startLeft: columnRect.right - tableLeft,
          startColumnLeft: columnRect.left - tableLeft,
          tableLeft
        };
        const resizeProxy = table == null ? void 0 : table.refs.resizeProxy;
        resizeProxy.style.left = `${dragState.value.startLeft}px`;
        document.onselectstart = function() {
          return false;
        };
        document.ondragstart = function() {
          return false;
        };
        const handleMouseMove2 = (event2) => {
          const deltaLeft = event2.clientX - dragState.value.startMouseLeft;
          const proxyLeft = dragState.value.startLeft + deltaLeft;
          resizeProxy.style.left = `${Math.max(minLeft, proxyLeft)}px`;
        };
        const handleMouseUp = () => {
          if (dragging.value) {
            const { startColumnLeft, startLeft } = dragState.value;
            const finalLeft = Number.parseInt(resizeProxy.style.left, 10);
            const columnWidth = finalLeft - startColumnLeft;
            column.width = column.realWidth = columnWidth;
            table == null ? void 0 : table.emit("header-dragend", column.width, startLeft - startColumnLeft, column, event);
            requestAnimationFrame(() => {
              props2.store.scheduleLayout(false, true);
            });
            document.body.style.cursor = "";
            dragging.value = false;
            draggingColumn.value = null;
            dragState.value = {};
            emit("set-drag-visible", false);
          }
          document.removeEventListener("mousemove", handleMouseMove2);
          document.removeEventListener("mouseup", handleMouseUp);
          document.onselectstart = null;
          document.ondragstart = null;
          setTimeout(() => {
            removeClass(columnEl, "noclick");
          }, 0);
        };
        document.addEventListener("mousemove", handleMouseMove2);
        document.addEventListener("mouseup", handleMouseUp);
      }
    };
    const handleMouseMove = (event, column) => {
      var _a2;
      if (column.children && column.children.length > 0)
        return;
      const el = event.target;
      if (!isElement$2(el)) {
        return;
      }
      const target = el == null ? void 0 : el.closest("th");
      if (!column || !column.resizable || !target)
        return;
      if (!dragging.value && props2.border) {
        const rect = target.getBoundingClientRect();
        const bodyStyle = document.body.style;
        const isLastTh = ((_a2 = target.parentNode) == null ? void 0 : _a2.lastElementChild) === target;
        if (rect.width > 12 && rect.right - event.pageX < 8 && !isLastTh) {
          bodyStyle.cursor = "col-resize";
          if (hasClass(target, "is-sortable")) {
            target.style.cursor = "col-resize";
          }
          draggingColumn.value = column;
        } else if (!dragging.value) {
          bodyStyle.cursor = "";
          if (hasClass(target, "is-sortable")) {
            target.style.cursor = "pointer";
          }
          draggingColumn.value = null;
        }
      }
    };
    const handleMouseOut = () => {
      if (!isClient)
        return;
      document.body.style.cursor = "";
    };
    const toggleOrder = ({ order: order2, sortOrders }) => {
      if (order2 === "")
        return sortOrders[0];
      const index = sortOrders.indexOf(order2 || null);
      return sortOrders[index > sortOrders.length - 2 ? 0 : index + 1];
    };
    const handleSortClick = (event, column, givenOrder) => {
      var _a2;
      event.stopPropagation();
      const order2 = column.order === givenOrder ? null : givenOrder || toggleOrder(column);
      const target = (_a2 = event.target) == null ? void 0 : _a2.closest("th");
      if (target) {
        if (hasClass(target, "noclick")) {
          removeClass(target, "noclick");
          return;
        }
      }
      if (!column.sortable)
        return;
      const clickTarget = event.currentTarget;
      if (["ascending", "descending"].some((str) => hasClass(clickTarget, str) && !column.sortOrders.includes(str))) {
        return;
      }
      const states = props2.store.states;
      let sortProp = states.sortProp.value;
      let sortOrder;
      const sortingColumn = states.sortingColumn.value;
      if (sortingColumn !== column || sortingColumn === column && sortingColumn.order === null) {
        if (sortingColumn) {
          sortingColumn.order = null;
        }
        states.sortingColumn.value = column;
        sortProp = column.property;
      }
      if (!order2) {
        sortOrder = column.order = null;
      } else {
        sortOrder = column.order = order2;
      }
      states.sortProp.value = sortProp;
      states.sortOrder.value = sortOrder;
      parent2 == null ? void 0 : parent2.store.commit("changeSortCondition");
    };
    return {
      handleHeaderClick,
      handleHeaderContextMenu,
      handleMouseDown,
      handleMouseMove,
      handleMouseOut,
      handleSortClick,
      handleFilterClick
    };
  }
  function useStyle$2(props2) {
    const parent2 = vue.inject(TABLE_INJECTION_KEY);
    const ns2 = useNamespace("table");
    const getHeaderRowStyle = (rowIndex) => {
      const headerRowStyle = parent2 == null ? void 0 : parent2.props.headerRowStyle;
      if (typeof headerRowStyle === "function") {
        return headerRowStyle.call(null, { rowIndex });
      }
      return headerRowStyle;
    };
    const getHeaderRowClass = (rowIndex) => {
      const classes = [];
      const headerRowClassName = parent2 == null ? void 0 : parent2.props.headerRowClassName;
      if (typeof headerRowClassName === "string") {
        classes.push(headerRowClassName);
      } else if (typeof headerRowClassName === "function") {
        classes.push(headerRowClassName.call(null, { rowIndex }));
      }
      return classes.join(" ");
    };
    const getHeaderCellStyle = (rowIndex, columnIndex, row, column) => {
      var _a2;
      let headerCellStyles = (_a2 = parent2 == null ? void 0 : parent2.props.headerCellStyle) != null ? _a2 : {};
      if (typeof headerCellStyles === "function") {
        headerCellStyles = headerCellStyles.call(null, {
          rowIndex,
          columnIndex,
          row,
          column
        });
      }
      const fixedStyle = getFixedColumnOffset(columnIndex, column.fixed, props2.store, row);
      ensurePosition(fixedStyle, "left");
      ensurePosition(fixedStyle, "right");
      return Object.assign({}, headerCellStyles, fixedStyle);
    };
    const getHeaderCellClass = (rowIndex, columnIndex, row, column) => {
      const fixedClasses = getFixedColumnsClass(ns2.b(), columnIndex, column.fixed, props2.store, row);
      const classes = [
        column.id,
        column.order,
        column.headerAlign,
        column.className,
        column.labelClassName,
        ...fixedClasses
      ];
      if (!column.children) {
        classes.push("is-leaf");
      }
      if (column.sortable) {
        classes.push("is-sortable");
      }
      const headerCellClassName = parent2 == null ? void 0 : parent2.props.headerCellClassName;
      if (typeof headerCellClassName === "string") {
        classes.push(headerCellClassName);
      } else if (typeof headerCellClassName === "function") {
        classes.push(headerCellClassName.call(null, {
          rowIndex,
          columnIndex,
          row,
          column
        }));
      }
      classes.push(ns2.e("cell"));
      return classes.filter((className) => Boolean(className)).join(" ");
    };
    return {
      getHeaderRowStyle,
      getHeaderRowClass,
      getHeaderCellStyle,
      getHeaderCellClass
    };
  }
  const getAllColumns = (columns2) => {
    const result = [];
    columns2.forEach((column) => {
      if (column.children) {
        result.push(column);
        result.push.apply(result, getAllColumns(column.children));
      } else {
        result.push(column);
      }
    });
    return result;
  };
  const convertToRows = (originColumns) => {
    let maxLevel = 1;
    const traverse = (column, parent2) => {
      if (parent2) {
        column.level = parent2.level + 1;
        if (maxLevel < column.level) {
          maxLevel = column.level;
        }
      }
      if (column.children) {
        let colSpan = 0;
        column.children.forEach((subColumn) => {
          traverse(subColumn, column);
          colSpan += subColumn.colSpan;
        });
        column.colSpan = colSpan;
      } else {
        column.colSpan = 1;
      }
    };
    originColumns.forEach((column) => {
      column.level = 1;
      traverse(column, void 0);
    });
    const rows = [];
    for (let i2 = 0; i2 < maxLevel; i2++) {
      rows.push([]);
    }
    const allColumns = getAllColumns(originColumns);
    allColumns.forEach((column) => {
      if (!column.children) {
        column.rowSpan = maxLevel - column.level + 1;
      } else {
        column.rowSpan = 1;
        column.children.forEach((col) => col.isSubColumn = true);
      }
      rows[column.level - 1].push(column);
    });
    return rows;
  };
  function useUtils$1(props2) {
    const parent2 = vue.inject(TABLE_INJECTION_KEY);
    const columnRows = vue.computed(() => {
      return convertToRows(props2.store.states.originColumns.value);
    });
    const isGroup = vue.computed(() => {
      const result = columnRows.value.length > 1;
      if (result && parent2) {
        parent2.state.isGroup.value = true;
      }
      return result;
    });
    const toggleAllSelection = (event) => {
      event.stopPropagation();
      parent2 == null ? void 0 : parent2.store.commit("toggleAllSelection");
    };
    return {
      isGroup,
      toggleAllSelection,
      columnRows
    };
  }
  var TableHeader = vue.defineComponent({
    name: "ElTableHeader",
    components: {
      ElCheckbox
    },
    props: {
      fixed: {
        type: String,
        default: ""
      },
      store: {
        required: true,
        type: Object
      },
      border: Boolean,
      defaultSort: {
        type: Object,
        default: () => {
          return {
            prop: "",
            order: ""
          };
        }
      },
      appendFilterPanelTo: {
        type: String
      }
    },
    setup(props2, { emit }) {
      const instance = vue.getCurrentInstance();
      const parent2 = vue.inject(TABLE_INJECTION_KEY);
      const ns2 = useNamespace("table");
      const filterPanels = vue.ref({});
      const { onColumnsChange, onScrollableChange } = useLayoutObserver(parent2);
      vue.onMounted(async () => {
        await vue.nextTick();
        await vue.nextTick();
        const { prop, order: order2 } = props2.defaultSort;
        parent2 == null ? void 0 : parent2.store.commit("sort", { prop, order: order2, init: true });
      });
      const {
        handleHeaderClick,
        handleHeaderContextMenu,
        handleMouseDown,
        handleMouseMove,
        handleMouseOut,
        handleSortClick,
        handleFilterClick
      } = useEvent(props2, emit);
      const {
        getHeaderRowStyle,
        getHeaderRowClass,
        getHeaderCellStyle,
        getHeaderCellClass
      } = useStyle$2(props2);
      const { isGroup, toggleAllSelection, columnRows } = useUtils$1(props2);
      instance.state = {
        onColumnsChange,
        onScrollableChange
      };
      instance.filterPanels = filterPanels;
      return {
        ns: ns2,
        filterPanels,
        onColumnsChange,
        onScrollableChange,
        columnRows,
        getHeaderRowClass,
        getHeaderRowStyle,
        getHeaderCellClass,
        getHeaderCellStyle,
        handleHeaderClick,
        handleHeaderContextMenu,
        handleMouseDown,
        handleMouseMove,
        handleMouseOut,
        handleSortClick,
        handleFilterClick,
        isGroup,
        toggleAllSelection
      };
    },
    render() {
      const {
        ns: ns2,
        isGroup,
        columnRows,
        getHeaderCellStyle,
        getHeaderCellClass,
        getHeaderRowClass,
        getHeaderRowStyle,
        handleHeaderClick,
        handleHeaderContextMenu,
        handleMouseDown,
        handleMouseMove,
        handleSortClick,
        handleMouseOut,
        store: store2,
        $parent
      } = this;
      let rowSpan = 1;
      return vue.h("thead", {
        class: { [ns2.is("group")]: isGroup }
      }, columnRows.map((subColumns, rowIndex) => vue.h("tr", {
        class: getHeaderRowClass(rowIndex),
        key: rowIndex,
        style: getHeaderRowStyle(rowIndex)
      }, subColumns.map((column, cellIndex) => {
        if (column.rowSpan > rowSpan) {
          rowSpan = column.rowSpan;
        }
        return vue.h("th", {
          class: getHeaderCellClass(rowIndex, cellIndex, subColumns, column),
          colspan: column.colSpan,
          key: `${column.id}-thead`,
          rowspan: column.rowSpan,
          style: getHeaderCellStyle(rowIndex, cellIndex, subColumns, column),
          onClick: ($event) => {
            if ($event.currentTarget.classList.contains("noclick")) {
              return;
            }
            handleHeaderClick($event, column);
          },
          onContextmenu: ($event) => handleHeaderContextMenu($event, column),
          onMousedown: ($event) => handleMouseDown($event, column),
          onMousemove: ($event) => handleMouseMove($event, column),
          onMouseout: handleMouseOut
        }, [
          vue.h("div", {
            class: [
              "cell",
              column.filteredValue && column.filteredValue.length > 0 ? "highlight" : ""
            ]
          }, [
            column.renderHeader ? column.renderHeader({
              column,
              $index: cellIndex,
              store: store2,
              _self: $parent
            }) : column.label,
            column.sortable && vue.h("span", {
              onClick: ($event) => handleSortClick($event, column),
              class: "caret-wrapper"
            }, [
              vue.h("i", {
                onClick: ($event) => handleSortClick($event, column, "ascending"),
                class: "sort-caret ascending"
              }),
              vue.h("i", {
                onClick: ($event) => handleSortClick($event, column, "descending"),
                class: "sort-caret descending"
              })
            ]),
            column.filterable && vue.h(FilterPanel, {
              store: store2,
              placement: column.filterPlacement || "bottom-start",
              appendTo: $parent.appendFilterPanelTo,
              column,
              upDataColumn: (key, value) => {
                column[key] = value;
              }
            }, {
              "filter-icon": () => column.renderFilterIcon ? column.renderFilterIcon({
                filterOpened: column.filterOpened
              }) : null
            })
          ])
        ]);
      }))));
    }
  });
  function isGreaterThan(a2, b2, epsilon = 0.03) {
    return a2 - b2 > epsilon;
  }
  function useEvents(props2) {
    const parent2 = vue.inject(TABLE_INJECTION_KEY);
    const tooltipContent = vue.ref("");
    const tooltipTrigger = vue.ref(vue.h("div"));
    const handleEvent = (event, row, name) => {
      var _a2;
      const table = parent2;
      const cell = getCell(event);
      let column;
      const namespace = (_a2 = table == null ? void 0 : table.vnode.el) == null ? void 0 : _a2.dataset.prefix;
      if (cell) {
        column = getColumnByCell({
          columns: props2.store.states.columns.value
        }, cell, namespace);
        if (column) {
          table == null ? void 0 : table.emit(`cell-${name}`, row, column, cell, event);
        }
      }
      table == null ? void 0 : table.emit(`row-${name}`, row, column, event);
    };
    const handleDoubleClick = (event, row) => {
      handleEvent(event, row, "dblclick");
    };
    const handleClick = (event, row) => {
      props2.store.commit("setCurrentRow", row);
      handleEvent(event, row, "click");
    };
    const handleContextMenu = (event, row) => {
      handleEvent(event, row, "contextmenu");
    };
    const handleMouseEnter = debounce((index) => {
      props2.store.commit("setHoverRow", index);
    }, 30);
    const handleMouseLeave = debounce(() => {
      props2.store.commit("setHoverRow", null);
    }, 30);
    const getPadding = (el) => {
      const style = window.getComputedStyle(el, null);
      const paddingLeft = Number.parseInt(style.paddingLeft, 10) || 0;
      const paddingRight = Number.parseInt(style.paddingRight, 10) || 0;
      const paddingTop = Number.parseInt(style.paddingTop, 10) || 0;
      const paddingBottom = Number.parseInt(style.paddingBottom, 10) || 0;
      return {
        left: paddingLeft,
        right: paddingRight,
        top: paddingTop,
        bottom: paddingBottom
      };
    };
    const toggleRowClassByCell = (rowSpan, event, toggle) => {
      let node = event.target.parentNode;
      while (rowSpan > 1) {
        node = node == null ? void 0 : node.nextSibling;
        if (!node || node.nodeName !== "TR")
          break;
        toggle(node, "hover-row hover-fixed-row");
        rowSpan--;
      }
    };
    const handleCellMouseEnter = (event, row, tooltipOptions) => {
      var _a2;
      const table = parent2;
      const cell = getCell(event);
      const namespace = (_a2 = table == null ? void 0 : table.vnode.el) == null ? void 0 : _a2.dataset.prefix;
      if (cell) {
        const column = getColumnByCell({
          columns: props2.store.states.columns.value
        }, cell, namespace);
        if (cell.rowSpan > 1) {
          toggleRowClassByCell(cell.rowSpan, event, addClass);
        }
        const hoverState = table.hoverState = { cell, column, row };
        table == null ? void 0 : table.emit("cell-mouse-enter", hoverState.row, hoverState.column, hoverState.cell, event);
      }
      if (!tooltipOptions) {
        return;
      }
      const cellChild = event.target.querySelector(".cell");
      if (!(hasClass(cellChild, `${namespace}-tooltip`) && cellChild.childNodes.length)) {
        return;
      }
      const range2 = document.createRange();
      range2.setStart(cellChild, 0);
      range2.setEnd(cellChild, cellChild.childNodes.length);
      const { width: rangeWidth, height: rangeHeight } = range2.getBoundingClientRect();
      const { width: cellChildWidth, height: cellChildHeight } = cellChild.getBoundingClientRect();
      const { top, left: left2, right: right2, bottom } = getPadding(cellChild);
      const horizontalPadding = left2 + right2;
      const verticalPadding = top + bottom;
      if (isGreaterThan(rangeWidth + horizontalPadding, cellChildWidth) || isGreaterThan(rangeHeight + verticalPadding, cellChildHeight) || isGreaterThan(cellChild.scrollWidth, cellChildWidth)) {
        createTablePopper(tooltipOptions, cell.innerText || cell.textContent, cell, table);
      }
    };
    const handleCellMouseLeave = (event) => {
      const cell = getCell(event);
      if (!cell)
        return;
      if (cell.rowSpan > 1) {
        toggleRowClassByCell(cell.rowSpan, event, removeClass);
      }
      const oldHoverState = parent2 == null ? void 0 : parent2.hoverState;
      parent2 == null ? void 0 : parent2.emit("cell-mouse-leave", oldHoverState == null ? void 0 : oldHoverState.row, oldHoverState == null ? void 0 : oldHoverState.column, oldHoverState == null ? void 0 : oldHoverState.cell, event);
    };
    return {
      handleDoubleClick,
      handleClick,
      handleContextMenu,
      handleMouseEnter,
      handleMouseLeave,
      handleCellMouseEnter,
      handleCellMouseLeave,
      tooltipContent,
      tooltipTrigger
    };
  }
  function useStyles$1(props2) {
    const parent2 = vue.inject(TABLE_INJECTION_KEY);
    const ns2 = useNamespace("table");
    const getRowStyle = (row, rowIndex) => {
      const rowStyle = parent2 == null ? void 0 : parent2.props.rowStyle;
      if (typeof rowStyle === "function") {
        return rowStyle.call(null, {
          row,
          rowIndex
        });
      }
      return rowStyle || null;
    };
    const getRowClass = (row, rowIndex) => {
      const classes = [ns2.e("row")];
      if ((parent2 == null ? void 0 : parent2.props.highlightCurrentRow) && row === props2.store.states.currentRow.value) {
        classes.push("current-row");
      }
      if (props2.stripe && rowIndex % 2 === 1) {
        classes.push(ns2.em("row", "striped"));
      }
      const rowClassName = parent2 == null ? void 0 : parent2.props.rowClassName;
      if (typeof rowClassName === "string") {
        classes.push(rowClassName);
      } else if (typeof rowClassName === "function") {
        classes.push(rowClassName.call(null, {
          row,
          rowIndex
        }));
      }
      return classes;
    };
    const getCellStyle = (rowIndex, columnIndex, row, column) => {
      const cellStyle = parent2 == null ? void 0 : parent2.props.cellStyle;
      let cellStyles = cellStyle != null ? cellStyle : {};
      if (typeof cellStyle === "function") {
        cellStyles = cellStyle.call(null, {
          rowIndex,
          columnIndex,
          row,
          column
        });
      }
      const fixedStyle = getFixedColumnOffset(columnIndex, props2 == null ? void 0 : props2.fixed, props2.store);
      ensurePosition(fixedStyle, "left");
      ensurePosition(fixedStyle, "right");
      return Object.assign({}, cellStyles, fixedStyle);
    };
    const getCellClass = (rowIndex, columnIndex, row, column, offset2) => {
      const fixedClasses = getFixedColumnsClass(ns2.b(), columnIndex, props2 == null ? void 0 : props2.fixed, props2.store, void 0, offset2);
      const classes = [column.id, column.align, column.className, ...fixedClasses];
      const cellClassName = parent2 == null ? void 0 : parent2.props.cellClassName;
      if (typeof cellClassName === "string") {
        classes.push(cellClassName);
      } else if (typeof cellClassName === "function") {
        classes.push(cellClassName.call(null, {
          rowIndex,
          columnIndex,
          row,
          column
        }));
      }
      classes.push(ns2.e("cell"));
      return classes.filter((className) => Boolean(className)).join(" ");
    };
    const getSpan = (row, column, rowIndex, columnIndex) => {
      let rowspan = 1;
      let colspan = 1;
      const fn2 = parent2 == null ? void 0 : parent2.props.spanMethod;
      if (typeof fn2 === "function") {
        const result = fn2({
          row,
          column,
          rowIndex,
          columnIndex
        });
        if (Array.isArray(result)) {
          rowspan = result[0];
          colspan = result[1];
        } else if (typeof result === "object") {
          rowspan = result.rowspan;
          colspan = result.colspan;
        }
      }
      return { rowspan, colspan };
    };
    const getColspanRealWidth = (columns2, colspan, index) => {
      if (colspan < 1) {
        return columns2[index].realWidth;
      }
      const widthArr = columns2.map(({ realWidth, width }) => realWidth || width).slice(index, index + colspan);
      return Number(widthArr.reduce((acc, width) => Number(acc) + Number(width), -1));
    };
    return {
      getRowStyle,
      getRowClass,
      getCellStyle,
      getCellClass,
      getSpan,
      getColspanRealWidth
    };
  }
  const __default__$v = vue.defineComponent({
    name: "TableTdWrapper"
  });
  const _sfc_main$B = /* @__PURE__ */ vue.defineComponent({
    ...__default__$v,
    props: {
      colspan: {
        type: Number,
        default: 1
      },
      rowspan: {
        type: Number,
        default: 1
      }
    },
    setup(__props) {
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("td", {
          colspan: __props.colspan,
          rowspan: __props.rowspan
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 8, ["colspan", "rowspan"]);
      };
    }
  });
  var TdWrapper = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["__file", "td-wrapper.vue"]]);
  function useRender$1(props2) {
    const parent2 = vue.inject(TABLE_INJECTION_KEY);
    const ns2 = useNamespace("table");
    const {
      handleDoubleClick,
      handleClick,
      handleContextMenu,
      handleMouseEnter,
      handleMouseLeave,
      handleCellMouseEnter,
      handleCellMouseLeave,
      tooltipContent,
      tooltipTrigger
    } = useEvents(props2);
    const {
      getRowStyle,
      getRowClass,
      getCellStyle,
      getCellClass,
      getSpan,
      getColspanRealWidth
    } = useStyles$1(props2);
    const firstDefaultColumnIndex = vue.computed(() => {
      return props2.store.states.columns.value.findIndex(({ type: type3 }) => type3 === "default");
    });
    const getKeyOfRow = (row, index) => {
      const rowKey2 = parent2.props.rowKey;
      if (rowKey2) {
        return getRowIdentity(row, rowKey2);
      }
      return index;
    };
    const rowRender = (row, $index, treeRowData, expanded = false) => {
      const { tooltipEffect, tooltipOptions, store: store2 } = props2;
      const { indent, columns: columns2 } = store2.states;
      const rowClasses = getRowClass(row, $index);
      let display = true;
      if (treeRowData) {
        rowClasses.push(ns2.em("row", `level-${treeRowData.level}`));
        display = treeRowData.display;
      }
      const displayStyle = display ? null : {
        display: "none"
      };
      return vue.h("tr", {
        style: [displayStyle, getRowStyle(row, $index)],
        class: rowClasses,
        key: getKeyOfRow(row, $index),
        onDblclick: ($event) => handleDoubleClick($event, row),
        onClick: ($event) => handleClick($event, row),
        onContextmenu: ($event) => handleContextMenu($event, row),
        onMouseenter: () => handleMouseEnter($index),
        onMouseleave: handleMouseLeave
      }, columns2.value.map((column, cellIndex) => {
        const { rowspan, colspan } = getSpan(row, column, $index, cellIndex);
        if (!rowspan || !colspan) {
          return null;
        }
        const columnData = Object.assign({}, column);
        columnData.realWidth = getColspanRealWidth(columns2.value, colspan, cellIndex);
        const data = {
          store: props2.store,
          _self: props2.context || parent2,
          column: columnData,
          row,
          $index,
          cellIndex,
          expanded
        };
        if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {
          data.treeNode = {
            indent: treeRowData.level * indent.value,
            level: treeRowData.level
          };
          if (typeof treeRowData.expanded === "boolean") {
            data.treeNode.expanded = treeRowData.expanded;
            if ("loading" in treeRowData) {
              data.treeNode.loading = treeRowData.loading;
            }
            if ("noLazyChildren" in treeRowData) {
              data.treeNode.noLazyChildren = treeRowData.noLazyChildren;
            }
          }
        }
        const baseKey = `${getKeyOfRow(row, $index)},${cellIndex}`;
        const patchKey = columnData.columnKey || columnData.rawColumnKey || "";
        const mergedTooltipOptions = column.showOverflowTooltip && merge$2({
          effect: tooltipEffect
        }, tooltipOptions, column.showOverflowTooltip);
        return vue.h(TdWrapper, {
          style: getCellStyle($index, cellIndex, row, column),
          class: getCellClass($index, cellIndex, row, column, colspan - 1),
          key: `${patchKey}${baseKey}`,
          rowspan,
          colspan,
          onMouseenter: ($event) => handleCellMouseEnter($event, row, mergedTooltipOptions),
          onMouseleave: handleCellMouseLeave
        }, {
          default: () => cellChildren(cellIndex, column, data)
        });
      }));
    };
    const cellChildren = (cellIndex, column, data) => {
      return column.renderCell(data);
    };
    const wrappedRowRender = (row, $index) => {
      const store2 = props2.store;
      const { isRowExpanded, assertRowKey } = store2;
      const { treeData, lazyTreeNodeMap, childrenColumnName, rowKey: rowKey2 } = store2.states;
      const columns2 = store2.states.columns.value;
      const hasExpandColumn = columns2.some(({ type: type3 }) => type3 === "expand");
      if (hasExpandColumn) {
        const expanded = isRowExpanded(row);
        const tr = rowRender(row, $index, void 0, expanded);
        const renderExpanded = parent2.renderExpanded;
        if (expanded) {
          if (!renderExpanded) {
            formatAppLog("error", "at node_modules/element-plus/es/components/table/src/table-body/render-helper.mjs:128", "[Element Error]renderExpanded is required.");
            return tr;
          }
          return [
            [
              tr,
              vue.h("tr", {
                key: `expanded-row__${tr.key}`
              }, [
                vue.h("td", {
                  colspan: columns2.length,
                  class: `${ns2.e("cell")} ${ns2.e("expanded-cell")}`
                }, [renderExpanded({ row, $index, store: store2, expanded })])
              ])
            ]
          ];
        } else {
          return [[tr]];
        }
      } else if (Object.keys(treeData.value).length) {
        assertRowKey();
        const key = getRowIdentity(row, rowKey2.value);
        let cur = treeData.value[key];
        let treeRowData = null;
        if (cur) {
          treeRowData = {
            expanded: cur.expanded,
            level: cur.level,
            display: true
          };
          if (typeof cur.lazy === "boolean") {
            if (typeof cur.loaded === "boolean" && cur.loaded) {
              treeRowData.noLazyChildren = !(cur.children && cur.children.length);
            }
            treeRowData.loading = cur.loading;
          }
        }
        const tmp = [rowRender(row, $index, treeRowData)];
        if (cur) {
          let i2 = 0;
          const traverse = (children, parent22) => {
            if (!(children && children.length && parent22))
              return;
            children.forEach((node) => {
              const innerTreeRowData = {
                display: parent22.display && parent22.expanded,
                level: parent22.level + 1,
                expanded: false,
                noLazyChildren: false,
                loading: false
              };
              const childKey = getRowIdentity(node, rowKey2.value);
              if (childKey === void 0 || childKey === null) {
                throw new Error("For nested data item, row-key is required.");
              }
              cur = { ...treeData.value[childKey] };
              if (cur) {
                innerTreeRowData.expanded = cur.expanded;
                cur.level = cur.level || innerTreeRowData.level;
                cur.display = !!(cur.expanded && innerTreeRowData.display);
                if (typeof cur.lazy === "boolean") {
                  if (typeof cur.loaded === "boolean" && cur.loaded) {
                    innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);
                  }
                  innerTreeRowData.loading = cur.loading;
                }
              }
              i2++;
              tmp.push(rowRender(node, $index + i2, innerTreeRowData));
              if (cur) {
                const nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];
                traverse(nodes2, cur);
              }
            });
          };
          cur.display = true;
          const nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];
          traverse(nodes, cur);
        }
        return tmp;
      } else {
        return rowRender(row, $index, void 0);
      }
    };
    return {
      wrappedRowRender,
      tooltipContent,
      tooltipTrigger
    };
  }
  const defaultProps$2 = {
    store: {
      required: true,
      type: Object
    },
    stripe: Boolean,
    tooltipEffect: String,
    tooltipOptions: {
      type: Object
    },
    context: {
      default: () => ({}),
      type: Object
    },
    rowClassName: [String, Function],
    rowStyle: [Object, Function],
    fixed: {
      type: String,
      default: ""
    },
    highlight: Boolean
  };
  var TableBody = vue.defineComponent({
    name: "ElTableBody",
    props: defaultProps$2,
    setup(props2) {
      const instance = vue.getCurrentInstance();
      const parent2 = vue.inject(TABLE_INJECTION_KEY);
      const ns2 = useNamespace("table");
      const { wrappedRowRender, tooltipContent, tooltipTrigger } = useRender$1(props2);
      const { onColumnsChange, onScrollableChange } = useLayoutObserver(parent2);
      const hoveredCellList = [];
      vue.watch(props2.store.states.hoverRow, (newVal, oldVal) => {
        var _a2;
        const el = instance == null ? void 0 : instance.vnode.el;
        const rows = Array.from((el == null ? void 0 : el.children) || []).filter((e) => e == null ? void 0 : e.classList.contains(`${ns2.e("row")}`));
        let rowNum = newVal;
        const childNodes = (_a2 = rows[rowNum]) == null ? void 0 : _a2.childNodes;
        if (childNodes == null ? void 0 : childNodes.length) {
          let control = 0;
          const indexes = Array.from(childNodes).reduce((acc, item, index) => {
            var _a22, _b;
            if (((_a22 = childNodes[index]) == null ? void 0 : _a22.colSpan) > 1) {
              control = (_b = childNodes[index]) == null ? void 0 : _b.colSpan;
            }
            if (item.nodeName !== "TD" && control === 0) {
              acc.push(index);
            }
            control > 0 && control--;
            return acc;
          }, []);
          indexes.forEach((rowIndex) => {
            var _a22;
            rowNum = newVal;
            while (rowNum > 0) {
              const preChildNodes = (_a22 = rows[rowNum - 1]) == null ? void 0 : _a22.childNodes;
              if (preChildNodes[rowIndex] && preChildNodes[rowIndex].nodeName === "TD" && preChildNodes[rowIndex].rowSpan > 1) {
                addClass(preChildNodes[rowIndex], "hover-cell");
                hoveredCellList.push(preChildNodes[rowIndex]);
                break;
              }
              rowNum--;
            }
          });
        } else {
          hoveredCellList.forEach((item) => removeClass(item, "hover-cell"));
          hoveredCellList.length = 0;
        }
        if (!props2.store.states.isComplex.value || !isClient)
          return;
        rAF(() => {
          const oldRow = rows[oldVal];
          const newRow = rows[newVal];
          if (oldRow && !oldRow.classList.contains("hover-fixed-row")) {
            removeClass(oldRow, "hover-row");
          }
          if (newRow) {
            addClass(newRow, "hover-row");
          }
        });
      });
      vue.onUnmounted(() => {
        var _a2;
        (_a2 = removePopper) == null ? void 0 : _a2();
      });
      return {
        ns: ns2,
        onColumnsChange,
        onScrollableChange,
        wrappedRowRender,
        tooltipContent,
        tooltipTrigger
      };
    },
    render() {
      const { wrappedRowRender, store: store2 } = this;
      const data = store2.states.data.value || [];
      return vue.h("tbody", { tabIndex: -1 }, [
        data.reduce((acc, row) => {
          return acc.concat(wrappedRowRender(row, acc.length));
        }, [])
      ]);
    }
  });
  function useMapState() {
    const table = vue.inject(TABLE_INJECTION_KEY);
    const store2 = table == null ? void 0 : table.store;
    const leftFixedLeafCount = vue.computed(() => {
      return store2.states.fixedLeafColumnsLength.value;
    });
    const rightFixedLeafCount = vue.computed(() => {
      return store2.states.rightFixedColumns.value.length;
    });
    const columnsCount = vue.computed(() => {
      return store2.states.columns.value.length;
    });
    const leftFixedCount = vue.computed(() => {
      return store2.states.fixedColumns.value.length;
    });
    const rightFixedCount = vue.computed(() => {
      return store2.states.rightFixedColumns.value.length;
    });
    return {
      leftFixedLeafCount,
      rightFixedLeafCount,
      columnsCount,
      leftFixedCount,
      rightFixedCount,
      columns: store2.states.columns
    };
  }
  function useStyle$1(props2) {
    const { columns: columns2 } = useMapState();
    const ns2 = useNamespace("table");
    const getCellClasses = (columns22, cellIndex) => {
      const column = columns22[cellIndex];
      const classes = [
        ns2.e("cell"),
        column.id,
        column.align,
        column.labelClassName,
        ...getFixedColumnsClass(ns2.b(), cellIndex, column.fixed, props2.store)
      ];
      if (column.className) {
        classes.push(column.className);
      }
      if (!column.children) {
        classes.push(ns2.is("leaf"));
      }
      return classes;
    };
    const getCellStyles = (column, cellIndex) => {
      const fixedStyle = getFixedColumnOffset(cellIndex, column.fixed, props2.store);
      ensurePosition(fixedStyle, "left");
      ensurePosition(fixedStyle, "right");
      return fixedStyle;
    };
    return {
      getCellClasses,
      getCellStyles,
      columns: columns2
    };
  }
  var TableFooter = vue.defineComponent({
    name: "ElTableFooter",
    props: {
      fixed: {
        type: String,
        default: ""
      },
      store: {
        required: true,
        type: Object
      },
      summaryMethod: Function,
      sumText: String,
      border: Boolean,
      defaultSort: {
        type: Object,
        default: () => {
          return {
            prop: "",
            order: ""
          };
        }
      }
    },
    setup(props2) {
      const { getCellClasses, getCellStyles, columns: columns2 } = useStyle$1(props2);
      const ns2 = useNamespace("table");
      return {
        ns: ns2,
        getCellClasses,
        getCellStyles,
        columns: columns2
      };
    },
    render() {
      const { columns: columns2, getCellStyles, getCellClasses, summaryMethod, sumText } = this;
      const data = this.store.states.data.value;
      let sums = [];
      if (summaryMethod) {
        sums = summaryMethod({
          columns: columns2,
          data
        });
      } else {
        columns2.forEach((column, index) => {
          if (index === 0) {
            sums[index] = sumText;
            return;
          }
          const values = data.map((item) => Number(item[column.property]));
          const precisions = [];
          let notNumber = true;
          values.forEach((value) => {
            if (!Number.isNaN(+value)) {
              notNumber = false;
              const decimal = `${value}`.split(".")[1];
              precisions.push(decimal ? decimal.length : 0);
            }
          });
          const precision = Math.max.apply(null, precisions);
          if (!notNumber) {
            sums[index] = values.reduce((prev, curr) => {
              const value = Number(curr);
              if (!Number.isNaN(+value)) {
                return Number.parseFloat((prev + curr).toFixed(Math.min(precision, 20)));
              } else {
                return prev;
              }
            }, 0);
          } else {
            sums[index] = "";
          }
        });
      }
      return vue.h(vue.h("tfoot", [
        vue.h("tr", {}, [
          ...columns2.map((column, cellIndex) => vue.h("td", {
            key: cellIndex,
            colspan: column.colSpan,
            rowspan: column.rowSpan,
            class: getCellClasses(columns2, cellIndex),
            style: getCellStyles(column, cellIndex)
          }, [
            vue.h("div", {
              class: ["cell", column.labelClassName]
            }, [sums[cellIndex]])
          ]))
        ])
      ]));
    }
  });
  function useUtils(store2) {
    const setCurrentRow = (row) => {
      store2.commit("setCurrentRow", row);
    };
    const getSelectionRows = () => {
      return store2.getSelectionRows();
    };
    const toggleRowSelection = (row, selected, ignoreSelectable = true) => {
      store2.toggleRowSelection(row, selected, false, ignoreSelectable);
      store2.updateAllSelected();
    };
    const clearSelection = () => {
      store2.clearSelection();
    };
    const clearFilter = (columnKeys) => {
      store2.clearFilter(columnKeys);
    };
    const toggleAllSelection = () => {
      store2.commit("toggleAllSelection");
    };
    const toggleRowExpansion = (row, expanded) => {
      store2.toggleRowExpansionAdapter(row, expanded);
    };
    const clearSort = () => {
      store2.clearSort();
    };
    const sort = (prop, order2) => {
      store2.commit("sort", { prop, order: order2 });
    };
    const updateKeyChildren = (key, data) => {
      store2.updateKeyChildren(key, data);
    };
    return {
      setCurrentRow,
      getSelectionRows,
      toggleRowSelection,
      clearSelection,
      clearFilter,
      toggleAllSelection,
      toggleRowExpansion,
      clearSort,
      sort,
      updateKeyChildren
    };
  }
  function useStyle(props2, layout2, store2, table) {
    const isHidden2 = vue.ref(false);
    const renderExpanded = vue.ref(null);
    const resizeProxyVisible = vue.ref(false);
    const setDragVisible = (visible) => {
      resizeProxyVisible.value = visible;
    };
    const resizeState = vue.ref({
      width: null,
      height: null,
      headerHeight: null
    });
    const isGroup = vue.ref(false);
    const scrollbarViewStyle = {
      display: "inline-block",
      verticalAlign: "middle"
    };
    const tableWidth = vue.ref();
    const tableScrollHeight = vue.ref(0);
    const bodyScrollHeight = vue.ref(0);
    const headerScrollHeight = vue.ref(0);
    const footerScrollHeight = vue.ref(0);
    const appendScrollHeight = vue.ref(0);
    vue.watchEffect(() => {
      layout2.setHeight(props2.height);
    });
    vue.watchEffect(() => {
      layout2.setMaxHeight(props2.maxHeight);
    });
    vue.watch(() => [props2.currentRowKey, store2.states.rowKey], ([currentRowKey, rowKey2]) => {
      if (!vue.unref(rowKey2) || !vue.unref(currentRowKey))
        return;
      store2.setCurrentRowKey(`${currentRowKey}`);
    }, {
      immediate: true
    });
    vue.watch(() => props2.data, (data) => {
      table.store.commit("setData", data);
    }, {
      immediate: true,
      deep: true
    });
    vue.watchEffect(() => {
      if (props2.expandRowKeys) {
        store2.setExpandRowKeysAdapter(props2.expandRowKeys);
      }
    });
    const handleMouseLeave = () => {
      table.store.commit("setHoverRow", null);
      if (table.hoverState)
        table.hoverState = null;
    };
    const handleHeaderFooterMousewheel = (event, data) => {
      const { pixelX, pixelY } = data;
      if (Math.abs(pixelX) >= Math.abs(pixelY)) {
        table.refs.bodyWrapper.scrollLeft += data.pixelX / 5;
      }
    };
    const shouldUpdateHeight = vue.computed(() => {
      return props2.height || props2.maxHeight || store2.states.fixedColumns.value.length > 0 || store2.states.rightFixedColumns.value.length > 0;
    });
    const tableBodyStyles = vue.computed(() => {
      return {
        width: layout2.bodyWidth.value ? `${layout2.bodyWidth.value}px` : ""
      };
    });
    const doLayout = () => {
      if (shouldUpdateHeight.value) {
        layout2.updateElsHeight();
      }
      layout2.updateColumnsWidth();
      requestAnimationFrame(syncPosition);
    };
    vue.onMounted(async () => {
      await vue.nextTick();
      store2.updateColumns();
      bindEvents();
      requestAnimationFrame(doLayout);
      const el = table.vnode.el;
      const tableHeader = table.refs.headerWrapper;
      if (props2.flexible && el && el.parentElement) {
        el.parentElement.style.minWidth = "0";
      }
      resizeState.value = {
        width: tableWidth.value = el.offsetWidth,
        height: el.offsetHeight,
        headerHeight: props2.showHeader && tableHeader ? tableHeader.offsetHeight : null
      };
      store2.states.columns.value.forEach((column) => {
        if (column.filteredValue && column.filteredValue.length) {
          table.store.commit("filterChange", {
            column,
            values: column.filteredValue,
            silent: true
          });
        }
      });
      table.$ready = true;
    });
    const setScrollClassByEl = (el, className) => {
      if (!el)
        return;
      const classList = Array.from(el.classList).filter((item) => !item.startsWith("is-scrolling-"));
      classList.push(layout2.scrollX.value ? className : "is-scrolling-none");
      el.className = classList.join(" ");
    };
    const setScrollClass = (className) => {
      const { tableWrapper } = table.refs;
      setScrollClassByEl(tableWrapper, className);
    };
    const hasScrollClass = (className) => {
      const { tableWrapper } = table.refs;
      return !!(tableWrapper && tableWrapper.classList.contains(className));
    };
    const syncPosition = function() {
      if (!table.refs.scrollBarRef)
        return;
      if (!layout2.scrollX.value) {
        const scrollingNoneClass = "is-scrolling-none";
        if (!hasScrollClass(scrollingNoneClass)) {
          setScrollClass(scrollingNoneClass);
        }
        return;
      }
      const scrollContainer = table.refs.scrollBarRef.wrapRef;
      if (!scrollContainer)
        return;
      const { scrollLeft, offsetWidth, scrollWidth } = scrollContainer;
      const { headerWrapper, footerWrapper } = table.refs;
      if (headerWrapper)
        headerWrapper.scrollLeft = scrollLeft;
      if (footerWrapper)
        footerWrapper.scrollLeft = scrollLeft;
      const maxScrollLeftPosition = scrollWidth - offsetWidth - 1;
      if (scrollLeft >= maxScrollLeftPosition) {
        setScrollClass("is-scrolling-right");
      } else if (scrollLeft === 0) {
        setScrollClass("is-scrolling-left");
      } else {
        setScrollClass("is-scrolling-middle");
      }
    };
    const bindEvents = () => {
      if (!table.refs.scrollBarRef)
        return;
      if (table.refs.scrollBarRef.wrapRef) {
        useEventListener(table.refs.scrollBarRef.wrapRef, "scroll", syncPosition, {
          passive: true
        });
      }
      if (props2.fit) {
        useResizeObserver(table.vnode.el, resizeListener);
      } else {
        useEventListener(window, "resize", resizeListener);
      }
      useResizeObserver(table.refs.bodyWrapper, () => {
        var _a2, _b;
        resizeListener();
        (_b = (_a2 = table.refs) == null ? void 0 : _a2.scrollBarRef) == null ? void 0 : _b.update();
      });
    };
    const resizeListener = () => {
      var _a2, _b, _c, _d;
      const el = table.vnode.el;
      if (!table.$ready || !el)
        return;
      let shouldUpdateLayout = false;
      const {
        width: oldWidth,
        height: oldHeight,
        headerHeight: oldHeaderHeight
      } = resizeState.value;
      const width = tableWidth.value = el.offsetWidth;
      if (oldWidth !== width) {
        shouldUpdateLayout = true;
      }
      const height = el.offsetHeight;
      if ((props2.height || shouldUpdateHeight.value) && oldHeight !== height) {
        shouldUpdateLayout = true;
      }
      const tableHeader = props2.tableLayout === "fixed" ? table.refs.headerWrapper : (_a2 = table.refs.tableHeaderRef) == null ? void 0 : _a2.$el;
      if (props2.showHeader && (tableHeader == null ? void 0 : tableHeader.offsetHeight) !== oldHeaderHeight) {
        shouldUpdateLayout = true;
      }
      tableScrollHeight.value = ((_b = table.refs.tableWrapper) == null ? void 0 : _b.scrollHeight) || 0;
      headerScrollHeight.value = (tableHeader == null ? void 0 : tableHeader.scrollHeight) || 0;
      footerScrollHeight.value = ((_c = table.refs.footerWrapper) == null ? void 0 : _c.offsetHeight) || 0;
      appendScrollHeight.value = ((_d = table.refs.appendWrapper) == null ? void 0 : _d.offsetHeight) || 0;
      bodyScrollHeight.value = tableScrollHeight.value - headerScrollHeight.value - footerScrollHeight.value - appendScrollHeight.value;
      if (shouldUpdateLayout) {
        resizeState.value = {
          width,
          height,
          headerHeight: props2.showHeader && (tableHeader == null ? void 0 : tableHeader.offsetHeight) || 0
        };
        doLayout();
      }
    };
    const tableSize = useFormSize();
    const bodyWidth = vue.computed(() => {
      const { bodyWidth: bodyWidth_, scrollY, gutterWidth } = layout2;
      return bodyWidth_.value ? `${bodyWidth_.value - (scrollY.value ? gutterWidth : 0)}px` : "";
    });
    const tableLayout = vue.computed(() => {
      if (props2.maxHeight)
        return "fixed";
      return props2.tableLayout;
    });
    const emptyBlockStyle = vue.computed(() => {
      if (props2.data && props2.data.length)
        return null;
      let height = "100%";
      if (props2.height && bodyScrollHeight.value) {
        height = `${bodyScrollHeight.value}px`;
      }
      const width = tableWidth.value;
      return {
        width: width ? `${width}px` : "",
        height
      };
    });
    const tableInnerStyle = vue.computed(() => {
      if (props2.height) {
        return {
          height: !Number.isNaN(Number(props2.height)) ? `${props2.height}px` : props2.height
        };
      }
      if (props2.maxHeight) {
        return {
          maxHeight: !Number.isNaN(Number(props2.maxHeight)) ? `${props2.maxHeight}px` : props2.maxHeight
        };
      }
      return {};
    });
    const scrollbarStyle = vue.computed(() => {
      if (props2.height) {
        return {
          height: "100%"
        };
      }
      if (props2.maxHeight) {
        if (!Number.isNaN(Number(props2.maxHeight))) {
          return {
            maxHeight: `${props2.maxHeight - headerScrollHeight.value - footerScrollHeight.value}px`
          };
        } else {
          return {
            maxHeight: `calc(${props2.maxHeight} - ${headerScrollHeight.value + footerScrollHeight.value}px)`
          };
        }
      }
      return {};
    });
    const handleFixedMousewheel = (event, data) => {
      const bodyWrapper = table.refs.bodyWrapper;
      if (Math.abs(data.spinY) > 0) {
        const currentScrollTop = bodyWrapper.scrollTop;
        if (data.pixelY < 0 && currentScrollTop !== 0) {
          event.preventDefault();
        }
        if (data.pixelY > 0 && bodyWrapper.scrollHeight - bodyWrapper.clientHeight > currentScrollTop) {
          event.preventDefault();
        }
        bodyWrapper.scrollTop += Math.ceil(data.pixelY / 5);
      } else {
        bodyWrapper.scrollLeft += Math.ceil(data.pixelX / 5);
      }
    };
    return {
      isHidden: isHidden2,
      renderExpanded,
      setDragVisible,
      isGroup,
      handleMouseLeave,
      handleHeaderFooterMousewheel,
      tableSize,
      emptyBlockStyle,
      handleFixedMousewheel,
      resizeProxyVisible,
      bodyWidth,
      resizeState,
      doLayout,
      tableBodyStyles,
      tableLayout,
      scrollbarViewStyle,
      tableInnerStyle,
      scrollbarStyle
    };
  }
  function useKeyRender(table) {
    const observer = vue.ref();
    const initWatchDom = () => {
      const el = table.vnode.el;
      const columnsWrapper = el.querySelector(".hidden-columns");
      const config = { childList: true, subtree: true };
      const updateOrderFns = table.store.states.updateOrderFns;
      observer.value = new MutationObserver(() => {
        updateOrderFns.forEach((fn2) => fn2());
      });
      observer.value.observe(columnsWrapper, config);
    };
    vue.onMounted(() => {
      initWatchDom();
    });
    vue.onUnmounted(() => {
      var _a2;
      (_a2 = observer.value) == null ? void 0 : _a2.disconnect();
    });
  }
  var defaultProps$1 = {
    data: {
      type: Array,
      default: () => []
    },
    size: useSizeProp,
    width: [String, Number],
    height: [String, Number],
    maxHeight: [String, Number],
    fit: {
      type: Boolean,
      default: true
    },
    stripe: Boolean,
    border: Boolean,
    rowKey: [String, Function],
    showHeader: {
      type: Boolean,
      default: true
    },
    showSummary: Boolean,
    sumText: String,
    summaryMethod: Function,
    rowClassName: [String, Function],
    rowStyle: [Object, Function],
    cellClassName: [String, Function],
    cellStyle: [Object, Function],
    headerRowClassName: [String, Function],
    headerRowStyle: [Object, Function],
    headerCellClassName: [String, Function],
    headerCellStyle: [Object, Function],
    highlightCurrentRow: Boolean,
    currentRowKey: [String, Number],
    emptyText: String,
    expandRowKeys: Array,
    defaultExpandAll: Boolean,
    defaultSort: Object,
    tooltipEffect: String,
    tooltipOptions: Object,
    spanMethod: Function,
    selectOnIndeterminate: {
      type: Boolean,
      default: true
    },
    indent: {
      type: Number,
      default: 16
    },
    treeProps: {
      type: Object,
      default: () => {
        return {
          hasChildren: "hasChildren",
          children: "children",
          checkStrictly: false
        };
      }
    },
    lazy: Boolean,
    load: Function,
    style: {
      type: Object,
      default: () => ({})
    },
    className: {
      type: String,
      default: ""
    },
    tableLayout: {
      type: String,
      default: "fixed"
    },
    scrollbarAlwaysOn: Boolean,
    flexible: Boolean,
    showOverflowTooltip: [Boolean, Object],
    appendFilterPanelTo: String,
    scrollbarTabindex: {
      type: [Number, String],
      default: void 0
    }
  };
  function hColgroup(props2) {
    const isAuto = props2.tableLayout === "auto";
    let columns2 = props2.columns || [];
    if (isAuto) {
      if (columns2.every((column) => column.width === void 0)) {
        columns2 = [];
      }
    }
    const getPropsData = (column) => {
      const propsData = {
        key: `${props2.tableLayout}_${column.id}`,
        style: {},
        name: void 0
      };
      if (isAuto) {
        propsData.style = {
          width: `${column.width}px`
        };
      } else {
        propsData.name = column.id;
      }
      return propsData;
    };
    return vue.h("colgroup", {}, columns2.map((column) => vue.h("col", getPropsData(column))));
  }
  hColgroup.props = ["columns", "tableLayout"];
  const useScrollbar$1 = () => {
    const scrollBarRef = vue.ref();
    const scrollTo = (options, yCoord) => {
      const scrollbar = scrollBarRef.value;
      if (scrollbar) {
        scrollbar.scrollTo(options, yCoord);
      }
    };
    const setScrollPosition = (position, offset2) => {
      const scrollbar = scrollBarRef.value;
      if (scrollbar && isNumber$2(offset2) && ["Top", "Left"].includes(position)) {
        scrollbar[`setScroll${position}`](offset2);
      }
    };
    const setScrollTop = (top) => setScrollPosition("Top", top);
    const setScrollLeft = (left2) => setScrollPosition("Left", left2);
    return {
      scrollBarRef,
      scrollTo,
      setScrollTop,
      setScrollLeft
    };
  };
  let tableIdSeed = 1;
  const _sfc_main$A = vue.defineComponent({
    name: "ElTable",
    directives: {
      Mousewheel
    },
    components: {
      TableHeader,
      TableBody,
      TableFooter,
      ElScrollbar,
      hColgroup
    },
    props: defaultProps$1,
    emits: [
      "select",
      "select-all",
      "selection-change",
      "cell-mouse-enter",
      "cell-mouse-leave",
      "cell-contextmenu",
      "cell-click",
      "cell-dblclick",
      "row-click",
      "row-contextmenu",
      "row-dblclick",
      "header-click",
      "header-contextmenu",
      "sort-change",
      "filter-change",
      "current-change",
      "header-dragend",
      "expand-change"
    ],
    setup(props2) {
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("table");
      const table = vue.getCurrentInstance();
      vue.provide(TABLE_INJECTION_KEY, table);
      const store2 = createStore(table, props2);
      table.store = store2;
      const layout2 = new TableLayout({
        store: table.store,
        table,
        fit: props2.fit,
        showHeader: props2.showHeader
      });
      table.layout = layout2;
      const isEmpty2 = vue.computed(() => (store2.states.data.value || []).length === 0);
      const {
        setCurrentRow,
        getSelectionRows,
        toggleRowSelection,
        clearSelection,
        clearFilter,
        toggleAllSelection,
        toggleRowExpansion,
        clearSort,
        sort,
        updateKeyChildren
      } = useUtils(store2);
      const {
        isHidden: isHidden2,
        renderExpanded,
        setDragVisible,
        isGroup,
        handleMouseLeave,
        handleHeaderFooterMousewheel,
        tableSize,
        emptyBlockStyle,
        handleFixedMousewheel,
        resizeProxyVisible,
        bodyWidth,
        resizeState,
        doLayout,
        tableBodyStyles,
        tableLayout,
        scrollbarViewStyle,
        tableInnerStyle,
        scrollbarStyle
      } = useStyle(props2, layout2, store2, table);
      const { scrollBarRef, scrollTo, setScrollLeft, setScrollTop } = useScrollbar$1();
      const debouncedUpdateLayout = debounce(doLayout, 50);
      const tableId = `${ns2.namespace.value}-table_${tableIdSeed++}`;
      table.tableId = tableId;
      table.state = {
        isGroup,
        resizeState,
        doLayout,
        debouncedUpdateLayout
      };
      const computedSumText = vue.computed(() => {
        var _a2;
        return (_a2 = props2.sumText) != null ? _a2 : t2("el.table.sumText");
      });
      const computedEmptyText = vue.computed(() => {
        var _a2;
        return (_a2 = props2.emptyText) != null ? _a2 : t2("el.table.emptyText");
      });
      const columns2 = vue.computed(() => {
        return convertToRows(store2.states.originColumns.value)[0];
      });
      useKeyRender(table);
      vue.onBeforeUnmount(() => {
        debouncedUpdateLayout.cancel();
      });
      return {
        ns: ns2,
        layout: layout2,
        store: store2,
        columns: columns2,
        handleHeaderFooterMousewheel,
        handleMouseLeave,
        tableId,
        tableSize,
        isHidden: isHidden2,
        isEmpty: isEmpty2,
        renderExpanded,
        resizeProxyVisible,
        resizeState,
        isGroup,
        bodyWidth,
        tableBodyStyles,
        emptyBlockStyle,
        debouncedUpdateLayout,
        handleFixedMousewheel,
        setCurrentRow,
        getSelectionRows,
        toggleRowSelection,
        clearSelection,
        clearFilter,
        toggleAllSelection,
        toggleRowExpansion,
        clearSort,
        doLayout,
        sort,
        updateKeyChildren,
        t: t2,
        setDragVisible,
        context: table,
        computedSumText,
        computedEmptyText,
        tableLayout,
        scrollbarViewStyle,
        tableInnerStyle,
        scrollbarStyle,
        scrollBarRef,
        scrollTo,
        setScrollLeft,
        setScrollTop
      };
    }
  });
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_hColgroup = vue.resolveComponent("hColgroup");
    const _component_table_header = vue.resolveComponent("table-header");
    const _component_table_body = vue.resolveComponent("table-body");
    const _component_table_footer = vue.resolveComponent("table-footer");
    const _component_el_scrollbar = vue.resolveComponent("el-scrollbar");
    const _directive_mousewheel = vue.resolveDirective("mousewheel");
    return vue.openBlock(), vue.createElementBlock("div", {
      ref: "tableWrapper",
      class: vue.normalizeClass([
        {
          [_ctx.ns.m("fit")]: _ctx.fit,
          [_ctx.ns.m("striped")]: _ctx.stripe,
          [_ctx.ns.m("border")]: _ctx.border || _ctx.isGroup,
          [_ctx.ns.m("hidden")]: _ctx.isHidden,
          [_ctx.ns.m("group")]: _ctx.isGroup,
          [_ctx.ns.m("fluid-height")]: _ctx.maxHeight,
          [_ctx.ns.m("scrollable-x")]: _ctx.layout.scrollX.value,
          [_ctx.ns.m("scrollable-y")]: _ctx.layout.scrollY.value,
          [_ctx.ns.m("enable-row-hover")]: !_ctx.store.states.isComplex.value,
          [_ctx.ns.m("enable-row-transition")]: (_ctx.store.states.data.value || []).length !== 0 && (_ctx.store.states.data.value || []).length < 100,
          "has-footer": _ctx.showSummary
        },
        _ctx.ns.m(_ctx.tableSize),
        _ctx.className,
        _ctx.ns.b(),
        _ctx.ns.m(`layout-${_ctx.tableLayout}`)
      ]),
      style: vue.normalizeStyle(_ctx.style),
      "data-prefix": _ctx.ns.namespace.value,
      onMouseleave: _ctx.handleMouseLeave
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("inner-wrapper")),
        style: vue.normalizeStyle(_ctx.tableInnerStyle)
      }, [
        vue.createElementVNode("div", {
          ref: "hiddenColumns",
          class: "hidden-columns"
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 512),
        _ctx.showHeader && _ctx.tableLayout === "fixed" ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          ref: "headerWrapper",
          class: vue.normalizeClass(_ctx.ns.e("header-wrapper"))
        }, [
          vue.createElementVNode("table", {
            ref: "tableHeader",
            class: vue.normalizeClass(_ctx.ns.e("header")),
            style: vue.normalizeStyle(_ctx.tableBodyStyles),
            border: "0",
            cellpadding: "0",
            cellspacing: "0"
          }, [
            vue.createVNode(_component_hColgroup, {
              columns: _ctx.store.states.columns.value,
              "table-layout": _ctx.tableLayout
            }, null, 8, ["columns", "table-layout"]),
            vue.createVNode(_component_table_header, {
              ref: "tableHeaderRef",
              border: _ctx.border,
              "default-sort": _ctx.defaultSort,
              store: _ctx.store,
              "append-filter-panel-to": _ctx.appendFilterPanelTo,
              onSetDragVisible: _ctx.setDragVisible
            }, null, 8, ["border", "default-sort", "store", "append-filter-panel-to", "onSetDragVisible"])
          ], 6)
        ], 2)), [
          [_directive_mousewheel, _ctx.handleHeaderFooterMousewheel]
        ]) : vue.createCommentVNode("v-if", true),
        vue.createElementVNode("div", {
          ref: "bodyWrapper",
          class: vue.normalizeClass(_ctx.ns.e("body-wrapper"))
        }, [
          vue.createVNode(_component_el_scrollbar, {
            ref: "scrollBarRef",
            "view-style": _ctx.scrollbarViewStyle,
            "wrap-style": _ctx.scrollbarStyle,
            always: _ctx.scrollbarAlwaysOn,
            tabindex: _ctx.scrollbarTabindex
          }, {
            default: vue.withCtx(() => [
              vue.createElementVNode("table", {
                ref: "tableBody",
                class: vue.normalizeClass(_ctx.ns.e("body")),
                cellspacing: "0",
                cellpadding: "0",
                border: "0",
                style: vue.normalizeStyle({
                  width: _ctx.bodyWidth,
                  tableLayout: _ctx.tableLayout
                })
              }, [
                vue.createVNode(_component_hColgroup, {
                  columns: _ctx.store.states.columns.value,
                  "table-layout": _ctx.tableLayout
                }, null, 8, ["columns", "table-layout"]),
                _ctx.showHeader && _ctx.tableLayout === "auto" ? (vue.openBlock(), vue.createBlock(_component_table_header, {
                  key: 0,
                  ref: "tableHeaderRef",
                  class: vue.normalizeClass(_ctx.ns.e("body-header")),
                  border: _ctx.border,
                  "default-sort": _ctx.defaultSort,
                  store: _ctx.store,
                  "append-filter-panel-to": _ctx.appendFilterPanelTo,
                  onSetDragVisible: _ctx.setDragVisible
                }, null, 8, ["class", "border", "default-sort", "store", "append-filter-panel-to", "onSetDragVisible"])) : vue.createCommentVNode("v-if", true),
                vue.createVNode(_component_table_body, {
                  context: _ctx.context,
                  highlight: _ctx.highlightCurrentRow,
                  "row-class-name": _ctx.rowClassName,
                  "tooltip-effect": _ctx.tooltipEffect,
                  "tooltip-options": _ctx.tooltipOptions,
                  "row-style": _ctx.rowStyle,
                  store: _ctx.store,
                  stripe: _ctx.stripe
                }, null, 8, ["context", "highlight", "row-class-name", "tooltip-effect", "tooltip-options", "row-style", "store", "stripe"]),
                _ctx.showSummary && _ctx.tableLayout === "auto" ? (vue.openBlock(), vue.createBlock(_component_table_footer, {
                  key: 1,
                  class: vue.normalizeClass(_ctx.ns.e("body-footer")),
                  border: _ctx.border,
                  "default-sort": _ctx.defaultSort,
                  store: _ctx.store,
                  "sum-text": _ctx.computedSumText,
                  "summary-method": _ctx.summaryMethod
                }, null, 8, ["class", "border", "default-sort", "store", "sum-text", "summary-method"])) : vue.createCommentVNode("v-if", true)
              ], 6),
              _ctx.isEmpty ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                ref: "emptyBlock",
                style: vue.normalizeStyle(_ctx.emptyBlockStyle),
                class: vue.normalizeClass(_ctx.ns.e("empty-block"))
              }, [
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(_ctx.ns.e("empty-text"))
                }, [
                  vue.renderSlot(_ctx.$slots, "empty", {}, () => [
                    vue.createTextVNode(vue.toDisplayString(_ctx.computedEmptyText), 1)
                  ])
                ], 2)
              ], 6)) : vue.createCommentVNode("v-if", true),
              _ctx.$slots.append ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 1,
                ref: "appendWrapper",
                class: vue.normalizeClass(_ctx.ns.e("append-wrapper"))
              }, [
                vue.renderSlot(_ctx.$slots, "append")
              ], 2)) : vue.createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["view-style", "wrap-style", "always", "tabindex"])
        ], 2),
        _ctx.showSummary && _ctx.tableLayout === "fixed" ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          ref: "footerWrapper",
          class: vue.normalizeClass(_ctx.ns.e("footer-wrapper"))
        }, [
          vue.createElementVNode("table", {
            class: vue.normalizeClass(_ctx.ns.e("footer")),
            cellspacing: "0",
            cellpadding: "0",
            border: "0",
            style: vue.normalizeStyle(_ctx.tableBodyStyles)
          }, [
            vue.createVNode(_component_hColgroup, {
              columns: _ctx.store.states.columns.value,
              "table-layout": _ctx.tableLayout
            }, null, 8, ["columns", "table-layout"]),
            vue.createVNode(_component_table_footer, {
              border: _ctx.border,
              "default-sort": _ctx.defaultSort,
              store: _ctx.store,
              "sum-text": _ctx.computedSumText,
              "summary-method": _ctx.summaryMethod
            }, null, 8, ["border", "default-sort", "store", "sum-text", "summary-method"])
          ], 6)
        ], 2)), [
          [vue.vShow, !_ctx.isEmpty],
          [_directive_mousewheel, _ctx.handleHeaderFooterMousewheel]
        ]) : vue.createCommentVNode("v-if", true),
        _ctx.border || _ctx.isGroup ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 2,
          class: vue.normalizeClass(_ctx.ns.e("border-left-patch"))
        }, null, 2)) : vue.createCommentVNode("v-if", true)
      ], 6),
      vue.withDirectives(vue.createElementVNode("div", {
        ref: "resizeProxy",
        class: vue.normalizeClass(_ctx.ns.e("column-resize-proxy"))
      }, null, 2), [
        [vue.vShow, _ctx.resizeProxyVisible]
      ])
    ], 46, ["data-prefix", "onMouseleave"]);
  }
  var Table = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$3], ["__file", "table.vue"]]);
  const defaultClassNames = {
    selection: "table-column--selection",
    expand: "table__expand-column"
  };
  const cellStarts = {
    default: {
      order: ""
    },
    selection: {
      width: 48,
      minWidth: 48,
      realWidth: 48,
      order: ""
    },
    expand: {
      width: 48,
      minWidth: 48,
      realWidth: 48,
      order: ""
    },
    index: {
      width: 48,
      minWidth: 48,
      realWidth: 48,
      order: ""
    }
  };
  const getDefaultClassName = (type3) => {
    return defaultClassNames[type3] || "";
  };
  const cellForced = {
    selection: {
      renderHeader({ store: store2, column }) {
        function isDisabled() {
          return store2.states.data.value && store2.states.data.value.length === 0;
        }
        return vue.h(ElCheckbox, {
          disabled: isDisabled(),
          size: store2.states.tableSize.value,
          indeterminate: store2.states.selection.value.length > 0 && !store2.states.isAllSelected.value,
          "onUpdate:modelValue": store2.toggleAllSelection,
          modelValue: store2.states.isAllSelected.value,
          ariaLabel: column.label
        });
      },
      renderCell({
        row,
        column,
        store: store2,
        $index
      }) {
        return vue.h(ElCheckbox, {
          disabled: column.selectable ? !column.selectable.call(null, row, $index) : false,
          size: store2.states.tableSize.value,
          onChange: () => {
            store2.commit("rowSelectedChanged", row);
          },
          onClick: (event) => event.stopPropagation(),
          modelValue: store2.isSelected(row),
          ariaLabel: column.label
        });
      },
      sortable: false,
      resizable: false
    },
    index: {
      renderHeader({ column }) {
        return column.label || "#";
      },
      renderCell({
        column,
        $index
      }) {
        let i2 = $index + 1;
        const index = column.index;
        if (typeof index === "number") {
          i2 = $index + index;
        } else if (typeof index === "function") {
          i2 = index($index);
        }
        return vue.h("div", {}, [i2]);
      },
      sortable: false
    },
    expand: {
      renderHeader({ column }) {
        return column.label || "";
      },
      renderCell({
        row,
        store: store2,
        expanded
      }) {
        const { ns: ns2 } = store2;
        const classes = [ns2.e("expand-icon")];
        if (expanded) {
          classes.push(ns2.em("expand-icon", "expanded"));
        }
        const callback = function(e) {
          e.stopPropagation();
          store2.toggleRowExpansion(row);
        };
        return vue.h("div", {
          class: classes,
          onClick: callback
        }, {
          default: () => {
            return [
              vue.h(ElIcon, null, {
                default: () => {
                  return [vue.h(arrow_right_default)];
                }
              })
            ];
          }
        });
      },
      sortable: false,
      resizable: false
    }
  };
  function defaultRenderCell({
    row,
    column,
    $index
  }) {
    var _a2;
    const property2 = column.property;
    const value = property2 && getProp(row, property2).value;
    if (column && column.formatter) {
      return column.formatter(row, column, value, $index);
    }
    return ((_a2 = value == null ? void 0 : value.toString) == null ? void 0 : _a2.call(value)) || "";
  }
  function treeCellPrefix({
    row,
    treeNode,
    store: store2
  }, createPlaceholder = false) {
    const { ns: ns2 } = store2;
    if (!treeNode) {
      if (createPlaceholder) {
        return [
          vue.h("span", {
            class: ns2.e("placeholder")
          })
        ];
      }
      return null;
    }
    const ele = [];
    const callback = function(e) {
      e.stopPropagation();
      if (treeNode.loading) {
        return;
      }
      store2.loadOrToggle(row);
    };
    if (treeNode.indent) {
      ele.push(vue.h("span", {
        class: ns2.e("indent"),
        style: { "padding-left": `${treeNode.indent}px` }
      }));
    }
    if (typeof treeNode.expanded === "boolean" && !treeNode.noLazyChildren) {
      const expandClasses = [
        ns2.e("expand-icon"),
        treeNode.expanded ? ns2.em("expand-icon", "expanded") : ""
      ];
      let icon = arrow_right_default;
      if (treeNode.loading) {
        icon = loading_default;
      }
      ele.push(vue.h("div", {
        class: expandClasses,
        onClick: callback
      }, {
        default: () => {
          return [
            vue.h(ElIcon, { class: { [ns2.is("loading")]: treeNode.loading } }, {
              default: () => [vue.h(icon)]
            })
          ];
        }
      }));
    } else {
      ele.push(vue.h("span", {
        class: ns2.e("placeholder")
      }));
    }
    return ele;
  }
  function getAllAliases(props2, aliases) {
    return props2.reduce((prev, cur) => {
      prev[cur] = cur;
      return prev;
    }, aliases);
  }
  function useWatcher(owner, props_) {
    const instance = vue.getCurrentInstance();
    const registerComplexWatchers = () => {
      const props2 = ["fixed"];
      const aliases = {
        realWidth: "width",
        realMinWidth: "minWidth"
      };
      const allAliases = getAllAliases(props2, aliases);
      Object.keys(allAliases).forEach((key) => {
        const columnKey = aliases[key];
        if (shared.hasOwn(props_, columnKey)) {
          vue.watch(() => props_[columnKey], (newVal) => {
            let value = newVal;
            if (columnKey === "width" && key === "realWidth") {
              value = parseWidth(newVal);
            }
            if (columnKey === "minWidth" && key === "realMinWidth") {
              value = parseMinWidth(newVal);
            }
            instance.columnConfig.value[columnKey] = value;
            instance.columnConfig.value[key] = value;
            const updateColumns = columnKey === "fixed";
            owner.value.store.scheduleLayout(updateColumns);
          });
        }
      });
    };
    const registerNormalWatchers = () => {
      const props2 = [
        "label",
        "filters",
        "filterMultiple",
        "filteredValue",
        "sortable",
        "index",
        "formatter",
        "className",
        "labelClassName",
        "filterClassName",
        "showOverflowTooltip"
      ];
      const aliases = {
        property: "prop",
        align: "realAlign",
        headerAlign: "realHeaderAlign"
      };
      const allAliases = getAllAliases(props2, aliases);
      Object.keys(allAliases).forEach((key) => {
        const columnKey = aliases[key];
        if (shared.hasOwn(props_, columnKey)) {
          vue.watch(() => props_[columnKey], (newVal) => {
            instance.columnConfig.value[key] = newVal;
          });
        }
      });
    };
    return {
      registerComplexWatchers,
      registerNormalWatchers
    };
  }
  function useRender(props2, slots, owner) {
    const instance = vue.getCurrentInstance();
    const columnId = vue.ref("");
    const isSubColumn = vue.ref(false);
    const realAlign = vue.ref();
    const realHeaderAlign = vue.ref();
    const ns2 = useNamespace("table");
    vue.watchEffect(() => {
      realAlign.value = props2.align ? `is-${props2.align}` : null;
      realAlign.value;
    });
    vue.watchEffect(() => {
      realHeaderAlign.value = props2.headerAlign ? `is-${props2.headerAlign}` : realAlign.value;
      realHeaderAlign.value;
    });
    const columnOrTableParent = vue.computed(() => {
      let parent2 = instance.vnode.vParent || instance.parent;
      while (parent2 && !parent2.tableId && !parent2.columnId) {
        parent2 = parent2.vnode.vParent || parent2.parent;
      }
      return parent2;
    });
    const hasTreeColumn = vue.computed(() => {
      const { store: store2 } = instance.parent;
      if (!store2)
        return false;
      const { treeData } = store2.states;
      const treeDataValue = treeData.value;
      return treeDataValue && Object.keys(treeDataValue).length > 0;
    });
    const realWidth = vue.ref(parseWidth(props2.width));
    const realMinWidth = vue.ref(parseMinWidth(props2.minWidth));
    const setColumnWidth = (column) => {
      if (realWidth.value)
        column.width = realWidth.value;
      if (realMinWidth.value) {
        column.minWidth = realMinWidth.value;
      }
      if (!realWidth.value && realMinWidth.value) {
        column.width = void 0;
      }
      if (!column.minWidth) {
        column.minWidth = 80;
      }
      column.realWidth = Number(column.width === void 0 ? column.minWidth : column.width);
      return column;
    };
    const setColumnForcedProps = (column) => {
      const type3 = column.type;
      const source = cellForced[type3] || {};
      Object.keys(source).forEach((prop) => {
        const value = source[prop];
        if (prop !== "className" && value !== void 0) {
          column[prop] = value;
        }
      });
      const className = getDefaultClassName(type3);
      if (className) {
        const forceClass = `${vue.unref(ns2.namespace)}-${className}`;
        column.className = column.className ? `${column.className} ${forceClass}` : forceClass;
      }
      return column;
    };
    const checkSubColumn = (children) => {
      if (Array.isArray(children)) {
        children.forEach((child) => check(child));
      } else {
        check(children);
      }
      function check(item) {
        var _a2;
        if (((_a2 = item == null ? void 0 : item.type) == null ? void 0 : _a2.name) === "ElTableColumn") {
          item.vParent = instance;
        }
      }
    };
    const setColumnRenders = (column) => {
      if (props2.renderHeader) {
        debugWarn("TableColumn", "Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.");
      } else if (column.type !== "selection") {
        column.renderHeader = (scope) => {
          instance.columnConfig.value["label"];
          return vue.renderSlot(slots, "header", scope, () => [column.label]);
        };
      }
      if (slots["filter-icon"]) {
        column.renderFilterIcon = (scope) => {
          return vue.renderSlot(slots, "filter-icon", scope);
        };
      }
      let originRenderCell = column.renderCell;
      if (column.type === "expand") {
        column.renderCell = (data) => vue.h("div", {
          class: "cell"
        }, [originRenderCell(data)]);
        owner.value.renderExpanded = (data) => {
          return slots.default ? slots.default(data) : slots.default;
        };
      } else {
        originRenderCell = originRenderCell || defaultRenderCell;
        column.renderCell = (data) => {
          let children = null;
          if (slots.default) {
            const vnodes = slots.default(data);
            children = vnodes.some((v2) => v2.type !== vue.Comment) ? vnodes : originRenderCell(data);
          } else {
            children = originRenderCell(data);
          }
          const { columns: columns2 } = owner.value.store.states;
          const firstUserColumnIndex = columns2.value.findIndex((item) => item.type === "default");
          const shouldCreatePlaceholder = hasTreeColumn.value && data.cellIndex === firstUserColumnIndex;
          const prefix = treeCellPrefix(data, shouldCreatePlaceholder);
          const props22 = {
            class: "cell",
            style: {}
          };
          if (column.showOverflowTooltip) {
            props22.class = `${props22.class} ${vue.unref(ns2.namespace)}-tooltip`;
            props22.style = {
              width: `${(data.column.realWidth || Number(data.column.width)) - 1}px`
            };
          }
          checkSubColumn(children);
          return vue.h("div", props22, [prefix, children]);
        };
      }
      return column;
    };
    const getPropsData = (...propsKey) => {
      return propsKey.reduce((prev, cur) => {
        if (Array.isArray(cur)) {
          cur.forEach((key) => {
            prev[key] = props2[key];
          });
        }
        return prev;
      }, {});
    };
    const getColumnElIndex = (children, child) => {
      return Array.prototype.indexOf.call(children, child);
    };
    const updateColumnOrder = () => {
      owner.value.store.commit("updateColumnOrder", instance.columnConfig.value);
    };
    return {
      columnId,
      realAlign,
      isSubColumn,
      realHeaderAlign,
      columnOrTableParent,
      setColumnWidth,
      setColumnForcedProps,
      setColumnRenders,
      getPropsData,
      getColumnElIndex,
      updateColumnOrder
    };
  }
  var defaultProps = {
    type: {
      type: String,
      default: "default"
    },
    label: String,
    className: String,
    labelClassName: String,
    property: String,
    prop: String,
    width: {
      type: [String, Number],
      default: ""
    },
    minWidth: {
      type: [String, Number],
      default: ""
    },
    renderHeader: Function,
    sortable: {
      type: [Boolean, String],
      default: false
    },
    sortMethod: Function,
    sortBy: [String, Function, Array],
    resizable: {
      type: Boolean,
      default: true
    },
    columnKey: String,
    align: String,
    headerAlign: String,
    showOverflowTooltip: {
      type: [Boolean, Object],
      default: void 0
    },
    fixed: [Boolean, String],
    formatter: Function,
    selectable: Function,
    reserveSelection: Boolean,
    filterMethod: Function,
    filteredValue: Array,
    filters: Array,
    filterPlacement: String,
    filterMultiple: {
      type: Boolean,
      default: true
    },
    filterClassName: String,
    index: [Number, Function],
    sortOrders: {
      type: Array,
      default: () => {
        return ["ascending", "descending", null];
      },
      validator: (val) => {
        return val.every((order2) => ["ascending", "descending", null].includes(order2));
      }
    }
  };
  let columnIdSeed = 1;
  var ElTableColumn$1 = vue.defineComponent({
    name: "ElTableColumn",
    components: {
      ElCheckbox
    },
    props: defaultProps,
    setup(props2, { slots }) {
      const instance = vue.getCurrentInstance();
      const columnConfig = vue.ref({});
      const owner = vue.computed(() => {
        let parent22 = instance.parent;
        while (parent22 && !parent22.tableId) {
          parent22 = parent22.parent;
        }
        return parent22;
      });
      const { registerNormalWatchers, registerComplexWatchers } = useWatcher(owner, props2);
      const {
        columnId,
        isSubColumn,
        realHeaderAlign,
        columnOrTableParent,
        setColumnWidth,
        setColumnForcedProps,
        setColumnRenders,
        getPropsData,
        getColumnElIndex,
        realAlign,
        updateColumnOrder
      } = useRender(props2, slots, owner);
      const parent2 = columnOrTableParent.value;
      columnId.value = `${parent2.tableId || parent2.columnId}_column_${columnIdSeed++}`;
      vue.onBeforeMount(() => {
        isSubColumn.value = owner.value !== parent2;
        const type3 = props2.type || "default";
        const sortable = props2.sortable === "" ? true : props2.sortable;
        const showOverflowTooltip = isUndefined(props2.showOverflowTooltip) ? parent2.props.showOverflowTooltip : props2.showOverflowTooltip;
        const defaults2 = {
          ...cellStarts[type3],
          id: columnId.value,
          type: type3,
          property: props2.prop || props2.property,
          align: realAlign,
          headerAlign: realHeaderAlign,
          showOverflowTooltip,
          filterable: props2.filters || props2.filterMethod,
          filteredValue: [],
          filterPlacement: "",
          filterClassName: "",
          isColumnGroup: false,
          isSubColumn: false,
          filterOpened: false,
          sortable,
          index: props2.index,
          rawColumnKey: instance.vnode.key
        };
        const basicProps = [
          "columnKey",
          "label",
          "className",
          "labelClassName",
          "type",
          "renderHeader",
          "formatter",
          "fixed",
          "resizable"
        ];
        const sortProps = ["sortMethod", "sortBy", "sortOrders"];
        const selectProps = ["selectable", "reserveSelection"];
        const filterProps = [
          "filterMethod",
          "filters",
          "filterMultiple",
          "filterOpened",
          "filteredValue",
          "filterPlacement",
          "filterClassName"
        ];
        let column = getPropsData(basicProps, sortProps, selectProps, filterProps);
        column = mergeOptions(defaults2, column);
        const chains = compose(setColumnRenders, setColumnWidth, setColumnForcedProps);
        column = chains(column);
        columnConfig.value = column;
        registerNormalWatchers();
        registerComplexWatchers();
      });
      vue.onMounted(() => {
        var _a2;
        const parent22 = columnOrTableParent.value;
        const children = isSubColumn.value ? parent22.vnode.el.children : (_a2 = parent22.refs.hiddenColumns) == null ? void 0 : _a2.children;
        const getColumnIndex = () => getColumnElIndex(children || [], instance.vnode.el);
        columnConfig.value.getColumnIndex = getColumnIndex;
        const columnIndex = getColumnIndex();
        columnIndex > -1 && owner.value.store.commit("insertColumn", columnConfig.value, isSubColumn.value ? parent22.columnConfig.value : null, updateColumnOrder);
      });
      vue.onBeforeUnmount(() => {
        const getColumnIndex = columnConfig.value.getColumnIndex;
        const columnIndex = getColumnIndex ? getColumnIndex() : -1;
        columnIndex > -1 && owner.value.store.commit("removeColumn", columnConfig.value, isSubColumn.value ? parent2.columnConfig.value : null, updateColumnOrder);
      });
      instance.columnId = columnId.value;
      instance.columnConfig = columnConfig;
      return;
    },
    render() {
      var _a2, _b, _c;
      try {
        const renderDefault = (_b = (_a2 = this.$slots).default) == null ? void 0 : _b.call(_a2, {
          row: {},
          column: {},
          $index: -1
        });
        const children = [];
        if (Array.isArray(renderDefault)) {
          for (const childNode of renderDefault) {
            if (((_c = childNode.type) == null ? void 0 : _c.name) === "ElTableColumn" || childNode.shapeFlag & 2) {
              children.push(childNode);
            } else if (childNode.type === vue.Fragment && Array.isArray(childNode.children)) {
              childNode.children.forEach((vnode2) => {
                if ((vnode2 == null ? void 0 : vnode2.patchFlag) !== 1024 && !shared.isString(vnode2 == null ? void 0 : vnode2.children)) {
                  children.push(vnode2);
                }
              });
            }
          }
        }
        const vnode = vue.h("div", children);
        return vnode;
      } catch (e) {
        return vue.h("div", []);
      }
    }
  });
  const ElTable = withInstall(Table, {
    TableColumn: ElTableColumn$1
  });
  const ElTableColumn = withNoopInstall(ElTableColumn$1);
  var SortOrder = /* @__PURE__ */ ((SortOrder2) => {
    SortOrder2["ASC"] = "asc";
    SortOrder2["DESC"] = "desc";
    return SortOrder2;
  })(SortOrder || {});
  var Alignment = /* @__PURE__ */ ((Alignment2) => {
    Alignment2["CENTER"] = "center";
    Alignment2["RIGHT"] = "right";
    return Alignment2;
  })(Alignment || {});
  var FixedDir = /* @__PURE__ */ ((FixedDir2) => {
    FixedDir2["LEFT"] = "left";
    FixedDir2["RIGHT"] = "right";
    return FixedDir2;
  })(FixedDir || {});
  const oppositeOrderMap = {
    [
      "asc"
      /* ASC */
    ]: "desc",
    [
      "desc"
      /* DESC */
    ]: "asc"
    /* ASC */
  };
  const placeholderSign = Symbol("placeholder");
  const calcColumnStyle = (column, fixedColumn, fixed) => {
    var _a2;
    const flex = {
      flexGrow: 0,
      flexShrink: 0,
      ...fixed ? {} : {
        flexGrow: column.flexGrow || 0,
        flexShrink: column.flexShrink || 1
      }
    };
    if (!fixed) {
      flex.flexShrink = 1;
    }
    const style = {
      ...(_a2 = column.style) != null ? _a2 : {},
      ...flex,
      flexBasis: "auto",
      width: column.width
    };
    if (!fixedColumn) {
      if (column.maxWidth)
        style.maxWidth = column.maxWidth;
      if (column.minWidth)
        style.minWidth = column.minWidth;
    }
    return style;
  };
  function useColumns(props2, columns2, fixed) {
    const _columns = vue.computed(() => vue.unref(columns2).map((column, index) => {
      var _a2, _b;
      return {
        ...column,
        key: (_b = (_a2 = column.key) != null ? _a2 : column.dataKey) != null ? _b : index
      };
    }));
    const visibleColumns = vue.computed(() => {
      return vue.unref(_columns).filter((column) => !column.hidden);
    });
    const fixedColumnsOnLeft = vue.computed(() => vue.unref(visibleColumns).filter((column) => column.fixed === "left" || column.fixed === true));
    const fixedColumnsOnRight = vue.computed(() => vue.unref(visibleColumns).filter((column) => column.fixed === "right"));
    const normalColumns = vue.computed(() => vue.unref(visibleColumns).filter((column) => !column.fixed));
    const mainColumns = vue.computed(() => {
      const ret = [];
      vue.unref(fixedColumnsOnLeft).forEach((column) => {
        ret.push({
          ...column,
          placeholderSign
        });
      });
      vue.unref(normalColumns).forEach((column) => {
        ret.push(column);
      });
      vue.unref(fixedColumnsOnRight).forEach((column) => {
        ret.push({
          ...column,
          placeholderSign
        });
      });
      return ret;
    });
    const hasFixedColumns = vue.computed(() => {
      return vue.unref(fixedColumnsOnLeft).length || vue.unref(fixedColumnsOnRight).length;
    });
    const columnsStyles = vue.computed(() => {
      return vue.unref(_columns).reduce((style, column) => {
        style[column.key] = calcColumnStyle(column, vue.unref(fixed), props2.fixed);
        return style;
      }, {});
    });
    const columnsTotalWidth = vue.computed(() => {
      return vue.unref(visibleColumns).reduce((width, column) => width + column.width, 0);
    });
    const getColumn = (key) => {
      return vue.unref(_columns).find((column) => column.key === key);
    };
    const getColumnStyle = (key) => {
      return vue.unref(columnsStyles)[key];
    };
    const updateColumnWidth = (column, width) => {
      column.width = width;
    };
    function onColumnSorted(e) {
      var _a2;
      const { key } = e.currentTarget.dataset;
      if (!key)
        return;
      const { sortState, sortBy } = props2;
      let order2 = SortOrder.ASC;
      if (shared.isObject(sortState)) {
        order2 = oppositeOrderMap[sortState[key]];
      } else {
        order2 = oppositeOrderMap[sortBy.order];
      }
      (_a2 = props2.onColumnSort) == null ? void 0 : _a2.call(props2, { column: getColumn(key), key, order: order2 });
    }
    return {
      columns: _columns,
      columnsStyles,
      columnsTotalWidth,
      fixedColumnsOnLeft,
      fixedColumnsOnRight,
      hasFixedColumns,
      mainColumns,
      normalColumns,
      visibleColumns,
      getColumn,
      getColumnStyle,
      updateColumnWidth,
      onColumnSorted
    };
  }
  const useScrollbar = (props2, {
    mainTableRef,
    leftTableRef,
    rightTableRef,
    onMaybeEndReached
  }) => {
    const scrollPos = vue.ref({ scrollLeft: 0, scrollTop: 0 });
    function doScroll(params) {
      var _a2, _b, _c;
      const { scrollTop } = params;
      (_a2 = mainTableRef.value) == null ? void 0 : _a2.scrollTo(params);
      (_b = leftTableRef.value) == null ? void 0 : _b.scrollToTop(scrollTop);
      (_c = rightTableRef.value) == null ? void 0 : _c.scrollToTop(scrollTop);
    }
    function scrollTo(params) {
      scrollPos.value = params;
      doScroll(params);
    }
    function scrollToTop(scrollTop) {
      scrollPos.value.scrollTop = scrollTop;
      doScroll(vue.unref(scrollPos));
    }
    function scrollToLeft(scrollLeft) {
      var _a2, _b;
      scrollPos.value.scrollLeft = scrollLeft;
      (_b = (_a2 = mainTableRef.value) == null ? void 0 : _a2.scrollTo) == null ? void 0 : _b.call(_a2, vue.unref(scrollPos));
    }
    function onScroll(params) {
      var _a2;
      scrollTo(params);
      (_a2 = props2.onScroll) == null ? void 0 : _a2.call(props2, params);
    }
    function onVerticalScroll({ scrollTop }) {
      const { scrollTop: currentScrollTop } = vue.unref(scrollPos);
      if (scrollTop !== currentScrollTop)
        scrollToTop(scrollTop);
    }
    function scrollToRow(row, strategy = "auto") {
      var _a2;
      (_a2 = mainTableRef.value) == null ? void 0 : _a2.scrollToRow(row, strategy);
    }
    vue.watch(() => vue.unref(scrollPos).scrollTop, (cur, prev) => {
      if (cur > prev)
        onMaybeEndReached();
    });
    return {
      scrollPos,
      scrollTo,
      scrollToLeft,
      scrollToTop,
      scrollToRow,
      onScroll,
      onVerticalScroll
    };
  };
  const useRow = (props2, {
    mainTableRef,
    leftTableRef,
    rightTableRef,
    tableInstance,
    ns: ns2,
    isScrolling
  }) => {
    const vm = vue.getCurrentInstance();
    const { emit } = vm;
    const isResetting = vue.shallowRef(false);
    const expandedRowKeys = vue.ref(props2.defaultExpandedRowKeys || []);
    const lastRenderedRowIndex = vue.ref(-1);
    const resetIndex = vue.shallowRef(null);
    const rowHeights = vue.ref({});
    const pendingRowHeights = vue.ref({});
    const leftTableHeights = vue.shallowRef({});
    const mainTableHeights = vue.shallowRef({});
    const rightTableHeights = vue.shallowRef({});
    const isDynamic = vue.computed(() => isNumber$2(props2.estimatedRowHeight));
    function onRowsRendered(params) {
      var _a2;
      (_a2 = props2.onRowsRendered) == null ? void 0 : _a2.call(props2, params);
      if (params.rowCacheEnd > vue.unref(lastRenderedRowIndex)) {
        lastRenderedRowIndex.value = params.rowCacheEnd;
      }
    }
    function onRowHovered({ hovered, rowKey: rowKey2 }) {
      if (isScrolling.value) {
        return;
      }
      const tableRoot = tableInstance.vnode.el;
      const rows = tableRoot.querySelectorAll(`[rowkey="${String(rowKey2)}"]`);
      rows.forEach((row) => {
        if (hovered) {
          row.classList.add(ns2.is("hovered"));
        } else {
          row.classList.remove(ns2.is("hovered"));
        }
      });
    }
    function onRowExpanded({
      expanded,
      rowData,
      rowIndex,
      rowKey: rowKey2
    }) {
      var _a2, _b;
      const _expandedRowKeys = [...vue.unref(expandedRowKeys)];
      const currentKeyIndex = _expandedRowKeys.indexOf(rowKey2);
      if (expanded) {
        if (currentKeyIndex === -1)
          _expandedRowKeys.push(rowKey2);
      } else {
        if (currentKeyIndex > -1)
          _expandedRowKeys.splice(currentKeyIndex, 1);
      }
      expandedRowKeys.value = _expandedRowKeys;
      emit("update:expandedRowKeys", _expandedRowKeys);
      (_a2 = props2.onRowExpand) == null ? void 0 : _a2.call(props2, {
        expanded,
        rowData,
        rowIndex,
        rowKey: rowKey2
      });
      (_b = props2.onExpandedRowsChange) == null ? void 0 : _b.call(props2, _expandedRowKeys);
    }
    const flushingRowHeights = debounce(() => {
      var _a2, _b, _c, _d;
      isResetting.value = true;
      rowHeights.value = { ...vue.unref(rowHeights), ...vue.unref(pendingRowHeights) };
      resetAfterIndex(vue.unref(resetIndex), false);
      pendingRowHeights.value = {};
      resetIndex.value = null;
      (_a2 = mainTableRef.value) == null ? void 0 : _a2.forceUpdate();
      (_b = leftTableRef.value) == null ? void 0 : _b.forceUpdate();
      (_c = rightTableRef.value) == null ? void 0 : _c.forceUpdate();
      (_d = vm.proxy) == null ? void 0 : _d.$forceUpdate();
      isResetting.value = false;
    }, 0);
    function resetAfterIndex(index, forceUpdate = false) {
      if (!vue.unref(isDynamic))
        return;
      [mainTableRef, leftTableRef, rightTableRef].forEach((tableRef) => {
        const table = vue.unref(tableRef);
        if (table)
          table.resetAfterRowIndex(index, forceUpdate);
      });
    }
    function resetHeights(rowKey2, height, rowIdx) {
      const resetIdx = vue.unref(resetIndex);
      if (resetIdx === null) {
        resetIndex.value = rowIdx;
      } else {
        if (resetIdx > rowIdx) {
          resetIndex.value = rowIdx;
        }
      }
      pendingRowHeights.value[rowKey2] = height;
    }
    function onRowHeightChange({ rowKey: rowKey2, height, rowIndex }, fixedDir) {
      if (!fixedDir) {
        mainTableHeights.value[rowKey2] = height;
      } else {
        if (fixedDir === FixedDir.RIGHT) {
          rightTableHeights.value[rowKey2] = height;
        } else {
          leftTableHeights.value[rowKey2] = height;
        }
      }
      const maximumHeight = Math.max(...[leftTableHeights, rightTableHeights, mainTableHeights].map((records) => records.value[rowKey2] || 0));
      if (vue.unref(rowHeights)[rowKey2] !== maximumHeight) {
        resetHeights(rowKey2, maximumHeight, rowIndex);
        flushingRowHeights();
      }
    }
    return {
      expandedRowKeys,
      lastRenderedRowIndex,
      isDynamic,
      isResetting,
      rowHeights,
      resetAfterIndex,
      onRowExpanded,
      onRowHovered,
      onRowsRendered,
      onRowHeightChange
    };
  };
  const useData = (props2, { expandedRowKeys, lastRenderedRowIndex, resetAfterIndex }) => {
    const depthMap = vue.ref({});
    const flattenedData = vue.computed(() => {
      const depths = {};
      const { data: data2, rowKey: rowKey2 } = props2;
      const _expandedRowKeys = vue.unref(expandedRowKeys);
      if (!_expandedRowKeys || !_expandedRowKeys.length)
        return data2;
      const array = [];
      const keysSet = /* @__PURE__ */ new Set();
      _expandedRowKeys.forEach((x2) => keysSet.add(x2));
      let copy = data2.slice();
      copy.forEach((x2) => depths[x2[rowKey2]] = 0);
      while (copy.length > 0) {
        const item = copy.shift();
        array.push(item);
        if (keysSet.has(item[rowKey2]) && Array.isArray(item.children) && item.children.length > 0) {
          copy = [...item.children, ...copy];
          item.children.forEach((child) => depths[child[rowKey2]] = depths[item[rowKey2]] + 1);
        }
      }
      depthMap.value = depths;
      return array;
    });
    const data = vue.computed(() => {
      const { data: data2, expandColumnKey: expandColumnKey2 } = props2;
      return expandColumnKey2 ? vue.unref(flattenedData) : data2;
    });
    vue.watch(data, (val, prev) => {
      if (val !== prev) {
        lastRenderedRowIndex.value = -1;
        resetAfterIndex(0, true);
      }
    });
    return {
      data,
      depthMap
    };
  };
  const sumReducer = (sum2, num) => sum2 + num;
  const sum = (listLike) => {
    return shared.isArray(listLike) ? listLike.reduce(sumReducer, 0) : listLike;
  };
  const tryCall = (fLike, params, defaultRet = {}) => {
    return shared.isFunction(fLike) ? fLike(params) : fLike != null ? fLike : defaultRet;
  };
  const enforceUnit = (style) => {
    ["width", "maxWidth", "minWidth", "height"].forEach((key) => {
      style[key] = addUnit(style[key]);
    });
    return style;
  };
  const componentToSlot = (ComponentLike) => vue.isVNode(ComponentLike) ? (props2) => vue.h(ComponentLike, props2) : ComponentLike;
  const useStyles = (props2, {
    columnsTotalWidth,
    data,
    fixedColumnsOnLeft,
    fixedColumnsOnRight
  }) => {
    const bodyWidth = vue.computed(() => {
      const { fixed, width, vScrollbarSize } = props2;
      const ret = width - vScrollbarSize;
      return fixed ? Math.max(Math.round(vue.unref(columnsTotalWidth)), ret) : ret;
    });
    const headerWidth = vue.computed(() => vue.unref(bodyWidth) + props2.vScrollbarSize);
    const mainTableHeight = vue.computed(() => {
      const { height = 0, maxHeight = 0, footerHeight: footerHeight2, hScrollbarSize } = props2;
      if (maxHeight > 0) {
        const _fixedRowsHeight = vue.unref(fixedRowsHeight);
        const _rowsHeight = vue.unref(rowsHeight);
        const _headerHeight = vue.unref(headerHeight);
        const total2 = _headerHeight + _fixedRowsHeight + _rowsHeight + hScrollbarSize;
        return Math.min(total2, maxHeight - footerHeight2);
      }
      return height - footerHeight2;
    });
    const rowsHeight = vue.computed(() => {
      const { rowHeight, estimatedRowHeight } = props2;
      const _data = vue.unref(data);
      if (isNumber$2(estimatedRowHeight)) {
        return _data.length * estimatedRowHeight;
      }
      return _data.length * rowHeight;
    });
    const fixedTableHeight = vue.computed(() => {
      const { maxHeight } = props2;
      const tableHeight = vue.unref(mainTableHeight);
      if (isNumber$2(maxHeight) && maxHeight > 0)
        return tableHeight;
      const totalHeight = vue.unref(rowsHeight) + vue.unref(headerHeight) + vue.unref(fixedRowsHeight);
      return Math.min(tableHeight, totalHeight);
    });
    const mapColumn = (column) => column.width;
    const leftTableWidth = vue.computed(() => sum(vue.unref(fixedColumnsOnLeft).map(mapColumn)));
    const rightTableWidth = vue.computed(() => sum(vue.unref(fixedColumnsOnRight).map(mapColumn)));
    const headerHeight = vue.computed(() => sum(props2.headerHeight));
    const fixedRowsHeight = vue.computed(() => {
      var _a2;
      return (((_a2 = props2.fixedData) == null ? void 0 : _a2.length) || 0) * props2.rowHeight;
    });
    const windowHeight = vue.computed(() => {
      return vue.unref(mainTableHeight) - vue.unref(headerHeight) - vue.unref(fixedRowsHeight);
    });
    const rootStyle = vue.computed(() => {
      const { style = {}, height, width } = props2;
      return enforceUnit({
        ...style,
        height,
        width
      });
    });
    const footerHeight = vue.computed(() => enforceUnit({ height: props2.footerHeight }));
    const emptyStyle = vue.computed(() => ({
      top: addUnit(vue.unref(headerHeight)),
      bottom: addUnit(props2.footerHeight),
      width: addUnit(props2.width)
    }));
    return {
      bodyWidth,
      fixedTableHeight,
      mainTableHeight,
      leftTableWidth,
      rightTableWidth,
      headerWidth,
      rowsHeight,
      windowHeight,
      footerHeight,
      emptyStyle,
      rootStyle,
      headerHeight
    };
  };
  const useAutoResize = (props2) => {
    const sizer = vue.ref();
    const width$ = vue.ref(0);
    const height$ = vue.ref(0);
    let resizerStopper;
    vue.onMounted(() => {
      resizerStopper = useResizeObserver(sizer, ([entry]) => {
        const { width, height } = entry.contentRect;
        const { paddingLeft, paddingRight, paddingTop, paddingBottom } = getComputedStyle(entry.target);
        const left2 = Number.parseInt(paddingLeft) || 0;
        const right2 = Number.parseInt(paddingRight) || 0;
        const top = Number.parseInt(paddingTop) || 0;
        const bottom = Number.parseInt(paddingBottom) || 0;
        width$.value = width - left2 - right2;
        height$.value = height - top - bottom;
      }).stop;
    });
    vue.onBeforeUnmount(() => {
      resizerStopper == null ? void 0 : resizerStopper();
    });
    vue.watch([width$, height$], ([width, height]) => {
      var _a2;
      (_a2 = props2.onResize) == null ? void 0 : _a2.call(props2, {
        width,
        height
      });
    });
    return {
      sizer,
      width: width$,
      height: height$
    };
  };
  function useTable(props2) {
    const mainTableRef = vue.ref();
    const leftTableRef = vue.ref();
    const rightTableRef = vue.ref();
    const {
      columns: columns2,
      columnsStyles,
      columnsTotalWidth,
      fixedColumnsOnLeft,
      fixedColumnsOnRight,
      hasFixedColumns,
      mainColumns,
      onColumnSorted
    } = useColumns(props2, vue.toRef(props2, "columns"), vue.toRef(props2, "fixed"));
    const {
      scrollTo,
      scrollToLeft,
      scrollToTop,
      scrollToRow,
      onScroll,
      onVerticalScroll,
      scrollPos
    } = useScrollbar(props2, {
      mainTableRef,
      leftTableRef,
      rightTableRef,
      onMaybeEndReached
    });
    const ns2 = useNamespace("table-v2");
    const instance = vue.getCurrentInstance();
    const isScrolling = vue.shallowRef(false);
    const {
      expandedRowKeys,
      lastRenderedRowIndex,
      isDynamic,
      isResetting,
      rowHeights,
      resetAfterIndex,
      onRowExpanded,
      onRowHeightChange,
      onRowHovered,
      onRowsRendered
    } = useRow(props2, {
      mainTableRef,
      leftTableRef,
      rightTableRef,
      tableInstance: instance,
      ns: ns2,
      isScrolling
    });
    const { data, depthMap } = useData(props2, {
      expandedRowKeys,
      lastRenderedRowIndex,
      resetAfterIndex
    });
    const {
      bodyWidth,
      fixedTableHeight,
      mainTableHeight,
      leftTableWidth,
      rightTableWidth,
      headerWidth,
      rowsHeight,
      windowHeight,
      footerHeight,
      emptyStyle,
      rootStyle,
      headerHeight
    } = useStyles(props2, {
      columnsTotalWidth,
      data,
      fixedColumnsOnLeft,
      fixedColumnsOnRight
    });
    const containerRef = vue.ref();
    const showEmpty = vue.computed(() => {
      const noData = vue.unref(data).length === 0;
      return shared.isArray(props2.fixedData) ? props2.fixedData.length === 0 && noData : noData;
    });
    function getRowHeight(rowIndex) {
      const { estimatedRowHeight, rowHeight, rowKey: rowKey2 } = props2;
      if (!estimatedRowHeight)
        return rowHeight;
      return vue.unref(rowHeights)[vue.unref(data)[rowIndex][rowKey2]] || estimatedRowHeight;
    }
    function onMaybeEndReached() {
      const { onEndReached } = props2;
      if (!onEndReached)
        return;
      const { scrollTop } = vue.unref(scrollPos);
      const _totalHeight = vue.unref(rowsHeight);
      const clientHeight = vue.unref(windowHeight);
      const heightUntilEnd = _totalHeight - (scrollTop + clientHeight) + props2.hScrollbarSize;
      if (vue.unref(lastRenderedRowIndex) >= 0 && _totalHeight === scrollTop + vue.unref(mainTableHeight) - vue.unref(headerHeight)) {
        onEndReached(heightUntilEnd);
      }
    }
    vue.watch(() => props2.expandedRowKeys, (val) => expandedRowKeys.value = val, {
      deep: true
    });
    return {
      columns: columns2,
      containerRef,
      mainTableRef,
      leftTableRef,
      rightTableRef,
      isDynamic,
      isResetting,
      isScrolling,
      hasFixedColumns,
      columnsStyles,
      columnsTotalWidth,
      data,
      expandedRowKeys,
      depthMap,
      fixedColumnsOnLeft,
      fixedColumnsOnRight,
      mainColumns,
      bodyWidth,
      emptyStyle,
      rootStyle,
      headerWidth,
      footerHeight,
      mainTableHeight,
      fixedTableHeight,
      leftTableWidth,
      rightTableWidth,
      showEmpty,
      getRowHeight,
      onColumnSorted,
      onRowHovered,
      onRowExpanded,
      onRowsRendered,
      onRowHeightChange,
      scrollTo,
      scrollToLeft,
      scrollToTop,
      scrollToRow,
      onScroll,
      onVerticalScroll
    };
  }
  const TableV2InjectionKey = Symbol("tableV2");
  const classType = String;
  const columns = {
    type: definePropType(Array),
    required: true
  };
  const fixedDataType = {
    type: definePropType(Array)
  };
  const dataType = {
    ...fixedDataType,
    required: true
  };
  const expandColumnKey = String;
  const expandKeys = {
    type: definePropType(Array),
    default: () => mutable([])
  };
  const requiredNumber = {
    type: Number,
    required: true
  };
  const rowKey = {
    type: definePropType([String, Number, Symbol]),
    default: "id"
  };
  const styleType = {
    type: definePropType(Object)
  };
  const tableV2RowProps = buildProps({
    class: String,
    columns,
    columnsStyles: {
      type: definePropType(Object),
      required: true
    },
    depth: Number,
    expandColumnKey,
    estimatedRowHeight: {
      ...virtualizedGridProps.estimatedRowHeight,
      default: void 0
    },
    isScrolling: Boolean,
    onRowExpand: {
      type: definePropType(Function)
    },
    onRowHover: {
      type: definePropType(Function)
    },
    onRowHeightChange: {
      type: definePropType(Function)
    },
    rowData: {
      type: definePropType(Object),
      required: true
    },
    rowEventHandlers: {
      type: definePropType(Object)
    },
    rowIndex: {
      type: Number,
      required: true
    },
    rowKey,
    style: {
      type: definePropType(Object)
    }
  });
  const requiredNumberType = {
    type: Number,
    required: true
  };
  const tableV2HeaderProps = buildProps({
    class: String,
    columns,
    fixedHeaderData: {
      type: definePropType(Array)
    },
    headerData: {
      type: definePropType(Array),
      required: true
    },
    headerHeight: {
      type: definePropType([Number, Array]),
      default: 50
    },
    rowWidth: requiredNumberType,
    rowHeight: {
      type: Number,
      default: 50
    },
    height: requiredNumberType,
    width: requiredNumberType
  });
  const tableV2GridProps = buildProps({
    columns,
    data: dataType,
    fixedData: fixedDataType,
    estimatedRowHeight: tableV2RowProps.estimatedRowHeight,
    width: requiredNumber,
    height: requiredNumber,
    headerWidth: requiredNumber,
    headerHeight: tableV2HeaderProps.headerHeight,
    bodyWidth: requiredNumber,
    rowHeight: requiredNumber,
    cache: virtualizedListProps.cache,
    useIsScrolling: Boolean,
    scrollbarAlwaysOn: virtualizedGridProps.scrollbarAlwaysOn,
    scrollbarStartGap: virtualizedGridProps.scrollbarStartGap,
    scrollbarEndGap: virtualizedGridProps.scrollbarEndGap,
    class: classType,
    style: styleType,
    containerStyle: styleType,
    getRowHeight: {
      type: definePropType(Function),
      required: true
    },
    rowKey: tableV2RowProps.rowKey,
    onRowsRendered: {
      type: definePropType(Function)
    },
    onScroll: {
      type: definePropType(Function)
    }
  });
  const tableV2Props = buildProps({
    cache: tableV2GridProps.cache,
    estimatedRowHeight: tableV2RowProps.estimatedRowHeight,
    rowKey,
    headerClass: {
      type: definePropType([
        String,
        Function
      ])
    },
    headerProps: {
      type: definePropType([
        Object,
        Function
      ])
    },
    headerCellProps: {
      type: definePropType([
        Object,
        Function
      ])
    },
    headerHeight: tableV2HeaderProps.headerHeight,
    footerHeight: {
      type: Number,
      default: 0
    },
    rowClass: {
      type: definePropType([String, Function])
    },
    rowProps: {
      type: definePropType([Object, Function])
    },
    rowHeight: {
      type: Number,
      default: 50
    },
    cellProps: {
      type: definePropType([
        Object,
        Function
      ])
    },
    columns,
    data: dataType,
    dataGetter: {
      type: definePropType(Function)
    },
    fixedData: fixedDataType,
    expandColumnKey: tableV2RowProps.expandColumnKey,
    expandedRowKeys: expandKeys,
    defaultExpandedRowKeys: expandKeys,
    class: classType,
    fixed: Boolean,
    style: {
      type: definePropType(Object)
    },
    width: requiredNumber,
    height: requiredNumber,
    maxHeight: Number,
    useIsScrolling: Boolean,
    indentSize: {
      type: Number,
      default: 12
    },
    iconSize: {
      type: Number,
      default: 12
    },
    hScrollbarSize: virtualizedGridProps.hScrollbarSize,
    vScrollbarSize: virtualizedGridProps.vScrollbarSize,
    scrollbarAlwaysOn: virtualizedScrollbarProps.alwaysOn,
    sortBy: {
      type: definePropType(Object),
      default: () => ({})
    },
    sortState: {
      type: definePropType(Object),
      default: void 0
    },
    onColumnSort: {
      type: definePropType(Function)
    },
    onExpandedRowsChange: {
      type: definePropType(Function)
    },
    onEndReached: {
      type: definePropType(Function)
    },
    onRowExpand: tableV2RowProps.onRowExpand,
    onScroll: tableV2GridProps.onScroll,
    onRowsRendered: tableV2GridProps.onRowsRendered,
    rowEventHandlers: tableV2RowProps.rowEventHandlers
  });
  const TableV2Cell = (props2, {
    slots
  }) => {
    var _a2;
    const {
      cellData,
      style
    } = props2;
    const displayText = ((_a2 = cellData == null ? void 0 : cellData.toString) == null ? void 0 : _a2.call(cellData)) || "";
    const defaultSlot = vue.renderSlot(slots, "default", props2, () => [displayText]);
    return vue.createVNode("div", {
      "class": props2.class,
      "title": displayText,
      "style": style
    }, [defaultSlot]);
  };
  TableV2Cell.displayName = "ElTableV2Cell";
  TableV2Cell.inheritAttrs = false;
  const HeaderCell = (props2, {
    slots
  }) => vue.renderSlot(slots, "default", props2, () => {
    var _a2, _b;
    return [vue.createVNode("div", {
      "class": props2.class,
      "title": (_a2 = props2.column) == null ? void 0 : _a2.title
    }, [(_b = props2.column) == null ? void 0 : _b.title])];
  });
  HeaderCell.displayName = "ElTableV2HeaderCell";
  HeaderCell.inheritAttrs = false;
  const tableV2HeaderRowProps = buildProps({
    class: String,
    columns,
    columnsStyles: {
      type: definePropType(Object),
      required: true
    },
    headerIndex: Number,
    style: { type: definePropType(Object) }
  });
  const TableV2HeaderRow = vue.defineComponent({
    name: "ElTableV2HeaderRow",
    props: tableV2HeaderRowProps,
    setup(props2, {
      slots
    }) {
      return () => {
        const {
          columns: columns2,
          columnsStyles,
          headerIndex,
          style
        } = props2;
        let Cells = columns2.map((column, columnIndex) => {
          return slots.cell({
            columns: columns2,
            column,
            columnIndex,
            headerIndex,
            style: columnsStyles[column.key]
          });
        });
        if (slots.header) {
          Cells = slots.header({
            cells: Cells.map((node) => {
              if (shared.isArray(node) && node.length === 1) {
                return node[0];
              }
              return node;
            }),
            columns: columns2,
            headerIndex
          });
        }
        return vue.createVNode("div", {
          "class": props2.class,
          "style": style,
          "role": "row"
        }, [Cells]);
      };
    }
  });
  const COMPONENT_NAME$7 = "ElTableV2Header";
  const TableV2Header = vue.defineComponent({
    name: COMPONENT_NAME$7,
    props: tableV2HeaderProps,
    setup(props2, {
      slots,
      expose
    }) {
      const ns2 = useNamespace("table-v2");
      const headerRef = vue.ref();
      const headerStyle = vue.computed(() => enforceUnit({
        width: props2.width,
        height: props2.height
      }));
      const rowStyle = vue.computed(() => enforceUnit({
        width: props2.rowWidth,
        height: props2.height
      }));
      const headerHeights = vue.computed(() => castArray$1(vue.unref(props2.headerHeight)));
      const scrollToLeft = (left2) => {
        const headerEl = vue.unref(headerRef);
        vue.nextTick(() => {
          (headerEl == null ? void 0 : headerEl.scroll) && headerEl.scroll({
            left: left2
          });
        });
      };
      const renderFixedRows = () => {
        const fixedRowClassName = ns2.e("fixed-header-row");
        const {
          columns: columns2,
          fixedHeaderData,
          rowHeight
        } = props2;
        return fixedHeaderData == null ? void 0 : fixedHeaderData.map((fixedRowData, fixedRowIndex) => {
          var _a2;
          const style = enforceUnit({
            height: rowHeight,
            width: "100%"
          });
          return (_a2 = slots.fixed) == null ? void 0 : _a2.call(slots, {
            class: fixedRowClassName,
            columns: columns2,
            rowData: fixedRowData,
            rowIndex: -(fixedRowIndex + 1),
            style
          });
        });
      };
      const renderDynamicRows = () => {
        const dynamicRowClassName = ns2.e("dynamic-header-row");
        const {
          columns: columns2
        } = props2;
        return vue.unref(headerHeights).map((rowHeight, rowIndex) => {
          var _a2;
          const style = enforceUnit({
            width: "100%",
            height: rowHeight
          });
          return (_a2 = slots.dynamic) == null ? void 0 : _a2.call(slots, {
            class: dynamicRowClassName,
            columns: columns2,
            headerIndex: rowIndex,
            style
          });
        });
      };
      expose({
        scrollToLeft
      });
      return () => {
        if (props2.height <= 0)
          return;
        return vue.createVNode("div", {
          "ref": headerRef,
          "class": props2.class,
          "style": vue.unref(headerStyle),
          "role": "rowgroup"
        }, [vue.createVNode("div", {
          "style": vue.unref(rowStyle),
          "class": ns2.e("header")
        }, [renderDynamicRows(), renderFixedRows()])]);
      };
    }
  });
  const useTableRow = (props2) => {
    const {
      isScrolling
    } = vue.inject(TableV2InjectionKey);
    const measured = vue.ref(false);
    const rowRef = vue.ref();
    const measurable = vue.computed(() => {
      return isNumber$2(props2.estimatedRowHeight) && props2.rowIndex >= 0;
    });
    const doMeasure = (isInit = false) => {
      const $rowRef = vue.unref(rowRef);
      if (!$rowRef)
        return;
      const {
        columns: columns2,
        onRowHeightChange,
        rowKey: rowKey2,
        rowIndex,
        style
      } = props2;
      const {
        height
      } = $rowRef.getBoundingClientRect();
      measured.value = true;
      vue.nextTick(() => {
        if (isInit || height !== Number.parseInt(style.height)) {
          const firstColumn = columns2[0];
          const isPlaceholder = (firstColumn == null ? void 0 : firstColumn.placeholderSign) === placeholderSign;
          onRowHeightChange == null ? void 0 : onRowHeightChange({
            rowKey: rowKey2,
            height,
            rowIndex
          }, firstColumn && !isPlaceholder && firstColumn.fixed);
        }
      });
    };
    const eventHandlers = vue.computed(() => {
      const {
        rowData,
        rowIndex,
        rowKey: rowKey2,
        onRowHover
      } = props2;
      const handlers = props2.rowEventHandlers || {};
      const eventHandlers2 = {};
      Object.entries(handlers).forEach(([eventName, handler]) => {
        if (shared.isFunction(handler)) {
          eventHandlers2[eventName] = (event) => {
            handler({
              event,
              rowData,
              rowIndex,
              rowKey: rowKey2
            });
          };
        }
      });
      if (onRowHover) {
        [{
          name: "onMouseleave",
          hovered: false
        }, {
          name: "onMouseenter",
          hovered: true
        }].forEach(({
          name,
          hovered
        }) => {
          const existedHandler = eventHandlers2[name];
          eventHandlers2[name] = (event) => {
            onRowHover({
              event,
              hovered,
              rowData,
              rowIndex,
              rowKey: rowKey2
            });
            existedHandler == null ? void 0 : existedHandler(event);
          };
        });
      }
      return eventHandlers2;
    });
    const onExpand = (expanded) => {
      const {
        onRowExpand,
        rowData,
        rowIndex,
        rowKey: rowKey2
      } = props2;
      onRowExpand == null ? void 0 : onRowExpand({
        expanded,
        rowData,
        rowIndex,
        rowKey: rowKey2
      });
    };
    vue.onMounted(() => {
      if (vue.unref(measurable)) {
        doMeasure(true);
      }
    });
    return {
      isScrolling,
      measurable,
      measured,
      rowRef,
      eventHandlers,
      onExpand
    };
  };
  const COMPONENT_NAME$6 = "ElTableV2TableRow";
  const TableV2Row = vue.defineComponent({
    name: COMPONENT_NAME$6,
    props: tableV2RowProps,
    setup(props2, {
      expose,
      slots,
      attrs: attrs2
    }) {
      const {
        eventHandlers,
        isScrolling,
        measurable,
        measured,
        rowRef,
        onExpand
      } = useTableRow(props2);
      expose({
        onExpand
      });
      return () => {
        const {
          columns: columns2,
          columnsStyles,
          expandColumnKey: expandColumnKey2,
          depth,
          rowData,
          rowIndex,
          style
        } = props2;
        let ColumnCells = columns2.map((column, columnIndex) => {
          const expandable = shared.isArray(rowData.children) && rowData.children.length > 0 && column.key === expandColumnKey2;
          return slots.cell({
            column,
            columns: columns2,
            columnIndex,
            depth,
            style: columnsStyles[column.key],
            rowData,
            rowIndex,
            isScrolling: vue.unref(isScrolling),
            expandIconProps: expandable ? {
              rowData,
              rowIndex,
              onExpand
            } : void 0
          });
        });
        if (slots.row) {
          ColumnCells = slots.row({
            cells: ColumnCells.map((node) => {
              if (shared.isArray(node) && node.length === 1) {
                return node[0];
              }
              return node;
            }),
            style,
            columns: columns2,
            depth,
            rowData,
            rowIndex,
            isScrolling: vue.unref(isScrolling)
          });
        }
        if (vue.unref(measurable)) {
          const {
            height,
            ...exceptHeightStyle
          } = style || {};
          const _measured = vue.unref(measured);
          return vue.createVNode("div", vue.mergeProps({
            "ref": rowRef,
            "class": props2.class,
            "style": _measured ? style : exceptHeightStyle,
            "role": "row"
          }, attrs2, vue.unref(eventHandlers)), [ColumnCells]);
        }
        return vue.createVNode("div", vue.mergeProps(attrs2, {
          "ref": rowRef,
          "class": props2.class,
          "style": style,
          "role": "row"
        }, vue.unref(eventHandlers)), [ColumnCells]);
      };
    }
  });
  const SortIcon = (props2) => {
    const {
      sortOrder
    } = props2;
    return vue.createVNode(ElIcon, {
      "size": 14,
      "class": props2.class
    }, {
      default: () => [sortOrder === SortOrder.ASC ? vue.createVNode(sort_up_default, null, null) : vue.createVNode(sort_down_default, null, null)]
    });
  };
  const ExpandIcon = (props2) => {
    const {
      expanded,
      expandable,
      onExpand,
      style,
      size
    } = props2;
    const expandIconProps = {
      onClick: expandable ? () => onExpand(!expanded) : void 0,
      class: props2.class
    };
    return vue.createVNode(ElIcon, vue.mergeProps(expandIconProps, {
      "size": size,
      "style": style
    }), {
      default: () => [vue.createVNode(arrow_right_default, null, null)]
    });
  };
  const COMPONENT_NAME$5 = "ElTableV2Grid";
  const useTableGrid = (props2) => {
    const headerRef = vue.ref();
    const bodyRef = vue.ref();
    const totalHeight = vue.computed(() => {
      const {
        data,
        rowHeight,
        estimatedRowHeight
      } = props2;
      if (estimatedRowHeight) {
        return;
      }
      return data.length * rowHeight;
    });
    const fixedRowHeight = vue.computed(() => {
      const {
        fixedData,
        rowHeight
      } = props2;
      return ((fixedData == null ? void 0 : fixedData.length) || 0) * rowHeight;
    });
    const headerHeight = vue.computed(() => sum(props2.headerHeight));
    const gridHeight = vue.computed(() => {
      const {
        height
      } = props2;
      return Math.max(0, height - vue.unref(headerHeight) - vue.unref(fixedRowHeight));
    });
    const hasHeader = vue.computed(() => {
      return vue.unref(headerHeight) + vue.unref(fixedRowHeight) > 0;
    });
    const itemKey = ({
      data,
      rowIndex
    }) => data[rowIndex][props2.rowKey];
    function onItemRendered({
      rowCacheStart,
      rowCacheEnd,
      rowVisibleStart,
      rowVisibleEnd
    }) {
      var _a2;
      (_a2 = props2.onRowsRendered) == null ? void 0 : _a2.call(props2, {
        rowCacheStart,
        rowCacheEnd,
        rowVisibleStart,
        rowVisibleEnd
      });
    }
    function resetAfterRowIndex(index, forceUpdate2) {
      var _a2;
      (_a2 = bodyRef.value) == null ? void 0 : _a2.resetAfterRowIndex(index, forceUpdate2);
    }
    function scrollTo(leftOrOptions, top) {
      const header$ = vue.unref(headerRef);
      const body$ = vue.unref(bodyRef);
      if (shared.isObject(leftOrOptions)) {
        header$ == null ? void 0 : header$.scrollToLeft(leftOrOptions.scrollLeft);
        body$ == null ? void 0 : body$.scrollTo(leftOrOptions);
      } else {
        header$ == null ? void 0 : header$.scrollToLeft(leftOrOptions);
        body$ == null ? void 0 : body$.scrollTo({
          scrollLeft: leftOrOptions,
          scrollTop: top
        });
      }
    }
    function scrollToTop(scrollTop) {
      var _a2;
      (_a2 = vue.unref(bodyRef)) == null ? void 0 : _a2.scrollTo({
        scrollTop
      });
    }
    function scrollToRow(row, strategy) {
      var _a2;
      (_a2 = vue.unref(bodyRef)) == null ? void 0 : _a2.scrollToItem(row, 1, strategy);
    }
    function forceUpdate() {
      var _a2, _b;
      (_a2 = vue.unref(bodyRef)) == null ? void 0 : _a2.$forceUpdate();
      (_b = vue.unref(headerRef)) == null ? void 0 : _b.$forceUpdate();
    }
    return {
      bodyRef,
      forceUpdate,
      fixedRowHeight,
      gridHeight,
      hasHeader,
      headerHeight,
      headerRef,
      totalHeight,
      itemKey,
      onItemRendered,
      resetAfterRowIndex,
      scrollTo,
      scrollToTop,
      scrollToRow
    };
  };
  const TableGrid = vue.defineComponent({
    name: COMPONENT_NAME$5,
    props: tableV2GridProps,
    setup(props2, {
      slots,
      expose
    }) {
      const {
        ns: ns2
      } = vue.inject(TableV2InjectionKey);
      const {
        bodyRef,
        fixedRowHeight,
        gridHeight,
        hasHeader,
        headerRef,
        headerHeight,
        totalHeight,
        forceUpdate,
        itemKey,
        onItemRendered,
        resetAfterRowIndex,
        scrollTo,
        scrollToTop,
        scrollToRow
      } = useTableGrid(props2);
      expose({
        forceUpdate,
        totalHeight,
        scrollTo,
        scrollToTop,
        scrollToRow,
        resetAfterRowIndex
      });
      const getColumnWidth = () => props2.bodyWidth;
      return () => {
        const {
          cache: cache2,
          columns: columns2,
          data,
          fixedData,
          useIsScrolling,
          scrollbarAlwaysOn,
          scrollbarEndGap,
          scrollbarStartGap,
          style,
          rowHeight,
          bodyWidth,
          estimatedRowHeight,
          headerWidth,
          height,
          width,
          getRowHeight,
          onScroll
        } = props2;
        const isDynamicRowEnabled = isNumber$2(estimatedRowHeight);
        const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid;
        const _headerHeight = vue.unref(headerHeight);
        return vue.createVNode("div", {
          "role": "table",
          "class": [ns2.e("table"), props2.class],
          "style": style
        }, [vue.createVNode(Grid, {
          "ref": bodyRef,
          "data": data,
          "useIsScrolling": useIsScrolling,
          "itemKey": itemKey,
          "columnCache": 0,
          "columnWidth": isDynamicRowEnabled ? getColumnWidth : bodyWidth,
          "totalColumn": 1,
          "totalRow": data.length,
          "rowCache": cache2,
          "rowHeight": isDynamicRowEnabled ? getRowHeight : rowHeight,
          "width": width,
          "height": vue.unref(gridHeight),
          "class": ns2.e("body"),
          "role": "rowgroup",
          "scrollbarStartGap": scrollbarStartGap,
          "scrollbarEndGap": scrollbarEndGap,
          "scrollbarAlwaysOn": scrollbarAlwaysOn,
          "onScroll": onScroll,
          "onItemRendered": onItemRendered,
          "perfMode": false
        }, {
          default: (params) => {
            var _a2;
            const rowData = data[params.rowIndex];
            return (_a2 = slots.row) == null ? void 0 : _a2.call(slots, {
              ...params,
              columns: columns2,
              rowData
            });
          }
        }), vue.unref(hasHeader) && vue.createVNode(TableV2Header, {
          "ref": headerRef,
          "class": ns2.e("header-wrapper"),
          "columns": columns2,
          "headerData": data,
          "headerHeight": props2.headerHeight,
          "fixedHeaderData": fixedData,
          "rowWidth": headerWidth,
          "rowHeight": rowHeight,
          "width": width,
          "height": Math.min(_headerHeight + vue.unref(fixedRowHeight), height)
        }, {
          dynamic: slots.header,
          fixed: slots.row
        })]);
      };
    }
  });
  function _isSlot$5(s2) {
    return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !vue.isVNode(s2);
  }
  const MainTable = (props2, {
    slots
  }) => {
    const {
      mainTableRef,
      ...rest
    } = props2;
    return vue.createVNode(TableGrid, vue.mergeProps({
      "ref": mainTableRef
    }, rest), _isSlot$5(slots) ? slots : {
      default: () => [slots]
    });
  };
  function _isSlot$4(s2) {
    return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !vue.isVNode(s2);
  }
  const LeftTable$1 = (props2, {
    slots
  }) => {
    if (!props2.columns.length)
      return;
    const {
      leftTableRef,
      ...rest
    } = props2;
    return vue.createVNode(TableGrid, vue.mergeProps({
      "ref": leftTableRef
    }, rest), _isSlot$4(slots) ? slots : {
      default: () => [slots]
    });
  };
  function _isSlot$3(s2) {
    return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !vue.isVNode(s2);
  }
  const LeftTable = (props2, {
    slots
  }) => {
    if (!props2.columns.length)
      return;
    const {
      rightTableRef,
      ...rest
    } = props2;
    return vue.createVNode(TableGrid, vue.mergeProps({
      "ref": rightTableRef
    }, rest), _isSlot$3(slots) ? slots : {
      default: () => [slots]
    });
  };
  function _isSlot$2(s2) {
    return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !vue.isVNode(s2);
  }
  const RowRenderer = (props2, {
    slots
  }) => {
    const {
      columns: columns2,
      columnsStyles,
      depthMap,
      expandColumnKey: expandColumnKey2,
      expandedRowKeys,
      estimatedRowHeight,
      hasFixedColumns,
      rowData,
      rowIndex,
      style,
      isScrolling,
      rowProps: rowProps2,
      rowClass,
      rowKey: rowKey2,
      rowEventHandlers,
      ns: ns2,
      onRowHovered,
      onRowExpanded
    } = props2;
    const rowKls = tryCall(rowClass, {
      columns: columns2,
      rowData,
      rowIndex
    }, "");
    const additionalProps = tryCall(rowProps2, {
      columns: columns2,
      rowData,
      rowIndex
    });
    const _rowKey = rowData[rowKey2];
    const depth = depthMap[_rowKey] || 0;
    const canExpand = Boolean(expandColumnKey2);
    const isFixedRow = rowIndex < 0;
    const kls = [ns2.e("row"), rowKls, {
      [ns2.e(`row-depth-${depth}`)]: canExpand && rowIndex >= 0,
      [ns2.is("expanded")]: canExpand && expandedRowKeys.includes(_rowKey),
      [ns2.is("fixed")]: !depth && isFixedRow,
      [ns2.is("customized")]: Boolean(slots.row)
    }];
    const onRowHover = hasFixedColumns ? onRowHovered : void 0;
    const _rowProps = {
      ...additionalProps,
      columns: columns2,
      columnsStyles,
      class: kls,
      depth,
      expandColumnKey: expandColumnKey2,
      estimatedRowHeight: isFixedRow ? void 0 : estimatedRowHeight,
      isScrolling,
      rowIndex,
      rowData,
      rowKey: _rowKey,
      rowEventHandlers,
      style
    };
    const handlerMosueEnter = (e) => {
      onRowHover == null ? void 0 : onRowHover({
        hovered: true,
        rowKey: _rowKey,
        event: e,
        rowData,
        rowIndex
      });
    };
    const handlerMouseLeave = (e) => {
      onRowHover == null ? void 0 : onRowHover({
        hovered: false,
        rowKey: _rowKey,
        event: e,
        rowData,
        rowIndex
      });
    };
    return vue.createVNode(TableV2Row, vue.mergeProps(_rowProps, {
      "onRowExpand": onRowExpanded,
      "onMouseenter": handlerMosueEnter,
      "onMouseleave": handlerMouseLeave,
      "rowkey": _rowKey
    }), _isSlot$2(slots) ? slots : {
      default: () => [slots]
    });
  };
  const CellRenderer = ({
    columns: columns2,
    column,
    columnIndex,
    depth,
    expandIconProps,
    isScrolling,
    rowData,
    rowIndex,
    style,
    expandedRowKeys,
    ns: ns2,
    cellProps: _cellProps,
    expandColumnKey: expandColumnKey2,
    indentSize,
    iconSize,
    rowKey: rowKey2
  }, {
    slots
  }) => {
    const cellStyle = enforceUnit(style);
    if (column.placeholderSign === placeholderSign) {
      return vue.createVNode("div", {
        "class": ns2.em("row-cell", "placeholder"),
        "style": cellStyle
      }, null);
    }
    const {
      cellRenderer,
      dataKey,
      dataGetter
    } = column;
    const cellData = shared.isFunction(dataGetter) ? dataGetter({
      columns: columns2,
      column,
      columnIndex,
      rowData,
      rowIndex
    }) : get(rowData, dataKey != null ? dataKey : "");
    const extraCellProps = tryCall(_cellProps, {
      cellData,
      columns: columns2,
      column,
      columnIndex,
      rowIndex,
      rowData
    });
    const cellProps = {
      class: ns2.e("cell-text"),
      columns: columns2,
      column,
      columnIndex,
      cellData,
      isScrolling,
      rowData,
      rowIndex
    };
    const columnCellRenderer = componentToSlot(cellRenderer);
    const Cell = columnCellRenderer ? columnCellRenderer(cellProps) : vue.renderSlot(slots, "default", cellProps, () => [vue.createVNode(TableV2Cell, cellProps, null)]);
    const kls = [ns2.e("row-cell"), column.class, column.align === Alignment.CENTER && ns2.is("align-center"), column.align === Alignment.RIGHT && ns2.is("align-right")];
    const expandable = rowIndex >= 0 && expandColumnKey2 && column.key === expandColumnKey2;
    const expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey2]);
    let IconOrPlaceholder;
    const iconStyle = `margin-inline-start: ${depth * indentSize}px;`;
    if (expandable) {
      if (shared.isObject(expandIconProps)) {
        IconOrPlaceholder = vue.createVNode(ExpandIcon, vue.mergeProps(expandIconProps, {
          "class": [ns2.e("expand-icon"), ns2.is("expanded", expanded)],
          "size": iconSize,
          "expanded": expanded,
          "style": iconStyle,
          "expandable": true
        }), null);
      } else {
        IconOrPlaceholder = vue.createVNode("div", {
          "style": [iconStyle, `width: ${iconSize}px; height: ${iconSize}px;`].join(" ")
        }, null);
      }
    }
    return vue.createVNode("div", vue.mergeProps({
      "class": kls,
      "style": cellStyle
    }, extraCellProps, {
      "role": "cell"
    }), [IconOrPlaceholder, Cell]);
  };
  CellRenderer.inheritAttrs = false;
  function _isSlot$1(s2) {
    return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !vue.isVNode(s2);
  }
  const HeaderRenderer = ({
    columns: columns2,
    columnsStyles,
    headerIndex,
    style,
    headerClass,
    headerProps,
    ns: ns2
  }, {
    slots
  }) => {
    const param = {
      columns: columns2,
      headerIndex
    };
    const kls = [ns2.e("header-row"), tryCall(headerClass, param, ""), {
      [ns2.is("customized")]: Boolean(slots.header)
    }];
    const extraProps = {
      ...tryCall(headerProps, param),
      columnsStyles,
      class: kls,
      columns: columns2,
      headerIndex,
      style
    };
    return vue.createVNode(TableV2HeaderRow, extraProps, _isSlot$1(slots) ? slots : {
      default: () => [slots]
    });
  };
  const HeaderCellRenderer = (props2, {
    slots
  }) => {
    const {
      column,
      ns: ns2,
      style,
      onColumnSorted
    } = props2;
    const cellStyle = enforceUnit(style);
    if (column.placeholderSign === placeholderSign) {
      return vue.createVNode("div", {
        "class": ns2.em("header-row-cell", "placeholder"),
        "style": cellStyle
      }, null);
    }
    const {
      headerCellRenderer,
      headerClass,
      sortable
    } = column;
    const cellProps = {
      ...props2,
      class: ns2.e("header-cell-text")
    };
    const columnCellRenderer = componentToSlot(headerCellRenderer);
    const Cell = columnCellRenderer ? columnCellRenderer(cellProps) : vue.renderSlot(slots, "default", cellProps, () => [vue.createVNode(HeaderCell, cellProps, null)]);
    const {
      sortBy,
      sortState,
      headerCellProps
    } = props2;
    let sorting, sortOrder;
    if (sortState) {
      const order2 = sortState[column.key];
      sorting = Boolean(oppositeOrderMap[order2]);
      sortOrder = sorting ? order2 : SortOrder.ASC;
    } else {
      sorting = column.key === sortBy.key;
      sortOrder = sorting ? sortBy.order : SortOrder.ASC;
    }
    const cellKls = [ns2.e("header-cell"), tryCall(headerClass, props2, ""), column.align === Alignment.CENTER && ns2.is("align-center"), column.align === Alignment.RIGHT && ns2.is("align-right"), sortable && ns2.is("sortable")];
    const cellWrapperProps = {
      ...tryCall(headerCellProps, props2),
      onClick: column.sortable ? onColumnSorted : void 0,
      class: cellKls,
      style: cellStyle,
      ["data-key"]: column.key
    };
    return vue.createVNode("div", vue.mergeProps(cellWrapperProps, {
      "role": "columnheader"
    }), [Cell, sortable && vue.createVNode(SortIcon, {
      "class": [ns2.e("sort-icon"), sorting && ns2.is("sorting")],
      "sortOrder": sortOrder
    }, null)]);
  };
  const Footer$1 = (props2, {
    slots
  }) => {
    var _a2;
    return vue.createVNode("div", {
      "class": props2.class,
      "style": props2.style
    }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]);
  };
  Footer$1.displayName = "ElTableV2Footer";
  const Footer = (props2, {
    slots
  }) => {
    const defaultSlot = vue.renderSlot(slots, "default", {}, () => [vue.createVNode(ElEmpty, null, null)]);
    return vue.createVNode("div", {
      "class": props2.class,
      "style": props2.style
    }, [defaultSlot]);
  };
  Footer.displayName = "ElTableV2Empty";
  const Overlay = (props2, {
    slots
  }) => {
    var _a2;
    return vue.createVNode("div", {
      "class": props2.class,
      "style": props2.style
    }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots)]);
  };
  Overlay.displayName = "ElTableV2Overlay";
  function _isSlot(s2) {
    return typeof s2 === "function" || Object.prototype.toString.call(s2) === "[object Object]" && !vue.isVNode(s2);
  }
  const COMPONENT_NAME$4 = "ElTableV2";
  const TableV2 = vue.defineComponent({
    name: COMPONENT_NAME$4,
    props: tableV2Props,
    setup(props2, {
      slots,
      expose
    }) {
      const ns2 = useNamespace("table-v2");
      const {
        columnsStyles,
        fixedColumnsOnLeft,
        fixedColumnsOnRight,
        mainColumns,
        mainTableHeight,
        fixedTableHeight,
        leftTableWidth,
        rightTableWidth,
        data,
        depthMap,
        expandedRowKeys,
        hasFixedColumns,
        mainTableRef,
        leftTableRef,
        rightTableRef,
        isDynamic,
        isResetting,
        isScrolling,
        bodyWidth,
        emptyStyle,
        rootStyle,
        headerWidth,
        footerHeight,
        showEmpty,
        scrollTo,
        scrollToLeft,
        scrollToTop,
        scrollToRow,
        getRowHeight,
        onColumnSorted,
        onRowHeightChange,
        onRowHovered,
        onRowExpanded,
        onRowsRendered,
        onScroll,
        onVerticalScroll
      } = useTable(props2);
      expose({
        scrollTo,
        scrollToLeft,
        scrollToTop,
        scrollToRow
      });
      vue.provide(TableV2InjectionKey, {
        ns: ns2,
        isResetting,
        isScrolling
      });
      return () => {
        const {
          cache: cache2,
          cellProps,
          estimatedRowHeight,
          expandColumnKey: expandColumnKey2,
          fixedData,
          headerHeight,
          headerClass,
          headerProps,
          headerCellProps,
          sortBy,
          sortState,
          rowHeight,
          rowClass,
          rowEventHandlers,
          rowKey: rowKey2,
          rowProps: rowProps2,
          scrollbarAlwaysOn,
          indentSize,
          iconSize,
          useIsScrolling,
          vScrollbarSize,
          width
        } = props2;
        const _data = vue.unref(data);
        const mainTableProps = {
          cache: cache2,
          class: ns2.e("main"),
          columns: vue.unref(mainColumns),
          data: _data,
          fixedData,
          estimatedRowHeight,
          bodyWidth: vue.unref(bodyWidth) + vScrollbarSize,
          headerHeight,
          headerWidth: vue.unref(headerWidth),
          height: vue.unref(mainTableHeight),
          mainTableRef,
          rowKey: rowKey2,
          rowHeight,
          scrollbarAlwaysOn,
          scrollbarStartGap: 2,
          scrollbarEndGap: vScrollbarSize,
          useIsScrolling,
          width,
          getRowHeight,
          onRowsRendered,
          onScroll
        };
        const leftColumnsWidth = vue.unref(leftTableWidth);
        const _fixedTableHeight = vue.unref(fixedTableHeight);
        const leftTableProps = {
          cache: cache2,
          class: ns2.e("left"),
          columns: vue.unref(fixedColumnsOnLeft),
          data: _data,
          estimatedRowHeight,
          leftTableRef,
          rowHeight,
          bodyWidth: leftColumnsWidth,
          headerWidth: leftColumnsWidth,
          headerHeight,
          height: _fixedTableHeight,
          rowKey: rowKey2,
          scrollbarAlwaysOn,
          scrollbarStartGap: 2,
          scrollbarEndGap: vScrollbarSize,
          useIsScrolling,
          width: leftColumnsWidth,
          getRowHeight,
          onScroll: onVerticalScroll
        };
        const rightColumnsWidth = vue.unref(rightTableWidth);
        const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize;
        const rightTableProps = {
          cache: cache2,
          class: ns2.e("right"),
          columns: vue.unref(fixedColumnsOnRight),
          data: _data,
          estimatedRowHeight,
          rightTableRef,
          rowHeight,
          bodyWidth: rightColumnsWidthWithScrollbar,
          headerWidth: rightColumnsWidthWithScrollbar,
          headerHeight,
          height: _fixedTableHeight,
          rowKey: rowKey2,
          scrollbarAlwaysOn,
          scrollbarStartGap: 2,
          scrollbarEndGap: vScrollbarSize,
          width: rightColumnsWidthWithScrollbar,
          style: `--${vue.unref(ns2.namespace)}-table-scrollbar-size: ${vScrollbarSize}px`,
          useIsScrolling,
          getRowHeight,
          onScroll: onVerticalScroll
        };
        const _columnsStyles = vue.unref(columnsStyles);
        const tableRowProps = {
          ns: ns2,
          depthMap: vue.unref(depthMap),
          columnsStyles: _columnsStyles,
          expandColumnKey: expandColumnKey2,
          expandedRowKeys: vue.unref(expandedRowKeys),
          estimatedRowHeight,
          hasFixedColumns: vue.unref(hasFixedColumns),
          rowProps: rowProps2,
          rowClass,
          rowKey: rowKey2,
          rowEventHandlers,
          onRowHovered,
          onRowExpanded,
          onRowHeightChange
        };
        const tableCellProps = {
          cellProps,
          expandColumnKey: expandColumnKey2,
          indentSize,
          iconSize,
          rowKey: rowKey2,
          expandedRowKeys: vue.unref(expandedRowKeys),
          ns: ns2
        };
        const tableHeaderProps = {
          ns: ns2,
          headerClass,
          headerProps,
          columnsStyles: _columnsStyles
        };
        const tableHeaderCellProps = {
          ns: ns2,
          sortBy,
          sortState,
          headerCellProps,
          onColumnSorted
        };
        const tableSlots = {
          row: (props22) => vue.createVNode(RowRenderer, vue.mergeProps(props22, tableRowProps), {
            row: slots.row,
            cell: (props3) => {
              let _slot;
              return slots.cell ? vue.createVNode(CellRenderer, vue.mergeProps(props3, tableCellProps, {
                "style": _columnsStyles[props3.column.key]
              }), _isSlot(_slot = slots.cell(props3)) ? _slot : {
                default: () => [_slot]
              }) : vue.createVNode(CellRenderer, vue.mergeProps(props3, tableCellProps, {
                "style": _columnsStyles[props3.column.key]
              }), null);
            }
          }),
          header: (props22) => vue.createVNode(HeaderRenderer, vue.mergeProps(props22, tableHeaderProps), {
            header: slots.header,
            cell: (props3) => {
              let _slot2;
              return slots["header-cell"] ? vue.createVNode(HeaderCellRenderer, vue.mergeProps(props3, tableHeaderCellProps, {
                "style": _columnsStyles[props3.column.key]
              }), _isSlot(_slot2 = slots["header-cell"](props3)) ? _slot2 : {
                default: () => [_slot2]
              }) : vue.createVNode(HeaderCellRenderer, vue.mergeProps(props3, tableHeaderCellProps, {
                "style": _columnsStyles[props3.column.key]
              }), null);
            }
          })
        };
        const rootKls = [props2.class, ns2.b(), ns2.e("root"), {
          [ns2.is("dynamic")]: vue.unref(isDynamic)
        }];
        const footerProps = {
          class: ns2.e("footer"),
          style: vue.unref(footerHeight)
        };
        return vue.createVNode("div", {
          "class": rootKls,
          "style": vue.unref(rootStyle)
        }, [vue.createVNode(MainTable, mainTableProps, _isSlot(tableSlots) ? tableSlots : {
          default: () => [tableSlots]
        }), vue.createVNode(LeftTable$1, leftTableProps, _isSlot(tableSlots) ? tableSlots : {
          default: () => [tableSlots]
        }), vue.createVNode(LeftTable, rightTableProps, _isSlot(tableSlots) ? tableSlots : {
          default: () => [tableSlots]
        }), slots.footer && vue.createVNode(Footer$1, footerProps, {
          default: slots.footer
        }), vue.unref(showEmpty) && vue.createVNode(Footer, {
          "class": ns2.e("empty"),
          "style": vue.unref(emptyStyle)
        }, {
          default: slots.empty
        }), slots.overlay && vue.createVNode(Overlay, {
          "class": ns2.e("overlay")
        }, {
          default: slots.overlay
        })]);
      };
    }
  });
  const autoResizerProps = buildProps({
    disableWidth: Boolean,
    disableHeight: Boolean,
    onResize: {
      type: definePropType(Function)
    }
  });
  const AutoResizer = vue.defineComponent({
    name: "ElAutoResizer",
    props: autoResizerProps,
    setup(props2, {
      slots
    }) {
      const ns2 = useNamespace("auto-resizer");
      const {
        height,
        width,
        sizer
      } = useAutoResize(props2);
      const style = {
        width: "100%",
        height: "100%"
      };
      return () => {
        var _a2;
        return vue.createVNode("div", {
          "ref": sizer,
          "class": ns2.b(),
          "style": style
        }, [(_a2 = slots.default) == null ? void 0 : _a2.call(slots, {
          height: height.value,
          width: width.value
        })]);
      };
    }
  });
  const ElTableV2 = withInstall(TableV2);
  const ElAutoResizer = withInstall(AutoResizer);
  const tabsRootContextKey = Symbol("tabsRootContextKey");
  const tabBarProps = buildProps({
    tabs: {
      type: definePropType(Array),
      default: () => mutable([])
    }
  });
  const COMPONENT_NAME$3 = "ElTabBar";
  const __default__$u = vue.defineComponent({
    name: COMPONENT_NAME$3
  });
  const _sfc_main$z = /* @__PURE__ */ vue.defineComponent({
    ...__default__$u,
    props: tabBarProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const instance = vue.getCurrentInstance();
      const rootTabs = vue.inject(tabsRootContextKey);
      if (!rootTabs)
        throwError(COMPONENT_NAME$3, "<el-tabs><el-tab-bar /></el-tabs>");
      const ns2 = useNamespace("tabs");
      const barRef = vue.ref();
      const barStyle = vue.ref();
      const getBarStyle = () => {
        let offset2 = 0;
        let tabSize = 0;
        const sizeName = ["top", "bottom"].includes(rootTabs.props.tabPosition) ? "width" : "height";
        const sizeDir = sizeName === "width" ? "x" : "y";
        const position = sizeDir === "x" ? "left" : "top";
        props2.tabs.every((tab) => {
          var _a2, _b;
          const $el = (_b = (_a2 = instance.parent) == null ? void 0 : _a2.refs) == null ? void 0 : _b[`tab-${tab.uid}`];
          if (!$el)
            return false;
          if (!tab.active) {
            return true;
          }
          offset2 = $el[`offset${capitalize(position)}`];
          tabSize = $el[`client${capitalize(sizeName)}`];
          const tabStyles = window.getComputedStyle($el);
          if (sizeName === "width") {
            tabSize -= Number.parseFloat(tabStyles.paddingLeft) + Number.parseFloat(tabStyles.paddingRight);
            offset2 += Number.parseFloat(tabStyles.paddingLeft);
          }
          return false;
        });
        return {
          [sizeName]: `${tabSize}px`,
          transform: `translate${capitalize(sizeDir)}(${offset2}px)`
        };
      };
      const update = () => barStyle.value = getBarStyle();
      const saveObserver = [];
      const observerTabs = () => {
        var _a2;
        saveObserver.forEach((observer) => observer.stop());
        saveObserver.length = 0;
        const list = (_a2 = instance.parent) == null ? void 0 : _a2.refs;
        if (!list)
          return;
        for (const key in list) {
          if (key.startsWith("tab-")) {
            const _el = list[key];
            if (_el) {
              saveObserver.push(useResizeObserver(_el, update));
            }
          }
        }
      };
      vue.watch(() => props2.tabs, async () => {
        await vue.nextTick();
        update();
        observerTabs();
      }, { immediate: true });
      const barObserever = useResizeObserver(barRef, () => update());
      vue.onBeforeUnmount(() => {
        saveObserver.forEach((observer) => observer.stop());
        saveObserver.length = 0;
        barObserever.stop();
      });
      expose({
        ref: barRef,
        update
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "barRef",
          ref: barRef,
          class: vue.normalizeClass([vue.unref(ns2).e("active-bar"), vue.unref(ns2).is(vue.unref(rootTabs).props.tabPosition)]),
          style: vue.normalizeStyle(barStyle.value)
        }, null, 6);
      };
    }
  });
  var TabBar = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["__file", "tab-bar.vue"]]);
  const tabNavProps = buildProps({
    panes: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    currentName: {
      type: [String, Number],
      default: ""
    },
    editable: Boolean,
    type: {
      type: String,
      values: ["card", "border-card", ""],
      default: ""
    },
    stretch: Boolean
  });
  const tabNavEmits = {
    tabClick: (tab, tabName, ev) => ev instanceof Event,
    tabRemove: (tab, ev) => ev instanceof Event
  };
  const COMPONENT_NAME$2 = "ElTabNav";
  const TabNav = vue.defineComponent({
    name: COMPONENT_NAME$2,
    props: tabNavProps,
    emits: tabNavEmits,
    setup(props2, {
      expose,
      emit
    }) {
      const rootTabs = vue.inject(tabsRootContextKey);
      if (!rootTabs)
        throwError(COMPONENT_NAME$2, `<el-tabs><tab-nav /></el-tabs>`);
      const ns2 = useNamespace("tabs");
      const visibility = useDocumentVisibility();
      const focused = useWindowFocus();
      const navScroll$ = vue.ref();
      const nav$ = vue.ref();
      const el$ = vue.ref();
      const tabBarRef = vue.ref();
      const scrollable = vue.ref(false);
      const navOffset = vue.ref(0);
      const isFocus = vue.ref(false);
      const focusable = vue.ref(true);
      const sizeName = vue.computed(() => ["top", "bottom"].includes(rootTabs.props.tabPosition) ? "width" : "height");
      const navStyle = vue.computed(() => {
        const dir = sizeName.value === "width" ? "X" : "Y";
        return {
          transform: `translate${dir}(-${navOffset.value}px)`
        };
      });
      const scrollPrev = () => {
        if (!navScroll$.value)
          return;
        const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];
        const currentOffset = navOffset.value;
        if (!currentOffset)
          return;
        const newOffset = currentOffset > containerSize ? currentOffset - containerSize : 0;
        navOffset.value = newOffset;
      };
      const scrollNext = () => {
        if (!navScroll$.value || !nav$.value)
          return;
        const navSize = nav$.value[`offset${capitalize(sizeName.value)}`];
        const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];
        const currentOffset = navOffset.value;
        if (navSize - currentOffset <= containerSize)
          return;
        const newOffset = navSize - currentOffset > containerSize * 2 ? currentOffset + containerSize : navSize - containerSize;
        navOffset.value = newOffset;
      };
      const scrollToActiveTab = async () => {
        const nav = nav$.value;
        if (!scrollable.value || !el$.value || !navScroll$.value || !nav)
          return;
        await vue.nextTick();
        const activeTab = el$.value.querySelector(".is-active");
        if (!activeTab)
          return;
        const navScroll = navScroll$.value;
        const isHorizontal2 = ["top", "bottom"].includes(rootTabs.props.tabPosition);
        const activeTabBounding = activeTab.getBoundingClientRect();
        const navScrollBounding = navScroll.getBoundingClientRect();
        const maxOffset = isHorizontal2 ? nav.offsetWidth - navScrollBounding.width : nav.offsetHeight - navScrollBounding.height;
        const currentOffset = navOffset.value;
        let newOffset = currentOffset;
        if (isHorizontal2) {
          if (activeTabBounding.left < navScrollBounding.left) {
            newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);
          }
          if (activeTabBounding.right > navScrollBounding.right) {
            newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;
          }
        } else {
          if (activeTabBounding.top < navScrollBounding.top) {
            newOffset = currentOffset - (navScrollBounding.top - activeTabBounding.top);
          }
          if (activeTabBounding.bottom > navScrollBounding.bottom) {
            newOffset = currentOffset + (activeTabBounding.bottom - navScrollBounding.bottom);
          }
        }
        newOffset = Math.max(newOffset, 0);
        navOffset.value = Math.min(newOffset, maxOffset);
      };
      const update = () => {
        var _a2;
        if (!nav$.value || !navScroll$.value)
          return;
        props2.stretch && ((_a2 = tabBarRef.value) == null ? void 0 : _a2.update());
        const navSize = nav$.value[`offset${capitalize(sizeName.value)}`];
        const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];
        const currentOffset = navOffset.value;
        if (containerSize < navSize) {
          scrollable.value = scrollable.value || {};
          scrollable.value.prev = currentOffset;
          scrollable.value.next = currentOffset + containerSize < navSize;
          if (navSize - currentOffset < containerSize) {
            navOffset.value = navSize - containerSize;
          }
        } else {
          scrollable.value = false;
          if (currentOffset > 0) {
            navOffset.value = 0;
          }
        }
      };
      const changeTab = (e) => {
        const code = e.code;
        const {
          up: up2,
          down: down2,
          left: left2,
          right: right2
        } = EVENT_CODE;
        if (![up2, down2, left2, right2].includes(code))
          return;
        const tabList = Array.from(e.currentTarget.querySelectorAll("[role=tab]:not(.is-disabled)"));
        const currentIndex = tabList.indexOf(e.target);
        let nextIndex;
        if (code === left2 || code === up2) {
          if (currentIndex === 0) {
            nextIndex = tabList.length - 1;
          } else {
            nextIndex = currentIndex - 1;
          }
        } else {
          if (currentIndex < tabList.length - 1) {
            nextIndex = currentIndex + 1;
          } else {
            nextIndex = 0;
          }
        }
        tabList[nextIndex].focus({
          preventScroll: true
        });
        tabList[nextIndex].click();
        setFocus();
      };
      const setFocus = () => {
        if (focusable.value)
          isFocus.value = true;
      };
      const removeFocus = () => isFocus.value = false;
      vue.watch(visibility, (visibility2) => {
        if (visibility2 === "hidden") {
          focusable.value = false;
        } else if (visibility2 === "visible") {
          setTimeout(() => focusable.value = true, 50);
        }
      });
      vue.watch(focused, (focused2) => {
        if (focused2) {
          setTimeout(() => focusable.value = true, 50);
        } else {
          focusable.value = false;
        }
      });
      useResizeObserver(el$, update);
      vue.onMounted(() => setTimeout(() => scrollToActiveTab(), 0));
      vue.onUpdated(() => update());
      expose({
        scrollToActiveTab,
        removeFocus
      });
      return () => {
        const scrollBtn = scrollable.value ? [vue.createVNode("span", {
          "class": [ns2.e("nav-prev"), ns2.is("disabled", !scrollable.value.prev)],
          "onClick": scrollPrev
        }, [vue.createVNode(ElIcon, null, {
          default: () => [vue.createVNode(arrow_left_default, null, null)]
        })]), vue.createVNode("span", {
          "class": [ns2.e("nav-next"), ns2.is("disabled", !scrollable.value.next)],
          "onClick": scrollNext
        }, [vue.createVNode(ElIcon, null, {
          default: () => [vue.createVNode(arrow_right_default, null, null)]
        })])] : null;
        const tabs2 = props2.panes.map((pane, index) => {
          var _a2, _b, _c, _d;
          const uid2 = pane.uid;
          const disabled = pane.props.disabled;
          const tabName = (_b = (_a2 = pane.props.name) != null ? _a2 : pane.index) != null ? _b : `${index}`;
          const closable = !disabled && (pane.isClosable || props2.editable);
          pane.index = `${index}`;
          const btnClose = closable ? vue.createVNode(ElIcon, {
            "class": "is-icon-close",
            "onClick": (ev) => emit("tabRemove", pane, ev)
          }, {
            default: () => [vue.createVNode(close_default, null, null)]
          }) : null;
          const tabLabelContent = ((_d = (_c = pane.slots).label) == null ? void 0 : _d.call(_c)) || pane.props.label;
          const tabindex = !disabled && pane.active ? 0 : -1;
          return vue.createVNode("div", {
            "ref": `tab-${uid2}`,
            "class": [ns2.e("item"), ns2.is(rootTabs.props.tabPosition), ns2.is("active", pane.active), ns2.is("disabled", disabled), ns2.is("closable", closable), ns2.is("focus", isFocus.value)],
            "id": `tab-${tabName}`,
            "key": `tab-${uid2}`,
            "aria-controls": `pane-${tabName}`,
            "role": "tab",
            "aria-selected": pane.active,
            "tabindex": tabindex,
            "onFocus": () => setFocus(),
            "onBlur": () => removeFocus(),
            "onClick": (ev) => {
              removeFocus();
              emit("tabClick", pane, tabName, ev);
            },
            "onKeydown": (ev) => {
              if (closable && (ev.code === EVENT_CODE.delete || ev.code === EVENT_CODE.backspace)) {
                emit("tabRemove", pane, ev);
              }
            }
          }, [...[tabLabelContent, btnClose]]);
        });
        return vue.createVNode("div", {
          "ref": el$,
          "class": [ns2.e("nav-wrap"), ns2.is("scrollable", !!scrollable.value), ns2.is(rootTabs.props.tabPosition)]
        }, [scrollBtn, vue.createVNode("div", {
          "class": ns2.e("nav-scroll"),
          "ref": navScroll$
        }, [vue.createVNode("div", {
          "class": [ns2.e("nav"), ns2.is(rootTabs.props.tabPosition), ns2.is("stretch", props2.stretch && ["top", "bottom"].includes(rootTabs.props.tabPosition))],
          "ref": nav$,
          "style": navStyle.value,
          "role": "tablist",
          "onKeydown": changeTab
        }, [...[!props2.type ? vue.createVNode(TabBar, {
          "ref": tabBarRef,
          "tabs": [...props2.panes]
        }, null) : null, tabs2]])])]);
      };
    }
  });
  const tabsProps = buildProps({
    type: {
      type: String,
      values: ["card", "border-card", ""],
      default: ""
    },
    closable: Boolean,
    addable: Boolean,
    modelValue: {
      type: [String, Number]
    },
    editable: Boolean,
    tabPosition: {
      type: String,
      values: ["top", "right", "bottom", "left"],
      default: "top"
    },
    beforeLeave: {
      type: definePropType(Function),
      default: () => true
    },
    stretch: Boolean
  });
  const isPaneName = (value) => shared.isString(value) || isNumber$2(value);
  const tabsEmits = {
    [UPDATE_MODEL_EVENT]: (name) => isPaneName(name),
    tabClick: (pane, ev) => ev instanceof Event,
    tabChange: (name) => isPaneName(name),
    edit: (paneName, action) => ["remove", "add"].includes(action),
    tabRemove: (name) => isPaneName(name),
    tabAdd: () => true
  };
  const Tabs = vue.defineComponent({
    name: "ElTabs",
    props: tabsProps,
    emits: tabsEmits,
    setup(props2, {
      emit,
      slots,
      expose
    }) {
      var _a2;
      const ns2 = useNamespace("tabs");
      const isVertical = vue.computed(() => ["left", "right"].includes(props2.tabPosition));
      const {
        children: panes,
        addChild: sortPane,
        removeChild: unregisterPane
      } = useOrderedChildren(vue.getCurrentInstance(), "ElTabPane");
      const nav$ = vue.ref();
      const currentName = vue.ref((_a2 = props2.modelValue) != null ? _a2 : "0");
      const setCurrentName = async (value, trigger = false) => {
        var _a22, _b, _c;
        if (currentName.value === value || isUndefined(value))
          return;
        try {
          const canLeave = await ((_a22 = props2.beforeLeave) == null ? void 0 : _a22.call(props2, value, currentName.value));
          if (canLeave !== false) {
            currentName.value = value;
            if (trigger) {
              emit(UPDATE_MODEL_EVENT, value);
              emit("tabChange", value);
            }
            (_c = (_b = nav$.value) == null ? void 0 : _b.removeFocus) == null ? void 0 : _c.call(_b);
          }
        } catch (e) {
        }
      };
      const handleTabClick = (tab, tabName, event) => {
        if (tab.props.disabled)
          return;
        setCurrentName(tabName, true);
        emit("tabClick", tab, event);
      };
      const handleTabRemove = (pane, ev) => {
        if (pane.props.disabled || isUndefined(pane.props.name))
          return;
        ev.stopPropagation();
        emit("edit", pane.props.name, "remove");
        emit("tabRemove", pane.props.name);
      };
      const handleTabAdd = () => {
        emit("edit", void 0, "add");
        emit("tabAdd");
      };
      vue.watch(() => props2.modelValue, (modelValue) => setCurrentName(modelValue));
      vue.watch(currentName, async () => {
        var _a22;
        await vue.nextTick();
        (_a22 = nav$.value) == null ? void 0 : _a22.scrollToActiveTab();
      });
      vue.provide(tabsRootContextKey, {
        props: props2,
        currentName,
        registerPane: (pane) => {
          panes.value.push(pane);
        },
        sortPane,
        unregisterPane
      });
      expose({
        currentName
      });
      const TabNavRenderer = ({
        render
      }) => {
        return render();
      };
      return () => {
        const addSlot = slots["add-icon"];
        const newButton = props2.editable || props2.addable ? vue.createVNode("div", {
          "class": [ns2.e("new-tab"), isVertical.value && ns2.e("new-tab-vertical")],
          "tabindex": "0",
          "onClick": handleTabAdd,
          "onKeydown": (ev) => {
            if (ev.code === EVENT_CODE.enter)
              handleTabAdd();
          }
        }, [addSlot ? vue.renderSlot(slots, "add-icon") : vue.createVNode(ElIcon, {
          "class": ns2.is("icon-plus")
        }, {
          default: () => [vue.createVNode(plus_default, null, null)]
        })]) : null;
        const header = vue.createVNode("div", {
          "class": [ns2.e("header"), isVertical.value && ns2.e("header-vertical"), ns2.is(props2.tabPosition)]
        }, [vue.createVNode(TabNavRenderer, {
          "render": () => {
            const hasLabelSlot = panes.value.some((pane) => pane.slots.label);
            return vue.createVNode(TabNav, {
              ref: nav$,
              currentName: currentName.value,
              editable: props2.editable,
              type: props2.type,
              panes: panes.value,
              stretch: props2.stretch,
              onTabClick: handleTabClick,
              onTabRemove: handleTabRemove
            }, {
              $stable: !hasLabelSlot
            });
          }
        }, null), newButton]);
        const panels = vue.createVNode("div", {
          "class": ns2.e("content")
        }, [vue.renderSlot(slots, "default")]);
        return vue.createVNode("div", {
          "class": [ns2.b(), ns2.m(props2.tabPosition), {
            [ns2.m("card")]: props2.type === "card",
            [ns2.m("border-card")]: props2.type === "border-card"
          }]
        }, [panels, header]);
      };
    }
  });
  const tabPaneProps = buildProps({
    label: {
      type: String,
      default: ""
    },
    name: {
      type: [String, Number]
    },
    closable: Boolean,
    disabled: Boolean,
    lazy: Boolean
  });
  const COMPONENT_NAME$1 = "ElTabPane";
  const __default__$t = vue.defineComponent({
    name: COMPONENT_NAME$1
  });
  const _sfc_main$y = /* @__PURE__ */ vue.defineComponent({
    ...__default__$t,
    props: tabPaneProps,
    setup(__props) {
      const props2 = __props;
      const instance = vue.getCurrentInstance();
      const slots = vue.useSlots();
      const tabsRoot = vue.inject(tabsRootContextKey);
      if (!tabsRoot)
        throwError(COMPONENT_NAME$1, "usage: <el-tabs><el-tab-pane /></el-tabs/>");
      const ns2 = useNamespace("tab-pane");
      const index = vue.ref();
      const isClosable = vue.computed(() => props2.closable || tabsRoot.props.closable);
      const active = computedEager(() => {
        var _a2;
        return tabsRoot.currentName.value === ((_a2 = props2.name) != null ? _a2 : index.value);
      });
      const loaded = vue.ref(active.value);
      const paneName = vue.computed(() => {
        var _a2;
        return (_a2 = props2.name) != null ? _a2 : index.value;
      });
      const shouldBeRender = computedEager(() => !props2.lazy || loaded.value || active.value);
      vue.watch(active, (val) => {
        if (val)
          loaded.value = true;
      });
      const pane = vue.reactive({
        uid: instance.uid,
        slots,
        props: props2,
        paneName,
        active,
        index,
        isClosable
      });
      tabsRoot.registerPane(pane);
      vue.onMounted(() => {
        tabsRoot.sortPane(pane);
      });
      vue.onUnmounted(() => {
        tabsRoot.unregisterPane(pane.uid);
      });
      return (_ctx, _cache) => {
        return vue.unref(shouldBeRender) ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          id: `pane-${vue.unref(paneName)}`,
          class: vue.normalizeClass(vue.unref(ns2).b()),
          role: "tabpanel",
          "aria-hidden": !vue.unref(active),
          "aria-labelledby": `tab-${vue.unref(paneName)}`
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 10, ["id", "aria-hidden", "aria-labelledby"])), [
          [vue.vShow, vue.unref(active)]
        ]) : vue.createCommentVNode("v-if", true);
      };
    }
  });
  var TabPane = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["__file", "tab-pane.vue"]]);
  const ElTabs = withInstall(Tabs, {
    TabPane
  });
  const ElTabPane = withNoopInstall(TabPane);
  const textProps = buildProps({
    type: {
      type: String,
      values: ["primary", "success", "info", "warning", "danger", ""],
      default: ""
    },
    size: {
      type: String,
      values: componentSizes,
      default: ""
    },
    truncated: Boolean,
    lineClamp: {
      type: [String, Number]
    },
    tag: {
      type: String,
      default: "span"
    }
  });
  const __default__$s = vue.defineComponent({
    name: "ElText"
  });
  const _sfc_main$x = /* @__PURE__ */ vue.defineComponent({
    ...__default__$s,
    props: textProps,
    setup(__props) {
      const props2 = __props;
      const textSize = useFormSize();
      const ns2 = useNamespace("text");
      const textKls = vue.computed(() => [
        ns2.b(),
        ns2.m(props2.type),
        ns2.m(textSize.value),
        ns2.is("truncated", props2.truncated),
        ns2.is("line-clamp", !isUndefined(props2.lineClamp))
      ]);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tag), {
          class: vue.normalizeClass(vue.unref(textKls)),
          style: vue.normalizeStyle({ "-webkit-line-clamp": _ctx.lineClamp })
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["class", "style"]);
      };
    }
  });
  var Text = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["__file", "text.vue"]]);
  const ElText = withInstall(Text);
  const timeSelectProps = buildProps({
    format: {
      type: String,
      default: "HH:mm"
    },
    modelValue: String,
    disabled: Boolean,
    editable: {
      type: Boolean,
      default: true
    },
    effect: {
      type: definePropType(String),
      default: "light"
    },
    clearable: {
      type: Boolean,
      default: true
    },
    size: useSizeProp,
    placeholder: String,
    start: {
      type: String,
      default: "09:00"
    },
    end: {
      type: String,
      default: "18:00"
    },
    step: {
      type: String,
      default: "00:30"
    },
    minTime: String,
    maxTime: String,
    name: String,
    prefixIcon: {
      type: definePropType([String, Object]),
      default: () => clock_default
    },
    clearIcon: {
      type: definePropType([String, Object]),
      default: () => circle_close_default
    },
    ...useEmptyValuesProps
  });
  const parseTime = (time) => {
    const values = (time || "").split(":");
    if (values.length >= 2) {
      let hours = Number.parseInt(values[0], 10);
      const minutes = Number.parseInt(values[1], 10);
      const timeUpper = time.toUpperCase();
      if (timeUpper.includes("AM") && hours === 12) {
        hours = 0;
      } else if (timeUpper.includes("PM") && hours !== 12) {
        hours += 12;
      }
      return {
        hours,
        minutes
      };
    }
    return null;
  };
  const compareTime = (time1, time2) => {
    const value1 = parseTime(time1);
    if (!value1)
      return -1;
    const value2 = parseTime(time2);
    if (!value2)
      return -1;
    const minutes1 = value1.minutes + value1.hours * 60;
    const minutes2 = value2.minutes + value2.hours * 60;
    if (minutes1 === minutes2) {
      return 0;
    }
    return minutes1 > minutes2 ? 1 : -1;
  };
  const padTime = (time) => {
    return `${time}`.padStart(2, "0");
  };
  const formatTime = (time) => {
    return `${padTime(time.hours)}:${padTime(time.minutes)}`;
  };
  const nextTime = (time, step) => {
    const timeValue = parseTime(time);
    if (!timeValue)
      return "";
    const stepValue = parseTime(step);
    if (!stepValue)
      return "";
    const next = {
      hours: timeValue.hours,
      minutes: timeValue.minutes
    };
    next.minutes += stepValue.minutes;
    next.hours += stepValue.hours;
    next.hours += Math.floor(next.minutes / 60);
    next.minutes = next.minutes % 60;
    return formatTime(next);
  };
  const __default__$r = vue.defineComponent({
    name: "ElTimeSelect"
  });
  const _sfc_main$w = /* @__PURE__ */ vue.defineComponent({
    ...__default__$r,
    props: timeSelectProps,
    emits: ["change", "blur", "focus", "clear", "update:modelValue"],
    setup(__props, { expose }) {
      const props2 = __props;
      dayjs.extend(customParseFormat);
      const { Option: ElOption2 } = ElSelect;
      const nsInput = useNamespace("input");
      const select = vue.ref();
      const _disabled = useFormDisabled();
      const { lang } = useLocale();
      const value = vue.computed(() => props2.modelValue);
      const start = vue.computed(() => {
        const time = parseTime(props2.start);
        return time ? formatTime(time) : null;
      });
      const end2 = vue.computed(() => {
        const time = parseTime(props2.end);
        return time ? formatTime(time) : null;
      });
      const step = vue.computed(() => {
        const time = parseTime(props2.step);
        return time ? formatTime(time) : null;
      });
      const minTime = vue.computed(() => {
        const time = parseTime(props2.minTime || "");
        return time ? formatTime(time) : null;
      });
      const maxTime = vue.computed(() => {
        const time = parseTime(props2.maxTime || "");
        return time ? formatTime(time) : null;
      });
      const items = vue.computed(() => {
        const result = [];
        if (props2.start && props2.end && props2.step) {
          let current = start.value;
          let currentTime;
          while (current && end2.value && compareTime(current, end2.value) <= 0) {
            currentTime = dayjs(current, "HH:mm").locale(lang.value).format(props2.format);
            result.push({
              value: currentTime,
              disabled: compareTime(current, minTime.value || "-1:-1") <= 0 || compareTime(current, maxTime.value || "100:100") >= 0
            });
            current = nextTime(current, step.value);
          }
        }
        return result;
      });
      const blur = () => {
        var _a2, _b;
        (_b = (_a2 = select.value) == null ? void 0 : _a2.blur) == null ? void 0 : _b.call(_a2);
      };
      const focus = () => {
        var _a2, _b;
        (_b = (_a2 = select.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2);
      };
      expose({
        blur,
        focus
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(ElSelect), {
          ref_key: "select",
          ref: select,
          "model-value": vue.unref(value),
          disabled: vue.unref(_disabled),
          clearable: _ctx.clearable,
          "clear-icon": _ctx.clearIcon,
          size: _ctx.size,
          effect: _ctx.effect,
          placeholder: _ctx.placeholder,
          "default-first-option": "",
          filterable: _ctx.editable,
          "empty-values": _ctx.emptyValues,
          "value-on-clear": _ctx.valueOnClear,
          "onUpdate:modelValue": (event) => _ctx.$emit("update:modelValue", event),
          onChange: (event) => _ctx.$emit("change", event),
          onBlur: (event) => _ctx.$emit("blur", event),
          onFocus: (event) => _ctx.$emit("focus", event),
          onClear: () => _ctx.$emit("clear")
        }, {
          prefix: vue.withCtx(() => [
            _ctx.prefixIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
              key: 0,
              class: vue.normalizeClass(vue.unref(nsInput).e("prefix-icon"))
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.prefixIcon)))
              ]),
              _: 1
            }, 8, ["class"])) : vue.createCommentVNode("v-if", true)
          ]),
          default: vue.withCtx(() => [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(items), (item) => {
              return vue.openBlock(), vue.createBlock(vue.unref(ElOption2), {
                key: item.value,
                label: item.value,
                value: item.value,
                disabled: item.disabled
              }, null, 8, ["label", "value", "disabled"]);
            }), 128))
          ]),
          _: 1
        }, 8, ["model-value", "disabled", "clearable", "clear-icon", "size", "effect", "placeholder", "filterable", "empty-values", "value-on-clear", "onUpdate:modelValue", "onChange", "onBlur", "onFocus", "onClear"]);
      };
    }
  });
  var TimeSelect = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["__file", "time-select.vue"]]);
  const ElTimeSelect = withInstall(TimeSelect);
  const Timeline = vue.defineComponent({
    name: "ElTimeline",
    setup(_2, { slots }) {
      const ns2 = useNamespace("timeline");
      vue.provide("timeline", slots);
      return () => {
        return vue.h("ul", { class: [ns2.b()] }, [vue.renderSlot(slots, "default")]);
      };
    }
  });
  const timelineItemProps = buildProps({
    timestamp: {
      type: String,
      default: ""
    },
    hideTimestamp: Boolean,
    center: Boolean,
    placement: {
      type: String,
      values: ["top", "bottom"],
      default: "bottom"
    },
    type: {
      type: String,
      values: ["primary", "success", "warning", "danger", "info"],
      default: ""
    },
    color: {
      type: String,
      default: ""
    },
    size: {
      type: String,
      values: ["normal", "large"],
      default: "normal"
    },
    icon: {
      type: iconPropType
    },
    hollow: Boolean
  });
  const __default__$q = vue.defineComponent({
    name: "ElTimelineItem"
  });
  const _sfc_main$v = /* @__PURE__ */ vue.defineComponent({
    ...__default__$q,
    props: timelineItemProps,
    setup(__props) {
      const props2 = __props;
      const ns2 = useNamespace("timeline-item");
      const defaultNodeKls = vue.computed(() => [
        ns2.e("node"),
        ns2.em("node", props2.size || ""),
        ns2.em("node", props2.type || ""),
        ns2.is("hollow", props2.hollow)
      ]);
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("li", {
          class: vue.normalizeClass([vue.unref(ns2).b(), { [vue.unref(ns2).e("center")]: _ctx.center }])
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("tail"))
          }, null, 2),
          !_ctx.$slots.dot ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(defaultNodeKls)),
            style: vue.normalizeStyle({
              backgroundColor: _ctx.color
            })
          }, [
            _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
              key: 0,
              class: vue.normalizeClass(vue.unref(ns2).e("icon"))
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
              ]),
              _: 1
            }, 8, ["class"])) : vue.createCommentVNode("v-if", true)
          ], 6)) : vue.createCommentVNode("v-if", true),
          _ctx.$slots.dot ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns2).e("dot"))
          }, [
            vue.renderSlot(_ctx.$slots, "dot")
          ], 2)) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("wrapper"))
          }, [
            !_ctx.hideTimestamp && _ctx.placement === "top" ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass([vue.unref(ns2).e("timestamp"), vue.unref(ns2).is("top")])
            }, vue.toDisplayString(_ctx.timestamp), 3)) : vue.createCommentVNode("v-if", true),
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).e("content"))
            }, [
              vue.renderSlot(_ctx.$slots, "default")
            ], 2),
            !_ctx.hideTimestamp && _ctx.placement === "bottom" ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 1,
              class: vue.normalizeClass([vue.unref(ns2).e("timestamp"), vue.unref(ns2).is("bottom")])
            }, vue.toDisplayString(_ctx.timestamp), 3)) : vue.createCommentVNode("v-if", true)
          ], 2)
        ], 2);
      };
    }
  });
  var TimelineItem = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["__file", "timeline-item.vue"]]);
  const ElTimeline = withInstall(Timeline, {
    TimelineItem
  });
  const ElTimelineItem = withNoopInstall(TimelineItem);
  const tooltipV2CommonProps = buildProps({
    nowrap: Boolean
  });
  var TooltipV2Sides = /* @__PURE__ */ ((TooltipV2Sides2) => {
    TooltipV2Sides2["top"] = "top";
    TooltipV2Sides2["bottom"] = "bottom";
    TooltipV2Sides2["left"] = "left";
    TooltipV2Sides2["right"] = "right";
    return TooltipV2Sides2;
  })(TooltipV2Sides || {});
  const tooltipV2Sides = Object.values(TooltipV2Sides);
  const tooltipV2ArrowProps = buildProps({
    width: {
      type: Number,
      default: 10
    },
    height: {
      type: Number,
      default: 10
    },
    style: {
      type: definePropType(Object),
      default: null
    }
  });
  const tooltipV2ArrowSpecialProps = buildProps({
    side: {
      type: definePropType(String),
      values: tooltipV2Sides,
      required: true
    }
  });
  const tooltipV2Strategies = ["absolute", "fixed"];
  const tooltipV2Placements = [
    "top-start",
    "top-end",
    "top",
    "bottom-start",
    "bottom-end",
    "bottom",
    "left-start",
    "left-end",
    "left",
    "right-start",
    "right-end",
    "right"
  ];
  const tooltipV2ContentProps = buildProps({
    arrowPadding: {
      type: definePropType(Number),
      default: 5
    },
    effect: {
      type: definePropType(String),
      default: "light"
    },
    contentClass: String,
    placement: {
      type: definePropType(String),
      values: tooltipV2Placements,
      default: "bottom"
    },
    reference: {
      type: definePropType(Object),
      default: null
    },
    offset: {
      type: Number,
      default: 8
    },
    strategy: {
      type: definePropType(String),
      values: tooltipV2Strategies,
      default: "absolute"
    },
    showArrow: Boolean,
    ...useAriaProps(["ariaLabel"])
  });
  const tooltipV2RootProps = buildProps({
    delayDuration: {
      type: Number,
      default: 300
    },
    defaultOpen: Boolean,
    open: {
      type: Boolean,
      default: void 0
    },
    onOpenChange: {
      type: definePropType(Function)
    },
    "onUpdate:open": {
      type: definePropType(Function)
    }
  });
  const EventHandler = {
    type: definePropType(Function)
  };
  const tooltipV2TriggerProps = buildProps({
    onBlur: EventHandler,
    onClick: EventHandler,
    onFocus: EventHandler,
    onMouseDown: EventHandler,
    onMouseEnter: EventHandler,
    onMouseLeave: EventHandler
  });
  const tooltipV2Props = buildProps({
    ...tooltipV2RootProps,
    ...tooltipV2ArrowProps,
    ...tooltipV2TriggerProps,
    ...tooltipV2ContentProps,
    alwaysOn: Boolean,
    fullTransition: Boolean,
    transitionProps: {
      type: definePropType(Object),
      default: null
    },
    teleported: Boolean,
    to: {
      type: definePropType(String),
      default: "body"
    }
  });
  const tooltipV2RootKey = Symbol("tooltipV2");
  const tooltipV2ContentKey = Symbol("tooltipV2Content");
  const TOOLTIP_V2_OPEN = "tooltip_v2.open";
  const __default__$p = vue.defineComponent({
    name: "ElTooltipV2Root"
  });
  const _sfc_main$u = /* @__PURE__ */ vue.defineComponent({
    ...__default__$p,
    props: tooltipV2RootProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const _open = vue.ref(props2.defaultOpen);
      const triggerRef = vue.ref(null);
      const open = vue.computed({
        get: () => isPropAbsent(props2.open) ? _open.value : props2.open,
        set: (open2) => {
          var _a2;
          _open.value = open2;
          (_a2 = props2["onUpdate:open"]) == null ? void 0 : _a2.call(props2, open2);
        }
      });
      const isOpenDelayed = vue.computed(() => isNumber$2(props2.delayDuration) && props2.delayDuration > 0);
      const { start: onDelayedOpen, stop: clearTimer } = useTimeoutFn(() => {
        open.value = true;
      }, vue.computed(() => props2.delayDuration), {
        immediate: false
      });
      const ns2 = useNamespace("tooltip-v2");
      const contentId = useId();
      const onNormalOpen = () => {
        clearTimer();
        open.value = true;
      };
      const onDelayOpen = () => {
        vue.unref(isOpenDelayed) ? onDelayedOpen() : onNormalOpen();
      };
      const onOpen = onNormalOpen;
      const onClose = () => {
        clearTimer();
        open.value = false;
      };
      const onChange = (open2) => {
        var _a2;
        if (open2) {
          document.dispatchEvent(new CustomEvent(TOOLTIP_V2_OPEN));
          onOpen();
        }
        (_a2 = props2.onOpenChange) == null ? void 0 : _a2.call(props2, open2);
      };
      vue.watch(open, onChange);
      vue.onMounted(() => {
        document.addEventListener(TOOLTIP_V2_OPEN, onClose);
      });
      vue.onBeforeUnmount(() => {
        clearTimer();
        document.removeEventListener(TOOLTIP_V2_OPEN, onClose);
      });
      vue.provide(tooltipV2RootKey, {
        contentId,
        triggerRef,
        ns: ns2,
        onClose,
        onDelayOpen,
        onOpen
      });
      expose({
        onOpen,
        onClose
      });
      return (_ctx, _cache) => {
        return vue.renderSlot(_ctx.$slots, "default", { open: vue.unref(open) });
      };
    }
  });
  var TooltipV2Root = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["__file", "root.vue"]]);
  const __default__$o = vue.defineComponent({
    name: "ElTooltipV2Arrow"
  });
  const _sfc_main$t = /* @__PURE__ */ vue.defineComponent({
    ...__default__$o,
    props: {
      ...tooltipV2ArrowProps,
      ...tooltipV2ArrowSpecialProps
    },
    setup(__props) {
      const props2 = __props;
      const { ns: ns2 } = vue.inject(tooltipV2RootKey);
      const { arrowRef } = vue.inject(tooltipV2ContentKey);
      const arrowStyle = vue.computed(() => {
        const { style, width, height } = props2;
        const namespace = ns2.namespace.value;
        return {
          [`--${namespace}-tooltip-v2-arrow-width`]: `${width}px`,
          [`--${namespace}-tooltip-v2-arrow-height`]: `${height}px`,
          [`--${namespace}-tooltip-v2-arrow-border-width`]: `${width / 2}px`,
          [`--${namespace}-tooltip-v2-arrow-cover-width`]: width / 2 - 1,
          ...style || {}
        };
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("span", {
          ref_key: "arrowRef",
          ref: arrowRef,
          style: vue.normalizeStyle(vue.unref(arrowStyle)),
          class: vue.normalizeClass(vue.unref(ns2).e("arrow"))
        }, null, 6);
      };
    }
  });
  var TooltipV2Arrow = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["__file", "arrow.vue"]]);
  const visualHiddenProps = buildProps({
    style: {
      type: definePropType([String, Object, Array]),
      default: () => ({})
    }
  });
  const __default__$n = vue.defineComponent({
    name: "ElVisuallyHidden"
  });
  const _sfc_main$s = /* @__PURE__ */ vue.defineComponent({
    ...__default__$n,
    props: visualHiddenProps,
    setup(__props) {
      const props2 = __props;
      const computedStyle = vue.computed(() => {
        return [
          props2.style,
          {
            position: "absolute",
            border: 0,
            width: 1,
            height: 1,
            padding: 0,
            margin: -1,
            overflow: "hidden",
            clip: "rect(0, 0, 0, 0)",
            whiteSpace: "nowrap",
            wordWrap: "normal"
          }
        ];
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("span", vue.mergeProps(_ctx.$attrs, { style: vue.unref(computedStyle) }), [
          vue.renderSlot(_ctx.$slots, "default")
        ], 16);
      };
    }
  });
  var ElVisuallyHidden = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["__file", "visual-hidden.vue"]]);
  const __default__$m = vue.defineComponent({
    name: "ElTooltipV2Content"
  });
  const _sfc_main$r = /* @__PURE__ */ vue.defineComponent({
    ...__default__$m,
    props: { ...tooltipV2ContentProps, ...tooltipV2CommonProps },
    setup(__props) {
      const props2 = __props;
      const { triggerRef, contentId } = vue.inject(tooltipV2RootKey);
      const placement = vue.ref(props2.placement);
      const strategy = vue.ref(props2.strategy);
      const arrowRef = vue.ref(null);
      const { referenceRef, contentRef, middlewareData, x: x2, y: y2, update } = useFloating$1({
        placement,
        strategy,
        middleware: vue.computed(() => {
          const middleware = [offset(props2.offset)];
          if (props2.showArrow) {
            middleware.push(arrowMiddleware({
              arrowRef
            }));
          }
          return middleware;
        })
      });
      const zIndex2 = useZIndex().nextZIndex();
      const ns2 = useNamespace("tooltip-v2");
      const side = vue.computed(() => {
        return placement.value.split("-")[0];
      });
      const contentStyle = vue.computed(() => {
        return {
          position: vue.unref(strategy),
          top: `${vue.unref(y2) || 0}px`,
          left: `${vue.unref(x2) || 0}px`,
          zIndex: zIndex2
        };
      });
      const arrowStyle = vue.computed(() => {
        if (!props2.showArrow)
          return {};
        const { arrow: arrow2 } = vue.unref(middlewareData);
        return {
          [`--${ns2.namespace.value}-tooltip-v2-arrow-x`]: `${arrow2 == null ? void 0 : arrow2.x}px` || "",
          [`--${ns2.namespace.value}-tooltip-v2-arrow-y`]: `${arrow2 == null ? void 0 : arrow2.y}px` || ""
        };
      });
      const contentClass = vue.computed(() => [
        ns2.e("content"),
        ns2.is("dark", props2.effect === "dark"),
        ns2.is(vue.unref(strategy)),
        props2.contentClass
      ]);
      vue.watch(arrowRef, () => update());
      vue.watch(() => props2.placement, (val) => placement.value = val);
      vue.onMounted(() => {
        vue.watch(() => props2.reference || triggerRef.value, (el) => {
          referenceRef.value = el || void 0;
        }, {
          immediate: true
        });
      });
      vue.provide(tooltipV2ContentKey, { arrowRef });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "contentRef",
          ref: contentRef,
          style: vue.normalizeStyle(vue.unref(contentStyle)),
          "data-tooltip-v2-root": ""
        }, [
          !_ctx.nowrap ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            "data-side": vue.unref(side),
            class: vue.normalizeClass(vue.unref(contentClass))
          }, [
            vue.renderSlot(_ctx.$slots, "default", {
              contentStyle: vue.unref(contentStyle),
              contentClass: vue.unref(contentClass)
            }),
            vue.createVNode(vue.unref(ElVisuallyHidden), {
              id: vue.unref(contentId),
              role: "tooltip"
            }, {
              default: vue.withCtx(() => [
                _ctx.ariaLabel ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                  vue.createTextVNode(vue.toDisplayString(_ctx.ariaLabel), 1)
                ], 64)) : vue.renderSlot(_ctx.$slots, "default", { key: 1 })
              ]),
              _: 3
            }, 8, ["id"]),
            vue.renderSlot(_ctx.$slots, "arrow", {
              style: vue.normalizeStyle(vue.unref(arrowStyle)),
              side: vue.unref(side)
            })
          ], 10, ["data-side"])) : vue.createCommentVNode("v-if", true)
        ], 4);
      };
    }
  });
  var TooltipV2Content = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["__file", "content.vue"]]);
  const forwardRefProps = buildProps({
    setRef: {
      type: definePropType(Function),
      required: true
    },
    onlyChild: Boolean
  });
  var ForwardRef = vue.defineComponent({
    props: forwardRefProps,
    setup(props2, {
      slots
    }) {
      const fragmentRef = vue.ref();
      const setRef = composeRefs(fragmentRef, (el) => {
        if (el) {
          props2.setRef(el.nextElementSibling);
        } else {
          props2.setRef(null);
        }
      });
      return () => {
        var _a2;
        const [firstChild] = ((_a2 = slots.default) == null ? void 0 : _a2.call(slots)) || [];
        const child = props2.onlyChild ? ensureOnlyChild(firstChild.children) : firstChild.children;
        return vue.createVNode(vue.Fragment, {
          "ref": setRef
        }, [child]);
      };
    }
  });
  const __default__$l = vue.defineComponent({
    name: "ElTooltipV2Trigger"
  });
  const _sfc_main$q = /* @__PURE__ */ vue.defineComponent({
    ...__default__$l,
    props: {
      ...tooltipV2CommonProps,
      ...tooltipV2TriggerProps
    },
    setup(__props) {
      const props2 = __props;
      const { onClose, onOpen, onDelayOpen, triggerRef, contentId } = vue.inject(tooltipV2RootKey);
      let isMousedown = false;
      const setTriggerRef = (el) => {
        triggerRef.value = el;
      };
      const onMouseup = () => {
        isMousedown = false;
      };
      const onMouseenter = composeEventHandlers(props2.onMouseEnter, onDelayOpen);
      const onMouseleave = composeEventHandlers(props2.onMouseLeave, onClose);
      const onMousedown = composeEventHandlers(props2.onMouseDown, () => {
        onClose();
        isMousedown = true;
        document.addEventListener("mouseup", onMouseup, { once: true });
      });
      const onFocus = composeEventHandlers(props2.onFocus, () => {
        if (!isMousedown)
          onOpen();
      });
      const onBlur = composeEventHandlers(props2.onBlur, onClose);
      const onClick = composeEventHandlers(props2.onClick, (e) => {
        if (e.detail === 0)
          onClose();
      });
      const events2 = {
        blur: onBlur,
        click: onClick,
        focus: onFocus,
        mousedown: onMousedown,
        mouseenter: onMouseenter,
        mouseleave: onMouseleave
      };
      const setEvents = (el, events22, type3) => {
        if (el) {
          Object.entries(events22).forEach(([name, handler]) => {
            el[type3](name, handler);
          });
        }
      };
      vue.watch(triggerRef, (triggerEl, previousTriggerEl) => {
        setEvents(triggerEl, events2, "addEventListener");
        setEvents(previousTriggerEl, events2, "removeEventListener");
        if (triggerEl) {
          triggerEl.setAttribute("aria-describedby", contentId.value);
        }
      });
      vue.onBeforeUnmount(() => {
        setEvents(triggerRef.value, events2, "removeEventListener");
        document.removeEventListener("mouseup", onMouseup);
      });
      return (_ctx, _cache) => {
        return _ctx.nowrap ? (vue.openBlock(), vue.createBlock(vue.unref(ForwardRef), {
          key: 0,
          "set-ref": setTriggerRef,
          "only-child": ""
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        })) : (vue.openBlock(), vue.createElementBlock("button", vue.mergeProps({
          key: 1,
          ref_key: "triggerRef",
          ref: triggerRef
        }, _ctx.$attrs), [
          vue.renderSlot(_ctx.$slots, "default")
        ], 16));
      };
    }
  });
  var TooltipV2Trigger = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["__file", "trigger.vue"]]);
  const __default__$k = vue.defineComponent({
    name: "ElTooltipV2"
  });
  const _sfc_main$p = /* @__PURE__ */ vue.defineComponent({
    ...__default__$k,
    props: tooltipV2Props,
    setup(__props) {
      const props2 = __props;
      const refedProps = vue.toRefs(props2);
      const arrowProps = vue.reactive(pick(refedProps, Object.keys(tooltipV2ArrowProps)));
      const contentProps = vue.reactive(pick(refedProps, Object.keys(tooltipV2ContentProps)));
      const rootProps = vue.reactive(pick(refedProps, Object.keys(tooltipV2RootProps)));
      const triggerProps = vue.reactive(pick(refedProps, Object.keys(tooltipV2TriggerProps)));
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(TooltipV2Root, vue.normalizeProps(vue.guardReactiveProps(rootProps)), {
          default: vue.withCtx(({ open }) => [
            vue.createVNode(TooltipV2Trigger, vue.mergeProps(triggerProps, { nowrap: "" }), {
              default: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "trigger")
              ]),
              _: 3
            }, 16),
            vue.createVNode(vue.unref(ElTeleport), {
              to: _ctx.to,
              disabled: !_ctx.teleported
            }, {
              default: vue.withCtx(() => [
                _ctx.fullTransition ? (vue.openBlock(), vue.createBlock(vue.Transition, vue.normalizeProps(vue.mergeProps({ key: 0 }, _ctx.transitionProps)), {
                  default: vue.withCtx(() => [
                    _ctx.alwaysOn || open ? (vue.openBlock(), vue.createBlock(TooltipV2Content, vue.normalizeProps(vue.mergeProps({ key: 0 }, contentProps)), {
                      arrow: vue.withCtx(({ style, side }) => [
                        _ctx.showArrow ? (vue.openBlock(), vue.createBlock(TooltipV2Arrow, vue.mergeProps({ key: 0 }, arrowProps, {
                          style,
                          side
                        }), null, 16, ["style", "side"])) : vue.createCommentVNode("v-if", true)
                      ]),
                      default: vue.withCtx(() => [
                        vue.renderSlot(_ctx.$slots, "default")
                      ]),
                      _: 3
                    }, 16)) : vue.createCommentVNode("v-if", true)
                  ]),
                  _: 2
                }, 1040)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
                  _ctx.alwaysOn || open ? (vue.openBlock(), vue.createBlock(TooltipV2Content, vue.normalizeProps(vue.mergeProps({ key: 0 }, contentProps)), {
                    arrow: vue.withCtx(({ style, side }) => [
                      _ctx.showArrow ? (vue.openBlock(), vue.createBlock(TooltipV2Arrow, vue.mergeProps({ key: 0 }, arrowProps, {
                        style,
                        side
                      }), null, 16, ["style", "side"])) : vue.createCommentVNode("v-if", true)
                    ]),
                    default: vue.withCtx(() => [
                      vue.renderSlot(_ctx.$slots, "default")
                    ]),
                    _: 3
                  }, 16)) : vue.createCommentVNode("v-if", true)
                ], 64))
              ]),
              _: 2
            }, 1032, ["to", "disabled"])
          ]),
          _: 3
        }, 16);
      };
    }
  });
  var TooltipV2 = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["__file", "tooltip.vue"]]);
  const ElTooltipV2 = withInstall(TooltipV2);
  const LEFT_CHECK_CHANGE_EVENT = "left-check-change";
  const RIGHT_CHECK_CHANGE_EVENT = "right-check-change";
  const transferProps = buildProps({
    data: {
      type: definePropType(Array),
      default: () => []
    },
    titles: {
      type: definePropType(Array),
      default: () => []
    },
    buttonTexts: {
      type: definePropType(Array),
      default: () => []
    },
    filterPlaceholder: String,
    filterMethod: {
      type: definePropType(Function)
    },
    leftDefaultChecked: {
      type: definePropType(Array),
      default: () => []
    },
    rightDefaultChecked: {
      type: definePropType(Array),
      default: () => []
    },
    renderContent: {
      type: definePropType(Function)
    },
    modelValue: {
      type: definePropType(Array),
      default: () => []
    },
    format: {
      type: definePropType(Object),
      default: () => ({})
    },
    filterable: Boolean,
    props: {
      type: definePropType(Object),
      default: () => mutable({
        label: "label",
        key: "key",
        disabled: "disabled"
      })
    },
    targetOrder: {
      type: String,
      values: ["original", "push", "unshift"],
      default: "original"
    },
    validateEvent: {
      type: Boolean,
      default: true
    }
  });
  const transferCheckedChangeFn = (value, movedKeys) => [value, movedKeys].every(shared.isArray) || shared.isArray(value) && isNil(movedKeys);
  const transferEmits = {
    [CHANGE_EVENT]: (value, direction2, movedKeys) => [value, movedKeys].every(shared.isArray) && ["left", "right"].includes(direction2),
    [UPDATE_MODEL_EVENT]: (value) => shared.isArray(value),
    [LEFT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn,
    [RIGHT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn
  };
  const CHECKED_CHANGE_EVENT = "checked-change";
  const transferPanelProps = buildProps({
    data: transferProps.data,
    optionRender: {
      type: definePropType(Function)
    },
    placeholder: String,
    title: String,
    filterable: Boolean,
    format: transferProps.format,
    filterMethod: transferProps.filterMethod,
    defaultChecked: transferProps.leftDefaultChecked,
    props: transferProps.props
  });
  const transferPanelEmits = {
    [CHECKED_CHANGE_EVENT]: transferCheckedChangeFn
  };
  const usePropsAlias = (props2) => {
    const initProps = {
      label: "label",
      key: "key",
      disabled: "disabled"
    };
    return vue.computed(() => ({
      ...initProps,
      ...props2.props
    }));
  };
  const useCheck$1 = (props2, panelState, emit) => {
    const propsAlias = usePropsAlias(props2);
    const filteredData = vue.computed(() => {
      return props2.data.filter((item) => {
        if (shared.isFunction(props2.filterMethod)) {
          return props2.filterMethod(panelState.query, item);
        } else {
          const label = String(item[propsAlias.value.label] || item[propsAlias.value.key]);
          return label.toLowerCase().includes(panelState.query.toLowerCase());
        }
      });
    });
    const checkableData = vue.computed(() => filteredData.value.filter((item) => !item[propsAlias.value.disabled]));
    const checkedSummary = vue.computed(() => {
      const checkedLength = panelState.checked.length;
      const dataLength = props2.data.length;
      const { noChecked, hasChecked } = props2.format;
      if (noChecked && hasChecked) {
        return checkedLength > 0 ? hasChecked.replace(/\${checked}/g, checkedLength.toString()).replace(/\${total}/g, dataLength.toString()) : noChecked.replace(/\${total}/g, dataLength.toString());
      } else {
        return `${checkedLength}/${dataLength}`;
      }
    });
    const isIndeterminate = vue.computed(() => {
      const checkedLength = panelState.checked.length;
      return checkedLength > 0 && checkedLength < checkableData.value.length;
    });
    const updateAllChecked = () => {
      const checkableDataKeys = checkableData.value.map((item) => item[propsAlias.value.key]);
      panelState.allChecked = checkableDataKeys.length > 0 && checkableDataKeys.every((item) => panelState.checked.includes(item));
    };
    const handleAllCheckedChange = (value) => {
      panelState.checked = value ? checkableData.value.map((item) => item[propsAlias.value.key]) : [];
    };
    vue.watch(() => panelState.checked, (val, oldVal) => {
      updateAllChecked();
      if (panelState.checkChangeByUser) {
        const movedKeys = val.concat(oldVal).filter((v2) => !val.includes(v2) || !oldVal.includes(v2));
        emit(CHECKED_CHANGE_EVENT, val, movedKeys);
      } else {
        emit(CHECKED_CHANGE_EVENT, val);
        panelState.checkChangeByUser = true;
      }
    });
    vue.watch(checkableData, () => {
      updateAllChecked();
    });
    vue.watch(() => props2.data, () => {
      const checked = [];
      const filteredDataKeys = filteredData.value.map((item) => item[propsAlias.value.key]);
      panelState.checked.forEach((item) => {
        if (filteredDataKeys.includes(item)) {
          checked.push(item);
        }
      });
      panelState.checkChangeByUser = false;
      panelState.checked = checked;
    });
    vue.watch(() => props2.defaultChecked, (val, oldVal) => {
      if (oldVal && val.length === oldVal.length && val.every((item) => oldVal.includes(item)))
        return;
      const checked = [];
      const checkableDataKeys = checkableData.value.map((item) => item[propsAlias.value.key]);
      val.forEach((item) => {
        if (checkableDataKeys.includes(item)) {
          checked.push(item);
        }
      });
      panelState.checkChangeByUser = false;
      panelState.checked = checked;
    }, {
      immediate: true
    });
    return {
      filteredData,
      checkableData,
      checkedSummary,
      isIndeterminate,
      updateAllChecked,
      handleAllCheckedChange
    };
  };
  const useCheckedChange = (checkedState, emit) => {
    const onSourceCheckedChange = (val, movedKeys) => {
      checkedState.leftChecked = val;
      if (!movedKeys)
        return;
      emit(LEFT_CHECK_CHANGE_EVENT, val, movedKeys);
    };
    const onTargetCheckedChange = (val, movedKeys) => {
      checkedState.rightChecked = val;
      if (!movedKeys)
        return;
      emit(RIGHT_CHECK_CHANGE_EVENT, val, movedKeys);
    };
    return {
      onSourceCheckedChange,
      onTargetCheckedChange
    };
  };
  const useComputedData = (props2) => {
    const propsAlias = usePropsAlias(props2);
    const dataObj = vue.computed(() => props2.data.reduce((o2, cur) => (o2[cur[propsAlias.value.key]] = cur) && o2, {}));
    const sourceData = vue.computed(() => props2.data.filter((item) => !props2.modelValue.includes(item[propsAlias.value.key])));
    const targetData = vue.computed(() => {
      if (props2.targetOrder === "original") {
        return props2.data.filter((item) => props2.modelValue.includes(item[propsAlias.value.key]));
      } else {
        return props2.modelValue.reduce((arr, cur) => {
          const val = dataObj.value[cur];
          if (val) {
            arr.push(val);
          }
          return arr;
        }, []);
      }
    });
    return {
      sourceData,
      targetData
    };
  };
  const useMove = (props2, checkedState, emit) => {
    const propsAlias = usePropsAlias(props2);
    const _emit = (value, direction2, movedKeys) => {
      emit(UPDATE_MODEL_EVENT, value);
      emit(CHANGE_EVENT, value, direction2, movedKeys);
    };
    const addToLeft = () => {
      const currentValue = props2.modelValue.slice();
      checkedState.rightChecked.forEach((item) => {
        const index = currentValue.indexOf(item);
        if (index > -1) {
          currentValue.splice(index, 1);
        }
      });
      _emit(currentValue, "left", checkedState.rightChecked);
    };
    const addToRight = () => {
      let currentValue = props2.modelValue.slice();
      const itemsToBeMoved = props2.data.filter((item) => {
        const itemKey = item[propsAlias.value.key];
        return checkedState.leftChecked.includes(itemKey) && !props2.modelValue.includes(itemKey);
      }).map((item) => item[propsAlias.value.key]);
      currentValue = props2.targetOrder === "unshift" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);
      if (props2.targetOrder === "original") {
        currentValue = props2.data.filter((item) => currentValue.includes(item[propsAlias.value.key])).map((item) => item[propsAlias.value.key]);
      }
      _emit(currentValue, "right", checkedState.leftChecked);
    };
    return {
      addToLeft,
      addToRight
    };
  };
  const __default__$j = vue.defineComponent({
    name: "ElTransferPanel"
  });
  const _sfc_main$o = /* @__PURE__ */ vue.defineComponent({
    ...__default__$j,
    props: transferPanelProps,
    emits: transferPanelEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const slots = vue.useSlots();
      const OptionContent = ({ option }) => option;
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("transfer");
      const panelState = vue.reactive({
        checked: [],
        allChecked: false,
        query: "",
        checkChangeByUser: true
      });
      const propsAlias = usePropsAlias(props2);
      const {
        filteredData,
        checkedSummary,
        isIndeterminate,
        handleAllCheckedChange
      } = useCheck$1(props2, panelState, emit);
      const hasNoMatch = vue.computed(() => !isEmpty(panelState.query) && isEmpty(filteredData.value));
      const hasFooter = vue.computed(() => !isEmpty(slots.default()[0].children));
      const { checked, allChecked, query } = vue.toRefs(panelState);
      expose({
        query
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns2).b("panel"))
        }, [
          vue.createElementVNode("p", {
            class: vue.normalizeClass(vue.unref(ns2).be("panel", "header"))
          }, [
            vue.createVNode(vue.unref(ElCheckbox), {
              modelValue: vue.unref(allChecked),
              "onUpdate:modelValue": ($event) => vue.isRef(allChecked) ? allChecked.value = $event : null,
              indeterminate: vue.unref(isIndeterminate),
              "validate-event": false,
              onChange: vue.unref(handleAllCheckedChange)
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(vue.toDisplayString(_ctx.title) + " ", 1),
                vue.createElementVNode("span", null, vue.toDisplayString(vue.unref(checkedSummary)), 1)
              ]),
              _: 1
            }, 8, ["modelValue", "onUpdate:modelValue", "indeterminate", "onChange"])
          ], 2),
          vue.createElementVNode("div", {
            class: vue.normalizeClass([vue.unref(ns2).be("panel", "body"), vue.unref(ns2).is("with-footer", vue.unref(hasFooter))])
          }, [
            _ctx.filterable ? (vue.openBlock(), vue.createBlock(vue.unref(ElInput), {
              key: 0,
              modelValue: vue.unref(query),
              "onUpdate:modelValue": ($event) => vue.isRef(query) ? query.value = $event : null,
              class: vue.normalizeClass(vue.unref(ns2).be("panel", "filter")),
              size: "default",
              placeholder: _ctx.placeholder,
              "prefix-icon": vue.unref(search_default),
              clearable: "",
              "validate-event": false
            }, null, 8, ["modelValue", "onUpdate:modelValue", "class", "placeholder", "prefix-icon"])) : vue.createCommentVNode("v-if", true),
            vue.withDirectives(vue.createVNode(vue.unref(ElCheckboxGroup$1), {
              modelValue: vue.unref(checked),
              "onUpdate:modelValue": ($event) => vue.isRef(checked) ? checked.value = $event : null,
              "validate-event": false,
              class: vue.normalizeClass([vue.unref(ns2).is("filterable", _ctx.filterable), vue.unref(ns2).be("panel", "list")])
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(filteredData), (item) => {
                  return vue.openBlock(), vue.createBlock(vue.unref(ElCheckbox), {
                    key: item[vue.unref(propsAlias).key],
                    class: vue.normalizeClass(vue.unref(ns2).be("panel", "item")),
                    value: item[vue.unref(propsAlias).key],
                    disabled: item[vue.unref(propsAlias).disabled],
                    "validate-event": false
                  }, {
                    default: vue.withCtx(() => {
                      var _a2;
                      return [
                        vue.createVNode(OptionContent, {
                          option: (_a2 = _ctx.optionRender) == null ? void 0 : _a2.call(_ctx, item)
                        }, null, 8, ["option"])
                      ];
                    }),
                    _: 2
                  }, 1032, ["class", "value", "disabled"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["modelValue", "onUpdate:modelValue", "class"]), [
              [vue.vShow, !vue.unref(hasNoMatch) && !vue.unref(isEmpty)(_ctx.data)]
            ]),
            vue.withDirectives(vue.createElementVNode("p", {
              class: vue.normalizeClass(vue.unref(ns2).be("panel", "empty"))
            }, vue.toDisplayString(vue.unref(hasNoMatch) ? vue.unref(t2)("el.transfer.noMatch") : vue.unref(t2)("el.transfer.noData")), 3), [
              [vue.vShow, vue.unref(hasNoMatch) || vue.unref(isEmpty)(_ctx.data)]
            ])
          ], 2),
          vue.unref(hasFooter) ? (vue.openBlock(), vue.createElementBlock("p", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).be("panel", "footer"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var TransferPanel = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["__file", "transfer-panel.vue"]]);
  const __default__$i = vue.defineComponent({
    name: "ElTransfer"
  });
  const _sfc_main$n = /* @__PURE__ */ vue.defineComponent({
    ...__default__$i,
    props: transferProps,
    emits: transferEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const slots = vue.useSlots();
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("transfer");
      const { formItem } = useFormItem();
      const checkedState = vue.reactive({
        leftChecked: [],
        rightChecked: []
      });
      const propsAlias = usePropsAlias(props2);
      const { sourceData, targetData } = useComputedData(props2);
      const { onSourceCheckedChange, onTargetCheckedChange } = useCheckedChange(checkedState, emit);
      const { addToLeft, addToRight } = useMove(props2, checkedState, emit);
      const leftPanel = vue.ref();
      const rightPanel = vue.ref();
      const clearQuery = (which) => {
        switch (which) {
          case "left":
            leftPanel.value.query = "";
            break;
          case "right":
            rightPanel.value.query = "";
            break;
        }
      };
      const hasButtonTexts = vue.computed(() => props2.buttonTexts.length === 2);
      const leftPanelTitle = vue.computed(() => props2.titles[0] || t2("el.transfer.titles.0"));
      const rightPanelTitle = vue.computed(() => props2.titles[1] || t2("el.transfer.titles.1"));
      const panelFilterPlaceholder = vue.computed(() => props2.filterPlaceholder || t2("el.transfer.filterPlaceholder"));
      vue.watch(() => props2.modelValue, () => {
        var _a2;
        if (props2.validateEvent) {
          (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "change").catch((err) => debugWarn(err));
        }
      });
      const optionRender = vue.computed(() => (option) => {
        var _a2;
        if (props2.renderContent)
          return props2.renderContent(vue.h, option);
        const defaultSlotVNodes = (((_a2 = slots.default) == null ? void 0 : _a2.call(slots, { option })) || []).filter((node) => node.type !== vue.Comment);
        if (defaultSlotVNodes.length) {
          return defaultSlotVNodes;
        }
        return vue.h("span", option[propsAlias.value.label] || option[propsAlias.value.key]);
      });
      expose({
        clearQuery,
        leftPanel,
        rightPanel
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns2).b())
        }, [
          vue.createVNode(TransferPanel, {
            ref_key: "leftPanel",
            ref: leftPanel,
            data: vue.unref(sourceData),
            "option-render": vue.unref(optionRender),
            placeholder: vue.unref(panelFilterPlaceholder),
            title: vue.unref(leftPanelTitle),
            filterable: _ctx.filterable,
            format: _ctx.format,
            "filter-method": _ctx.filterMethod,
            "default-checked": _ctx.leftDefaultChecked,
            props: props2.props,
            onCheckedChange: vue.unref(onSourceCheckedChange)
          }, {
            default: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "left-footer")
            ]),
            _: 3
          }, 8, ["data", "option-render", "placeholder", "title", "filterable", "format", "filter-method", "default-checked", "props", "onCheckedChange"]),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("buttons"))
          }, [
            vue.createVNode(vue.unref(ElButton), {
              type: "primary",
              class: vue.normalizeClass([vue.unref(ns2).e("button"), vue.unref(ns2).is("with-texts", vue.unref(hasButtonTexts))]),
              disabled: vue.unref(isEmpty)(checkedState.rightChecked),
              onClick: vue.unref(addToLeft)
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(vue.unref(ElIcon), null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(arrow_left_default))
                  ]),
                  _: 1
                }),
                !vue.unref(isUndefined)(_ctx.buttonTexts[0]) ? (vue.openBlock(), vue.createElementBlock("span", { key: 0 }, vue.toDisplayString(_ctx.buttonTexts[0]), 1)) : vue.createCommentVNode("v-if", true)
              ]),
              _: 1
            }, 8, ["class", "disabled", "onClick"]),
            vue.createVNode(vue.unref(ElButton), {
              type: "primary",
              class: vue.normalizeClass([vue.unref(ns2).e("button"), vue.unref(ns2).is("with-texts", vue.unref(hasButtonTexts))]),
              disabled: vue.unref(isEmpty)(checkedState.leftChecked),
              onClick: vue.unref(addToRight)
            }, {
              default: vue.withCtx(() => [
                !vue.unref(isUndefined)(_ctx.buttonTexts[1]) ? (vue.openBlock(), vue.createElementBlock("span", { key: 0 }, vue.toDisplayString(_ctx.buttonTexts[1]), 1)) : vue.createCommentVNode("v-if", true),
                vue.createVNode(vue.unref(ElIcon), null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(arrow_right_default))
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["class", "disabled", "onClick"])
          ], 2),
          vue.createVNode(TransferPanel, {
            ref_key: "rightPanel",
            ref: rightPanel,
            data: vue.unref(targetData),
            "option-render": vue.unref(optionRender),
            placeholder: vue.unref(panelFilterPlaceholder),
            filterable: _ctx.filterable,
            format: _ctx.format,
            "filter-method": _ctx.filterMethod,
            title: vue.unref(rightPanelTitle),
            "default-checked": _ctx.rightDefaultChecked,
            props: props2.props,
            onCheckedChange: vue.unref(onTargetCheckedChange)
          }, {
            default: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "right-footer")
            ]),
            _: 3
          }, 8, ["data", "option-render", "placeholder", "filterable", "format", "filter-method", "title", "default-checked", "props", "onCheckedChange"])
        ], 2);
      };
    }
  });
  var Transfer = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["__file", "transfer.vue"]]);
  const ElTransfer = withInstall(Transfer);
  const NODE_KEY = "$treeNodeId";
  const markNodeData = function(node, data) {
    if (!data || data[NODE_KEY])
      return;
    Object.defineProperty(data, NODE_KEY, {
      value: node.id,
      enumerable: false,
      configurable: false,
      writable: false
    });
  };
  const getNodeKey = function(key, data) {
    if (!key)
      return data[NODE_KEY];
    return data[key];
  };
  const handleCurrentChange = (store2, emit, setCurrent) => {
    const preCurrentNode = store2.value.currentNode;
    setCurrent();
    const currentNode = store2.value.currentNode;
    if (preCurrentNode === currentNode)
      return;
    emit("current-change", currentNode ? currentNode.data : null, currentNode);
  };
  const getChildState = (node) => {
    let all = true;
    let none = true;
    let allWithoutDisable = true;
    for (let i2 = 0, j2 = node.length; i2 < j2; i2++) {
      const n2 = node[i2];
      if (n2.checked !== true || n2.indeterminate) {
        all = false;
        if (!n2.disabled) {
          allWithoutDisable = false;
        }
      }
      if (n2.checked !== false || n2.indeterminate) {
        none = false;
      }
    }
    return { all, none, allWithoutDisable, half: !all && !none };
  };
  const reInitChecked = function(node) {
    if (node.childNodes.length === 0 || node.loading)
      return;
    const { all, none, half } = getChildState(node.childNodes);
    if (all) {
      node.checked = true;
      node.indeterminate = false;
    } else if (half) {
      node.checked = false;
      node.indeterminate = true;
    } else if (none) {
      node.checked = false;
      node.indeterminate = false;
    }
    const parent2 = node.parent;
    if (!parent2 || parent2.level === 0)
      return;
    if (!node.store.checkStrictly) {
      reInitChecked(parent2);
    }
  };
  const getPropertyFromData = function(node, prop) {
    const props2 = node.store.props;
    const data = node.data || {};
    const config = props2[prop];
    if (typeof config === "function") {
      return config(data, node);
    } else if (typeof config === "string") {
      return data[config];
    } else if (typeof config === "undefined") {
      const dataProp = data[prop];
      return dataProp === void 0 ? "" : dataProp;
    }
  };
  let nodeIdSeed = 0;
  let Node$1 = class Node2 {
    constructor(options) {
      this.id = nodeIdSeed++;
      this.text = null;
      this.checked = false;
      this.indeterminate = false;
      this.data = null;
      this.expanded = false;
      this.parent = null;
      this.visible = true;
      this.isCurrent = false;
      this.canFocus = false;
      for (const name in options) {
        if (shared.hasOwn(options, name)) {
          this[name] = options[name];
        }
      }
      this.level = 0;
      this.loaded = false;
      this.childNodes = [];
      this.loading = false;
      if (this.parent) {
        this.level = this.parent.level + 1;
      }
    }
    initialize() {
      const store2 = this.store;
      if (!store2) {
        throw new Error("[Node]store is required!");
      }
      store2.registerNode(this);
      const props2 = store2.props;
      if (props2 && typeof props2.isLeaf !== "undefined") {
        const isLeaf2 = getPropertyFromData(this, "isLeaf");
        if (typeof isLeaf2 === "boolean") {
          this.isLeafByUser = isLeaf2;
        }
      }
      if (store2.lazy !== true && this.data) {
        this.setData(this.data);
        if (store2.defaultExpandAll) {
          this.expanded = true;
          this.canFocus = true;
        }
      } else if (this.level > 0 && store2.lazy && store2.defaultExpandAll && !this.isLeafByUser) {
        this.expand();
      }
      if (!Array.isArray(this.data)) {
        markNodeData(this, this.data);
      }
      if (!this.data)
        return;
      const defaultExpandedKeys = store2.defaultExpandedKeys;
      const key = store2.key;
      if (key && defaultExpandedKeys && defaultExpandedKeys.includes(this.key)) {
        this.expand(null, store2.autoExpandParent);
      }
      if (key && store2.currentNodeKey !== void 0 && this.key === store2.currentNodeKey) {
        store2.currentNode = this;
        store2.currentNode.isCurrent = true;
      }
      if (store2.lazy) {
        store2._initDefaultCheckedNode(this);
      }
      this.updateLeafState();
      if (this.parent && (this.level === 1 || this.parent.expanded === true))
        this.canFocus = true;
    }
    setData(data) {
      if (!Array.isArray(data)) {
        markNodeData(this, data);
      }
      this.data = data;
      this.childNodes = [];
      let children;
      if (this.level === 0 && Array.isArray(this.data)) {
        children = this.data;
      } else {
        children = getPropertyFromData(this, "children") || [];
      }
      for (let i2 = 0, j2 = children.length; i2 < j2; i2++) {
        this.insertChild({ data: children[i2] });
      }
    }
    get label() {
      return getPropertyFromData(this, "label");
    }
    get key() {
      const nodeKey = this.store.key;
      if (this.data)
        return this.data[nodeKey];
      return null;
    }
    get disabled() {
      return getPropertyFromData(this, "disabled");
    }
    get nextSibling() {
      const parent2 = this.parent;
      if (parent2) {
        const index = parent2.childNodes.indexOf(this);
        if (index > -1) {
          return parent2.childNodes[index + 1];
        }
      }
      return null;
    }
    get previousSibling() {
      const parent2 = this.parent;
      if (parent2) {
        const index = parent2.childNodes.indexOf(this);
        if (index > -1) {
          return index > 0 ? parent2.childNodes[index - 1] : null;
        }
      }
      return null;
    }
    contains(target, deep = true) {
      return (this.childNodes || []).some((child) => child === target || deep && child.contains(target));
    }
    remove() {
      const parent2 = this.parent;
      if (parent2) {
        parent2.removeChild(this);
      }
    }
    insertChild(child, index, batch) {
      if (!child)
        throw new Error("InsertChild error: child is required.");
      if (!(child instanceof Node2)) {
        if (!batch) {
          const children = this.getChildren(true);
          if (!children.includes(child.data)) {
            if (typeof index === "undefined" || index < 0) {
              children.push(child.data);
            } else {
              children.splice(index, 0, child.data);
            }
          }
        }
        Object.assign(child, {
          parent: this,
          store: this.store
        });
        child = vue.reactive(new Node2(child));
        if (child instanceof Node2) {
          child.initialize();
        }
      }
      child.level = this.level + 1;
      if (typeof index === "undefined" || index < 0) {
        this.childNodes.push(child);
      } else {
        this.childNodes.splice(index, 0, child);
      }
      this.updateLeafState();
    }
    insertBefore(child, ref2) {
      let index;
      if (ref2) {
        index = this.childNodes.indexOf(ref2);
      }
      this.insertChild(child, index);
    }
    insertAfter(child, ref2) {
      let index;
      if (ref2) {
        index = this.childNodes.indexOf(ref2);
        if (index !== -1)
          index += 1;
      }
      this.insertChild(child, index);
    }
    removeChild(child) {
      const children = this.getChildren() || [];
      const dataIndex = children.indexOf(child.data);
      if (dataIndex > -1) {
        children.splice(dataIndex, 1);
      }
      const index = this.childNodes.indexOf(child);
      if (index > -1) {
        this.store && this.store.deregisterNode(child);
        child.parent = null;
        this.childNodes.splice(index, 1);
      }
      this.updateLeafState();
    }
    removeChildByData(data) {
      let targetNode = null;
      for (let i2 = 0; i2 < this.childNodes.length; i2++) {
        if (this.childNodes[i2].data === data) {
          targetNode = this.childNodes[i2];
          break;
        }
      }
      if (targetNode) {
        this.removeChild(targetNode);
      }
    }
    expand(callback, expandParent) {
      const done = () => {
        if (expandParent) {
          let parent2 = this.parent;
          while (parent2.level > 0) {
            parent2.expanded = true;
            parent2 = parent2.parent;
          }
        }
        this.expanded = true;
        if (callback)
          callback();
        this.childNodes.forEach((item) => {
          item.canFocus = true;
        });
      };
      if (this.shouldLoadData()) {
        this.loadData((data) => {
          if (Array.isArray(data)) {
            if (this.checked) {
              this.setChecked(true, true);
            } else if (!this.store.checkStrictly) {
              reInitChecked(this);
            }
            done();
          }
        });
      } else {
        done();
      }
    }
    doCreateChildren(array, defaultProps2 = {}) {
      array.forEach((item) => {
        this.insertChild(Object.assign({ data: item }, defaultProps2), void 0, true);
      });
    }
    collapse() {
      this.expanded = false;
      this.childNodes.forEach((item) => {
        item.canFocus = false;
      });
    }
    shouldLoadData() {
      return this.store.lazy === true && this.store.load && !this.loaded;
    }
    updateLeafState() {
      if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== "undefined") {
        this.isLeaf = this.isLeafByUser;
        return;
      }
      const childNodes = this.childNodes;
      if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {
        this.isLeaf = !childNodes || childNodes.length === 0;
        return;
      }
      this.isLeaf = false;
    }
    setChecked(value, deep, recursion, passValue) {
      this.indeterminate = value === "half";
      this.checked = value === true;
      if (this.store.checkStrictly)
        return;
      if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
        const { all, allWithoutDisable } = getChildState(this.childNodes);
        if (!this.isLeaf && !all && allWithoutDisable) {
          this.checked = false;
          value = false;
        }
        const handleDescendants = () => {
          if (deep) {
            const childNodes = this.childNodes;
            for (let i2 = 0, j2 = childNodes.length; i2 < j2; i2++) {
              const child = childNodes[i2];
              passValue = passValue || value !== false;
              const isCheck = child.disabled ? child.checked : passValue;
              child.setChecked(isCheck, deep, true, passValue);
            }
            const { half, all: all2 } = getChildState(childNodes);
            if (!all2) {
              this.checked = all2;
              this.indeterminate = half;
            }
          }
        };
        if (this.shouldLoadData()) {
          this.loadData(() => {
            handleDescendants();
            reInitChecked(this);
          }, {
            checked: value !== false
          });
          return;
        } else {
          handleDescendants();
        }
      }
      const parent2 = this.parent;
      if (!parent2 || parent2.level === 0)
        return;
      if (!recursion) {
        reInitChecked(parent2);
      }
    }
    getChildren(forceInit = false) {
      if (this.level === 0)
        return this.data;
      const data = this.data;
      if (!data)
        return null;
      const props2 = this.store.props;
      let children = "children";
      if (props2) {
        children = props2.children || "children";
      }
      if (data[children] === void 0) {
        data[children] = null;
      }
      if (forceInit && !data[children]) {
        data[children] = [];
      }
      return data[children];
    }
    updateChildren() {
      const newData = this.getChildren() || [];
      const oldData = this.childNodes.map((node) => node.data);
      const newDataMap = {};
      const newNodes = [];
      newData.forEach((item, index) => {
        const key = item[NODE_KEY];
        const isNodeExists = !!key && oldData.findIndex((data) => data[NODE_KEY] === key) >= 0;
        if (isNodeExists) {
          newDataMap[key] = { index, data: item };
        } else {
          newNodes.push({ index, data: item });
        }
      });
      if (!this.store.lazy) {
        oldData.forEach((item) => {
          if (!newDataMap[item[NODE_KEY]])
            this.removeChildByData(item);
        });
      }
      newNodes.forEach(({ index, data }) => {
        this.insertChild({ data }, index);
      });
      this.updateLeafState();
    }
    loadData(callback, defaultProps2 = {}) {
      if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps2).length)) {
        this.loading = true;
        const resolve = (children) => {
          this.childNodes = [];
          this.doCreateChildren(children, defaultProps2);
          this.loaded = true;
          this.loading = false;
          this.updateLeafState();
          if (callback) {
            callback.call(this, children);
          }
        };
        const reject = () => {
          this.loading = false;
        };
        this.store.load(this, resolve, reject);
      } else {
        if (callback) {
          callback.call(this);
        }
      }
    }
    eachNode(callback) {
      const arr = [this];
      while (arr.length) {
        const node = arr.shift();
        arr.unshift(...node.childNodes);
        callback(node);
      }
    }
    reInitChecked() {
      if (this.store.checkStrictly)
        return;
      reInitChecked(this);
    }
  };
  class TreeStore {
    constructor(options) {
      this.currentNode = null;
      this.currentNodeKey = null;
      for (const option in options) {
        if (shared.hasOwn(options, option)) {
          this[option] = options[option];
        }
      }
      this.nodesMap = {};
    }
    initialize() {
      this.root = new Node$1({
        data: this.data,
        store: this
      });
      this.root.initialize();
      if (this.lazy && this.load) {
        const loadFn = this.load;
        loadFn(this.root, (data) => {
          this.root.doCreateChildren(data);
          this._initDefaultCheckedNodes();
        });
      } else {
        this._initDefaultCheckedNodes();
      }
    }
    filter(value) {
      const filterNodeMethod = this.filterNodeMethod;
      const lazy = this.lazy;
      const traverse = function(node) {
        const childNodes = node.root ? node.root.childNodes : node.childNodes;
        childNodes.forEach((child) => {
          child.visible = filterNodeMethod.call(child, value, child.data, child);
          traverse(child);
        });
        if (!node.visible && childNodes.length) {
          let allHidden = true;
          allHidden = !childNodes.some((child) => child.visible);
          if (node.root) {
            node.root.visible = allHidden === false;
          } else {
            node.visible = allHidden === false;
          }
        }
        if (!value)
          return;
        if (node.visible && !node.isLeaf) {
          if (!lazy || node.loaded) {
            node.expand();
          }
        }
      };
      traverse(this);
    }
    setData(newVal) {
      const instanceChanged = newVal !== this.root.data;
      if (instanceChanged) {
        this.nodesMap = {};
        this.root.setData(newVal);
        this._initDefaultCheckedNodes();
      } else {
        this.root.updateChildren();
      }
    }
    getNode(data) {
      if (data instanceof Node$1)
        return data;
      const key = shared.isObject(data) ? getNodeKey(this.key, data) : data;
      return this.nodesMap[key] || null;
    }
    insertBefore(data, refData) {
      const refNode = this.getNode(refData);
      refNode.parent.insertBefore({ data }, refNode);
    }
    insertAfter(data, refData) {
      const refNode = this.getNode(refData);
      refNode.parent.insertAfter({ data }, refNode);
    }
    remove(data) {
      const node = this.getNode(data);
      if (node && node.parent) {
        if (node === this.currentNode) {
          this.currentNode = null;
        }
        node.parent.removeChild(node);
      }
    }
    append(data, parentData) {
      const parentNode = !isPropAbsent(parentData) ? this.getNode(parentData) : this.root;
      if (parentNode) {
        parentNode.insertChild({ data });
      }
    }
    _initDefaultCheckedNodes() {
      const defaultCheckedKeys = this.defaultCheckedKeys || [];
      const nodesMap = this.nodesMap;
      defaultCheckedKeys.forEach((checkedKey) => {
        const node = nodesMap[checkedKey];
        if (node) {
          node.setChecked(true, !this.checkStrictly);
        }
      });
    }
    _initDefaultCheckedNode(node) {
      const defaultCheckedKeys = this.defaultCheckedKeys || [];
      if (defaultCheckedKeys.includes(node.key)) {
        node.setChecked(true, !this.checkStrictly);
      }
    }
    setDefaultCheckedKey(newVal) {
      if (newVal !== this.defaultCheckedKeys) {
        this.defaultCheckedKeys = newVal;
        this._initDefaultCheckedNodes();
      }
    }
    registerNode(node) {
      const key = this.key;
      if (!node || !node.data)
        return;
      if (!key) {
        this.nodesMap[node.id] = node;
      } else {
        const nodeKey = node.key;
        if (nodeKey !== void 0)
          this.nodesMap[node.key] = node;
      }
    }
    deregisterNode(node) {
      const key = this.key;
      if (!key || !node || !node.data)
        return;
      node.childNodes.forEach((child) => {
        this.deregisterNode(child);
      });
      delete this.nodesMap[node.key];
    }
    getCheckedNodes(leafOnly = false, includeHalfChecked = false) {
      const checkedNodes = [];
      const traverse = function(node) {
        const childNodes = node.root ? node.root.childNodes : node.childNodes;
        childNodes.forEach((child) => {
          if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {
            checkedNodes.push(child.data);
          }
          traverse(child);
        });
      };
      traverse(this);
      return checkedNodes;
    }
    getCheckedKeys(leafOnly = false) {
      return this.getCheckedNodes(leafOnly).map((data) => (data || {})[this.key]);
    }
    getHalfCheckedNodes() {
      const nodes = [];
      const traverse = function(node) {
        const childNodes = node.root ? node.root.childNodes : node.childNodes;
        childNodes.forEach((child) => {
          if (child.indeterminate) {
            nodes.push(child.data);
          }
          traverse(child);
        });
      };
      traverse(this);
      return nodes;
    }
    getHalfCheckedKeys() {
      return this.getHalfCheckedNodes().map((data) => (data || {})[this.key]);
    }
    _getAllNodes() {
      const allNodes = [];
      const nodesMap = this.nodesMap;
      for (const nodeKey in nodesMap) {
        if (shared.hasOwn(nodesMap, nodeKey)) {
          allNodes.push(nodesMap[nodeKey]);
        }
      }
      return allNodes;
    }
    updateChildren(key, data) {
      const node = this.nodesMap[key];
      if (!node)
        return;
      const childNodes = node.childNodes;
      for (let i2 = childNodes.length - 1; i2 >= 0; i2--) {
        const child = childNodes[i2];
        this.remove(child.data);
      }
      for (let i2 = 0, j2 = data.length; i2 < j2; i2++) {
        const child = data[i2];
        this.append(child, node.data);
      }
    }
    _setCheckedKeys(key, leafOnly = false, checkedKeys) {
      const allNodes = this._getAllNodes().sort((a2, b2) => a2.level - b2.level);
      const cache2 = /* @__PURE__ */ Object.create(null);
      const keys2 = Object.keys(checkedKeys);
      allNodes.forEach((node) => node.setChecked(false, false));
      const cacheCheckedChild = (node) => {
        node.childNodes.forEach((child) => {
          var _a2;
          cache2[child.data[key]] = true;
          if ((_a2 = child.childNodes) == null ? void 0 : _a2.length) {
            cacheCheckedChild(child);
          }
        });
      };
      for (let i2 = 0, j2 = allNodes.length; i2 < j2; i2++) {
        const node = allNodes[i2];
        const nodeKey = node.data[key].toString();
        const checked = keys2.includes(nodeKey);
        if (!checked) {
          if (node.checked && !cache2[nodeKey]) {
            node.setChecked(false, false);
          }
          continue;
        }
        if (node.childNodes.length) {
          cacheCheckedChild(node);
        }
        if (node.isLeaf || this.checkStrictly) {
          node.setChecked(true, false);
          continue;
        }
        node.setChecked(true, true);
        if (leafOnly) {
          node.setChecked(false, false);
          const traverse = function(node2) {
            const childNodes = node2.childNodes;
            childNodes.forEach((child) => {
              if (!child.isLeaf) {
                child.setChecked(false, false);
              }
              traverse(child);
            });
          };
          traverse(node);
        }
      }
    }
    setCheckedNodes(array, leafOnly = false) {
      const key = this.key;
      const checkedKeys = {};
      array.forEach((item) => {
        checkedKeys[(item || {})[key]] = true;
      });
      this._setCheckedKeys(key, leafOnly, checkedKeys);
    }
    setCheckedKeys(keys2, leafOnly = false) {
      this.defaultCheckedKeys = keys2;
      const key = this.key;
      const checkedKeys = {};
      keys2.forEach((key2) => {
        checkedKeys[key2] = true;
      });
      this._setCheckedKeys(key, leafOnly, checkedKeys);
    }
    setDefaultExpandedKeys(keys2) {
      keys2 = keys2 || [];
      this.defaultExpandedKeys = keys2;
      keys2.forEach((key) => {
        const node = this.getNode(key);
        if (node)
          node.expand(null, this.autoExpandParent);
      });
    }
    setChecked(data, checked, deep) {
      const node = this.getNode(data);
      if (node) {
        node.setChecked(!!checked, deep);
      }
    }
    getCurrentNode() {
      return this.currentNode;
    }
    setCurrentNode(currentNode) {
      const prevCurrentNode = this.currentNode;
      if (prevCurrentNode) {
        prevCurrentNode.isCurrent = false;
      }
      this.currentNode = currentNode;
      this.currentNode.isCurrent = true;
    }
    setUserCurrentNode(node, shouldAutoExpandParent = true) {
      const key = node[this.key];
      const currNode = this.nodesMap[key];
      this.setCurrentNode(currNode);
      if (shouldAutoExpandParent && this.currentNode.level > 1) {
        this.currentNode.parent.expand(null, true);
      }
    }
    setCurrentNodeKey(key, shouldAutoExpandParent = true) {
      if (key === null || key === void 0) {
        this.currentNode && (this.currentNode.isCurrent = false);
        this.currentNode = null;
        return;
      }
      const node = this.getNode(key);
      if (node) {
        this.setCurrentNode(node);
        if (shouldAutoExpandParent && this.currentNode.level > 1) {
          this.currentNode.parent.expand(null, true);
        }
      }
    }
  }
  const _sfc_main$m = vue.defineComponent({
    name: "ElTreeNodeContent",
    props: {
      node: {
        type: Object,
        required: true
      },
      renderContent: Function
    },
    setup(props2) {
      const ns2 = useNamespace("tree");
      const nodeInstance = vue.inject("NodeInstance");
      const tree = vue.inject("RootTree");
      return () => {
        const node = props2.node;
        const { data, store: store2 } = node;
        return props2.renderContent ? props2.renderContent(vue.h, { _self: nodeInstance, node, data, store: store2 }) : vue.renderSlot(tree.ctx.slots, "default", { node, data }, () => [
          vue.h("span", { class: ns2.be("node", "label") }, [node.label])
        ]);
      };
    }
  });
  var NodeContent = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["__file", "tree-node-content.vue"]]);
  function useNodeExpandEventBroadcast(props2) {
    const parentNodeMap = vue.inject("TreeNodeMap", null);
    const currentNodeMap = {
      treeNodeExpand: (node) => {
        if (props2.node !== node) {
          props2.node.collapse();
        }
      },
      children: []
    };
    if (parentNodeMap) {
      parentNodeMap.children.push(currentNodeMap);
    }
    vue.provide("TreeNodeMap", currentNodeMap);
    return {
      broadcastExpanded: (node) => {
        if (!props2.accordion)
          return;
        for (const childNode of currentNodeMap.children) {
          childNode.treeNodeExpand(node);
        }
      }
    };
  }
  const dragEventsKey = Symbol("dragEvents");
  function useDragNodeHandler({ props: props2, ctx, el$, dropIndicator$, store: store2 }) {
    const ns2 = useNamespace("tree");
    const dragState = vue.ref({
      showDropIndicator: false,
      draggingNode: null,
      dropNode: null,
      allowDrop: true,
      dropType: null
    });
    const treeNodeDragStart = ({ event, treeNode }) => {
      if (typeof props2.allowDrag === "function" && !props2.allowDrag(treeNode.node)) {
        event.preventDefault();
        return false;
      }
      event.dataTransfer.effectAllowed = "move";
      try {
        event.dataTransfer.setData("text/plain", "");
      } catch (e) {
      }
      dragState.value.draggingNode = treeNode;
      ctx.emit("node-drag-start", treeNode.node, event);
    };
    const treeNodeDragOver = ({ event, treeNode }) => {
      const dropNode = treeNode;
      const oldDropNode = dragState.value.dropNode;
      if (oldDropNode && oldDropNode.node.id !== dropNode.node.id) {
        removeClass(oldDropNode.$el, ns2.is("drop-inner"));
      }
      const draggingNode = dragState.value.draggingNode;
      if (!draggingNode || !dropNode)
        return;
      let dropPrev = true;
      let dropInner = true;
      let dropNext = true;
      let userAllowDropInner = true;
      if (typeof props2.allowDrop === "function") {
        dropPrev = props2.allowDrop(draggingNode.node, dropNode.node, "prev");
        userAllowDropInner = dropInner = props2.allowDrop(draggingNode.node, dropNode.node, "inner");
        dropNext = props2.allowDrop(draggingNode.node, dropNode.node, "next");
      }
      event.dataTransfer.dropEffect = dropInner || dropPrev || dropNext ? "move" : "none";
      if ((dropPrev || dropInner || dropNext) && (oldDropNode == null ? void 0 : oldDropNode.node.id) !== dropNode.node.id) {
        if (oldDropNode) {
          ctx.emit("node-drag-leave", draggingNode.node, oldDropNode.node, event);
        }
        ctx.emit("node-drag-enter", draggingNode.node, dropNode.node, event);
      }
      if (dropPrev || dropInner || dropNext) {
        dragState.value.dropNode = dropNode;
      } else {
        dragState.value.dropNode = null;
      }
      if (dropNode.node.nextSibling === draggingNode.node) {
        dropNext = false;
      }
      if (dropNode.node.previousSibling === draggingNode.node) {
        dropPrev = false;
      }
      if (dropNode.node.contains(draggingNode.node, false)) {
        dropInner = false;
      }
      if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {
        dropPrev = false;
        dropInner = false;
        dropNext = false;
      }
      const targetPosition = dropNode.$el.querySelector(`.${ns2.be("node", "content")}`).getBoundingClientRect();
      const treePosition = el$.value.getBoundingClientRect();
      let dropType;
      const prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;
      const nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;
      let indicatorTop = -9999;
      const distance = event.clientY - targetPosition.top;
      if (distance < targetPosition.height * prevPercent) {
        dropType = "before";
      } else if (distance > targetPosition.height * nextPercent) {
        dropType = "after";
      } else if (dropInner) {
        dropType = "inner";
      } else {
        dropType = "none";
      }
      const iconPosition = dropNode.$el.querySelector(`.${ns2.be("node", "expand-icon")}`).getBoundingClientRect();
      const dropIndicator = dropIndicator$.value;
      if (dropType === "before") {
        indicatorTop = iconPosition.top - treePosition.top;
      } else if (dropType === "after") {
        indicatorTop = iconPosition.bottom - treePosition.top;
      }
      dropIndicator.style.top = `${indicatorTop}px`;
      dropIndicator.style.left = `${iconPosition.right - treePosition.left}px`;
      if (dropType === "inner") {
        addClass(dropNode.$el, ns2.is("drop-inner"));
      } else {
        removeClass(dropNode.$el, ns2.is("drop-inner"));
      }
      dragState.value.showDropIndicator = dropType === "before" || dropType === "after";
      dragState.value.allowDrop = dragState.value.showDropIndicator || userAllowDropInner;
      dragState.value.dropType = dropType;
      ctx.emit("node-drag-over", draggingNode.node, dropNode.node, event);
    };
    const treeNodeDragEnd = (event) => {
      const { draggingNode, dropType, dropNode } = dragState.value;
      event.preventDefault();
      if (event.dataTransfer) {
        event.dataTransfer.dropEffect = "move";
      }
      if (draggingNode && dropNode) {
        const draggingNodeCopy = { data: draggingNode.node.data };
        if (dropType !== "none") {
          draggingNode.node.remove();
        }
        if (dropType === "before") {
          dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);
        } else if (dropType === "after") {
          dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);
        } else if (dropType === "inner") {
          dropNode.node.insertChild(draggingNodeCopy);
        }
        if (dropType !== "none") {
          store2.value.registerNode(draggingNodeCopy);
          if (store2.value.key) {
            draggingNode.node.eachNode((node) => {
              var _a2;
              (_a2 = store2.value.nodesMap[node.data[store2.value.key]]) == null ? void 0 : _a2.setChecked(node.checked, !store2.value.checkStrictly);
            });
          }
        }
        removeClass(dropNode.$el, ns2.is("drop-inner"));
        ctx.emit("node-drag-end", draggingNode.node, dropNode.node, dropType, event);
        if (dropType !== "none") {
          ctx.emit("node-drop", draggingNode.node, dropNode.node, dropType, event);
        }
      }
      if (draggingNode && !dropNode) {
        ctx.emit("node-drag-end", draggingNode.node, null, dropType, event);
      }
      dragState.value.showDropIndicator = false;
      dragState.value.draggingNode = null;
      dragState.value.dropNode = null;
      dragState.value.allowDrop = true;
    };
    vue.provide(dragEventsKey, {
      treeNodeDragStart,
      treeNodeDragOver,
      treeNodeDragEnd
    });
    return {
      dragState
    };
  }
  const _sfc_main$l = vue.defineComponent({
    name: "ElTreeNode",
    components: {
      ElCollapseTransition,
      ElCheckbox,
      NodeContent,
      ElIcon,
      Loading: loading_default
    },
    props: {
      node: {
        type: Node$1,
        default: () => ({})
      },
      props: {
        type: Object,
        default: () => ({})
      },
      accordion: Boolean,
      renderContent: Function,
      renderAfterExpand: Boolean,
      showCheckbox: {
        type: Boolean,
        default: false
      }
    },
    emits: ["node-expand"],
    setup(props2, ctx) {
      const ns2 = useNamespace("tree");
      const { broadcastExpanded } = useNodeExpandEventBroadcast(props2);
      const tree = vue.inject("RootTree");
      const expanded = vue.ref(false);
      const childNodeRendered = vue.ref(false);
      const oldChecked = vue.ref(null);
      const oldIndeterminate = vue.ref(null);
      const node$ = vue.ref(null);
      const dragEvents = vue.inject(dragEventsKey);
      const instance = vue.getCurrentInstance();
      vue.provide("NodeInstance", instance);
      if (!tree) {
        debugWarn("Tree", "Can not find node's tree.");
      }
      if (props2.node.expanded) {
        expanded.value = true;
        childNodeRendered.value = true;
      }
      const childrenKey = tree.props.props["children"] || "children";
      vue.watch(() => {
        const children = props2.node.data[childrenKey];
        return children && [...children];
      }, () => {
        props2.node.updateChildren();
      });
      vue.watch(() => props2.node.indeterminate, (val) => {
        handleSelectChange(props2.node.checked, val);
      });
      vue.watch(() => props2.node.checked, (val) => {
        handleSelectChange(val, props2.node.indeterminate);
      });
      vue.watch(() => props2.node.childNodes.length, () => props2.node.reInitChecked());
      vue.watch(() => props2.node.expanded, (val) => {
        vue.nextTick(() => expanded.value = val);
        if (val) {
          childNodeRendered.value = true;
        }
      });
      const getNodeKey$1 = (node) => {
        return getNodeKey(tree.props.nodeKey, node.data);
      };
      const getNodeClass = (node) => {
        const nodeClassFunc = props2.props.class;
        if (!nodeClassFunc) {
          return {};
        }
        let className;
        if (shared.isFunction(nodeClassFunc)) {
          const { data } = node;
          className = nodeClassFunc(data, node);
        } else {
          className = nodeClassFunc;
        }
        if (shared.isString(className)) {
          return { [className]: true };
        } else {
          return className;
        }
      };
      const handleSelectChange = (checked, indeterminate) => {
        if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {
          tree.ctx.emit("check-change", props2.node.data, checked, indeterminate);
        }
        oldChecked.value = checked;
        oldIndeterminate.value = indeterminate;
      };
      const handleClick = (e) => {
        handleCurrentChange(tree.store, tree.ctx.emit, () => tree.store.value.setCurrentNode(props2.node));
        tree.currentNode.value = props2.node;
        if (tree.props.expandOnClickNode) {
          handleExpandIconClick();
        }
        if (tree.props.checkOnClickNode && !props2.node.disabled) {
          handleCheckChange(null, {
            target: { checked: !props2.node.checked }
          });
        }
        tree.ctx.emit("node-click", props2.node.data, props2.node, instance, e);
      };
      const handleContextMenu = (event) => {
        if (tree.instance.vnode.props["onNodeContextmenu"]) {
          event.stopPropagation();
          event.preventDefault();
        }
        tree.ctx.emit("node-contextmenu", event, props2.node.data, props2.node, instance);
      };
      const handleExpandIconClick = () => {
        if (props2.node.isLeaf)
          return;
        if (expanded.value) {
          tree.ctx.emit("node-collapse", props2.node.data, props2.node, instance);
          props2.node.collapse();
        } else {
          props2.node.expand(() => {
            ctx.emit("node-expand", props2.node.data, props2.node, instance);
          });
        }
      };
      const handleCheckChange = (value, ev) => {
        props2.node.setChecked(ev.target.checked, !tree.props.checkStrictly);
        vue.nextTick(() => {
          const store2 = tree.store.value;
          tree.ctx.emit("check", props2.node.data, {
            checkedNodes: store2.getCheckedNodes(),
            checkedKeys: store2.getCheckedKeys(),
            halfCheckedNodes: store2.getHalfCheckedNodes(),
            halfCheckedKeys: store2.getHalfCheckedKeys()
          });
        });
      };
      const handleChildNodeExpand = (nodeData, node, instance2) => {
        broadcastExpanded(node);
        tree.ctx.emit("node-expand", nodeData, node, instance2);
      };
      const handleDragStart = (event) => {
        if (!tree.props.draggable)
          return;
        dragEvents.treeNodeDragStart({ event, treeNode: props2 });
      };
      const handleDragOver = (event) => {
        event.preventDefault();
        if (!tree.props.draggable)
          return;
        dragEvents.treeNodeDragOver({
          event,
          treeNode: { $el: node$.value, node: props2.node }
        });
      };
      const handleDrop = (event) => {
        event.preventDefault();
      };
      const handleDragEnd = (event) => {
        if (!tree.props.draggable)
          return;
        dragEvents.treeNodeDragEnd(event);
      };
      return {
        ns: ns2,
        node$,
        tree,
        expanded,
        childNodeRendered,
        oldChecked,
        oldIndeterminate,
        getNodeKey: getNodeKey$1,
        getNodeClass,
        handleSelectChange,
        handleClick,
        handleContextMenu,
        handleExpandIconClick,
        handleCheckChange,
        handleChildNodeExpand,
        handleDragStart,
        handleDragOver,
        handleDrop,
        handleDragEnd,
        CaretRight: caret_right_default
      };
    }
  });
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_icon = vue.resolveComponent("el-icon");
    const _component_el_checkbox = vue.resolveComponent("el-checkbox");
    const _component_loading = vue.resolveComponent("loading");
    const _component_node_content = vue.resolveComponent("node-content");
    const _component_el_tree_node = vue.resolveComponent("el-tree-node");
    const _component_el_collapse_transition = vue.resolveComponent("el-collapse-transition");
    return vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
      ref: "node$",
      class: vue.normalizeClass([
        _ctx.ns.b("node"),
        _ctx.ns.is("expanded", _ctx.expanded),
        _ctx.ns.is("current", _ctx.node.isCurrent),
        _ctx.ns.is("hidden", !_ctx.node.visible),
        _ctx.ns.is("focusable", !_ctx.node.disabled),
        _ctx.ns.is("checked", !_ctx.node.disabled && _ctx.node.checked),
        _ctx.getNodeClass(_ctx.node)
      ]),
      role: "treeitem",
      tabindex: "-1",
      "aria-expanded": _ctx.expanded,
      "aria-disabled": _ctx.node.disabled,
      "aria-checked": _ctx.node.checked,
      draggable: _ctx.tree.props.draggable,
      "data-key": _ctx.getNodeKey(_ctx.node),
      onClick: vue.withModifiers(_ctx.handleClick, ["stop"]),
      onContextmenu: _ctx.handleContextMenu,
      onDragstart: vue.withModifiers(_ctx.handleDragStart, ["stop"]),
      onDragover: vue.withModifiers(_ctx.handleDragOver, ["stop"]),
      onDragend: vue.withModifiers(_ctx.handleDragEnd, ["stop"]),
      onDrop: vue.withModifiers(_ctx.handleDrop, ["stop"])
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.be("node", "content")),
        style: vue.normalizeStyle({ paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + "px" })
      }, [
        _ctx.tree.props.icon || _ctx.CaretRight ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 0,
          class: vue.normalizeClass([
            _ctx.ns.be("node", "expand-icon"),
            _ctx.ns.is("leaf", _ctx.node.isLeaf),
            {
              expanded: !_ctx.node.isLeaf && _ctx.expanded
            }
          ]),
          onClick: vue.withModifiers(_ctx.handleExpandIconClick, ["stop"])
        }, {
          default: vue.withCtx(() => [
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))
          ]),
          _: 1
        }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-if", true),
        _ctx.showCheckbox ? (vue.openBlock(), vue.createBlock(_component_el_checkbox, {
          key: 1,
          "model-value": _ctx.node.checked,
          indeterminate: _ctx.node.indeterminate,
          disabled: !!_ctx.node.disabled,
          onClick: vue.withModifiers(() => {
          }, ["stop"]),
          onChange: _ctx.handleCheckChange
        }, null, 8, ["model-value", "indeterminate", "disabled", "onClick", "onChange"])) : vue.createCommentVNode("v-if", true),
        _ctx.node.loading ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 2,
          class: vue.normalizeClass([_ctx.ns.be("node", "loading-icon"), _ctx.ns.is("loading")])
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_loading)
          ]),
          _: 1
        }, 8, ["class"])) : vue.createCommentVNode("v-if", true),
        vue.createVNode(_component_node_content, {
          node: _ctx.node,
          "render-content": _ctx.renderContent
        }, null, 8, ["node", "render-content"])
      ], 6),
      vue.createVNode(_component_el_collapse_transition, null, {
        default: vue.withCtx(() => [
          !_ctx.renderAfterExpand || _ctx.childNodeRendered ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(_ctx.ns.be("node", "children")),
            role: "group",
            "aria-expanded": _ctx.expanded
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.node.childNodes, (child) => {
              return vue.openBlock(), vue.createBlock(_component_el_tree_node, {
                key: _ctx.getNodeKey(child),
                "render-content": _ctx.renderContent,
                "render-after-expand": _ctx.renderAfterExpand,
                "show-checkbox": _ctx.showCheckbox,
                node: child,
                accordion: _ctx.accordion,
                props: _ctx.props,
                onNodeExpand: _ctx.handleChildNodeExpand
              }, null, 8, ["render-content", "render-after-expand", "show-checkbox", "node", "accordion", "props", "onNodeExpand"]);
            }), 128))
          ], 10, ["aria-expanded"])), [
            [vue.vShow, _ctx.expanded]
          ]) : vue.createCommentVNode("v-if", true)
        ]),
        _: 1
      })
    ], 42, ["aria-expanded", "aria-disabled", "aria-checked", "draggable", "data-key", "onClick", "onContextmenu", "onDragstart", "onDragover", "onDragend", "onDrop"])), [
      [vue.vShow, _ctx.node.visible]
    ]);
  }
  var ElTreeNode$1 = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$2], ["__file", "tree-node.vue"]]);
  function useKeydown({ el$ }, store2) {
    const ns2 = useNamespace("tree");
    const treeItems = vue.shallowRef([]);
    const checkboxItems = vue.shallowRef([]);
    vue.onMounted(() => {
      initTabIndex();
    });
    vue.onUpdated(() => {
      treeItems.value = Array.from(el$.value.querySelectorAll("[role=treeitem]"));
      checkboxItems.value = Array.from(el$.value.querySelectorAll("input[type=checkbox]"));
    });
    vue.watch(checkboxItems, (val) => {
      val.forEach((checkbox) => {
        checkbox.setAttribute("tabindex", "-1");
      });
    });
    const handleKeydown = (ev) => {
      const currentItem = ev.target;
      if (!currentItem.className.includes(ns2.b("node")))
        return;
      const code = ev.code;
      treeItems.value = Array.from(el$.value.querySelectorAll(`.${ns2.is("focusable")}[role=treeitem]`));
      const currentIndex = treeItems.value.indexOf(currentItem);
      let nextIndex;
      if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {
        ev.preventDefault();
        if (code === EVENT_CODE.up) {
          nextIndex = currentIndex === -1 ? 0 : currentIndex !== 0 ? currentIndex - 1 : treeItems.value.length - 1;
          const startIndex = nextIndex;
          while (true) {
            if (store2.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus)
              break;
            nextIndex--;
            if (nextIndex === startIndex) {
              nextIndex = -1;
              break;
            }
            if (nextIndex < 0) {
              nextIndex = treeItems.value.length - 1;
            }
          }
        } else {
          nextIndex = currentIndex === -1 ? 0 : currentIndex < treeItems.value.length - 1 ? currentIndex + 1 : 0;
          const startIndex = nextIndex;
          while (true) {
            if (store2.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus)
              break;
            nextIndex++;
            if (nextIndex === startIndex) {
              nextIndex = -1;
              break;
            }
            if (nextIndex >= treeItems.value.length) {
              nextIndex = 0;
            }
          }
        }
        nextIndex !== -1 && treeItems.value[nextIndex].focus();
      }
      if ([EVENT_CODE.left, EVENT_CODE.right].includes(code)) {
        ev.preventDefault();
        currentItem.click();
      }
      const hasInput = currentItem.querySelector('[type="checkbox"]');
      if ([EVENT_CODE.enter, EVENT_CODE.space].includes(code) && hasInput) {
        ev.preventDefault();
        hasInput.click();
      }
    };
    useEventListener(el$, "keydown", handleKeydown);
    const initTabIndex = () => {
      var _a2;
      treeItems.value = Array.from(el$.value.querySelectorAll(`.${ns2.is("focusable")}[role=treeitem]`));
      checkboxItems.value = Array.from(el$.value.querySelectorAll("input[type=checkbox]"));
      const checkedItem = el$.value.querySelectorAll(`.${ns2.is("checked")}[role=treeitem]`);
      if (checkedItem.length) {
        checkedItem[0].setAttribute("tabindex", "0");
        return;
      }
      (_a2 = treeItems.value[0]) == null ? void 0 : _a2.setAttribute("tabindex", "0");
    };
  }
  const _sfc_main$k = vue.defineComponent({
    name: "ElTree",
    components: { ElTreeNode: ElTreeNode$1 },
    props: {
      data: {
        type: Array,
        default: () => []
      },
      emptyText: {
        type: String
      },
      renderAfterExpand: {
        type: Boolean,
        default: true
      },
      nodeKey: String,
      checkStrictly: Boolean,
      defaultExpandAll: Boolean,
      expandOnClickNode: {
        type: Boolean,
        default: true
      },
      checkOnClickNode: Boolean,
      checkDescendants: {
        type: Boolean,
        default: false
      },
      autoExpandParent: {
        type: Boolean,
        default: true
      },
      defaultCheckedKeys: Array,
      defaultExpandedKeys: Array,
      currentNodeKey: [String, Number],
      renderContent: Function,
      showCheckbox: {
        type: Boolean,
        default: false
      },
      draggable: {
        type: Boolean,
        default: false
      },
      allowDrag: Function,
      allowDrop: Function,
      props: {
        type: Object,
        default: () => ({
          children: "children",
          label: "label",
          disabled: "disabled"
        })
      },
      lazy: {
        type: Boolean,
        default: false
      },
      highlightCurrent: Boolean,
      load: Function,
      filterNodeMethod: Function,
      accordion: Boolean,
      indent: {
        type: Number,
        default: 18
      },
      icon: {
        type: iconPropType
      }
    },
    emits: [
      "check-change",
      "current-change",
      "node-click",
      "node-contextmenu",
      "node-collapse",
      "node-expand",
      "check",
      "node-drag-start",
      "node-drag-end",
      "node-drop",
      "node-drag-leave",
      "node-drag-enter",
      "node-drag-over"
    ],
    setup(props2, ctx) {
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("tree");
      const selectInfo = vue.inject(selectKey, null);
      const store2 = vue.ref(new TreeStore({
        key: props2.nodeKey,
        data: props2.data,
        lazy: props2.lazy,
        props: props2.props,
        load: props2.load,
        currentNodeKey: props2.currentNodeKey,
        checkStrictly: props2.checkStrictly,
        checkDescendants: props2.checkDescendants,
        defaultCheckedKeys: props2.defaultCheckedKeys,
        defaultExpandedKeys: props2.defaultExpandedKeys,
        autoExpandParent: props2.autoExpandParent,
        defaultExpandAll: props2.defaultExpandAll,
        filterNodeMethod: props2.filterNodeMethod
      }));
      store2.value.initialize();
      const root2 = vue.ref(store2.value.root);
      const currentNode = vue.ref(null);
      const el$ = vue.ref(null);
      const dropIndicator$ = vue.ref(null);
      const { broadcastExpanded } = useNodeExpandEventBroadcast(props2);
      const { dragState } = useDragNodeHandler({
        props: props2,
        ctx,
        el$,
        dropIndicator$,
        store: store2
      });
      useKeydown({ el$ }, store2);
      const isEmpty2 = vue.computed(() => {
        const { childNodes } = root2.value;
        const hasFilteredOptions = selectInfo ? selectInfo.hasFilteredOptions !== 0 : false;
        return (!childNodes || childNodes.length === 0 || childNodes.every(({ visible }) => !visible)) && !hasFilteredOptions;
      });
      vue.watch(() => props2.currentNodeKey, (newVal) => {
        store2.value.setCurrentNodeKey(newVal);
      });
      vue.watch(() => props2.defaultCheckedKeys, (newVal) => {
        store2.value.setDefaultCheckedKey(newVal);
      });
      vue.watch(() => props2.defaultExpandedKeys, (newVal) => {
        store2.value.setDefaultExpandedKeys(newVal);
      });
      vue.watch(() => props2.data, (newVal) => {
        store2.value.setData(newVal);
      }, { deep: true });
      vue.watch(() => props2.checkStrictly, (newVal) => {
        store2.value.checkStrictly = newVal;
      });
      const filter = (value) => {
        if (!props2.filterNodeMethod)
          throw new Error("[Tree] filterNodeMethod is required when filter");
        store2.value.filter(value);
      };
      const getNodeKey$1 = (node) => {
        return getNodeKey(props2.nodeKey, node.data);
      };
      const getNodePath = (data) => {
        if (!props2.nodeKey)
          throw new Error("[Tree] nodeKey is required in getNodePath");
        const node = store2.value.getNode(data);
        if (!node)
          return [];
        const path = [node.data];
        let parent2 = node.parent;
        while (parent2 && parent2 !== root2.value) {
          path.push(parent2.data);
          parent2 = parent2.parent;
        }
        return path.reverse();
      };
      const getCheckedNodes = (leafOnly, includeHalfChecked) => {
        return store2.value.getCheckedNodes(leafOnly, includeHalfChecked);
      };
      const getCheckedKeys = (leafOnly) => {
        return store2.value.getCheckedKeys(leafOnly);
      };
      const getCurrentNode = () => {
        const currentNode2 = store2.value.getCurrentNode();
        return currentNode2 ? currentNode2.data : null;
      };
      const getCurrentKey = () => {
        if (!props2.nodeKey)
          throw new Error("[Tree] nodeKey is required in getCurrentKey");
        const currentNode2 = getCurrentNode();
        return currentNode2 ? currentNode2[props2.nodeKey] : null;
      };
      const setCheckedNodes = (nodes, leafOnly) => {
        if (!props2.nodeKey)
          throw new Error("[Tree] nodeKey is required in setCheckedNodes");
        store2.value.setCheckedNodes(nodes, leafOnly);
      };
      const setCheckedKeys = (keys2, leafOnly) => {
        if (!props2.nodeKey)
          throw new Error("[Tree] nodeKey is required in setCheckedKeys");
        store2.value.setCheckedKeys(keys2, leafOnly);
      };
      const setChecked = (data, checked, deep) => {
        store2.value.setChecked(data, checked, deep);
      };
      const getHalfCheckedNodes = () => {
        return store2.value.getHalfCheckedNodes();
      };
      const getHalfCheckedKeys = () => {
        return store2.value.getHalfCheckedKeys();
      };
      const setCurrentNode = (node, shouldAutoExpandParent = true) => {
        if (!props2.nodeKey)
          throw new Error("[Tree] nodeKey is required in setCurrentNode");
        handleCurrentChange(store2, ctx.emit, () => {
          broadcastExpanded(node);
          store2.value.setUserCurrentNode(node, shouldAutoExpandParent);
        });
      };
      const setCurrentKey = (key, shouldAutoExpandParent = true) => {
        if (!props2.nodeKey)
          throw new Error("[Tree] nodeKey is required in setCurrentKey");
        handleCurrentChange(store2, ctx.emit, () => {
          broadcastExpanded();
          store2.value.setCurrentNodeKey(key, shouldAutoExpandParent);
        });
      };
      const getNode = (data) => {
        return store2.value.getNode(data);
      };
      const remove = (data) => {
        store2.value.remove(data);
      };
      const append = (data, parentNode) => {
        store2.value.append(data, parentNode);
      };
      const insertBefore = (data, refNode) => {
        store2.value.insertBefore(data, refNode);
      };
      const insertAfter = (data, refNode) => {
        store2.value.insertAfter(data, refNode);
      };
      const handleNodeExpand = (nodeData, node, instance) => {
        broadcastExpanded(node);
        ctx.emit("node-expand", nodeData, node, instance);
      };
      const updateKeyChildren = (key, data) => {
        if (!props2.nodeKey)
          throw new Error("[Tree] nodeKey is required in updateKeyChild");
        store2.value.updateChildren(key, data);
      };
      vue.provide("RootTree", {
        ctx,
        props: props2,
        store: store2,
        root: root2,
        currentNode,
        instance: vue.getCurrentInstance()
      });
      vue.provide(formItemContextKey, void 0);
      return {
        ns: ns2,
        store: store2,
        root: root2,
        currentNode,
        dragState,
        el$,
        dropIndicator$,
        isEmpty: isEmpty2,
        filter,
        getNodeKey: getNodeKey$1,
        getNodePath,
        getCheckedNodes,
        getCheckedKeys,
        getCurrentNode,
        getCurrentKey,
        setCheckedNodes,
        setCheckedKeys,
        setChecked,
        getHalfCheckedNodes,
        getHalfCheckedKeys,
        setCurrentNode,
        setCurrentKey,
        t: t2,
        getNode,
        remove,
        append,
        insertBefore,
        insertAfter,
        handleNodeExpand,
        updateKeyChildren
      };
    }
  });
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_tree_node = vue.resolveComponent("el-tree-node");
    return vue.openBlock(), vue.createElementBlock("div", {
      ref: "el$",
      class: vue.normalizeClass([
        _ctx.ns.b(),
        _ctx.ns.is("dragging", !!_ctx.dragState.draggingNode),
        _ctx.ns.is("drop-not-allow", !_ctx.dragState.allowDrop),
        _ctx.ns.is("drop-inner", _ctx.dragState.dropType === "inner"),
        { [_ctx.ns.m("highlight-current")]: _ctx.highlightCurrent }
      ]),
      role: "tree"
    }, [
      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.root.childNodes, (child) => {
        return vue.openBlock(), vue.createBlock(_component_el_tree_node, {
          key: _ctx.getNodeKey(child),
          node: child,
          props: _ctx.props,
          accordion: _ctx.accordion,
          "render-after-expand": _ctx.renderAfterExpand,
          "show-checkbox": _ctx.showCheckbox,
          "render-content": _ctx.renderContent,
          onNodeExpand: _ctx.handleNodeExpand
        }, null, 8, ["node", "props", "accordion", "render-after-expand", "show-checkbox", "render-content", "onNodeExpand"]);
      }), 128)),
      _ctx.isEmpty ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass(_ctx.ns.e("empty-block"))
      }, [
        vue.renderSlot(_ctx.$slots, "empty", {}, () => {
          var _a2;
          return [
            vue.createElementVNode("span", {
              class: vue.normalizeClass(_ctx.ns.e("empty-text"))
            }, vue.toDisplayString((_a2 = _ctx.emptyText) != null ? _a2 : _ctx.t("el.tree.emptyText")), 3)
          ];
        })
      ], 2)) : vue.createCommentVNode("v-if", true),
      vue.withDirectives(vue.createElementVNode("div", {
        ref: "dropIndicator$",
        class: vue.normalizeClass(_ctx.ns.e("drop-indicator"))
      }, null, 2), [
        [vue.vShow, _ctx.dragState.showDropIndicator]
      ])
    ], 2);
  }
  var Tree = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$1], ["__file", "tree.vue"]]);
  const ElTree = withInstall(Tree);
  const useSelect = (props2, { attrs: attrs2, emit }, {
    select,
    tree,
    key
  }) => {
    const ns2 = useNamespace("tree-select");
    vue.watch(() => props2.data, () => {
      if (props2.filterable) {
        vue.nextTick(() => {
          var _a2, _b;
          (_b = tree.value) == null ? void 0 : _b.filter((_a2 = select.value) == null ? void 0 : _a2.states.inputValue);
        });
      }
    }, { flush: "post" });
    const result = {
      ...pick(vue.toRefs(props2), Object.keys(ElSelect.props)),
      ...attrs2,
      "onUpdate:modelValue": (value) => emit(UPDATE_MODEL_EVENT, value),
      valueKey: key,
      popperClass: vue.computed(() => {
        const classes = [ns2.e("popper")];
        if (props2.popperClass)
          classes.push(props2.popperClass);
        return classes.join(" ");
      }),
      filterMethod: (keyword = "") => {
        var _a2;
        if (props2.filterMethod) {
          props2.filterMethod(keyword);
        } else if (props2.remoteMethod) {
          props2.remoteMethod(keyword);
        } else {
          (_a2 = tree.value) == null ? void 0 : _a2.filter(keyword);
        }
      }
    };
    return result;
  };
  const component = vue.defineComponent({
    extends: ElOption,
    setup(props2, ctx) {
      const result = ElOption.setup(props2, ctx);
      delete result.selectOptionClick;
      const vm = vue.getCurrentInstance().proxy;
      vue.nextTick(() => {
        if (!result.select.states.cachedOptions.get(vm.value)) {
          result.select.onOptionCreate(vm);
        }
      });
      vue.watch(() => ctx.attrs.visible, (val) => {
        result.states.visible = val;
      }, {
        immediate: true
      });
      return result;
    },
    methods: {
      selectOptionClick() {
        this.$el.parentElement.click();
      }
    }
  });
  function isValidValue(val) {
    return val || val === 0;
  }
  function isValidArray(val) {
    return Array.isArray(val) && val.length;
  }
  function toValidArray(val) {
    return Array.isArray(val) ? val : isValidValue(val) ? [val] : [];
  }
  function treeFind(treeData, findCallback, getChildren, resultCallback, parent2) {
    for (let i2 = 0; i2 < treeData.length; i2++) {
      const data = treeData[i2];
      if (findCallback(data, i2, treeData, parent2)) {
        return resultCallback ? resultCallback(data, i2, treeData, parent2) : data;
      } else {
        const children = getChildren(data);
        if (isValidArray(children)) {
          const find = treeFind(children, findCallback, getChildren, resultCallback, data);
          if (find)
            return find;
        }
      }
    }
  }
  function treeEach(treeData, callback, getChildren, parent2) {
    for (let i2 = 0; i2 < treeData.length; i2++) {
      const data = treeData[i2];
      callback(data, i2, treeData, parent2);
      const children = getChildren(data);
      if (isValidArray(children)) {
        treeEach(children, callback, getChildren, data);
      }
    }
  }
  const useTree$1 = (props2, { attrs: attrs2, slots, emit }, {
    select,
    tree,
    key
  }) => {
    vue.watch(() => props2.modelValue, () => {
      if (props2.showCheckbox) {
        vue.nextTick(() => {
          const treeInstance = tree.value;
          if (treeInstance && !isEqual$1(treeInstance.getCheckedKeys(), toValidArray(props2.modelValue))) {
            treeInstance.setCheckedKeys(toValidArray(props2.modelValue));
          }
        });
      }
    }, {
      immediate: true,
      deep: true
    });
    const propsMap = vue.computed(() => ({
      value: key.value,
      label: "label",
      children: "children",
      disabled: "disabled",
      isLeaf: "isLeaf",
      ...props2.props
    }));
    const getNodeValByProp = (prop, data) => {
      var _a2;
      const propVal = propsMap.value[prop];
      if (shared.isFunction(propVal)) {
        return propVal(data, (_a2 = tree.value) == null ? void 0 : _a2.getNode(getNodeValByProp("value", data)));
      } else {
        return data[propVal];
      }
    };
    const defaultExpandedParentKeys = toValidArray(props2.modelValue).map((value) => {
      return treeFind(props2.data || [], (data) => getNodeValByProp("value", data) === value, (data) => getNodeValByProp("children", data), (data, index, array, parent2) => parent2 && getNodeValByProp("value", parent2));
    }).filter((item) => isValidValue(item));
    const cacheOptions = vue.computed(() => {
      if (!props2.renderAfterExpand && !props2.lazy)
        return [];
      const options = [];
      treeEach(props2.data.concat(props2.cacheData), (node) => {
        const value = getNodeValByProp("value", node);
        options.push({
          value,
          currentLabel: getNodeValByProp("label", node),
          isDisabled: getNodeValByProp("disabled", node)
        });
      }, (data) => getNodeValByProp("children", data));
      return options;
    });
    const getChildCheckedKeys = () => {
      var _a2;
      return (_a2 = tree.value) == null ? void 0 : _a2.getCheckedKeys().filter((checkedKey) => {
        var _a22;
        const node = (_a22 = tree.value) == null ? void 0 : _a22.getNode(checkedKey);
        return !isNil(node) && isEmpty(node.childNodes);
      });
    };
    return {
      ...pick(vue.toRefs(props2), Object.keys(ElTree.props)),
      ...attrs2,
      nodeKey: key,
      expandOnClickNode: vue.computed(() => {
        return !props2.checkStrictly && props2.expandOnClickNode;
      }),
      defaultExpandedKeys: vue.computed(() => {
        return props2.defaultExpandedKeys ? props2.defaultExpandedKeys.concat(defaultExpandedParentKeys) : defaultExpandedParentKeys;
      }),
      renderContent: (h2, { node, data, store: store2 }) => {
        return h2(component, {
          value: getNodeValByProp("value", data),
          label: getNodeValByProp("label", data),
          disabled: getNodeValByProp("disabled", data),
          visible: node.visible
        }, props2.renderContent ? () => props2.renderContent(h2, { node, data, store: store2 }) : slots.default ? () => slots.default({ node, data, store: store2 }) : void 0);
      },
      filterNodeMethod: (value, data, node) => {
        if (props2.filterNodeMethod)
          return props2.filterNodeMethod(value, data, node);
        if (!value)
          return true;
        const regexp = new RegExp(escapeStringRegexp(value), "i");
        return regexp.test(getNodeValByProp("label", data) || "");
      },
      onNodeClick: (data, node, e) => {
        var _a2, _b, _c, _d;
        (_a2 = attrs2.onNodeClick) == null ? void 0 : _a2.call(attrs2, data, node, e);
        if (props2.showCheckbox && props2.checkOnClickNode)
          return;
        if (!props2.showCheckbox && (props2.checkStrictly || node.isLeaf)) {
          if (!getNodeValByProp("disabled", data)) {
            const option = (_b = select.value) == null ? void 0 : _b.states.options.get(getNodeValByProp("value", data));
            (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option);
          }
        } else if (props2.expandOnClickNode) {
          e.proxy.handleExpandIconClick();
        }
        (_d = select.value) == null ? void 0 : _d.focus();
      },
      onCheck: (data, params) => {
        var _a2;
        if (!props2.showCheckbox)
          return;
        const dataValue = getNodeValByProp("value", data);
        const dataMap = {};
        treeEach([tree.value.store.root], (node) => dataMap[node.key] = node, (node) => node.childNodes);
        const uncachedCheckedKeys = params.checkedKeys;
        const cachedKeys = props2.multiple ? toValidArray(props2.modelValue).filter((item) => !(item in dataMap) && !uncachedCheckedKeys.includes(item)) : [];
        const checkedKeys = cachedKeys.concat(uncachedCheckedKeys);
        if (props2.checkStrictly) {
          emit(UPDATE_MODEL_EVENT, props2.multiple ? checkedKeys : checkedKeys.includes(dataValue) ? dataValue : void 0);
        } else {
          if (props2.multiple) {
            const childKeys = getChildCheckedKeys();
            emit(UPDATE_MODEL_EVENT, cachedKeys.concat(childKeys));
          } else {
            const firstLeaf = treeFind([data], (data2) => !isValidArray(getNodeValByProp("children", data2)) && !getNodeValByProp("disabled", data2), (data2) => getNodeValByProp("children", data2));
            const firstLeafKey = firstLeaf ? getNodeValByProp("value", firstLeaf) : void 0;
            const hasCheckedChild = isValidValue(props2.modelValue) && !!treeFind([data], (data2) => getNodeValByProp("value", data2) === props2.modelValue, (data2) => getNodeValByProp("children", data2));
            emit(UPDATE_MODEL_EVENT, firstLeafKey === props2.modelValue || hasCheckedChild ? void 0 : firstLeafKey);
          }
        }
        vue.nextTick(() => {
          var _a22;
          const checkedKeys2 = toValidArray(props2.modelValue);
          tree.value.setCheckedKeys(checkedKeys2);
          (_a22 = attrs2.onCheck) == null ? void 0 : _a22.call(attrs2, data, {
            checkedKeys: tree.value.getCheckedKeys(),
            checkedNodes: tree.value.getCheckedNodes(),
            halfCheckedKeys: tree.value.getHalfCheckedKeys(),
            halfCheckedNodes: tree.value.getHalfCheckedNodes()
          });
        });
        (_a2 = select.value) == null ? void 0 : _a2.focus();
      },
      onNodeExpand: (data, node, e) => {
        var _a2;
        (_a2 = attrs2.onNodeExpand) == null ? void 0 : _a2.call(attrs2, data, node, e);
        vue.nextTick(() => {
          if (!props2.checkStrictly && props2.lazy && props2.multiple && node.checked) {
            const dataMap = {};
            const uncachedCheckedKeys = tree.value.getCheckedKeys();
            treeEach([tree.value.store.root], (node2) => dataMap[node2.key] = node2, (node2) => node2.childNodes);
            const cachedKeys = toValidArray(props2.modelValue).filter((item) => !(item in dataMap) && !uncachedCheckedKeys.includes(item));
            const childKeys = getChildCheckedKeys();
            emit(UPDATE_MODEL_EVENT, cachedKeys.concat(childKeys));
          }
        });
      },
      cacheOptions
    };
  };
  var CacheOptions = vue.defineComponent({
    props: {
      data: {
        type: Array,
        default: () => []
      }
    },
    setup(props2) {
      const select = vue.inject(selectKey);
      vue.watch(() => props2.data, () => {
        var _a2;
        props2.data.forEach((item) => {
          if (!select.states.cachedOptions.has(item.value)) {
            select.states.cachedOptions.set(item.value, item);
          }
        });
        const inputs = ((_a2 = select.selectRef) == null ? void 0 : _a2.querySelectorAll("input")) || [];
        if (isClient && !Array.from(inputs).includes(document.activeElement)) {
          select.setSelected();
        }
      }, { flush: "post", immediate: true });
      return () => void 0;
    }
  });
  const _sfc_main$j = vue.defineComponent({
    name: "ElTreeSelect",
    inheritAttrs: false,
    props: {
      ...ElSelect.props,
      ...ElTree.props,
      cacheData: {
        type: Array,
        default: () => []
      }
    },
    setup(props2, context) {
      const { slots, expose } = context;
      const select = vue.ref();
      const tree = vue.ref();
      const key = vue.computed(() => props2.nodeKey || props2.valueKey || "value");
      const selectProps = useSelect(props2, context, { select, tree, key });
      const { cacheOptions, ...treeProps2 } = useTree$1(props2, context, {
        select,
        tree,
        key
      });
      const methods = vue.reactive({});
      expose(methods);
      vue.onMounted(() => {
        Object.assign(methods, {
          ...pick(tree.value, [
            "filter",
            "updateKeyChildren",
            "getCheckedNodes",
            "setCheckedNodes",
            "getCheckedKeys",
            "setCheckedKeys",
            "setChecked",
            "getHalfCheckedNodes",
            "getHalfCheckedKeys",
            "getCurrentKey",
            "getCurrentNode",
            "setCurrentKey",
            "setCurrentNode",
            "getNode",
            "remove",
            "append",
            "insertBefore",
            "insertAfter"
          ]),
          ...pick(select.value, ["focus", "blur"])
        });
      });
      return () => vue.h(ElSelect, vue.reactive({
        ...selectProps,
        ref: (ref2) => select.value = ref2
      }), {
        ...slots,
        default: () => [
          vue.h(CacheOptions, { data: cacheOptions.value }),
          vue.h(ElTree, vue.reactive({
            ...treeProps2,
            ref: (ref2) => tree.value = ref2
          }))
        ]
      });
    }
  });
  var TreeSelect = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["__file", "tree-select.vue"]]);
  const ElTreeSelect = withInstall(TreeSelect);
  const ROOT_TREE_INJECTION_KEY = Symbol();
  const EMPTY_NODE = {
    key: -1,
    level: -1,
    data: {}
  };
  var TreeOptionsEnum = /* @__PURE__ */ ((TreeOptionsEnum2) => {
    TreeOptionsEnum2["KEY"] = "id";
    TreeOptionsEnum2["LABEL"] = "label";
    TreeOptionsEnum2["CHILDREN"] = "children";
    TreeOptionsEnum2["DISABLED"] = "disabled";
    return TreeOptionsEnum2;
  })(TreeOptionsEnum || {});
  var SetOperationEnum = /* @__PURE__ */ ((SetOperationEnum2) => {
    SetOperationEnum2["ADD"] = "add";
    SetOperationEnum2["DELETE"] = "delete";
    return SetOperationEnum2;
  })(SetOperationEnum || {});
  const itemSize = {
    type: Number,
    default: 26
  };
  const treeProps = buildProps({
    data: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    emptyText: {
      type: String
    },
    height: {
      type: Number,
      default: 200
    },
    props: {
      type: definePropType(Object),
      default: () => mutable({
        children: "children",
        label: "label",
        disabled: "disabled",
        value: "id"
        /* KEY */
      })
    },
    highlightCurrent: {
      type: Boolean,
      default: false
    },
    showCheckbox: {
      type: Boolean,
      default: false
    },
    defaultCheckedKeys: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    checkStrictly: {
      type: Boolean,
      default: false
    },
    defaultExpandedKeys: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    indent: {
      type: Number,
      default: 16
    },
    itemSize,
    icon: {
      type: iconPropType
    },
    expandOnClickNode: {
      type: Boolean,
      default: true
    },
    checkOnClickNode: {
      type: Boolean,
      default: false
    },
    currentNodeKey: {
      type: definePropType([String, Number])
    },
    accordion: {
      type: Boolean,
      default: false
    },
    filterMethod: {
      type: definePropType(Function)
    },
    perfMode: {
      type: Boolean,
      default: true
    }
  });
  const treeNodeProps = buildProps({
    node: {
      type: definePropType(Object),
      default: () => mutable(EMPTY_NODE)
    },
    expanded: {
      type: Boolean,
      default: false
    },
    checked: {
      type: Boolean,
      default: false
    },
    indeterminate: {
      type: Boolean,
      default: false
    },
    showCheckbox: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    current: {
      type: Boolean,
      default: false
    },
    hiddenExpandIcon: {
      type: Boolean,
      default: false
    },
    itemSize
  });
  const treeNodeContentProps = buildProps({
    node: {
      type: definePropType(Object),
      required: true
    }
  });
  const NODE_CLICK = "node-click";
  const NODE_DROP = "node-drop";
  const NODE_EXPAND = "node-expand";
  const NODE_COLLAPSE = "node-collapse";
  const CURRENT_CHANGE = "current-change";
  const NODE_CHECK = "check";
  const NODE_CHECK_CHANGE = "check-change";
  const NODE_CONTEXTMENU = "node-contextmenu";
  const treeEmits = {
    [NODE_CLICK]: (data, node, e) => data && node && e,
    [NODE_DROP]: (data, node, e) => data && node && e,
    [NODE_EXPAND]: (data, node) => data && node,
    [NODE_COLLAPSE]: (data, node) => data && node,
    [CURRENT_CHANGE]: (data, node) => data && node,
    [NODE_CHECK]: (data, checkedInfo) => data && checkedInfo,
    [NODE_CHECK_CHANGE]: (data, checked) => data && typeof checked === "boolean",
    [NODE_CONTEXTMENU]: (evt, data, node) => evt && data && node
  };
  const treeNodeEmits = {
    click: (node, e) => !!(node && e),
    drop: (node, e) => !!(node && e),
    toggle: (node) => !!node,
    check: (node, checked) => node && typeof checked === "boolean"
  };
  function useCheck(props2, tree) {
    const checkedKeys = vue.ref(/* @__PURE__ */ new Set());
    const indeterminateKeys = vue.ref(/* @__PURE__ */ new Set());
    const { emit } = vue.getCurrentInstance();
    vue.watch([() => tree.value, () => props2.defaultCheckedKeys], () => {
      return vue.nextTick(() => {
        _setCheckedKeys(props2.defaultCheckedKeys);
      });
    }, {
      immediate: true
    });
    const updateCheckedKeys = () => {
      if (!tree.value || !props2.showCheckbox || props2.checkStrictly) {
        return;
      }
      const { levelTreeNodeMap, maxLevel } = tree.value;
      const checkedKeySet = checkedKeys.value;
      const indeterminateKeySet = /* @__PURE__ */ new Set();
      for (let level = maxLevel - 1; level >= 1; --level) {
        const nodes = levelTreeNodeMap.get(level);
        if (!nodes)
          continue;
        nodes.forEach((node) => {
          const children = node.children;
          if (children) {
            let allChecked = true;
            let hasChecked = false;
            for (const childNode of children) {
              const key = childNode.key;
              if (checkedKeySet.has(key)) {
                hasChecked = true;
              } else if (indeterminateKeySet.has(key)) {
                allChecked = false;
                hasChecked = true;
                break;
              } else {
                allChecked = false;
              }
            }
            if (allChecked) {
              checkedKeySet.add(node.key);
            } else if (hasChecked) {
              indeterminateKeySet.add(node.key);
              checkedKeySet.delete(node.key);
            } else {
              checkedKeySet.delete(node.key);
              indeterminateKeySet.delete(node.key);
            }
          }
        });
      }
      indeterminateKeys.value = indeterminateKeySet;
    };
    const isChecked = (node) => checkedKeys.value.has(node.key);
    const isIndeterminate = (node) => indeterminateKeys.value.has(node.key);
    const toggleCheckbox = (node, isChecked2, nodeClick = true) => {
      const checkedKeySet = checkedKeys.value;
      const toggle = (node2, checked) => {
        checkedKeySet[checked ? SetOperationEnum.ADD : SetOperationEnum.DELETE](node2.key);
        const children = node2.children;
        if (!props2.checkStrictly && children) {
          children.forEach((childNode) => {
            if (!childNode.disabled) {
              toggle(childNode, checked);
            }
          });
        }
      };
      toggle(node, isChecked2);
      updateCheckedKeys();
      if (nodeClick) {
        afterNodeCheck(node, isChecked2);
      }
    };
    const afterNodeCheck = (node, checked) => {
      const { checkedNodes, checkedKeys: checkedKeys2 } = getChecked();
      const { halfCheckedNodes, halfCheckedKeys } = getHalfChecked();
      emit(NODE_CHECK, node.data, {
        checkedKeys: checkedKeys2,
        checkedNodes,
        halfCheckedKeys,
        halfCheckedNodes
      });
      emit(NODE_CHECK_CHANGE, node.data, checked);
    };
    function getCheckedKeys(leafOnly = false) {
      return getChecked(leafOnly).checkedKeys;
    }
    function getCheckedNodes(leafOnly = false) {
      return getChecked(leafOnly).checkedNodes;
    }
    function getHalfCheckedKeys() {
      return getHalfChecked().halfCheckedKeys;
    }
    function getHalfCheckedNodes() {
      return getHalfChecked().halfCheckedNodes;
    }
    function getChecked(leafOnly = false) {
      const checkedNodes = [];
      const keys2 = [];
      if ((tree == null ? void 0 : tree.value) && props2.showCheckbox) {
        const { treeNodeMap } = tree.value;
        checkedKeys.value.forEach((key) => {
          const node = treeNodeMap.get(key);
          if (node && (!leafOnly || leafOnly && node.isLeaf)) {
            keys2.push(key);
            checkedNodes.push(node.data);
          }
        });
      }
      return {
        checkedKeys: keys2,
        checkedNodes
      };
    }
    function getHalfChecked() {
      const halfCheckedNodes = [];
      const halfCheckedKeys = [];
      if ((tree == null ? void 0 : tree.value) && props2.showCheckbox) {
        const { treeNodeMap } = tree.value;
        indeterminateKeys.value.forEach((key) => {
          const node = treeNodeMap.get(key);
          if (node) {
            halfCheckedKeys.push(key);
            halfCheckedNodes.push(node.data);
          }
        });
      }
      return {
        halfCheckedNodes,
        halfCheckedKeys
      };
    }
    function setCheckedKeys(keys2) {
      checkedKeys.value.clear();
      indeterminateKeys.value.clear();
      vue.nextTick(() => {
        _setCheckedKeys(keys2);
      });
    }
    function setChecked(key, isChecked2) {
      if ((tree == null ? void 0 : tree.value) && props2.showCheckbox) {
        const node = tree.value.treeNodeMap.get(key);
        if (node) {
          toggleCheckbox(node, isChecked2, false);
        }
      }
    }
    function _setCheckedKeys(keys2) {
      if (tree == null ? void 0 : tree.value) {
        const { treeNodeMap } = tree.value;
        if (props2.showCheckbox && treeNodeMap && keys2) {
          for (const key of keys2) {
            const node = treeNodeMap.get(key);
            if (node && !isChecked(node)) {
              toggleCheckbox(node, true, false);
            }
          }
        }
      }
    }
    return {
      updateCheckedKeys,
      toggleCheckbox,
      isChecked,
      isIndeterminate,
      getCheckedKeys,
      getCheckedNodes,
      getHalfCheckedKeys,
      getHalfCheckedNodes,
      setChecked,
      setCheckedKeys
    };
  }
  function useFilter(props2, tree) {
    const hiddenNodeKeySet = vue.ref(/* @__PURE__ */ new Set([]));
    const hiddenExpandIconKeySet = vue.ref(/* @__PURE__ */ new Set([]));
    const filterable = vue.computed(() => {
      return shared.isFunction(props2.filterMethod);
    });
    function doFilter(query) {
      var _a2;
      if (!filterable.value) {
        return;
      }
      const expandKeySet = /* @__PURE__ */ new Set();
      const hiddenExpandIconKeys = hiddenExpandIconKeySet.value;
      const hiddenKeys = hiddenNodeKeySet.value;
      const family = [];
      const nodes = ((_a2 = tree.value) == null ? void 0 : _a2.treeNodes) || [];
      const filter = props2.filterMethod;
      hiddenKeys.clear();
      function traverse(nodes2) {
        nodes2.forEach((node) => {
          family.push(node);
          if (filter == null ? void 0 : filter(query, node.data)) {
            family.forEach((member) => {
              expandKeySet.add(member.key);
            });
          } else if (node.isLeaf) {
            hiddenKeys.add(node.key);
          }
          const children = node.children;
          if (children) {
            traverse(children);
          }
          if (!node.isLeaf) {
            if (!expandKeySet.has(node.key)) {
              hiddenKeys.add(node.key);
            } else if (children) {
              let allHidden = true;
              for (const childNode of children) {
                if (!hiddenKeys.has(childNode.key)) {
                  allHidden = false;
                  break;
                }
              }
              if (allHidden) {
                hiddenExpandIconKeys.add(node.key);
              } else {
                hiddenExpandIconKeys.delete(node.key);
              }
            }
          }
          family.pop();
        });
      }
      traverse(nodes);
      return expandKeySet;
    }
    function isForceHiddenExpandIcon(node) {
      return hiddenExpandIconKeySet.value.has(node.key);
    }
    return {
      hiddenExpandIconKeySet,
      hiddenNodeKeySet,
      doFilter,
      isForceHiddenExpandIcon
    };
  }
  function useTree(props2, emit) {
    const expandedKeySet = vue.ref(new Set(props2.defaultExpandedKeys));
    const currentKey = vue.ref();
    const tree = vue.shallowRef();
    const listRef = vue.ref();
    vue.watch(() => props2.currentNodeKey, (key) => {
      currentKey.value = key;
    }, {
      immediate: true
    });
    vue.watch(() => props2.data, (data) => {
      setData(data);
    }, {
      immediate: true
    });
    const {
      isIndeterminate,
      isChecked,
      toggleCheckbox,
      getCheckedKeys,
      getCheckedNodes,
      getHalfCheckedKeys,
      getHalfCheckedNodes,
      setChecked,
      setCheckedKeys
    } = useCheck(props2, tree);
    const { doFilter, hiddenNodeKeySet, isForceHiddenExpandIcon } = useFilter(props2, tree);
    const valueKey = vue.computed(() => {
      var _a2;
      return ((_a2 = props2.props) == null ? void 0 : _a2.value) || TreeOptionsEnum.KEY;
    });
    const childrenKey = vue.computed(() => {
      var _a2;
      return ((_a2 = props2.props) == null ? void 0 : _a2.children) || TreeOptionsEnum.CHILDREN;
    });
    const disabledKey = vue.computed(() => {
      var _a2;
      return ((_a2 = props2.props) == null ? void 0 : _a2.disabled) || TreeOptionsEnum.DISABLED;
    });
    const labelKey = vue.computed(() => {
      var _a2;
      return ((_a2 = props2.props) == null ? void 0 : _a2.label) || TreeOptionsEnum.LABEL;
    });
    const flattenTree = vue.computed(() => {
      var _a2;
      const expandedKeys = expandedKeySet.value;
      const hiddenKeys = hiddenNodeKeySet.value;
      const flattenNodes = [];
      const nodes = ((_a2 = tree.value) == null ? void 0 : _a2.treeNodes) || [];
      const stack = [];
      for (let i2 = nodes.length - 1; i2 >= 0; --i2) {
        stack.push(nodes[i2]);
      }
      while (stack.length) {
        const node = stack.pop();
        if (hiddenKeys.has(node.key))
          continue;
        flattenNodes.push(node);
        if (node.children && expandedKeys.has(node.key)) {
          for (let i2 = node.children.length - 1; i2 >= 0; --i2) {
            stack.push(node.children[i2]);
          }
        }
      }
      return flattenNodes;
    });
    const isNotEmpty = vue.computed(() => {
      return flattenTree.value.length > 0;
    });
    function createTree(data) {
      const treeNodeMap = /* @__PURE__ */ new Map();
      const levelTreeNodeMap = /* @__PURE__ */ new Map();
      let maxLevel = 1;
      function traverse(nodes, level = 1, parent2 = void 0) {
        var _a2;
        const siblings = [];
        for (const rawNode of nodes) {
          const value = getKey(rawNode);
          const node = {
            level,
            key: value,
            data: rawNode
          };
          node.label = getLabel(rawNode);
          node.parent = parent2;
          const children = getChildren(rawNode);
          node.disabled = getDisabled(rawNode);
          node.isLeaf = !children || children.length === 0;
          if (children && children.length) {
            node.children = traverse(children, level + 1, node);
          }
          siblings.push(node);
          treeNodeMap.set(value, node);
          if (!levelTreeNodeMap.has(level)) {
            levelTreeNodeMap.set(level, []);
          }
          (_a2 = levelTreeNodeMap.get(level)) == null ? void 0 : _a2.push(node);
        }
        if (level > maxLevel) {
          maxLevel = level;
        }
        return siblings;
      }
      const treeNodes = traverse(data);
      return {
        treeNodeMap,
        levelTreeNodeMap,
        maxLevel,
        treeNodes
      };
    }
    function filter(query) {
      const keys2 = doFilter(query);
      if (keys2) {
        expandedKeySet.value = keys2;
      }
    }
    function getChildren(node) {
      return node[childrenKey.value];
    }
    function getKey(node) {
      if (!node) {
        return "";
      }
      return node[valueKey.value];
    }
    function getDisabled(node) {
      return node[disabledKey.value];
    }
    function getLabel(node) {
      return node[labelKey.value];
    }
    function toggleExpand(node) {
      const expandedKeys = expandedKeySet.value;
      if (expandedKeys.has(node.key)) {
        collapseNode(node);
      } else {
        expandNode(node);
      }
    }
    function setExpandedKeys(keys2) {
      const expandedKeys = /* @__PURE__ */ new Set();
      const nodeMap = tree.value.treeNodeMap;
      keys2.forEach((k) => {
        let node = nodeMap.get(k);
        while (node && !expandedKeys.has(node.key)) {
          expandedKeys.add(node.key);
          node = node.parent;
        }
      });
      expandedKeySet.value = expandedKeys;
    }
    function handleNodeClick(node, e) {
      emit(NODE_CLICK, node.data, node, e);
      handleCurrentChange2(node);
      if (props2.expandOnClickNode) {
        toggleExpand(node);
      }
      if (props2.showCheckbox && props2.checkOnClickNode && !node.disabled) {
        toggleCheckbox(node, !isChecked(node), true);
      }
    }
    function handleNodeDrop(node, e) {
      emit(NODE_DROP, node.data, node, e);
    }
    function handleCurrentChange2(node) {
      if (!isCurrent(node)) {
        currentKey.value = node.key;
        emit(CURRENT_CHANGE, node.data, node);
      }
    }
    function handleNodeCheck(node, checked) {
      toggleCheckbox(node, checked);
    }
    function expandNode(node) {
      const keySet = expandedKeySet.value;
      if (tree.value && props2.accordion) {
        const { treeNodeMap } = tree.value;
        keySet.forEach((key) => {
          const treeNode = treeNodeMap.get(key);
          if (node && node.level === (treeNode == null ? void 0 : treeNode.level)) {
            keySet.delete(key);
          }
        });
      }
      keySet.add(node.key);
      emit(NODE_EXPAND, node.data, node);
    }
    function collapseNode(node) {
      expandedKeySet.value.delete(node.key);
      emit(NODE_COLLAPSE, node.data, node);
    }
    function isExpanded(node) {
      return expandedKeySet.value.has(node.key);
    }
    function isDisabled(node) {
      return !!node.disabled;
    }
    function isCurrent(node) {
      const current = currentKey.value;
      return current !== void 0 && current === node.key;
    }
    function getCurrentNode() {
      var _a2, _b;
      if (!currentKey.value)
        return void 0;
      return (_b = (_a2 = tree.value) == null ? void 0 : _a2.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;
    }
    function getCurrentKey() {
      return currentKey.value;
    }
    function setCurrentKey(key) {
      currentKey.value = key;
    }
    function setData(data) {
      vue.nextTick(() => tree.value = createTree(data));
    }
    function getNode(data) {
      var _a2;
      const key = shared.isObject(data) ? getKey(data) : data;
      return (_a2 = tree.value) == null ? void 0 : _a2.treeNodeMap.get(key);
    }
    function scrollToNode(key, strategy = "auto") {
      const node = getNode(key);
      if (node && listRef.value) {
        listRef.value.scrollToItem(flattenTree.value.indexOf(node), strategy);
      }
    }
    function scrollTo(offset2) {
      var _a2;
      (_a2 = listRef.value) == null ? void 0 : _a2.scrollTo(offset2);
    }
    return {
      tree,
      flattenTree,
      isNotEmpty,
      listRef,
      getKey,
      getChildren,
      toggleExpand,
      toggleCheckbox,
      isExpanded,
      isChecked,
      isIndeterminate,
      isDisabled,
      isCurrent,
      isForceHiddenExpandIcon,
      handleNodeClick,
      handleNodeDrop,
      handleNodeCheck,
      getCurrentNode,
      getCurrentKey,
      setCurrentKey,
      getCheckedKeys,
      getCheckedNodes,
      getHalfCheckedKeys,
      getHalfCheckedNodes,
      setChecked,
      setCheckedKeys,
      filter,
      setData,
      getNode,
      expandNode,
      collapseNode,
      setExpandedKeys,
      scrollToNode,
      scrollTo
    };
  }
  var ElNodeContent = vue.defineComponent({
    name: "ElTreeNodeContent",
    props: treeNodeContentProps,
    setup(props2) {
      const tree = vue.inject(ROOT_TREE_INJECTION_KEY);
      const ns2 = useNamespace("tree");
      return () => {
        const node = props2.node;
        const { data } = node;
        return (tree == null ? void 0 : tree.ctx.slots.default) ? tree.ctx.slots.default({ node, data }) : vue.h("span", { class: ns2.be("node", "label") }, [node == null ? void 0 : node.label]);
      };
    }
  });
  const __default__$h = vue.defineComponent({
    name: "ElTreeNode"
  });
  const _sfc_main$i = /* @__PURE__ */ vue.defineComponent({
    ...__default__$h,
    props: treeNodeProps,
    emits: treeNodeEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const tree = vue.inject(ROOT_TREE_INJECTION_KEY);
      const ns2 = useNamespace("tree");
      const indent = vue.computed(() => {
        var _a2;
        return (_a2 = tree == null ? void 0 : tree.props.indent) != null ? _a2 : 16;
      });
      const icon = vue.computed(() => {
        var _a2;
        return (_a2 = tree == null ? void 0 : tree.props.icon) != null ? _a2 : caret_right_default;
      });
      const handleClick = (e) => {
        emit("click", props2.node, e);
      };
      const handleDrop = (e) => {
        emit("drop", props2.node, e);
      };
      const handleExpandIconClick = () => {
        emit("toggle", props2.node);
      };
      const handleCheckChange = (value) => {
        emit("check", props2.node, value);
      };
      const handleContextMenu = (event) => {
        var _a2, _b, _c, _d;
        if ((_c = (_b = (_a2 = tree == null ? void 0 : tree.instance) == null ? void 0 : _a2.vnode) == null ? void 0 : _b.props) == null ? void 0 : _c["onNodeContextmenu"]) {
          event.stopPropagation();
          event.preventDefault();
        }
        tree == null ? void 0 : tree.ctx.emit(NODE_CONTEXTMENU, event, (_d = props2.node) == null ? void 0 : _d.data, props2.node);
      };
      return (_ctx, _cache) => {
        var _a2, _b, _c;
        return vue.openBlock(), vue.createElementBlock("div", {
          ref: "node$",
          class: vue.normalizeClass([
            vue.unref(ns2).b("node"),
            vue.unref(ns2).is("expanded", _ctx.expanded),
            vue.unref(ns2).is("current", _ctx.current),
            vue.unref(ns2).is("focusable", !_ctx.disabled),
            vue.unref(ns2).is("checked", !_ctx.disabled && _ctx.checked)
          ]),
          role: "treeitem",
          tabindex: "-1",
          "aria-expanded": _ctx.expanded,
          "aria-disabled": _ctx.disabled,
          "aria-checked": _ctx.checked,
          "data-key": (_a2 = _ctx.node) == null ? void 0 : _a2.key,
          onClick: vue.withModifiers(handleClick, ["stop"]),
          onContextmenu: handleContextMenu,
          onDragover: vue.withModifiers(() => {
          }, ["prevent"]),
          onDragenter: vue.withModifiers(() => {
          }, ["prevent"]),
          onDrop: vue.withModifiers(handleDrop, ["stop"])
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).be("node", "content")),
            style: vue.normalizeStyle({
              paddingLeft: `${(_ctx.node.level - 1) * vue.unref(indent)}px`,
              height: _ctx.itemSize + "px"
            })
          }, [
            vue.unref(icon) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
              key: 0,
              class: vue.normalizeClass([
                vue.unref(ns2).is("leaf", !!((_b = _ctx.node) == null ? void 0 : _b.isLeaf)),
                vue.unref(ns2).is("hidden", _ctx.hiddenExpandIcon),
                {
                  expanded: !((_c = _ctx.node) == null ? void 0 : _c.isLeaf) && _ctx.expanded
                },
                vue.unref(ns2).be("node", "expand-icon")
              ]),
              onClick: vue.withModifiers(handleExpandIconClick, ["stop"])
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(icon))))
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-if", true),
            _ctx.showCheckbox ? (vue.openBlock(), vue.createBlock(vue.unref(ElCheckbox), {
              key: 1,
              "model-value": _ctx.checked,
              indeterminate: _ctx.indeterminate,
              disabled: _ctx.disabled,
              onChange: handleCheckChange,
              onClick: vue.withModifiers(() => {
              }, ["stop"])
            }, null, 8, ["model-value", "indeterminate", "disabled", "onClick"])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(vue.unref(ElNodeContent), { node: _ctx.node }, null, 8, ["node"])
          ], 6)
        ], 42, ["aria-expanded", "aria-disabled", "aria-checked", "data-key", "onClick", "onDragover", "onDragenter", "onDrop"]);
      };
    }
  });
  var ElTreeNode = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["__file", "tree-node.vue"]]);
  const __default__$g = vue.defineComponent({
    name: "ElTreeV2"
  });
  const _sfc_main$h = /* @__PURE__ */ vue.defineComponent({
    ...__default__$g,
    props: treeProps,
    emits: treeEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const slots = vue.useSlots();
      const treeNodeSize = vue.computed(() => props2.itemSize);
      vue.provide(ROOT_TREE_INJECTION_KEY, {
        ctx: {
          emit,
          slots
        },
        props: props2,
        instance: vue.getCurrentInstance()
      });
      vue.provide(formItemContextKey, void 0);
      const { t: t2 } = useLocale();
      const ns2 = useNamespace("tree");
      const {
        flattenTree,
        isNotEmpty,
        listRef,
        toggleExpand,
        isExpanded,
        isIndeterminate,
        isChecked,
        isDisabled,
        isCurrent,
        isForceHiddenExpandIcon,
        handleNodeClick,
        handleNodeDrop,
        handleNodeCheck,
        toggleCheckbox,
        getCurrentNode,
        getCurrentKey,
        setCurrentKey,
        getCheckedKeys,
        getCheckedNodes,
        getHalfCheckedKeys,
        getHalfCheckedNodes,
        setChecked,
        setCheckedKeys,
        filter,
        setData,
        getNode,
        expandNode,
        collapseNode,
        setExpandedKeys,
        scrollToNode,
        scrollTo
      } = useTree(props2, emit);
      expose({
        toggleCheckbox,
        getCurrentNode,
        getCurrentKey,
        setCurrentKey,
        getCheckedKeys,
        getCheckedNodes,
        getHalfCheckedKeys,
        getHalfCheckedNodes,
        setChecked,
        setCheckedKeys,
        filter,
        setData,
        getNode,
        expandNode,
        collapseNode,
        setExpandedKeys,
        scrollToNode,
        scrollTo
      });
      return (_ctx, _cache) => {
        var _a2;
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns2).b(), { [vue.unref(ns2).m("highlight-current")]: _ctx.highlightCurrent }]),
          role: "tree"
        }, [
          vue.unref(isNotEmpty) ? (vue.openBlock(), vue.createBlock(vue.unref(FixedSizeList), {
            key: 0,
            ref_key: "listRef",
            ref: listRef,
            "class-name": vue.unref(ns2).b("virtual-list"),
            data: vue.unref(flattenTree),
            total: vue.unref(flattenTree).length,
            height: _ctx.height,
            "item-size": vue.unref(treeNodeSize),
            "perf-mode": _ctx.perfMode
          }, {
            default: vue.withCtx(({ data, index, style }) => [
              (vue.openBlock(), vue.createBlock(ElTreeNode, {
                key: data[index].key,
                style: vue.normalizeStyle(style),
                node: data[index],
                expanded: vue.unref(isExpanded)(data[index]),
                "show-checkbox": _ctx.showCheckbox,
                checked: vue.unref(isChecked)(data[index]),
                indeterminate: vue.unref(isIndeterminate)(data[index]),
                "item-size": vue.unref(treeNodeSize),
                disabled: vue.unref(isDisabled)(data[index]),
                current: vue.unref(isCurrent)(data[index]),
                "hidden-expand-icon": vue.unref(isForceHiddenExpandIcon)(data[index]),
                onClick: vue.unref(handleNodeClick),
                onToggle: vue.unref(toggleExpand),
                onCheck: vue.unref(handleNodeCheck),
                onDrop: vue.unref(handleNodeDrop)
              }, null, 8, ["style", "node", "expanded", "show-checkbox", "checked", "indeterminate", "item-size", "disabled", "current", "hidden-expand-icon", "onClick", "onToggle", "onCheck", "onDrop"]))
            ]),
            _: 1
          }, 8, ["class-name", "data", "total", "height", "item-size", "perf-mode"])) : (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns2).e("empty-block"))
          }, [
            vue.createElementVNode("span", {
              class: vue.normalizeClass(vue.unref(ns2).e("empty-text"))
            }, vue.toDisplayString((_a2 = _ctx.emptyText) != null ? _a2 : vue.unref(t2)("el.tree.emptyText")), 3)
          ], 2))
        ], 2);
      };
    }
  });
  var TreeV2 = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["__file", "tree.vue"]]);
  const ElTreeV2 = withInstall(TreeV2);
  const uploadContextKey = Symbol("uploadContextKey");
  const SCOPE$2 = "ElUpload";
  class UploadAjaxError extends Error {
    constructor(message2, status, method, url) {
      super(message2);
      this.name = "UploadAjaxError";
      this.status = status;
      this.method = method;
      this.url = url;
    }
  }
  function getError(action, option, xhr) {
    let msg;
    if (xhr.response) {
      msg = `${xhr.response.error || xhr.response}`;
    } else if (xhr.responseText) {
      msg = `${xhr.responseText}`;
    } else {
      msg = `fail to ${option.method} ${action} ${xhr.status}`;
    }
    return new UploadAjaxError(msg, xhr.status, option.method, action);
  }
  function getBody(xhr) {
    const text = xhr.responseText || xhr.response;
    if (!text) {
      return text;
    }
    try {
      return JSON.parse(text);
    } catch (e) {
      return text;
    }
  }
  const ajaxUpload = (option) => {
    if (typeof XMLHttpRequest === "undefined")
      throwError(SCOPE$2, "XMLHttpRequest is undefined");
    const xhr = new XMLHttpRequest();
    const action = option.action;
    if (xhr.upload) {
      xhr.upload.addEventListener("progress", (evt) => {
        const progressEvt = evt;
        progressEvt.percent = evt.total > 0 ? evt.loaded / evt.total * 100 : 0;
        option.onProgress(progressEvt);
      });
    }
    const formData = new FormData();
    if (option.data) {
      for (const [key, value] of Object.entries(option.data)) {
        if (shared.isArray(value) && value.length)
          formData.append(key, ...value);
        else
          formData.append(key, value);
      }
    }
    formData.append(option.filename, option.file, option.file.name);
    xhr.addEventListener("error", () => {
      option.onError(getError(action, option, xhr));
    });
    xhr.addEventListener("load", () => {
      if (xhr.status < 200 || xhr.status >= 300) {
        return option.onError(getError(action, option, xhr));
      }
      option.onSuccess(getBody(xhr));
    });
    xhr.open(option.method, action, true);
    if (option.withCredentials && "withCredentials" in xhr) {
      xhr.withCredentials = true;
    }
    const headers = option.headers || {};
    if (headers instanceof Headers) {
      headers.forEach((value, key) => xhr.setRequestHeader(key, value));
    } else {
      for (const [key, value] of Object.entries(headers)) {
        if (isNil(value))
          continue;
        xhr.setRequestHeader(key, String(value));
      }
    }
    xhr.send(formData);
    return xhr;
  };
  const uploadListTypes = ["text", "picture", "picture-card"];
  let fileId = 1;
  const genFileId = () => Date.now() + fileId++;
  const uploadBaseProps = buildProps({
    action: {
      type: String,
      default: "#"
    },
    headers: {
      type: definePropType(Object)
    },
    method: {
      type: String,
      default: "post"
    },
    data: {
      type: definePropType([Object, Function, Promise]),
      default: () => mutable({})
    },
    multiple: Boolean,
    name: {
      type: String,
      default: "file"
    },
    drag: Boolean,
    withCredentials: Boolean,
    showFileList: {
      type: Boolean,
      default: true
    },
    accept: {
      type: String,
      default: ""
    },
    fileList: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    autoUpload: {
      type: Boolean,
      default: true
    },
    listType: {
      type: String,
      values: uploadListTypes,
      default: "text"
    },
    httpRequest: {
      type: definePropType(Function),
      default: ajaxUpload
    },
    disabled: Boolean,
    limit: Number
  });
  const uploadProps = buildProps({
    ...uploadBaseProps,
    beforeUpload: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    beforeRemove: {
      type: definePropType(Function)
    },
    onRemove: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onChange: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onPreview: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onSuccess: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onProgress: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onError: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onExceed: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    crossorigin: {
      type: definePropType(String)
    }
  });
  const uploadListProps = buildProps({
    files: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    disabled: {
      type: Boolean,
      default: false
    },
    handlePreview: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    listType: {
      type: String,
      values: uploadListTypes,
      default: "text"
    },
    crossorigin: {
      type: definePropType(String)
    }
  });
  const uploadListEmits = {
    remove: (file) => !!file
  };
  const __default__$f = vue.defineComponent({
    name: "ElUploadList"
  });
  const _sfc_main$g = /* @__PURE__ */ vue.defineComponent({
    ...__default__$f,
    props: uploadListProps,
    emits: uploadListEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const { t: t2 } = useLocale();
      const nsUpload = useNamespace("upload");
      const nsIcon = useNamespace("icon");
      const nsList = useNamespace("list");
      const disabled = useFormDisabled();
      const focusing = vue.ref(false);
      const containerKls = vue.computed(() => [
        nsUpload.b("list"),
        nsUpload.bm("list", props2.listType),
        nsUpload.is("disabled", props2.disabled)
      ]);
      const handleRemove = (file) => {
        emit("remove", file);
      };
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.TransitionGroup, {
          tag: "ul",
          class: vue.normalizeClass(vue.unref(containerKls)),
          name: vue.unref(nsList).b()
        }, {
          default: vue.withCtx(() => [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.files, (file, index) => {
              return vue.openBlock(), vue.createElementBlock("li", {
                key: file.uid || file.name,
                class: vue.normalizeClass([
                  vue.unref(nsUpload).be("list", "item"),
                  vue.unref(nsUpload).is(file.status),
                  { focusing: focusing.value }
                ]),
                tabindex: "0",
                onKeydown: vue.withKeys(($event) => !vue.unref(disabled) && handleRemove(file), ["delete"]),
                onFocus: ($event) => focusing.value = true,
                onBlur: ($event) => focusing.value = false,
                onClick: ($event) => focusing.value = false
              }, [
                vue.renderSlot(_ctx.$slots, "default", {
                  file,
                  index
                }, () => [
                  _ctx.listType === "picture" || file.status !== "uploading" && _ctx.listType === "picture-card" ? (vue.openBlock(), vue.createElementBlock("img", {
                    key: 0,
                    class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-thumbnail")),
                    src: file.url,
                    crossorigin: _ctx.crossorigin,
                    alt: ""
                  }, null, 10, ["src", "crossorigin"])) : vue.createCommentVNode("v-if", true),
                  file.status === "uploading" || _ctx.listType !== "picture-card" ? (vue.openBlock(), vue.createElementBlock("div", {
                    key: 1,
                    class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-info"))
                  }, [
                    vue.createElementVNode("a", {
                      class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-name")),
                      onClick: vue.withModifiers(($event) => _ctx.handlePreview(file), ["prevent"])
                    }, [
                      vue.createVNode(vue.unref(ElIcon), {
                        class: vue.normalizeClass(vue.unref(nsIcon).m("document"))
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(document_default))
                        ]),
                        _: 1
                      }, 8, ["class"]),
                      vue.createElementVNode("span", {
                        class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-file-name")),
                        title: file.name
                      }, vue.toDisplayString(file.name), 11, ["title"])
                    ], 10, ["onClick"]),
                    file.status === "uploading" ? (vue.openBlock(), vue.createBlock(vue.unref(ElProgress), {
                      key: 0,
                      type: _ctx.listType === "picture-card" ? "circle" : "line",
                      "stroke-width": _ctx.listType === "picture-card" ? 6 : 2,
                      percentage: Number(file.percentage),
                      style: vue.normalizeStyle(_ctx.listType === "picture-card" ? "" : "margin-top: 0.5rem")
                    }, null, 8, ["type", "stroke-width", "percentage", "style"])) : vue.createCommentVNode("v-if", true)
                  ], 2)) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode("label", {
                    class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-status-label"))
                  }, [
                    _ctx.listType === "text" ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                      key: 0,
                      class: vue.normalizeClass([vue.unref(nsIcon).m("upload-success"), vue.unref(nsIcon).m("circle-check")])
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(circle_check_default))
                      ]),
                      _: 1
                    }, 8, ["class"])) : ["picture-card", "picture"].includes(_ctx.listType) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                      key: 1,
                      class: vue.normalizeClass([vue.unref(nsIcon).m("upload-success"), vue.unref(nsIcon).m("check")])
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(check_default))
                      ]),
                      _: 1
                    }, 8, ["class"])) : vue.createCommentVNode("v-if", true)
                  ], 2),
                  !vue.unref(disabled) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: 2,
                    class: vue.normalizeClass(vue.unref(nsIcon).m("close")),
                    onClick: ($event) => handleRemove(file)
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(close_default))
                    ]),
                    _: 2
                  }, 1032, ["class", "onClick"])) : vue.createCommentVNode("v-if", true),
                  vue.createCommentVNode(" Due to close btn only appears when li gets focused disappears after li gets blurred, thus keyboard navigation can never reach close btn"),
                  vue.createCommentVNode(" This is a bug which needs to be fixed "),
                  vue.createCommentVNode(" TODO: Fix the incorrect navigation interaction "),
                  !vue.unref(disabled) ? (vue.openBlock(), vue.createElementBlock("i", {
                    key: 3,
                    class: vue.normalizeClass(vue.unref(nsIcon).m("close-tip"))
                  }, vue.toDisplayString(vue.unref(t2)("el.upload.deleteTip")), 3)) : vue.createCommentVNode("v-if", true),
                  _ctx.listType === "picture-card" ? (vue.openBlock(), vue.createElementBlock("span", {
                    key: 4,
                    class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-actions"))
                  }, [
                    vue.createElementVNode("span", {
                      class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-preview")),
                      onClick: ($event) => _ctx.handlePreview(file)
                    }, [
                      vue.createVNode(vue.unref(ElIcon), {
                        class: vue.normalizeClass(vue.unref(nsIcon).m("zoom-in"))
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(zoom_in_default))
                        ]),
                        _: 1
                      }, 8, ["class"])
                    ], 10, ["onClick"]),
                    !vue.unref(disabled) ? (vue.openBlock(), vue.createElementBlock("span", {
                      key: 0,
                      class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-delete")),
                      onClick: ($event) => handleRemove(file)
                    }, [
                      vue.createVNode(vue.unref(ElIcon), {
                        class: vue.normalizeClass(vue.unref(nsIcon).m("delete"))
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(delete_default))
                        ]),
                        _: 1
                      }, 8, ["class"])
                    ], 10, ["onClick"])) : vue.createCommentVNode("v-if", true)
                  ], 2)) : vue.createCommentVNode("v-if", true)
                ])
              ], 42, ["onKeydown", "onFocus", "onBlur", "onClick"]);
            }), 128)),
            vue.renderSlot(_ctx.$slots, "append")
          ]),
          _: 3
        }, 8, ["class", "name"]);
      };
    }
  });
  var UploadList = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["__file", "upload-list.vue"]]);
  const uploadDraggerProps = buildProps({
    disabled: {
      type: Boolean,
      default: false
    }
  });
  const uploadDraggerEmits = {
    file: (file) => shared.isArray(file)
  };
  const COMPONENT_NAME = "ElUploadDrag";
  const __default__$e = vue.defineComponent({
    name: COMPONENT_NAME
  });
  const _sfc_main$f = /* @__PURE__ */ vue.defineComponent({
    ...__default__$e,
    props: uploadDraggerProps,
    emits: uploadDraggerEmits,
    setup(__props, { emit }) {
      const uploaderContext = vue.inject(uploadContextKey);
      if (!uploaderContext) {
        throwError(COMPONENT_NAME, "usage: <el-upload><el-upload-dragger /></el-upload>");
      }
      const ns2 = useNamespace("upload");
      const dragover = vue.ref(false);
      const disabled = useFormDisabled();
      const onDrop = (e) => {
        if (disabled.value)
          return;
        dragover.value = false;
        e.stopPropagation();
        const files = Array.from(e.dataTransfer.files);
        emit("file", files);
      };
      const onDragover = () => {
        if (!disabled.value)
          dragover.value = true;
      };
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns2).b("dragger"), vue.unref(ns2).is("dragover", dragover.value)]),
          onDrop: vue.withModifiers(onDrop, ["prevent"]),
          onDragover: vue.withModifiers(onDragover, ["prevent"]),
          onDragleave: vue.withModifiers(($event) => dragover.value = false, ["prevent"])
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 42, ["onDrop", "onDragover", "onDragleave"]);
      };
    }
  });
  var UploadDragger = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["__file", "upload-dragger.vue"]]);
  const uploadContentProps = buildProps({
    ...uploadBaseProps,
    beforeUpload: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onRemove: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onStart: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onSuccess: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onProgress: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onError: {
      type: definePropType(Function),
      default: shared.NOOP
    },
    onExceed: {
      type: definePropType(Function),
      default: shared.NOOP
    }
  });
  const __default__$d = vue.defineComponent({
    name: "ElUploadContent",
    inheritAttrs: false
  });
  const _sfc_main$e = /* @__PURE__ */ vue.defineComponent({
    ...__default__$d,
    props: uploadContentProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const ns2 = useNamespace("upload");
      const disabled = useFormDisabled();
      const requests = vue.shallowRef({});
      const inputRef = vue.shallowRef();
      const uploadFiles = (files) => {
        if (files.length === 0)
          return;
        const { autoUpload, limit: limit2, fileList, multiple, onStart, onExceed } = props2;
        if (limit2 && fileList.length + files.length > limit2) {
          onExceed(files, fileList);
          return;
        }
        if (!multiple) {
          files = files.slice(0, 1);
        }
        for (const file of files) {
          const rawFile = file;
          rawFile.uid = genFileId();
          onStart(rawFile);
          if (autoUpload)
            upload(rawFile);
        }
      };
      const upload = async (rawFile) => {
        inputRef.value.value = "";
        if (!props2.beforeUpload) {
          return doUpload(rawFile);
        }
        let hookResult;
        let beforeData = {};
        try {
          const originData = props2.data;
          const beforeUploadPromise = props2.beforeUpload(rawFile);
          beforeData = shared.isPlainObject(props2.data) ? cloneDeep(props2.data) : props2.data;
          hookResult = await beforeUploadPromise;
          if (shared.isPlainObject(props2.data) && isEqual$1(originData, beforeData)) {
            beforeData = cloneDeep(props2.data);
          }
        } catch (e) {
          hookResult = false;
        }
        if (hookResult === false) {
          props2.onRemove(rawFile);
          return;
        }
        let file = rawFile;
        if (hookResult instanceof Blob) {
          if (hookResult instanceof File) {
            file = hookResult;
          } else {
            file = new File([hookResult], rawFile.name, {
              type: rawFile.type
            });
          }
        }
        doUpload(Object.assign(file, {
          uid: rawFile.uid
        }), beforeData);
      };
      const resolveData = async (data, rawFile) => {
        if (shared.isFunction(data)) {
          return data(rawFile);
        }
        return data;
      };
      const doUpload = async (rawFile, beforeData) => {
        const {
          headers,
          data,
          method,
          withCredentials,
          name: filename,
          action,
          onProgress,
          onSuccess,
          onError,
          httpRequest
        } = props2;
        try {
          beforeData = await resolveData(beforeData != null ? beforeData : data, rawFile);
        } catch (e) {
          props2.onRemove(rawFile);
          return;
        }
        const { uid: uid2 } = rawFile;
        const options = {
          headers: headers || {},
          withCredentials,
          file: rawFile,
          data: beforeData,
          method,
          filename,
          action,
          onProgress: (evt) => {
            onProgress(evt, rawFile);
          },
          onSuccess: (res) => {
            onSuccess(res, rawFile);
            delete requests.value[uid2];
          },
          onError: (err) => {
            onError(err, rawFile);
            delete requests.value[uid2];
          }
        };
        const request2 = httpRequest(options);
        requests.value[uid2] = request2;
        if (request2 instanceof Promise) {
          request2.then(options.onSuccess, options.onError);
        }
      };
      const handleChange = (e) => {
        const files = e.target.files;
        if (!files)
          return;
        uploadFiles(Array.from(files));
      };
      const handleClick = () => {
        if (!disabled.value) {
          inputRef.value.value = "";
          inputRef.value.click();
        }
      };
      const handleKeydown = () => {
        handleClick();
      };
      const abort = (file) => {
        const _reqs = entriesOf(requests.value).filter(file ? ([uid2]) => String(file.uid) === uid2 : () => true);
        _reqs.forEach(([uid2, req]) => {
          if (req instanceof XMLHttpRequest)
            req.abort();
          delete requests.value[uid2];
        });
      };
      expose({
        abort,
        upload
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([
            vue.unref(ns2).b(),
            vue.unref(ns2).m(_ctx.listType),
            vue.unref(ns2).is("drag", _ctx.drag),
            vue.unref(ns2).is("disabled", vue.unref(disabled))
          ]),
          tabindex: vue.unref(disabled) ? "-1" : "0",
          onClick: handleClick,
          onKeydown: vue.withKeys(vue.withModifiers(handleKeydown, ["self"]), ["enter", "space"])
        }, [
          _ctx.drag ? (vue.openBlock(), vue.createBlock(UploadDragger, {
            key: 0,
            disabled: vue.unref(disabled),
            onFile: uploadFiles
          }, {
            default: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["disabled"])) : vue.renderSlot(_ctx.$slots, "default", { key: 1 }),
          vue.createElementVNode("input", {
            ref_key: "inputRef",
            ref: inputRef,
            class: vue.normalizeClass(vue.unref(ns2).e("input")),
            name: _ctx.name,
            disabled: vue.unref(disabled),
            multiple: _ctx.multiple,
            accept: _ctx.accept,
            type: "file",
            onChange: handleChange,
            onClick: vue.withModifiers(() => {
            }, ["stop"])
          }, null, 42, ["name", "disabled", "multiple", "accept", "onClick"])
        ], 42, ["tabindex", "onKeydown"]);
      };
    }
  });
  var UploadContent = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["__file", "upload-content.vue"]]);
  const SCOPE$1 = "ElUpload";
  const revokeFileObjectURL = (file) => {
    var _a2;
    if ((_a2 = file.url) == null ? void 0 : _a2.startsWith("blob:")) {
      URL.revokeObjectURL(file.url);
    }
  };
  const useHandlers = (props2, uploadRef) => {
    const uploadFiles = useVModel(props2, "fileList", void 0, { passive: true });
    const getFile = (rawFile) => uploadFiles.value.find((file) => file.uid === rawFile.uid);
    function abort(file) {
      var _a2;
      (_a2 = uploadRef.value) == null ? void 0 : _a2.abort(file);
    }
    function clearFiles(states = ["ready", "uploading", "success", "fail"]) {
      uploadFiles.value = uploadFiles.value.filter((row) => !states.includes(row.status));
    }
    function removeFile(file) {
      uploadFiles.value = uploadFiles.value.filter((uploadFile) => uploadFile !== file);
    }
    const handleError = (err, rawFile) => {
      const file = getFile(rawFile);
      if (!file)
        return;
      formatAppLog("error", "at node_modules/element-plus/es/components/upload/src/use-handlers.mjs:32", err);
      file.status = "fail";
      removeFile(file);
      props2.onError(err, file, uploadFiles.value);
      props2.onChange(file, uploadFiles.value);
    };
    const handleProgress = (evt, rawFile) => {
      const file = getFile(rawFile);
      if (!file)
        return;
      props2.onProgress(evt, file, uploadFiles.value);
      file.status = "uploading";
      file.percentage = Math.round(evt.percent);
    };
    const handleSuccess = (response, rawFile) => {
      const file = getFile(rawFile);
      if (!file)
        return;
      file.status = "success";
      file.response = response;
      props2.onSuccess(response, file, uploadFiles.value);
      props2.onChange(file, uploadFiles.value);
    };
    const handleStart = (file) => {
      if (isNil(file.uid))
        file.uid = genFileId();
      const uploadFile = {
        name: file.name,
        percentage: 0,
        status: "ready",
        size: file.size,
        raw: file,
        uid: file.uid
      };
      if (props2.listType === "picture-card" || props2.listType === "picture") {
        try {
          uploadFile.url = URL.createObjectURL(file);
        } catch (err) {
          debugWarn(SCOPE$1, err.message);
          props2.onError(err, uploadFile, uploadFiles.value);
        }
      }
      uploadFiles.value = [...uploadFiles.value, uploadFile];
      props2.onChange(uploadFile, uploadFiles.value);
    };
    const handleRemove = async (file) => {
      const uploadFile = file instanceof File ? getFile(file) : file;
      if (!uploadFile)
        throwError(SCOPE$1, "file to be removed not found");
      const doRemove = (file2) => {
        abort(file2);
        removeFile(file2);
        props2.onRemove(file2, uploadFiles.value);
        revokeFileObjectURL(file2);
      };
      if (props2.beforeRemove) {
        const before = await props2.beforeRemove(uploadFile, uploadFiles.value);
        if (before !== false)
          doRemove(uploadFile);
      } else {
        doRemove(uploadFile);
      }
    };
    function submit() {
      uploadFiles.value.filter(({ status }) => status === "ready").forEach(({ raw }) => {
        var _a2;
        return raw && ((_a2 = uploadRef.value) == null ? void 0 : _a2.upload(raw));
      });
    }
    vue.watch(() => props2.listType, (val) => {
      if (val !== "picture-card" && val !== "picture") {
        return;
      }
      uploadFiles.value = uploadFiles.value.map((file) => {
        const { raw, url } = file;
        if (!url && raw) {
          try {
            file.url = URL.createObjectURL(raw);
          } catch (err) {
            props2.onError(err, file, uploadFiles.value);
          }
        }
        return file;
      });
    });
    vue.watch(uploadFiles, (files) => {
      for (const file of files) {
        file.uid || (file.uid = genFileId());
        file.status || (file.status = "success");
      }
    }, { immediate: true, deep: true });
    return {
      uploadFiles,
      abort,
      clearFiles,
      handleError,
      handleProgress,
      handleStart,
      handleSuccess,
      handleRemove,
      submit,
      revokeFileObjectURL
    };
  };
  const __default__$c = vue.defineComponent({
    name: "ElUpload"
  });
  const _sfc_main$d = /* @__PURE__ */ vue.defineComponent({
    ...__default__$c,
    props: uploadProps,
    setup(__props, { expose }) {
      const props2 = __props;
      const disabled = useFormDisabled();
      const uploadRef = vue.shallowRef();
      const {
        abort,
        submit,
        clearFiles,
        uploadFiles,
        handleStart,
        handleError,
        handleRemove,
        handleSuccess,
        handleProgress,
        revokeFileObjectURL: revokeFileObjectURL2
      } = useHandlers(props2, uploadRef);
      const isPictureCard = vue.computed(() => props2.listType === "picture-card");
      const uploadContentProps2 = vue.computed(() => ({
        ...props2,
        fileList: uploadFiles.value,
        onStart: handleStart,
        onProgress: handleProgress,
        onSuccess: handleSuccess,
        onError: handleError,
        onRemove: handleRemove
      }));
      vue.onBeforeUnmount(() => {
        uploadFiles.value.forEach(revokeFileObjectURL2);
      });
      vue.provide(uploadContextKey, {
        accept: vue.toRef(props2, "accept")
      });
      expose({
        abort,
        submit,
        clearFiles,
        handleStart,
        handleRemove
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", null, [
          vue.unref(isPictureCard) && _ctx.showFileList ? (vue.openBlock(), vue.createBlock(UploadList, {
            key: 0,
            disabled: vue.unref(disabled),
            "list-type": _ctx.listType,
            files: vue.unref(uploadFiles),
            crossorigin: _ctx.crossorigin,
            "handle-preview": _ctx.onPreview,
            onRemove: vue.unref(handleRemove)
          }, vue.createSlots({
            append: vue.withCtx(() => [
              vue.createVNode(UploadContent, vue.mergeProps({
                ref_key: "uploadRef",
                ref: uploadRef
              }, vue.unref(uploadContentProps2)), {
                default: vue.withCtx(() => [
                  _ctx.$slots.trigger ? vue.renderSlot(_ctx.$slots, "trigger", { key: 0 }) : vue.createCommentVNode("v-if", true),
                  !_ctx.$slots.trigger && _ctx.$slots.default ? vue.renderSlot(_ctx.$slots, "default", { key: 1 }) : vue.createCommentVNode("v-if", true)
                ]),
                _: 3
              }, 16)
            ]),
            _: 2
          }, [
            _ctx.$slots.file ? {
              name: "default",
              fn: vue.withCtx(({ file, index }) => [
                vue.renderSlot(_ctx.$slots, "file", {
                  file,
                  index
                })
              ])
            } : void 0
          ]), 1032, ["disabled", "list-type", "files", "crossorigin", "handle-preview", "onRemove"])) : vue.createCommentVNode("v-if", true),
          !vue.unref(isPictureCard) || vue.unref(isPictureCard) && !_ctx.showFileList ? (vue.openBlock(), vue.createBlock(UploadContent, vue.mergeProps({
            key: 1,
            ref_key: "uploadRef",
            ref: uploadRef
          }, vue.unref(uploadContentProps2)), {
            default: vue.withCtx(() => [
              _ctx.$slots.trigger ? vue.renderSlot(_ctx.$slots, "trigger", { key: 0 }) : vue.createCommentVNode("v-if", true),
              !_ctx.$slots.trigger && _ctx.$slots.default ? vue.renderSlot(_ctx.$slots, "default", { key: 1 }) : vue.createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 16)) : vue.createCommentVNode("v-if", true),
          _ctx.$slots.trigger ? vue.renderSlot(_ctx.$slots, "default", { key: 2 }) : vue.createCommentVNode("v-if", true),
          vue.renderSlot(_ctx.$slots, "tip"),
          !vue.unref(isPictureCard) && _ctx.showFileList ? (vue.openBlock(), vue.createBlock(UploadList, {
            key: 3,
            disabled: vue.unref(disabled),
            "list-type": _ctx.listType,
            files: vue.unref(uploadFiles),
            crossorigin: _ctx.crossorigin,
            "handle-preview": _ctx.onPreview,
            onRemove: vue.unref(handleRemove)
          }, vue.createSlots({
            _: 2
          }, [
            _ctx.$slots.file ? {
              name: "default",
              fn: vue.withCtx(({ file, index }) => [
                vue.renderSlot(_ctx.$slots, "file", {
                  file,
                  index
                })
              ])
            } : void 0
          ]), 1032, ["disabled", "list-type", "files", "crossorigin", "handle-preview", "onRemove"])) : vue.createCommentVNode("v-if", true)
        ]);
      };
    }
  });
  var Upload = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["__file", "upload.vue"]]);
  const ElUpload = withInstall(Upload);
  const watermarkProps = buildProps({
    zIndex: {
      type: Number,
      default: 9
    },
    rotate: {
      type: Number,
      default: -22
    },
    width: Number,
    height: Number,
    image: String,
    content: {
      type: definePropType([String, Array]),
      default: "Element Plus"
    },
    font: {
      type: definePropType(Object)
    },
    gap: {
      type: definePropType(Array),
      default: () => [100, 100]
    },
    offset: {
      type: definePropType(Array)
    }
  });
  function toLowercaseSeparator(key) {
    return key.replace(/([A-Z])/g, "-$1").toLowerCase();
  }
  function getStyleStr(style) {
    return Object.keys(style).map((key) => `${toLowercaseSeparator(key)}: ${style[key]};`).join(" ");
  }
  function getPixelRatio() {
    return window.devicePixelRatio || 1;
  }
  const reRendering = (mutation, watermarkElement) => {
    let flag = false;
    if (mutation.removedNodes.length && watermarkElement) {
      flag = Array.from(mutation.removedNodes).includes(watermarkElement);
    }
    if (mutation.type === "attributes" && mutation.target === watermarkElement) {
      flag = true;
    }
    return flag;
  };
  const FontGap = 3;
  function prepareCanvas(width, height, ratio = 1) {
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
    const realWidth = width * ratio;
    const realHeight = height * ratio;
    canvas.setAttribute("width", `${realWidth}px`);
    canvas.setAttribute("height", `${realHeight}px`);
    ctx.save();
    return [ctx, canvas, realWidth, realHeight];
  }
  function useClips() {
    function getClips(content, rotate, ratio, width, height, font, gapX, gapY) {
      const [ctx, canvas, contentWidth, contentHeight] = prepareCanvas(width, height, ratio);
      if (content instanceof HTMLImageElement) {
        ctx.drawImage(content, 0, 0, contentWidth, contentHeight);
      } else {
        const {
          color,
          fontSize,
          fontStyle,
          fontWeight,
          fontFamily,
          textAlign,
          textBaseline
        } = font;
        const mergedFontSize = Number(fontSize) * ratio;
        ctx.font = `${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`;
        ctx.fillStyle = color;
        ctx.textAlign = textAlign;
        ctx.textBaseline = textBaseline;
        const contents = Array.isArray(content) ? content : [content];
        contents == null ? void 0 : contents.forEach((item, index) => {
          ctx.fillText(item != null ? item : "", contentWidth / 2, index * (mergedFontSize + FontGap * ratio));
        });
      }
      const angle = Math.PI / 180 * Number(rotate);
      const maxSize = Math.max(width, height);
      const [rCtx, rCanvas, realMaxSize] = prepareCanvas(maxSize, maxSize, ratio);
      rCtx.translate(realMaxSize / 2, realMaxSize / 2);
      rCtx.rotate(angle);
      if (contentWidth > 0 && contentHeight > 0) {
        rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);
      }
      function getRotatePos(x2, y2) {
        const targetX = x2 * Math.cos(angle) - y2 * Math.sin(angle);
        const targetY = x2 * Math.sin(angle) + y2 * Math.cos(angle);
        return [targetX, targetY];
      }
      let left2 = 0;
      let right2 = 0;
      let top = 0;
      let bottom = 0;
      const halfWidth = contentWidth / 2;
      const halfHeight = contentHeight / 2;
      const points = [
        [0 - halfWidth, 0 - halfHeight],
        [0 + halfWidth, 0 - halfHeight],
        [0 + halfWidth, 0 + halfHeight],
        [0 - halfWidth, 0 + halfHeight]
      ];
      points.forEach(([x2, y2]) => {
        const [targetX, targetY] = getRotatePos(x2, y2);
        left2 = Math.min(left2, targetX);
        right2 = Math.max(right2, targetX);
        top = Math.min(top, targetY);
        bottom = Math.max(bottom, targetY);
      });
      const cutLeft = left2 + realMaxSize / 2;
      const cutTop = top + realMaxSize / 2;
      const cutWidth = right2 - left2;
      const cutHeight = bottom - top;
      const realGapX = gapX * ratio;
      const realGapY = gapY * ratio;
      const filledWidth = (cutWidth + realGapX) * 2;
      const filledHeight = cutHeight + realGapY;
      const [fCtx, fCanvas] = prepareCanvas(filledWidth, filledHeight);
      function drawImg(targetX = 0, targetY = 0) {
        fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);
      }
      drawImg();
      drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);
      drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);
      return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];
    }
    return getClips;
  }
  const __default__$b = vue.defineComponent({
    name: "ElWatermark"
  });
  const _sfc_main$c = /* @__PURE__ */ vue.defineComponent({
    ...__default__$b,
    props: watermarkProps,
    setup(__props) {
      const props2 = __props;
      const style = {
        position: "relative"
      };
      const color = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.font) == null ? void 0 : _a2.color) != null ? _b : "rgba(0,0,0,.15)";
      });
      const fontSize = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.font) == null ? void 0 : _a2.fontSize) != null ? _b : 16;
      });
      const fontWeight = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.font) == null ? void 0 : _a2.fontWeight) != null ? _b : "normal";
      });
      const fontStyle = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.font) == null ? void 0 : _a2.fontStyle) != null ? _b : "normal";
      });
      const fontFamily = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.font) == null ? void 0 : _a2.fontFamily) != null ? _b : "sans-serif";
      });
      const textAlign = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.font) == null ? void 0 : _a2.textAlign) != null ? _b : "center";
      });
      const textBaseline = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.font) == null ? void 0 : _a2.textBaseline) != null ? _b : "hanging";
      });
      const gapX = vue.computed(() => props2.gap[0]);
      const gapY = vue.computed(() => props2.gap[1]);
      const gapXCenter = vue.computed(() => gapX.value / 2);
      const gapYCenter = vue.computed(() => gapY.value / 2);
      const offsetLeft = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.offset) == null ? void 0 : _a2[0]) != null ? _b : gapXCenter.value;
      });
      const offsetTop = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.offset) == null ? void 0 : _a2[1]) != null ? _b : gapYCenter.value;
      });
      const getMarkStyle = () => {
        const markStyle = {
          zIndex: props2.zIndex,
          position: "absolute",
          left: 0,
          top: 0,
          width: "100%",
          height: "100%",
          pointerEvents: "none",
          backgroundRepeat: "repeat"
        };
        let positionLeft = offsetLeft.value - gapXCenter.value;
        let positionTop = offsetTop.value - gapYCenter.value;
        if (positionLeft > 0) {
          markStyle.left = `${positionLeft}px`;
          markStyle.width = `calc(100% - ${positionLeft}px)`;
          positionLeft = 0;
        }
        if (positionTop > 0) {
          markStyle.top = `${positionTop}px`;
          markStyle.height = `calc(100% - ${positionTop}px)`;
          positionTop = 0;
        }
        markStyle.backgroundPosition = `${positionLeft}px ${positionTop}px`;
        return markStyle;
      };
      const containerRef = vue.shallowRef(null);
      const watermarkRef = vue.shallowRef();
      const stopObservation = vue.ref(false);
      const destroyWatermark = () => {
        if (watermarkRef.value) {
          watermarkRef.value.remove();
          watermarkRef.value = void 0;
        }
      };
      const appendWatermark = (base64Url, markWidth) => {
        var _a2;
        if (containerRef.value && watermarkRef.value) {
          stopObservation.value = true;
          watermarkRef.value.setAttribute("style", getStyleStr({
            ...getMarkStyle(),
            backgroundImage: `url('${base64Url}')`,
            backgroundSize: `${Math.floor(markWidth)}px`
          }));
          (_a2 = containerRef.value) == null ? void 0 : _a2.append(watermarkRef.value);
          setTimeout(() => {
            stopObservation.value = false;
          });
        }
      };
      const getMarkSize = (ctx) => {
        let defaultWidth = 120;
        let defaultHeight = 64;
        const image = props2.image;
        const content = props2.content;
        const width = props2.width;
        const height = props2.height;
        if (!image && ctx.measureText) {
          ctx.font = `${Number(fontSize.value)}px ${fontFamily.value}`;
          const contents = Array.isArray(content) ? content : [content];
          const sizes = contents.map((item) => {
            const metrics = ctx.measureText(item);
            return [
              metrics.width,
              metrics.fontBoundingBoxAscent !== void 0 ? metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent : metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent
            ];
          });
          defaultWidth = Math.ceil(Math.max(...sizes.map((size) => size[0])));
          defaultHeight = Math.ceil(Math.max(...sizes.map((size) => size[1]))) * contents.length + (contents.length - 1) * FontGap;
        }
        return [width != null ? width : defaultWidth, height != null ? height : defaultHeight];
      };
      const getClips = useClips();
      const renderWatermark = () => {
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        const image = props2.image;
        const content = props2.content;
        const rotate = props2.rotate;
        if (ctx) {
          if (!watermarkRef.value) {
            watermarkRef.value = document.createElement("div");
          }
          const ratio = getPixelRatio();
          const [markWidth, markHeight] = getMarkSize(ctx);
          const drawCanvas = (drawContent) => {
            const [textClips, clipWidth] = getClips(drawContent || "", rotate, ratio, markWidth, markHeight, {
              color: color.value,
              fontSize: fontSize.value,
              fontStyle: fontStyle.value,
              fontWeight: fontWeight.value,
              fontFamily: fontFamily.value,
              textAlign: textAlign.value,
              textBaseline: textBaseline.value
            }, gapX.value, gapY.value);
            appendWatermark(textClips, clipWidth);
          };
          if (image) {
            const img = new Image();
            img.onload = () => {
              drawCanvas(img);
            };
            img.onerror = () => {
              drawCanvas(content);
            };
            img.crossOrigin = "anonymous";
            img.referrerPolicy = "no-referrer";
            img.src = image;
          } else {
            drawCanvas(content);
          }
        }
      };
      vue.onMounted(() => {
        renderWatermark();
      });
      vue.watch(() => props2, () => {
        renderWatermark();
      }, {
        deep: true,
        flush: "post"
      });
      vue.onBeforeUnmount(() => {
        destroyWatermark();
      });
      const onMutate = (mutations2) => {
        if (stopObservation.value) {
          return;
        }
        mutations2.forEach((mutation) => {
          if (reRendering(mutation, watermarkRef.value)) {
            destroyWatermark();
            renderWatermark();
          }
        });
      };
      useMutationObserver(containerRef, onMutate, {
        attributes: true,
        subtree: true,
        childList: true
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "containerRef",
          ref: containerRef,
          style: vue.normalizeStyle([style])
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 4);
      };
    }
  });
  var Watermark = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["__file", "watermark.vue"]]);
  const ElWatermark = withInstall(Watermark);
  const maskProps = buildProps({
    zIndex: {
      type: Number,
      default: 1001
    },
    visible: Boolean,
    fill: {
      type: String,
      default: "rgba(0,0,0,0.5)"
    },
    pos: {
      type: definePropType(Object)
    },
    targetAreaClickable: {
      type: Boolean,
      default: true
    }
  });
  const useTarget = (target, open, gap, mergedMask, scrollIntoViewOptions) => {
    const posInfo = vue.ref(null);
    const getTargetEl = () => {
      let targetEl;
      if (shared.isString(target.value)) {
        targetEl = document.querySelector(target.value);
      } else if (shared.isFunction(target.value)) {
        targetEl = target.value();
      } else {
        targetEl = target.value;
      }
      return targetEl;
    };
    const updatePosInfo = () => {
      const targetEl = getTargetEl();
      if (!targetEl || !open.value) {
        posInfo.value = null;
        return;
      }
      if (!isInViewPort(targetEl) && open.value) {
        targetEl.scrollIntoView(scrollIntoViewOptions.value);
      }
      const { left: left2, top, width, height } = targetEl.getBoundingClientRect();
      posInfo.value = {
        left: left2,
        top,
        width,
        height,
        radius: 0
      };
    };
    vue.onMounted(() => {
      vue.watch([open, target], () => {
        updatePosInfo();
      }, {
        immediate: true
      });
      window.addEventListener("resize", updatePosInfo);
    });
    vue.onBeforeUnmount(() => {
      window.removeEventListener("resize", updatePosInfo);
    });
    const getGapOffset = (index) => {
      var _a2;
      return (_a2 = shared.isArray(gap.value.offset) ? gap.value.offset[index] : gap.value.offset) != null ? _a2 : 6;
    };
    const mergedPosInfo = vue.computed(() => {
      var _a2;
      if (!posInfo.value)
        return posInfo.value;
      const gapOffsetX = getGapOffset(0);
      const gapOffsetY = getGapOffset(1);
      const gapRadius = ((_a2 = gap.value) == null ? void 0 : _a2.radius) || 2;
      return {
        left: posInfo.value.left - gapOffsetX,
        top: posInfo.value.top - gapOffsetY,
        width: posInfo.value.width + gapOffsetX * 2,
        height: posInfo.value.height + gapOffsetY * 2,
        radius: gapRadius
      };
    });
    const triggerTarget = vue.computed(() => {
      const targetEl = getTargetEl();
      if (!mergedMask.value || !targetEl || !window.DOMRect) {
        return targetEl || void 0;
      }
      return {
        getBoundingClientRect() {
          var _a2, _b, _c, _d;
          return window.DOMRect.fromRect({
            width: ((_a2 = mergedPosInfo.value) == null ? void 0 : _a2.width) || 0,
            height: ((_b = mergedPosInfo.value) == null ? void 0 : _b.height) || 0,
            x: ((_c = mergedPosInfo.value) == null ? void 0 : _c.left) || 0,
            y: ((_d = mergedPosInfo.value) == null ? void 0 : _d.top) || 0
          });
        }
      };
    });
    return {
      mergedPosInfo,
      triggerTarget
    };
  };
  const tourKey = Symbol("ElTour");
  function isInViewPort(element) {
    const viewWidth = window.innerWidth || document.documentElement.clientWidth;
    const viewHeight = window.innerHeight || document.documentElement.clientHeight;
    const { top, right: right2, bottom, left: left2 } = element.getBoundingClientRect();
    return top >= 0 && left2 >= 0 && right2 <= viewWidth && bottom <= viewHeight;
  }
  const useFloating = (referenceRef, contentRef, arrowRef, placement, strategy, offset$12, zIndex2, showArrow) => {
    const x2 = vue.ref();
    const y2 = vue.ref();
    const middlewareData = vue.ref({});
    const states = {
      x: x2,
      y: y2,
      placement,
      strategy,
      middlewareData
    };
    const middleware = vue.computed(() => {
      const _middleware = [
        offset(vue.unref(offset$12)),
        flip(),
        shift(),
        overflowMiddleware()
      ];
      if (vue.unref(showArrow) && vue.unref(arrowRef)) {
        _middleware.push(arrow({
          element: vue.unref(arrowRef)
        }));
      }
      return _middleware;
    });
    const update = async () => {
      if (!isClient)
        return;
      const referenceEl = vue.unref(referenceRef);
      const contentEl = vue.unref(contentRef);
      if (!referenceEl || !contentEl)
        return;
      const data = await computePosition(referenceEl, contentEl, {
        placement: vue.unref(placement),
        strategy: vue.unref(strategy),
        middleware: vue.unref(middleware)
      });
      keysOf(states).forEach((key) => {
        states[key].value = data[key];
      });
    };
    const contentStyle = vue.computed(() => {
      if (!vue.unref(referenceRef)) {
        return {
          position: "fixed",
          top: "50%",
          left: "50%",
          transform: "translate3d(-50%, -50%, 0)",
          maxWidth: "100vw",
          zIndex: vue.unref(zIndex2)
        };
      }
      const { overflow } = vue.unref(middlewareData);
      return {
        position: vue.unref(strategy),
        zIndex: vue.unref(zIndex2),
        top: vue.unref(y2) != null ? `${vue.unref(y2)}px` : "",
        left: vue.unref(x2) != null ? `${vue.unref(x2)}px` : "",
        maxWidth: (overflow == null ? void 0 : overflow.maxWidth) ? `${overflow == null ? void 0 : overflow.maxWidth}px` : ""
      };
    });
    const arrowStyle = vue.computed(() => {
      if (!vue.unref(showArrow))
        return {};
      const { arrow: arrow2 } = vue.unref(middlewareData);
      return {
        left: (arrow2 == null ? void 0 : arrow2.x) != null ? `${arrow2 == null ? void 0 : arrow2.x}px` : "",
        top: (arrow2 == null ? void 0 : arrow2.y) != null ? `${arrow2 == null ? void 0 : arrow2.y}px` : ""
      };
    });
    let cleanup;
    vue.onMounted(() => {
      const referenceEl = vue.unref(referenceRef);
      const contentEl = vue.unref(contentRef);
      if (referenceEl && contentEl) {
        cleanup = autoUpdate(referenceEl, contentEl, update);
      }
      vue.watchEffect(() => {
        update();
      });
    });
    vue.onBeforeUnmount(() => {
      cleanup && cleanup();
    });
    return {
      update,
      contentStyle,
      arrowStyle
    };
  };
  const overflowMiddleware = () => {
    return {
      name: "overflow",
      async fn(state2) {
        const overflow = await detectOverflow(state2);
        let overWidth = 0;
        if (overflow.left > 0)
          overWidth = overflow.left;
        if (overflow.right > 0)
          overWidth = overflow.right;
        const floatingWidth = state2.rects.floating.width;
        return {
          data: {
            maxWidth: floatingWidth - overWidth
          }
        };
      }
    };
  };
  const __default__$a = vue.defineComponent({
    name: "ElTourMask",
    inheritAttrs: false
  });
  const _sfc_main$b = /* @__PURE__ */ vue.defineComponent({
    ...__default__$a,
    props: maskProps,
    setup(__props) {
      const props2 = __props;
      const { ns: ns2 } = vue.inject(tourKey);
      const radius = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.pos) == null ? void 0 : _a2.radius) != null ? _b : 2;
      });
      const roundInfo = vue.computed(() => {
        const v2 = radius.value;
        const baseInfo = `a${v2},${v2} 0 0 1`;
        return {
          topRight: `${baseInfo} ${v2},${v2}`,
          bottomRight: `${baseInfo} ${-v2},${v2}`,
          bottomLeft: `${baseInfo} ${-v2},${-v2}`,
          topLeft: `${baseInfo} ${v2},${-v2}`
        };
      });
      const path = vue.computed(() => {
        const width = window.innerWidth;
        const height = window.innerHeight;
        const info = roundInfo.value;
        const _path = `M${width},0 L0,0 L0,${height} L${width},${height} L${width},0 Z`;
        const _radius = radius.value;
        return props2.pos ? `${_path} M${props2.pos.left + _radius},${props2.pos.top} h${props2.pos.width - _radius * 2} ${info.topRight} v${props2.pos.height - _radius * 2} ${info.bottomRight} h${-props2.pos.width + _radius * 2} ${info.bottomLeft} v${-props2.pos.height + _radius * 2} ${info.topLeft} z` : _path;
      });
      const pathStyle = vue.computed(() => {
        return {
          fill: props2.fill,
          pointerEvents: "auto",
          cursor: "auto"
        };
      });
      useLockscreen(vue.toRef(props2, "visible"), {
        ns: ns2
      });
      return (_ctx, _cache) => {
        return _ctx.visible ? (vue.openBlock(), vue.createElementBlock("div", vue.mergeProps({
          key: 0,
          class: vue.unref(ns2).e("mask"),
          style: {
            position: "fixed",
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            zIndex: _ctx.zIndex,
            pointerEvents: _ctx.pos && _ctx.targetAreaClickable ? "none" : "auto"
          }
        }, _ctx.$attrs), [
          (vue.openBlock(), vue.createElementBlock("svg", { style: {
            width: "100%",
            height: "100%"
          } }, [
            vue.createElementVNode("path", {
              class: vue.normalizeClass(vue.unref(ns2).e("hollow")),
              style: vue.normalizeStyle(vue.unref(pathStyle)),
              d: vue.unref(path)
            }, null, 14, ["d"])
          ]))
        ], 16)) : vue.createCommentVNode("v-if", true);
      };
    }
  });
  var ElTourMask = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["__file", "mask.vue"]]);
  const tourStrategies = ["absolute", "fixed"];
  const tourPlacements = [
    "top-start",
    "top-end",
    "top",
    "bottom-start",
    "bottom-end",
    "bottom",
    "left-start",
    "left-end",
    "left",
    "right-start",
    "right-end",
    "right"
  ];
  const tourContentProps = buildProps({
    placement: {
      type: definePropType(String),
      values: tourPlacements,
      default: "bottom"
    },
    reference: {
      type: definePropType(Object),
      default: null
    },
    strategy: {
      type: definePropType(String),
      values: tourStrategies,
      default: "absolute"
    },
    offset: {
      type: Number,
      default: 10
    },
    showArrow: Boolean,
    zIndex: {
      type: Number,
      default: 2001
    }
  });
  const tourContentEmits = {
    close: () => true
  };
  const __default__$9 = vue.defineComponent({
    name: "ElTourContent"
  });
  const _sfc_main$a = /* @__PURE__ */ vue.defineComponent({
    ...__default__$9,
    props: tourContentProps,
    emits: tourContentEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const placement = vue.ref(props2.placement);
      const strategy = vue.ref(props2.strategy);
      const contentRef = vue.ref(null);
      const arrowRef = vue.ref(null);
      vue.watch(() => props2.placement, () => {
        placement.value = props2.placement;
      });
      const { contentStyle, arrowStyle } = useFloating(vue.toRef(props2, "reference"), contentRef, arrowRef, placement, strategy, vue.toRef(props2, "offset"), vue.toRef(props2, "zIndex"), vue.toRef(props2, "showArrow"));
      const side = vue.computed(() => {
        return placement.value.split("-")[0];
      });
      const { ns: ns2 } = vue.inject(tourKey);
      const onCloseRequested = () => {
        emit("close");
      };
      const onFocusoutPrevented = (event) => {
        if (event.detail.focusReason === "pointer") {
          event.preventDefault();
        }
      };
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "contentRef",
          ref: contentRef,
          style: vue.normalizeStyle(vue.unref(contentStyle)),
          class: vue.normalizeClass(vue.unref(ns2).e("content")),
          "data-side": vue.unref(side),
          tabindex: "-1"
        }, [
          vue.createVNode(vue.unref(ElFocusTrap), {
            loop: "",
            trapped: "",
            "focus-start-el": "container",
            "focus-trap-el": contentRef.value || void 0,
            onReleaseRequested: onCloseRequested,
            onFocusoutPrevented
          }, {
            default: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["focus-trap-el"]),
          _ctx.showArrow ? (vue.openBlock(), vue.createElementBlock("span", {
            key: 0,
            ref_key: "arrowRef",
            ref: arrowRef,
            style: vue.normalizeStyle(vue.unref(arrowStyle)),
            class: vue.normalizeClass(vue.unref(ns2).e("arrow"))
          }, null, 6)) : vue.createCommentVNode("v-if", true)
        ], 14, ["data-side"]);
      };
    }
  });
  var ElTourContent = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["__file", "content.vue"]]);
  var ElTourSteps = vue.defineComponent({
    name: "ElTourSteps",
    props: {
      current: {
        type: Number,
        default: 0
      }
    },
    emits: ["update-total"],
    setup(props2, { slots, emit }) {
      let cacheTotal = 0;
      return () => {
        var _a2, _b;
        const children = (_a2 = slots.default) == null ? void 0 : _a2.call(slots);
        const result = [];
        let total2 = 0;
        function filterSteps(children2) {
          if (!shared.isArray(children2))
            return;
          children2.forEach((item) => {
            var _a22;
            const name = (_a22 = (item == null ? void 0 : item.type) || {}) == null ? void 0 : _a22.name;
            if (name === "ElTourStep") {
              result.push(item);
              total2 += 1;
            }
          });
        }
        if (children.length) {
          filterSteps(flattedChildren((_b = children[0]) == null ? void 0 : _b.children));
        }
        if (cacheTotal !== total2) {
          cacheTotal = total2;
          emit("update-total", total2);
        }
        if (result.length) {
          return result[props2.current];
        }
        return null;
      };
    }
  });
  const tourProps = buildProps({
    modelValue: Boolean,
    current: {
      type: Number,
      default: 0
    },
    showArrow: {
      type: Boolean,
      default: true
    },
    showClose: {
      type: Boolean,
      default: true
    },
    closeIcon: {
      type: iconPropType
    },
    placement: tourContentProps.placement,
    contentStyle: {
      type: definePropType([Object])
    },
    mask: {
      type: definePropType([Boolean, Object]),
      default: true
    },
    gap: {
      type: definePropType(Object),
      default: () => ({
        offset: 6,
        radius: 2
      })
    },
    zIndex: {
      type: Number
    },
    scrollIntoViewOptions: {
      type: definePropType([Boolean, Object]),
      default: () => ({
        block: "center"
      })
    },
    type: {
      type: definePropType(String)
    },
    appendTo: {
      type: definePropType([String, Object]),
      default: "body"
    },
    closeOnPressEscape: {
      type: Boolean,
      default: true
    },
    targetAreaClickable: {
      type: Boolean,
      default: true
    }
  });
  const tourEmits = {
    [UPDATE_MODEL_EVENT]: (value) => isBoolean$1(value),
    ["update:current"]: (current) => isNumber$2(current),
    close: (current) => isNumber$2(current),
    finish: () => true,
    change: (current) => isNumber$2(current)
  };
  const __default__$8 = vue.defineComponent({
    name: "ElTour"
  });
  const _sfc_main$9 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$8,
    props: tourProps,
    emits: tourEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("tour");
      const total2 = vue.ref(0);
      const currentStep = vue.ref();
      const current = useVModel(props2, "current", emit, {
        passive: true
      });
      const currentTarget = vue.computed(() => {
        var _a2;
        return (_a2 = currentStep.value) == null ? void 0 : _a2.target;
      });
      const kls = vue.computed(() => [
        ns2.b(),
        mergedType.value === "primary" ? ns2.m("primary") : ""
      ]);
      const mergedPlacement = vue.computed(() => {
        var _a2;
        return ((_a2 = currentStep.value) == null ? void 0 : _a2.placement) || props2.placement;
      });
      const mergedContentStyle = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = currentStep.value) == null ? void 0 : _a2.contentStyle) != null ? _b : props2.contentStyle;
      });
      const mergedMask = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = currentStep.value) == null ? void 0 : _a2.mask) != null ? _b : props2.mask;
      });
      const mergedShowMask = vue.computed(() => !!mergedMask.value && props2.modelValue);
      const mergedMaskStyle = vue.computed(() => isBoolean$1(mergedMask.value) ? void 0 : mergedMask.value);
      const mergedShowArrow = vue.computed(() => {
        var _a2, _b;
        return !!currentTarget.value && ((_b = (_a2 = currentStep.value) == null ? void 0 : _a2.showArrow) != null ? _b : props2.showArrow);
      });
      const mergedScrollIntoViewOptions = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = currentStep.value) == null ? void 0 : _a2.scrollIntoViewOptions) != null ? _b : props2.scrollIntoViewOptions;
      });
      const mergedType = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = currentStep.value) == null ? void 0 : _a2.type) != null ? _b : props2.type;
      });
      const { nextZIndex } = useZIndex();
      const nowZIndex = nextZIndex();
      const mergedZIndex = vue.computed(() => {
        var _a2;
        return (_a2 = props2.zIndex) != null ? _a2 : nowZIndex;
      });
      const { mergedPosInfo: pos, triggerTarget } = useTarget(currentTarget, vue.toRef(props2, "modelValue"), vue.toRef(props2, "gap"), mergedMask, mergedScrollIntoViewOptions);
      vue.watch(() => props2.modelValue, (val) => {
        if (!val) {
          current.value = 0;
        }
      });
      const onEscClose = () => {
        if (props2.closeOnPressEscape) {
          emit("update:modelValue", false);
          emit("close", current.value);
        }
      };
      const onUpdateTotal = (val) => {
        total2.value = val;
      };
      const slots = vue.useSlots();
      vue.provide(tourKey, {
        currentStep,
        current,
        total: total2,
        showClose: vue.toRef(props2, "showClose"),
        closeIcon: vue.toRef(props2, "closeIcon"),
        mergedType,
        ns: ns2,
        slots,
        updateModelValue(modelValue) {
          emit("update:modelValue", modelValue);
        },
        onClose() {
          emit("close", current.value);
        },
        onFinish() {
          emit("finish");
        },
        onChange() {
          emit("change", current.value);
        }
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
          vue.createVNode(vue.unref(ElTeleport), { to: _ctx.appendTo }, {
            default: vue.withCtx(() => {
              var _a2, _b;
              return [
                vue.createElementVNode("div", vue.mergeProps({ class: vue.unref(kls) }, _ctx.$attrs), [
                  vue.createVNode(ElTourMask, {
                    visible: vue.unref(mergedShowMask),
                    fill: (_a2 = vue.unref(mergedMaskStyle)) == null ? void 0 : _a2.color,
                    style: vue.normalizeStyle((_b = vue.unref(mergedMaskStyle)) == null ? void 0 : _b.style),
                    pos: vue.unref(pos),
                    "z-index": vue.unref(mergedZIndex),
                    "target-area-clickable": _ctx.targetAreaClickable
                  }, null, 8, ["visible", "fill", "style", "pos", "z-index", "target-area-clickable"]),
                  _ctx.modelValue ? (vue.openBlock(), vue.createBlock(ElTourContent, {
                    key: vue.unref(current),
                    reference: vue.unref(triggerTarget),
                    placement: vue.unref(mergedPlacement),
                    "show-arrow": vue.unref(mergedShowArrow),
                    "z-index": vue.unref(mergedZIndex),
                    style: vue.normalizeStyle(vue.unref(mergedContentStyle)),
                    onClose: onEscClose
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(ElTourSteps), {
                        current: vue.unref(current),
                        onUpdateTotal
                      }, {
                        default: vue.withCtx(() => [
                          vue.renderSlot(_ctx.$slots, "default")
                        ]),
                        _: 3
                      }, 8, ["current"])
                    ]),
                    _: 3
                  }, 8, ["reference", "placement", "show-arrow", "z-index", "style"])) : vue.createCommentVNode("v-if", true)
                ], 16)
              ];
            }),
            _: 3
          }, 8, ["to"]),
          vue.createCommentVNode(" just for IDE "),
          vue.createCommentVNode("v-if", true)
        ], 64);
      };
    }
  });
  var Tour = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["__file", "tour.vue"]]);
  const tourStepProps = buildProps({
    target: {
      type: definePropType([String, Object, Function])
    },
    title: String,
    description: String,
    showClose: {
      type: Boolean,
      default: void 0
    },
    closeIcon: {
      type: iconPropType
    },
    showArrow: {
      type: Boolean,
      default: void 0
    },
    placement: tourContentProps.placement,
    mask: {
      type: definePropType([Boolean, Object]),
      default: void 0
    },
    contentStyle: {
      type: definePropType([Object])
    },
    prevButtonProps: {
      type: definePropType(Object)
    },
    nextButtonProps: {
      type: definePropType(Object)
    },
    scrollIntoViewOptions: {
      type: definePropType([Boolean, Object]),
      default: void 0
    },
    type: {
      type: definePropType(String)
    }
  });
  const tourStepEmits = {
    close: () => true
  };
  const __default__$7 = vue.defineComponent({
    name: "ElTourStep"
  });
  const _sfc_main$8 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$7,
    props: tourStepProps,
    emits: tourStepEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const { Close } = CloseComponents;
      const { t: t2 } = useLocale();
      const {
        currentStep,
        current,
        total: total2,
        showClose,
        closeIcon,
        mergedType,
        ns: ns2,
        slots: tourSlots,
        updateModelValue,
        onClose: tourOnClose,
        onFinish: tourOnFinish,
        onChange
      } = vue.inject(tourKey);
      vue.watch(props2, (val) => {
        currentStep.value = val;
      }, {
        immediate: true
      });
      const mergedShowClose = vue.computed(() => {
        var _a2;
        return (_a2 = props2.showClose) != null ? _a2 : showClose.value;
      });
      const mergedCloseIcon = vue.computed(() => {
        var _a2, _b;
        return (_b = (_a2 = props2.closeIcon) != null ? _a2 : closeIcon.value) != null ? _b : Close;
      });
      const filterButtonProps = (btnProps) => {
        if (!btnProps)
          return;
        return omit(btnProps, ["children", "onClick"]);
      };
      const onPrev = () => {
        var _a2, _b;
        current.value -= 1;
        if ((_a2 = props2.prevButtonProps) == null ? void 0 : _a2.onClick) {
          (_b = props2.prevButtonProps) == null ? void 0 : _b.onClick();
        }
        onChange();
      };
      const onNext = () => {
        var _a2;
        if (current.value >= total2.value - 1) {
          onFinish();
        } else {
          current.value += 1;
        }
        if ((_a2 = props2.nextButtonProps) == null ? void 0 : _a2.onClick) {
          props2.nextButtonProps.onClick();
        }
        onChange();
      };
      const onFinish = () => {
        onClose();
        tourOnFinish();
      };
      const onClose = () => {
        updateModelValue(false);
        tourOnClose();
        emit("close");
      };
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
          vue.unref(mergedShowClose) ? (vue.openBlock(), vue.createElementBlock("button", {
            key: 0,
            "aria-label": "Close",
            class: vue.normalizeClass(vue.unref(ns2).e("closebtn")),
            type: "button",
            onClick: onClose
          }, [
            vue.createVNode(vue.unref(ElIcon), {
              class: vue.normalizeClass(vue.unref(ns2).e("close"))
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(mergedCloseIcon))))
              ]),
              _: 1
            }, 8, ["class"])
          ], 2)) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("header", {
            class: vue.normalizeClass([vue.unref(ns2).e("header"), { "show-close": vue.unref(showClose) }])
          }, [
            vue.renderSlot(_ctx.$slots, "header", {}, () => [
              vue.createElementVNode("span", {
                role: "heading",
                class: vue.normalizeClass(vue.unref(ns2).e("title"))
              }, vue.toDisplayString(_ctx.title), 3)
            ])
          ], 2),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("body"))
          }, [
            vue.renderSlot(_ctx.$slots, "default", {}, () => [
              vue.createElementVNode("span", null, vue.toDisplayString(_ctx.description), 1)
            ])
          ], 2),
          vue.createElementVNode("footer", {
            class: vue.normalizeClass(vue.unref(ns2).e("footer"))
          }, [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).b("indicators"))
            }, [
              vue.unref(tourSlots).indicators ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(tourSlots).indicators), {
                key: 0,
                current: vue.unref(current),
                total: vue.unref(total2)
              }, null, 8, ["current", "total"])) : (vue.openBlock(true), vue.createElementBlock(vue.Fragment, { key: 1 }, vue.renderList(vue.unref(total2), (item, index) => {
                return vue.openBlock(), vue.createElementBlock("span", {
                  key: item,
                  class: vue.normalizeClass([vue.unref(ns2).b("indicator"), index === vue.unref(current) ? "is-active" : ""])
                }, null, 2);
              }), 128))
            ], 2),
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns2).b("buttons"))
            }, [
              vue.unref(current) > 0 ? (vue.openBlock(), vue.createBlock(vue.unref(ElButton), vue.mergeProps({
                key: 0,
                size: "small",
                type: vue.unref(mergedType)
              }, filterButtonProps(_ctx.prevButtonProps), { onClick: onPrev }), {
                default: vue.withCtx(() => {
                  var _a2, _b;
                  return [
                    vue.createTextVNode(vue.toDisplayString((_b = (_a2 = _ctx.prevButtonProps) == null ? void 0 : _a2.children) != null ? _b : vue.unref(t2)("el.tour.previous")), 1)
                  ];
                }),
                _: 1
              }, 16, ["type"])) : vue.createCommentVNode("v-if", true),
              vue.unref(current) <= vue.unref(total2) - 1 ? (vue.openBlock(), vue.createBlock(vue.unref(ElButton), vue.mergeProps({
                key: 1,
                size: "small",
                type: vue.unref(mergedType) === "primary" ? "default" : "primary"
              }, filterButtonProps(_ctx.nextButtonProps), { onClick: onNext }), {
                default: vue.withCtx(() => {
                  var _a2, _b;
                  return [
                    vue.createTextVNode(vue.toDisplayString((_b = (_a2 = _ctx.nextButtonProps) == null ? void 0 : _a2.children) != null ? _b : vue.unref(current) === vue.unref(total2) - 1 ? vue.unref(t2)("el.tour.finish") : vue.unref(t2)("el.tour.next")), 1)
                  ];
                }),
                _: 1
              }, 16, ["type"])) : vue.createCommentVNode("v-if", true)
            ], 2)
          ], 2)
        ], 64);
      };
    }
  });
  var TourStep = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["__file", "step.vue"]]);
  const ElTour = withInstall(Tour, {
    TourStep
  });
  const ElTourStep = withNoopInstall(TourStep);
  const anchorProps = buildProps({
    container: {
      type: definePropType([
        String,
        Object
      ])
    },
    offset: {
      type: Number,
      default: 0
    },
    bound: {
      type: Number,
      default: 15
    },
    duration: {
      type: Number,
      default: 300
    },
    marker: {
      type: Boolean,
      default: true
    },
    type: {
      type: definePropType(String),
      default: "default"
    },
    direction: {
      type: definePropType(String),
      default: "vertical"
    }
  });
  const anchorEmits = {
    change: (href) => shared.isString(href),
    click: (e, href) => e instanceof MouseEvent && (shared.isString(href) || isUndefined(href))
  };
  const anchorKey = Symbol("anchor");
  const __default__$6 = vue.defineComponent({
    name: "ElAnchor"
  });
  const _sfc_main$7 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$6,
    props: anchorProps,
    emits: anchorEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const currentAnchor = vue.ref("");
      const anchorRef = vue.ref(null);
      const markerRef = vue.ref(null);
      const containerEl = vue.ref();
      const links = {};
      let isScrolling = false;
      let currentScrollTop = 0;
      const ns2 = useNamespace("anchor");
      const cls = vue.computed(() => [
        ns2.b(),
        props2.type === "underline" ? ns2.m("underline") : "",
        ns2.m(props2.direction)
      ]);
      const addLink = (state2) => {
        links[state2.href] = state2.el;
      };
      const removeLink = (href) => {
        delete links[href];
      };
      const setCurrentAnchor = (href) => {
        const activeHref = currentAnchor.value;
        if (activeHref !== href) {
          currentAnchor.value = href;
          emit("change", href);
        }
      };
      let clearAnimate = null;
      const scrollToAnchor = (href) => {
        if (!containerEl.value)
          return;
        const target = getElement(href);
        if (!target)
          return;
        if (clearAnimate)
          clearAnimate();
        isScrolling = true;
        const scrollEle = getScrollElement(target, containerEl.value);
        const distance = getOffsetTopDistance(target, scrollEle);
        const max2 = scrollEle.scrollHeight - scrollEle.clientHeight;
        const to = Math.min(distance - props2.offset, max2);
        clearAnimate = animateScrollTo(containerEl.value, currentScrollTop, to, props2.duration, () => {
          setTimeout(() => {
            isScrolling = false;
          }, 20);
        });
      };
      const scrollTo = (href) => {
        if (href) {
          setCurrentAnchor(href);
          scrollToAnchor(href);
        }
      };
      const handleClick = (e, href) => {
        emit("click", e, href);
        scrollTo(href);
      };
      const handleScroll2 = throttleByRaf(() => {
        if (containerEl.value) {
          currentScrollTop = getScrollTop(containerEl.value);
        }
        const currentHref = getCurrentHref();
        if (isScrolling || isUndefined(currentHref))
          return;
        setCurrentAnchor(currentHref);
      });
      const getCurrentHref = () => {
        if (!containerEl.value)
          return;
        const scrollTop = getScrollTop(containerEl.value);
        const anchorTopList = [];
        for (const href of Object.keys(links)) {
          const target = getElement(href);
          if (!target)
            continue;
          const scrollEle = getScrollElement(target, containerEl.value);
          const distance = getOffsetTopDistance(target, scrollEle);
          anchorTopList.push({
            top: distance - props2.offset - props2.bound,
            href
          });
        }
        anchorTopList.sort((prev, next) => prev.top - next.top);
        for (let i2 = 0; i2 < anchorTopList.length; i2++) {
          const item = anchorTopList[i2];
          const next = anchorTopList[i2 + 1];
          if (i2 === 0 && scrollTop === 0) {
            return "";
          }
          if (item.top <= scrollTop && (!next || next.top > scrollTop)) {
            return item.href;
          }
        }
      };
      const getContainer = () => {
        const el = getElement(props2.container);
        if (!el || isWindow(el)) {
          containerEl.value = window;
        } else {
          containerEl.value = el;
        }
      };
      useEventListener(containerEl, "scroll", handleScroll2);
      const markerStyle = vue.computed(() => {
        if (!anchorRef.value || !markerRef.value || !currentAnchor.value)
          return {};
        const currentLinkEl = links[currentAnchor.value];
        if (!currentLinkEl)
          return {};
        const anchorRect = anchorRef.value.getBoundingClientRect();
        const markerRect = markerRef.value.getBoundingClientRect();
        const linkRect = currentLinkEl.getBoundingClientRect();
        if (props2.direction === "horizontal") {
          const left2 = linkRect.left - anchorRect.left;
          return {
            left: `${left2}px`,
            width: `${linkRect.width}px`,
            opacity: 1
          };
        } else {
          const top = linkRect.top - anchorRect.top + (linkRect.height - markerRect.height) / 2;
          return {
            top: `${top}px`,
            opacity: 1
          };
        }
      });
      vue.onMounted(() => {
        getContainer();
        const hash = decodeURIComponent(window.location.hash);
        const target = getElement(hash);
        if (target) {
          scrollTo(hash);
        } else {
          handleScroll2();
        }
      });
      vue.watch(() => props2.container, () => {
        getContainer();
      });
      vue.provide(anchorKey, {
        ns: ns2,
        direction: props2.direction,
        currentAnchor,
        addLink,
        removeLink,
        handleClick
      });
      expose({
        scrollTo
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "anchorRef",
          ref: anchorRef,
          class: vue.normalizeClass(vue.unref(cls))
        }, [
          _ctx.marker ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            ref_key: "markerRef",
            ref: markerRef,
            class: vue.normalizeClass(vue.unref(ns2).e("marker")),
            style: vue.normalizeStyle(vue.unref(markerStyle))
          }, null, 6)) : vue.createCommentVNode("v-if", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("list"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)
        ], 2);
      };
    }
  });
  var Anchor = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["__file", "anchor.vue"]]);
  const anchorLinkProps = buildProps({
    title: String,
    href: String
  });
  const __default__$5 = vue.defineComponent({
    name: "ElAnchorLink"
  });
  const _sfc_main$6 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$5,
    props: anchorLinkProps,
    setup(__props) {
      const props2 = __props;
      const linkRef = vue.ref(null);
      const {
        ns: ns2,
        direction: direction2,
        currentAnchor,
        addLink,
        removeLink,
        handleClick: contextHandleClick
      } = vue.inject(anchorKey);
      const cls = vue.computed(() => [
        ns2.e("link"),
        ns2.is("active", currentAnchor.value === props2.href)
      ]);
      const handleClick = (e) => {
        contextHandleClick(e, props2.href);
      };
      vue.watch(() => props2.href, (val, oldVal) => {
        vue.nextTick(() => {
          if (oldVal)
            removeLink(oldVal);
          if (val) {
            addLink({
              href: val,
              el: linkRef.value
            });
          }
        });
      });
      vue.onMounted(() => {
        const { href } = props2;
        if (href) {
          addLink({
            href,
            el: linkRef.value
          });
        }
      });
      vue.onBeforeUnmount(() => {
        const { href } = props2;
        if (href) {
          removeLink(href);
        }
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns2).e("item"))
        }, [
          vue.createElementVNode("a", {
            ref_key: "linkRef",
            ref: linkRef,
            class: vue.normalizeClass(vue.unref(cls)),
            href: _ctx.href,
            onClick: handleClick
          }, [
            vue.renderSlot(_ctx.$slots, "default", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.title), 1)
            ])
          ], 10, ["href"]),
          _ctx.$slots["sub-link"] && vue.unref(direction2) === "vertical" ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).e("list"))
          }, [
            vue.renderSlot(_ctx.$slots, "sub-link")
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var AnchorLink = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["__file", "anchor-link.vue"]]);
  const ElAnchor = withInstall(Anchor, {
    AnchorLink
  });
  const ElAnchorLink = withNoopInstall(AnchorLink);
  const segmentedProps = buildProps({
    options: {
      type: definePropType(Array),
      default: () => []
    },
    modelValue: {
      type: [String, Number, Boolean],
      default: void 0
    },
    block: Boolean,
    size: useSizeProp,
    disabled: Boolean,
    validateEvent: {
      type: Boolean,
      default: true
    },
    id: String,
    name: String,
    ...useAriaProps(["ariaLabel"])
  });
  const segmentedEmits = {
    [UPDATE_MODEL_EVENT]: (val) => shared.isString(val) || isNumber$2(val) || isBoolean$1(val),
    [CHANGE_EVENT]: (val) => shared.isString(val) || isNumber$2(val) || isBoolean$1(val)
  };
  const __default__$4 = vue.defineComponent({
    name: "ElSegmented"
  });
  const _sfc_main$5 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$4,
    props: segmentedProps,
    emits: segmentedEmits,
    setup(__props, { emit }) {
      const props2 = __props;
      const ns2 = useNamespace("segmented");
      const segmentedId = useId();
      const segmentedSize = useFormSize();
      const _disabled = useFormDisabled();
      const { formItem } = useFormItem();
      const { inputId, isLabeledByFormItem } = useFormItemInputId(props2, {
        formItemContext: formItem
      });
      const segmentedRef = vue.ref(null);
      const activeElement = useActiveElement();
      const state2 = vue.reactive({
        isInit: false,
        width: 0,
        translateX: 0,
        focusVisible: false
      });
      const handleChange = (item) => {
        const value = getValue2(item);
        emit(UPDATE_MODEL_EVENT, value);
        emit(CHANGE_EVENT, value);
      };
      const getValue2 = (item) => {
        return shared.isObject(item) ? item.value : item;
      };
      const getLabel = (item) => {
        return shared.isObject(item) ? item.label : item;
      };
      const getDisabled = (item) => {
        return !!(_disabled.value || (shared.isObject(item) ? item.disabled : false));
      };
      const getSelected = (item) => {
        return props2.modelValue === getValue2(item);
      };
      const getOption = (value) => {
        return props2.options.find((item) => getValue2(item) === value);
      };
      const getItemCls = (item) => {
        return [
          ns2.e("item"),
          ns2.is("selected", getSelected(item)),
          ns2.is("disabled", getDisabled(item))
        ];
      };
      const updateSelect = () => {
        if (!segmentedRef.value)
          return;
        const selectedItem = segmentedRef.value.querySelector(".is-selected");
        const selectedItemInput = segmentedRef.value.querySelector(".is-selected input");
        if (!selectedItem || !selectedItemInput) {
          state2.width = 0;
          state2.translateX = 0;
          state2.focusVisible = false;
          return;
        }
        const rect = selectedItem.getBoundingClientRect();
        state2.isInit = true;
        state2.width = rect.width;
        state2.translateX = selectedItem.offsetLeft;
        try {
          state2.focusVisible = selectedItemInput.matches(":focus-visible");
        } catch (e) {
        }
      };
      const segmentedCls = vue.computed(() => [
        ns2.b(),
        ns2.m(segmentedSize.value),
        ns2.is("block", props2.block)
      ]);
      const selectedStyle = vue.computed(() => ({
        width: `${state2.width}px`,
        transform: `translateX(${state2.translateX}px)`,
        display: state2.isInit ? "block" : "none"
      }));
      const selectedCls = vue.computed(() => [
        ns2.e("item-selected"),
        ns2.is("disabled", getDisabled(getOption(props2.modelValue))),
        ns2.is("focus-visible", state2.focusVisible)
      ]);
      const name = vue.computed(() => {
        return props2.name || segmentedId.value;
      });
      useResizeObserver(segmentedRef, updateSelect);
      vue.watch(activeElement, updateSelect);
      vue.watch(() => props2.modelValue, () => {
        var _a2;
        updateSelect();
        if (props2.validateEvent) {
          (_a2 = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a2.call(formItem, "change").catch((err) => debugWarn(err));
        }
      }, {
        flush: "post"
      });
      return (_ctx, _cache) => {
        return _ctx.options.length ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          id: vue.unref(inputId),
          ref_key: "segmentedRef",
          ref: segmentedRef,
          class: vue.normalizeClass(vue.unref(segmentedCls)),
          role: "radiogroup",
          "aria-label": !vue.unref(isLabeledByFormItem) ? _ctx.ariaLabel || "segmented" : void 0,
          "aria-labelledby": vue.unref(isLabeledByFormItem) ? vue.unref(formItem).labelId : void 0
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns2).e("group"))
          }, [
            vue.createElementVNode("div", {
              style: vue.normalizeStyle(vue.unref(selectedStyle)),
              class: vue.normalizeClass(vue.unref(selectedCls))
            }, null, 6),
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.options, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("label", {
                key: index,
                class: vue.normalizeClass(getItemCls(item))
              }, [
                vue.createElementVNode("input", {
                  class: vue.normalizeClass(vue.unref(ns2).e("item-input")),
                  type: "radio",
                  name: vue.unref(name),
                  disabled: getDisabled(item),
                  checked: getSelected(item),
                  onChange: ($event) => handleChange(item)
                }, null, 42, ["name", "disabled", "checked", "onChange"]),
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(ns2).e("item-label"))
                }, [
                  vue.renderSlot(_ctx.$slots, "default", { item }, () => [
                    vue.createTextVNode(vue.toDisplayString(getLabel(item)), 1)
                  ])
                ], 2)
              ], 2);
            }), 128))
          ], 2)
        ], 10, ["id", "aria-label", "aria-labelledby"])) : vue.createCommentVNode("v-if", true);
      };
    }
  });
  var Segmented = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["__file", "segmented.vue"]]);
  const ElSegmented = withInstall(Segmented);
  const filterOption = (pattern3, option) => {
    const lowerCase = pattern3.toLowerCase();
    const label = option.label || option.value;
    return label.toLowerCase().includes(lowerCase);
  };
  const getMentionCtx = (inputEl, prefix, split) => {
    const { selectionEnd } = inputEl;
    if (selectionEnd === null)
      return;
    const inputValue = inputEl.value;
    const prefixArray = castArray$1(prefix);
    let splitIndex = -1;
    let mentionCtx;
    for (let i2 = selectionEnd - 1; i2 >= 0; --i2) {
      const char = inputValue[i2];
      if (char === split || char === "\n" || char === "\r") {
        splitIndex = i2;
        continue;
      }
      if (prefixArray.includes(char)) {
        const end2 = splitIndex === -1 ? selectionEnd : splitIndex;
        const pattern3 = inputValue.slice(i2 + 1, end2);
        mentionCtx = {
          pattern: pattern3,
          start: i2 + 1,
          end: end2,
          prefix: char,
          prefixIndex: i2,
          splitIndex,
          selectionEnd
        };
        break;
      }
    }
    return mentionCtx;
  };
  const getCursorPosition = (element, options = {
    debug: false,
    useSelectionEnd: false
  }) => {
    const selectionStart = element.selectionStart !== null ? element.selectionStart : 0;
    const selectionEnd = element.selectionEnd !== null ? element.selectionEnd : 0;
    const position = options.useSelectionEnd ? selectionEnd : selectionStart;
    const properties = [
      "direction",
      "boxSizing",
      "width",
      "height",
      "overflowX",
      "overflowY",
      "borderTopWidth",
      "borderRightWidth",
      "borderBottomWidth",
      "borderLeftWidth",
      "borderStyle",
      "paddingTop",
      "paddingRight",
      "paddingBottom",
      "paddingLeft",
      "fontStyle",
      "fontVariant",
      "fontWeight",
      "fontStretch",
      "fontSize",
      "fontSizeAdjust",
      "lineHeight",
      "fontFamily",
      "textAlign",
      "textTransform",
      "textIndent",
      "textDecoration",
      "letterSpacing",
      "wordSpacing",
      "tabSize",
      "MozTabSize"
    ];
    if (options.debug) {
      const el = document.querySelector("#input-textarea-caret-position-mirror-div");
      if (el == null ? void 0 : el.parentNode)
        el.parentNode.removeChild(el);
    }
    const div = document.createElement("div");
    div.id = "input-textarea-caret-position-mirror-div";
    document.body.appendChild(div);
    const style = div.style;
    const computed = window.getComputedStyle(element);
    const isInput = element.nodeName === "INPUT";
    style.whiteSpace = isInput ? "nowrap" : "pre-wrap";
    if (!isInput)
      style.wordWrap = "break-word";
    style.position = "absolute";
    if (!options.debug)
      style.visibility = "hidden";
    properties.forEach((prop) => {
      if (isInput && prop === "lineHeight") {
        if (computed.boxSizing === "border-box") {
          const height = Number.parseInt(computed.height);
          const outerHeight = Number.parseInt(computed.paddingTop) + Number.parseInt(computed.paddingBottom) + Number.parseInt(computed.borderTopWidth) + Number.parseInt(computed.borderBottomWidth);
          const targetHeight = outerHeight + Number.parseInt(computed.lineHeight);
          if (height > targetHeight) {
            style.lineHeight = `${height - outerHeight}px`;
          } else if (height === targetHeight) {
            style.lineHeight = computed.lineHeight;
          } else {
            style.lineHeight = "0";
          }
        } else {
          style.lineHeight = computed.height;
        }
      } else {
        style[prop] = computed[prop];
      }
    });
    if (isFirefox()) {
      if (element.scrollHeight > Number.parseInt(computed.height)) {
        style.overflowY = "scroll";
      }
    } else {
      style.overflow = "hidden";
    }
    div.textContent = element.value.slice(0, Math.max(0, position));
    if (isInput && div.textContent) {
      div.textContent = div.textContent.replace(/\s/g, " ");
    }
    const span = document.createElement("span");
    span.textContent = element.value.slice(Math.max(0, position)) || ".";
    span.style.position = "relative";
    span.style.left = `${-element.scrollLeft}px`;
    span.style.top = `${-element.scrollTop}px`;
    div.appendChild(span);
    const relativePosition = {
      top: span.offsetTop + Number.parseInt(computed.borderTopWidth),
      left: span.offsetLeft + Number.parseInt(computed.borderLeftWidth),
      height: Number.parseInt(computed.fontSize) * 1.5
    };
    if (options.debug) {
      span.style.backgroundColor = "#aaa";
    } else {
      document.body.removeChild(div);
    }
    if (relativePosition.left >= element.clientWidth) {
      relativePosition.left = element.clientWidth;
    }
    return relativePosition;
  };
  const mentionProps = buildProps({
    ...inputProps,
    options: {
      type: definePropType(Array),
      default: () => []
    },
    prefix: {
      type: definePropType([String, Array]),
      default: "@",
      validator: (val) => {
        if (shared.isString(val))
          return val.length === 1;
        return val.every((v2) => shared.isString(v2) && v2.length === 1);
      }
    },
    split: {
      type: String,
      default: " ",
      validator: (val) => val.length === 1
    },
    filterOption: {
      type: definePropType([Boolean, Function]),
      default: () => filterOption,
      validator: (val) => {
        if (val === false)
          return true;
        return shared.isFunction(val);
      }
    },
    placement: {
      type: definePropType(String),
      default: "bottom"
    },
    showArrow: Boolean,
    offset: {
      type: Number,
      default: 0
    },
    whole: Boolean,
    checkIsWhole: {
      type: definePropType(Function)
    },
    modelValue: String,
    loading: Boolean,
    popperClass: {
      type: String,
      default: ""
    },
    popperOptions: {
      type: definePropType(Object),
      default: () => ({})
    }
  });
  const mentionEmits = {
    [UPDATE_MODEL_EVENT]: (value) => shared.isString(value),
    search: (pattern3, prefix) => shared.isString(pattern3) && shared.isString(prefix),
    select: (option, prefix) => shared.isString(option.value) && shared.isString(prefix),
    focus: (evt) => evt instanceof FocusEvent,
    blur: (evt) => evt instanceof FocusEvent
  };
  const mentionDropdownProps = buildProps({
    options: {
      type: definePropType(Array),
      default: () => []
    },
    loading: Boolean,
    disabled: Boolean,
    contentId: String,
    ariaLabel: String
  });
  const mentionDropdownEmits = {
    select: (option) => shared.isString(option.value)
  };
  const __default__$3 = vue.defineComponent({
    name: "ElMentionDropdown"
  });
  const _sfc_main$4 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$3,
    props: mentionDropdownProps,
    emits: mentionDropdownEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const ns2 = useNamespace("mention");
      const { t: t2 } = useLocale();
      const hoveringIndex = vue.ref(-1);
      const scrollbarRef = vue.ref();
      const optionRefs = vue.ref();
      const dropdownRef = vue.ref();
      const optionkls = (item, index) => [
        ns2.be("dropdown", "item"),
        ns2.is("hovering", hoveringIndex.value === index),
        ns2.is("disabled", item.disabled || props2.disabled)
      ];
      const handleSelect = (item) => {
        if (item.disabled || props2.disabled)
          return;
        emit("select", item);
      };
      const handleMouseEnter = (index) => {
        hoveringIndex.value = index;
      };
      const filteredAllDisabled = vue.computed(() => props2.disabled || props2.options.every((item) => item.disabled));
      const hoverOption = vue.computed(() => props2.options[hoveringIndex.value]);
      const selectHoverOption = () => {
        if (!hoverOption.value)
          return;
        emit("select", hoverOption.value);
      };
      const navigateOptions = (direction2) => {
        const { options } = props2;
        if (options.length === 0 || filteredAllDisabled.value)
          return;
        if (direction2 === "next") {
          hoveringIndex.value++;
          if (hoveringIndex.value === options.length) {
            hoveringIndex.value = 0;
          }
        } else if (direction2 === "prev") {
          hoveringIndex.value--;
          if (hoveringIndex.value < 0) {
            hoveringIndex.value = options.length - 1;
          }
        }
        const option = options[hoveringIndex.value];
        if (option.disabled) {
          navigateOptions(direction2);
          return;
        }
        vue.nextTick(() => scrollToOption(option));
      };
      const scrollToOption = (option) => {
        var _a2, _b, _c, _d;
        const { options } = props2;
        const index = options.findIndex((item) => item.value === option.value);
        const target = (_a2 = optionRefs.value) == null ? void 0 : _a2[index];
        if (target) {
          const menu = (_c = (_b = dropdownRef.value) == null ? void 0 : _b.querySelector) == null ? void 0 : _c.call(_b, `.${ns2.be("dropdown", "wrap")}`);
          if (menu) {
            scrollIntoView(menu, target);
          }
        }
        (_d = scrollbarRef.value) == null ? void 0 : _d.handleScroll();
      };
      const resetHoveringIndex = () => {
        if (filteredAllDisabled.value || props2.options.length === 0) {
          hoveringIndex.value = -1;
        } else {
          hoveringIndex.value = 0;
        }
      };
      vue.watch(() => props2.options, resetHoveringIndex, {
        immediate: true
      });
      expose({
        hoveringIndex,
        navigateOptions,
        selectHoverOption,
        hoverOption
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "dropdownRef",
          ref: dropdownRef,
          class: vue.normalizeClass(vue.unref(ns2).b("dropdown"))
        }, [
          _ctx.$slots.header ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns2).be("dropdown", "header"))
          }, [
            vue.renderSlot(_ctx.$slots, "header")
          ], 2)) : vue.createCommentVNode("v-if", true),
          vue.withDirectives(vue.createVNode(vue.unref(ElScrollbar), {
            id: _ctx.contentId,
            ref_key: "scrollbarRef",
            ref: scrollbarRef,
            tag: "ul",
            "wrap-class": vue.unref(ns2).be("dropdown", "wrap"),
            "view-class": vue.unref(ns2).be("dropdown", "list"),
            role: "listbox",
            "aria-label": _ctx.ariaLabel,
            "aria-orientation": "vertical"
          }, {
            default: vue.withCtx(() => [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.options, (item, index) => {
                return vue.openBlock(), vue.createElementBlock("li", {
                  id: `${_ctx.contentId}-${index}`,
                  ref_for: true,
                  ref_key: "optionRefs",
                  ref: optionRefs,
                  key: item.value,
                  class: vue.normalizeClass(optionkls(item, index)),
                  role: "option",
                  "aria-disabled": item.disabled || _ctx.disabled || void 0,
                  "aria-selected": hoveringIndex.value === index,
                  onMouseenter: ($event) => handleMouseEnter(index),
                  onClick: vue.withModifiers(($event) => handleSelect(item), ["stop"])
                }, [
                  vue.renderSlot(_ctx.$slots, "label", {
                    item,
                    index
                  }, () => {
                    var _a2;
                    return [
                      vue.createElementVNode("span", null, vue.toDisplayString((_a2 = item.label) != null ? _a2 : item.value), 1)
                    ];
                  })
                ], 42, ["id", "aria-disabled", "aria-selected", "onMouseenter", "onClick"]);
              }), 128))
            ]),
            _: 3
          }, 8, ["id", "wrap-class", "view-class", "aria-label"]), [
            [vue.vShow, _ctx.options.length > 0 && !_ctx.loading]
          ]),
          _ctx.loading ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns2).be("dropdown", "loading"))
          }, [
            vue.renderSlot(_ctx.$slots, "loading", {}, () => [
              vue.createTextVNode(vue.toDisplayString(vue.unref(t2)("el.mention.loading")), 1)
            ])
          ], 2)) : vue.createCommentVNode("v-if", true),
          _ctx.$slots.footer ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 2,
            class: vue.normalizeClass(vue.unref(ns2).be("dropdown", "footer"))
          }, [
            vue.renderSlot(_ctx.$slots, "footer")
          ], 2)) : vue.createCommentVNode("v-if", true)
        ], 2);
      };
    }
  });
  var ElMentionDropdown = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["__file", "mention-dropdown.vue"]]);
  const __default__$2 = vue.defineComponent({
    name: "ElMention",
    inheritAttrs: false
  });
  const _sfc_main$3 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$2,
    props: mentionProps,
    emits: mentionEmits,
    setup(__props, { expose, emit }) {
      const props2 = __props;
      const passInputProps = vue.computed(() => pick(props2, Object.keys(inputProps)));
      const ns2 = useNamespace("mention");
      const disabled = useFormDisabled();
      const contentId = useId();
      const elInputRef = vue.ref();
      const tooltipRef = vue.ref();
      const dropdownRef = vue.ref();
      const visible = vue.ref(false);
      const cursorStyle = vue.ref();
      const mentionCtx = vue.ref();
      const computedPlacement = vue.computed(() => props2.showArrow ? props2.placement : `${props2.placement}-start`);
      const computedFallbackPlacements = vue.computed(() => props2.showArrow ? ["bottom", "top"] : ["bottom-start", "top-start"]);
      const filteredOptions = vue.computed(() => {
        const { filterOption: filterOption2, options } = props2;
        if (!mentionCtx.value || !filterOption2)
          return options;
        return options.filter((option) => filterOption2(mentionCtx.value.pattern, option));
      });
      const dropdownVisible = vue.computed(() => {
        return visible.value && (!!filteredOptions.value.length || props2.loading);
      });
      const hoveringId = vue.computed(() => {
        var _a2;
        return `${contentId.value}-${(_a2 = dropdownRef.value) == null ? void 0 : _a2.hoveringIndex}`;
      });
      const handleInputChange = (value) => {
        emit("update:modelValue", value);
        syncAfterCursorMove();
      };
      const handleInputKeyDown = (e) => {
        var _a2, _b, _c, _d;
        if (!("key" in e))
          return;
        if ((_a2 = elInputRef.value) == null ? void 0 : _a2.isComposing)
          return;
        if (["ArrowLeft", "ArrowRight"].includes(e.key)) {
          syncAfterCursorMove();
        } else if (["ArrowUp", "ArrowDown"].includes(e.key)) {
          if (!visible.value)
            return;
          e.preventDefault();
          const direction2 = e.key === "ArrowUp" ? "prev" : "next";
          (_b = dropdownRef.value) == null ? void 0 : _b.navigateOptions(direction2);
        } else if (["Enter"].includes(e.key)) {
          if (!visible.value)
            return;
          e.preventDefault();
          if ((_c = dropdownRef.value) == null ? void 0 : _c.hoverOption) {
            (_d = dropdownRef.value) == null ? void 0 : _d.selectHoverOption();
          } else {
            visible.value = false;
          }
        } else if (["Escape"].includes(e.key)) {
          if (!visible.value)
            return;
          e.preventDefault();
          visible.value = false;
        } else if (["Backspace"].includes(e.key)) {
          if (props2.whole && mentionCtx.value) {
            const { splitIndex, selectionEnd, pattern: pattern3, prefixIndex, prefix } = mentionCtx.value;
            const inputEl = getInputEl();
            if (!inputEl)
              return;
            const inputValue = inputEl.value;
            const matchOption = props2.options.find((item) => item.value === pattern3);
            const isWhole = shared.isFunction(props2.checkIsWhole) ? props2.checkIsWhole(pattern3, prefix) : matchOption;
            if (isWhole && splitIndex !== -1 && splitIndex + 1 === selectionEnd) {
              e.preventDefault();
              const newValue = inputValue.slice(0, prefixIndex) + inputValue.slice(splitIndex + 1);
              emit(UPDATE_MODEL_EVENT, newValue);
              const newSelectionEnd = prefixIndex;
              vue.nextTick(() => {
                inputEl.selectionStart = newSelectionEnd;
                inputEl.selectionEnd = newSelectionEnd;
                syncDropdownVisible();
              });
            }
          }
        }
      };
      const { wrapperRef } = useFocusController(elInputRef, {
        beforeFocus() {
          return disabled.value;
        },
        afterFocus() {
          syncAfterCursorMove();
        },
        beforeBlur(event) {
          var _a2;
          return (_a2 = tooltipRef.value) == null ? void 0 : _a2.isFocusInsideContent(event);
        },
        afterBlur() {
          visible.value = false;
        }
      });
      const handleInputMouseDown = () => {
        syncAfterCursorMove();
      };
      const handleSelect = (item) => {
        if (!mentionCtx.value)
          return;
        const inputEl = getInputEl();
        if (!inputEl)
          return;
        const inputValue = inputEl.value;
        const { split } = props2;
        const newEndPart = inputValue.slice(mentionCtx.value.end);
        const alreadySeparated = newEndPart.startsWith(split);
        const newMiddlePart = `${item.value}${alreadySeparated ? "" : split}`;
        const newValue = inputValue.slice(0, mentionCtx.value.start) + newMiddlePart + newEndPart;
        emit(UPDATE_MODEL_EVENT, newValue);
        emit("select", item, mentionCtx.value.prefix);
        const newSelectionEnd = mentionCtx.value.start + newMiddlePart.length + (alreadySeparated ? 1 : 0);
        vue.nextTick(() => {
          inputEl.selectionStart = newSelectionEnd;
          inputEl.selectionEnd = newSelectionEnd;
          inputEl.focus();
          syncDropdownVisible();
        });
      };
      const getInputEl = () => {
        var _a2, _b;
        return props2.type === "textarea" ? (_a2 = elInputRef.value) == null ? void 0 : _a2.textarea : (_b = elInputRef.value) == null ? void 0 : _b.input;
      };
      const syncAfterCursorMove = () => {
        setTimeout(() => {
          syncCursor();
          syncDropdownVisible();
          vue.nextTick(() => {
            var _a2;
            return (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper();
          });
        }, 0);
      };
      const syncCursor = () => {
        const inputEl = getInputEl();
        if (!inputEl)
          return;
        const caretPosition = getCursorPosition(inputEl);
        const inputRect = inputEl.getBoundingClientRect();
        const elInputRect = elInputRef.value.$el.getBoundingClientRect();
        cursorStyle.value = {
          position: "absolute",
          width: 0,
          height: `${caretPosition.height}px`,
          left: `${caretPosition.left + inputRect.left - elInputRect.left}px`,
          top: `${caretPosition.top + inputRect.top - elInputRect.top}px`
        };
      };
      const syncDropdownVisible = () => {
        const inputEl = getInputEl();
        if (document.activeElement !== inputEl) {
          visible.value = false;
          return;
        }
        const { prefix, split } = props2;
        mentionCtx.value = getMentionCtx(inputEl, prefix, split);
        if (mentionCtx.value && mentionCtx.value.splitIndex === -1) {
          visible.value = true;
          emit("search", mentionCtx.value.pattern, mentionCtx.value.prefix);
          return;
        }
        visible.value = false;
      };
      expose({
        input: elInputRef,
        tooltip: tooltipRef,
        dropdownVisible
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "wrapperRef",
          ref: wrapperRef,
          class: vue.normalizeClass(vue.unref(ns2).b())
        }, [
          vue.createVNode(vue.unref(ElInput), vue.mergeProps(vue.mergeProps(vue.unref(passInputProps), _ctx.$attrs), {
            ref_key: "elInputRef",
            ref: elInputRef,
            "model-value": _ctx.modelValue,
            disabled: vue.unref(disabled),
            role: vue.unref(dropdownVisible) ? "combobox" : void 0,
            "aria-activedescendant": vue.unref(dropdownVisible) ? vue.unref(hoveringId) || "" : void 0,
            "aria-controls": vue.unref(dropdownVisible) ? vue.unref(contentId) : void 0,
            "aria-expanded": vue.unref(dropdownVisible) || void 0,
            "aria-label": _ctx.ariaLabel,
            "aria-autocomplete": vue.unref(dropdownVisible) ? "none" : void 0,
            "aria-haspopup": vue.unref(dropdownVisible) ? "listbox" : void 0,
            onInput: handleInputChange,
            onKeydown: handleInputKeyDown,
            onMousedown: handleInputMouseDown
          }), vue.createSlots({
            _: 2
          }, [
            vue.renderList(_ctx.$slots, (_2, name) => {
              return {
                name,
                fn: vue.withCtx((slotProps) => [
                  vue.renderSlot(_ctx.$slots, name, vue.normalizeProps(vue.guardReactiveProps(slotProps)))
                ])
              };
            })
          ]), 1040, ["model-value", "disabled", "role", "aria-activedescendant", "aria-controls", "aria-expanded", "aria-label", "aria-autocomplete", "aria-haspopup"]),
          vue.createVNode(vue.unref(ElTooltip), {
            ref_key: "tooltipRef",
            ref: tooltipRef,
            visible: vue.unref(dropdownVisible),
            "popper-class": [vue.unref(ns2).e("popper"), _ctx.popperClass],
            "popper-options": _ctx.popperOptions,
            placement: vue.unref(computedPlacement),
            "fallback-placements": vue.unref(computedFallbackPlacements),
            effect: "light",
            pure: "",
            offset: _ctx.offset,
            "show-arrow": _ctx.showArrow
          }, {
            default: vue.withCtx(() => [
              vue.createElementVNode("div", {
                style: vue.normalizeStyle(cursorStyle.value)
              }, null, 4)
            ]),
            content: vue.withCtx(() => {
              var _a2;
              return [
                vue.createVNode(ElMentionDropdown, {
                  ref_key: "dropdownRef",
                  ref: dropdownRef,
                  options: vue.unref(filteredOptions),
                  disabled: vue.unref(disabled),
                  loading: _ctx.loading,
                  "content-id": vue.unref(contentId),
                  "aria-label": _ctx.ariaLabel,
                  onSelect: handleSelect,
                  onClick: vue.withModifiers((_a2 = elInputRef.value) == null ? void 0 : _a2.focus, ["stop"])
                }, vue.createSlots({
                  _: 2
                }, [
                  vue.renderList(_ctx.$slots, (_2, name) => {
                    return {
                      name,
                      fn: vue.withCtx((slotProps) => [
                        vue.renderSlot(_ctx.$slots, name, vue.normalizeProps(vue.guardReactiveProps(slotProps)))
                      ])
                    };
                  })
                ]), 1032, ["options", "disabled", "loading", "content-id", "aria-label", "onClick"])
              ];
            }),
            _: 3
          }, 8, ["visible", "popper-class", "popper-options", "placement", "fallback-placements", "offset", "show-arrow"])
        ], 2);
      };
    }
  });
  var Mention = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["__file", "mention.vue"]]);
  const ElMention = withInstall(Mention);
  var Components = [
    ElAffix,
    ElAlert,
    ElAutocomplete,
    ElAutoResizer,
    ElAvatar,
    ElBacktop,
    ElBadge,
    ElBreadcrumb,
    ElBreadcrumbItem,
    ElButton,
    ElButtonGroup$1,
    ElCalendar,
    ElCard,
    ElCarousel,
    ElCarouselItem,
    ElCascader,
    ElCascaderPanel,
    ElCheckTag,
    ElCheckbox,
    ElCheckboxButton,
    ElCheckboxGroup$1,
    ElCol,
    ElCollapse,
    ElCollapseItem,
    ElCollapseTransition,
    ElColorPicker,
    ElConfigProvider,
    ElContainer,
    ElAside,
    ElFooter,
    ElHeader,
    ElMain,
    ElDatePicker,
    ElDescriptions,
    ElDescriptionsItem,
    ElDialog,
    ElDivider,
    ElDrawer,
    ElDropdown,
    ElDropdownItem,
    ElDropdownMenu,
    ElEmpty,
    ElForm,
    ElFormItem,
    ElIcon,
    ElImage,
    ElImageViewer,
    ElInput,
    ElInputNumber,
    ElLink,
    ElMenu,
    ElMenuItem,
    ElMenuItemGroup,
    ElSubMenu,
    ElPageHeader,
    ElPagination,
    ElPopconfirm,
    ElPopover,
    ElPopper,
    ElProgress,
    ElRadio,
    ElRadioButton,
    ElRadioGroup,
    ElRate,
    ElResult,
    ElRow,
    ElScrollbar,
    ElSelect,
    ElOption,
    ElOptionGroup,
    ElSelectV2,
    ElSkeleton,
    ElSkeletonItem,
    ElSlider,
    ElSpace,
    ElStatistic,
    ElCountdown,
    ElSteps,
    ElStep,
    ElSwitch,
    ElTable,
    ElTableColumn,
    ElTableV2,
    ElTabs,
    ElTabPane,
    ElTag,
    ElText,
    ElTimePicker,
    ElTimeSelect,
    ElTimeline,
    ElTimelineItem,
    ElTooltip,
    ElTooltipV2,
    ElTransfer,
    ElTree,
    ElTreeSelect,
    ElTreeV2,
    ElUpload,
    ElWatermark,
    ElTour,
    ElTourStep,
    ElAnchor,
    ElAnchorLink,
    ElSegmented,
    ElMention
  ];
  const SCOPE = "ElInfiniteScroll";
  const CHECK_INTERVAL = 50;
  const DEFAULT_DELAY = 200;
  const DEFAULT_DISTANCE = 0;
  const attributes = {
    delay: {
      type: Number,
      default: DEFAULT_DELAY
    },
    distance: {
      type: Number,
      default: DEFAULT_DISTANCE
    },
    disabled: {
      type: Boolean,
      default: false
    },
    immediate: {
      type: Boolean,
      default: true
    }
  };
  const getScrollOptions = (el, instance) => {
    return Object.entries(attributes).reduce((acm, [name, option]) => {
      var _a2, _b;
      const { type: type3, default: defaultValue } = option;
      const attrVal = el.getAttribute(`infinite-scroll-${name}`);
      let value = (_b = (_a2 = instance[attrVal]) != null ? _a2 : attrVal) != null ? _b : defaultValue;
      value = value === "false" ? false : value;
      value = type3(value);
      acm[name] = Number.isNaN(value) ? defaultValue : value;
      return acm;
    }, {});
  };
  const destroyObserver = (el) => {
    const { observer } = el[SCOPE];
    if (observer) {
      observer.disconnect();
      delete el[SCOPE].observer;
    }
  };
  const handleScroll = (el, cb) => {
    const { container, containerEl, instance, observer, lastScrollTop } = el[SCOPE];
    const { disabled, distance } = getScrollOptions(el, instance);
    const { clientHeight, scrollHeight, scrollTop } = containerEl;
    const delta = scrollTop - lastScrollTop;
    el[SCOPE].lastScrollTop = scrollTop;
    if (observer || disabled || delta < 0)
      return;
    let shouldTrigger = false;
    if (container === el) {
      shouldTrigger = scrollHeight - (clientHeight + scrollTop) <= distance;
    } else {
      const { clientTop, scrollHeight: height } = el;
      const offsetTop = getOffsetTopDistance(el, containerEl);
      shouldTrigger = scrollTop + clientHeight >= offsetTop + clientTop + height - distance;
    }
    if (shouldTrigger) {
      cb.call(instance);
    }
  };
  function checkFull(el, cb) {
    const { containerEl, instance } = el[SCOPE];
    const { disabled } = getScrollOptions(el, instance);
    if (disabled || containerEl.clientHeight === 0)
      return;
    if (containerEl.scrollHeight <= containerEl.clientHeight) {
      cb.call(instance);
    } else {
      destroyObserver(el);
    }
  }
  const InfiniteScroll = {
    async mounted(el, binding) {
      const { instance, value: cb } = binding;
      if (!shared.isFunction(cb)) {
        throwError(SCOPE, "'v-infinite-scroll' binding value must be a function");
      }
      await vue.nextTick();
      const { delay, immediate } = getScrollOptions(el, instance);
      const container = getScrollContainer(el, true);
      const containerEl = container === window ? document.documentElement : container;
      const onScroll = throttle(handleScroll.bind(null, el, cb), delay);
      if (!container)
        return;
      el[SCOPE] = {
        instance,
        container,
        containerEl,
        delay,
        cb,
        onScroll,
        lastScrollTop: containerEl.scrollTop
      };
      if (immediate) {
        const observer = new MutationObserver(throttle(checkFull.bind(null, el, cb), CHECK_INTERVAL));
        el[SCOPE].observer = observer;
        observer.observe(el, { childList: true, subtree: true });
        checkFull(el, cb);
      }
      container.addEventListener("scroll", onScroll);
    },
    unmounted(el) {
      if (!el[SCOPE])
        return;
      const { container, onScroll } = el[SCOPE];
      container == null ? void 0 : container.removeEventListener("scroll", onScroll);
      destroyObserver(el);
    },
    async updated(el) {
      if (!el[SCOPE]) {
        await vue.nextTick();
      } else {
        const { containerEl, cb, observer } = el[SCOPE];
        if (containerEl.clientHeight && observer) {
          checkFull(el, cb);
        }
      }
    }
  };
  const _InfiniteScroll = InfiniteScroll;
  _InfiniteScroll.install = (app) => {
    app.directive("InfiniteScroll", _InfiniteScroll);
  };
  const ElInfiniteScroll = _InfiniteScroll;
  function createLoadingComponent(options) {
    let afterLeaveTimer;
    const afterLeaveFlag = vue.ref(false);
    const data = vue.reactive({
      ...options,
      originalPosition: "",
      originalOverflow: "",
      visible: false
    });
    function setText(text) {
      data.text = text;
    }
    function destroySelf() {
      const target = data.parent;
      const ns2 = vm.ns;
      if (!target.vLoadingAddClassList) {
        let loadingNumber = target.getAttribute("loading-number");
        loadingNumber = Number.parseInt(loadingNumber) - 1;
        if (!loadingNumber) {
          removeClass(target, ns2.bm("parent", "relative"));
          target.removeAttribute("loading-number");
        } else {
          target.setAttribute("loading-number", loadingNumber.toString());
        }
        removeClass(target, ns2.bm("parent", "hidden"));
      }
      removeElLoadingChild();
      loadingInstance.unmount();
    }
    function removeElLoadingChild() {
      var _a2, _b;
      (_b = (_a2 = vm.$el) == null ? void 0 : _a2.parentNode) == null ? void 0 : _b.removeChild(vm.$el);
    }
    function close2() {
      var _a2;
      if (options.beforeClose && !options.beforeClose())
        return;
      afterLeaveFlag.value = true;
      clearTimeout(afterLeaveTimer);
      afterLeaveTimer = setTimeout(handleAfterLeave, 400);
      data.visible = false;
      (_a2 = options.closed) == null ? void 0 : _a2.call(options);
    }
    function handleAfterLeave() {
      if (!afterLeaveFlag.value)
        return;
      const target = data.parent;
      afterLeaveFlag.value = false;
      target.vLoadingAddClassList = void 0;
      destroySelf();
    }
    const elLoadingComponent = vue.defineComponent({
      name: "ElLoading",
      setup(_2, { expose }) {
        const { ns: ns2, zIndex: zIndex2 } = useGlobalComponentSettings("loading");
        expose({
          ns: ns2,
          zIndex: zIndex2
        });
        return () => {
          const svg = data.spinner || data.svg;
          const spinner = vue.h("svg", {
            class: "circular",
            viewBox: data.svgViewBox ? data.svgViewBox : "0 0 50 50",
            ...svg ? { innerHTML: svg } : {}
          }, [
            vue.h("circle", {
              class: "path",
              cx: "25",
              cy: "25",
              r: "20",
              fill: "none"
            })
          ]);
          const spinnerText = data.text ? vue.h("p", { class: ns2.b("text") }, [data.text]) : void 0;
          return vue.h(vue.Transition, {
            name: ns2.b("fade"),
            onAfterLeave: handleAfterLeave
          }, {
            default: vue.withCtx(() => [
              vue.withDirectives(vue.createVNode("div", {
                style: {
                  backgroundColor: data.background || ""
                },
                class: [
                  ns2.b("mask"),
                  data.customClass,
                  data.fullscreen ? "is-fullscreen" : ""
                ]
              }, [
                vue.h("div", {
                  class: ns2.b("spinner")
                }, [spinner, spinnerText])
              ]), [[vue.vShow, data.visible]])
            ])
          });
        };
      }
    });
    const loadingInstance = vue.createApp(elLoadingComponent);
    const vm = loadingInstance.mount(document.createElement("div"));
    return {
      ...vue.toRefs(data),
      setText,
      removeElLoadingChild,
      close: close2,
      handleAfterLeave,
      vm,
      get $el() {
        return vm.$el;
      }
    };
  }
  let fullscreenInstance = void 0;
  const Loading = function(options = {}) {
    if (!isClient)
      return void 0;
    const resolved = resolveOptions(options);
    if (resolved.fullscreen && fullscreenInstance) {
      return fullscreenInstance;
    }
    const instance = createLoadingComponent({
      ...resolved,
      closed: () => {
        var _a2;
        (_a2 = resolved.closed) == null ? void 0 : _a2.call(resolved);
        if (resolved.fullscreen)
          fullscreenInstance = void 0;
      }
    });
    addStyle(resolved, resolved.parent, instance);
    addClassList(resolved, resolved.parent, instance);
    resolved.parent.vLoadingAddClassList = () => addClassList(resolved, resolved.parent, instance);
    let loadingNumber = resolved.parent.getAttribute("loading-number");
    if (!loadingNumber) {
      loadingNumber = "1";
    } else {
      loadingNumber = `${Number.parseInt(loadingNumber) + 1}`;
    }
    resolved.parent.setAttribute("loading-number", loadingNumber);
    resolved.parent.appendChild(instance.$el);
    vue.nextTick(() => instance.visible.value = resolved.visible);
    if (resolved.fullscreen) {
      fullscreenInstance = instance;
    }
    return instance;
  };
  const resolveOptions = (options) => {
    var _a2, _b, _c, _d;
    let target;
    if (shared.isString(options.target)) {
      target = (_a2 = document.querySelector(options.target)) != null ? _a2 : document.body;
    } else {
      target = options.target || document.body;
    }
    return {
      parent: target === document.body || options.body ? document.body : target,
      background: options.background || "",
      svg: options.svg || "",
      svgViewBox: options.svgViewBox || "",
      spinner: options.spinner || false,
      text: options.text || "",
      fullscreen: target === document.body && ((_b = options.fullscreen) != null ? _b : true),
      lock: (_c = options.lock) != null ? _c : false,
      customClass: options.customClass || "",
      visible: (_d = options.visible) != null ? _d : true,
      beforeClose: options.beforeClose,
      closed: options.closed,
      target
    };
  };
  const addStyle = async (options, parent2, instance) => {
    const { nextZIndex } = instance.vm.zIndex || instance.vm._.exposed.zIndex;
    const maskStyle = {};
    if (options.fullscreen) {
      instance.originalPosition.value = getStyle(document.body, "position");
      instance.originalOverflow.value = getStyle(document.body, "overflow");
      maskStyle.zIndex = nextZIndex();
    } else if (options.parent === document.body) {
      instance.originalPosition.value = getStyle(document.body, "position");
      await vue.nextTick();
      for (const property2 of ["top", "left"]) {
        const scroll = property2 === "top" ? "scrollTop" : "scrollLeft";
        maskStyle[property2] = `${options.target.getBoundingClientRect()[property2] + document.body[scroll] + document.documentElement[scroll] - Number.parseInt(getStyle(document.body, `margin-${property2}`), 10)}px`;
      }
      for (const property2 of ["height", "width"]) {
        maskStyle[property2] = `${options.target.getBoundingClientRect()[property2]}px`;
      }
    } else {
      instance.originalPosition.value = getStyle(parent2, "position");
    }
    for (const [key, value] of Object.entries(maskStyle)) {
      instance.$el.style[key] = value;
    }
  };
  const addClassList = (options, parent2, instance) => {
    const ns2 = instance.vm.ns || instance.vm._.exposed.ns;
    if (!["absolute", "fixed", "sticky"].includes(instance.originalPosition.value)) {
      addClass(parent2, ns2.bm("parent", "relative"));
    } else {
      removeClass(parent2, ns2.bm("parent", "relative"));
    }
    if (options.fullscreen && options.lock) {
      addClass(parent2, ns2.bm("parent", "hidden"));
    } else {
      removeClass(parent2, ns2.bm("parent", "hidden"));
    }
  };
  const INSTANCE_KEY = Symbol("ElLoading");
  const createInstance = (el, binding) => {
    var _a2, _b, _c, _d;
    const vm = binding.instance;
    const getBindingProp = (key) => shared.isObject(binding.value) ? binding.value[key] : void 0;
    const resolveExpression = (key) => {
      const data = shared.isString(key) && (vm == null ? void 0 : vm[key]) || key;
      if (data)
        return vue.ref(data);
      else
        return data;
    };
    const getProp2 = (name) => resolveExpression(getBindingProp(name) || el.getAttribute(`element-loading-${shared.hyphenate(name)}`));
    const fullscreen = (_a2 = getBindingProp("fullscreen")) != null ? _a2 : binding.modifiers.fullscreen;
    const options = {
      text: getProp2("text"),
      svg: getProp2("svg"),
      svgViewBox: getProp2("svgViewBox"),
      spinner: getProp2("spinner"),
      background: getProp2("background"),
      customClass: getProp2("customClass"),
      fullscreen,
      target: (_b = getBindingProp("target")) != null ? _b : fullscreen ? void 0 : el,
      body: (_c = getBindingProp("body")) != null ? _c : binding.modifiers.body,
      lock: (_d = getBindingProp("lock")) != null ? _d : binding.modifiers.lock
    };
    el[INSTANCE_KEY] = {
      options,
      instance: Loading(options)
    };
  };
  const updateOptions = (newOptions, originalOptions) => {
    for (const key of Object.keys(originalOptions)) {
      if (vue.isRef(originalOptions[key]))
        originalOptions[key].value = newOptions[key];
    }
  };
  const vLoading = {
    mounted(el, binding) {
      if (binding.value) {
        createInstance(el, binding);
      }
    },
    updated(el, binding) {
      const instance = el[INSTANCE_KEY];
      if (binding.oldValue !== binding.value) {
        if (binding.value && !binding.oldValue) {
          createInstance(el, binding);
        } else if (binding.value && binding.oldValue) {
          if (shared.isObject(binding.value))
            updateOptions(binding.value, instance.options);
        } else {
          instance == null ? void 0 : instance.instance.close();
        }
      }
    },
    unmounted(el) {
      var _a2;
      (_a2 = el[INSTANCE_KEY]) == null ? void 0 : _a2.instance.close();
      el[INSTANCE_KEY] = null;
    }
  };
  const ElLoading = {
    install(app) {
      app.directive("loading", vLoading);
      app.config.globalProperties.$loading = Loading;
    },
    directive: vLoading,
    service: Loading
  };
  const messageTypes = ["success", "info", "warning", "error"];
  const messageDefaults = mutable({
    customClass: "",
    center: false,
    dangerouslyUseHTMLString: false,
    duration: 3e3,
    icon: void 0,
    id: "",
    message: "",
    onClose: void 0,
    showClose: false,
    type: "info",
    plain: false,
    offset: 16,
    zIndex: 0,
    grouping: false,
    repeatNum: 1,
    appendTo: isClient ? document.body : void 0
  });
  const messageProps = buildProps({
    customClass: {
      type: String,
      default: messageDefaults.customClass
    },
    center: {
      type: Boolean,
      default: messageDefaults.center
    },
    dangerouslyUseHTMLString: {
      type: Boolean,
      default: messageDefaults.dangerouslyUseHTMLString
    },
    duration: {
      type: Number,
      default: messageDefaults.duration
    },
    icon: {
      type: iconPropType,
      default: messageDefaults.icon
    },
    id: {
      type: String,
      default: messageDefaults.id
    },
    message: {
      type: definePropType([
        String,
        Object,
        Function
      ]),
      default: messageDefaults.message
    },
    onClose: {
      type: definePropType(Function),
      default: messageDefaults.onClose
    },
    showClose: {
      type: Boolean,
      default: messageDefaults.showClose
    },
    type: {
      type: String,
      values: messageTypes,
      default: messageDefaults.type
    },
    plain: {
      type: Boolean,
      default: messageDefaults.plain
    },
    offset: {
      type: Number,
      default: messageDefaults.offset
    },
    zIndex: {
      type: Number,
      default: messageDefaults.zIndex
    },
    grouping: {
      type: Boolean,
      default: messageDefaults.grouping
    },
    repeatNum: {
      type: Number,
      default: messageDefaults.repeatNum
    }
  });
  const messageEmits = {
    destroy: () => true
  };
  const instances = vue.shallowReactive([]);
  const getInstance = (id) => {
    const idx = instances.findIndex((instance) => instance.id === id);
    const current = instances[idx];
    let prev;
    if (idx > 0) {
      prev = instances[idx - 1];
    }
    return { current, prev };
  };
  const getLastOffset = (id) => {
    const { prev } = getInstance(id);
    if (!prev)
      return 0;
    return prev.vm.exposed.bottom.value;
  };
  const getOffsetOrSpace = (id, offset2) => {
    const idx = instances.findIndex((instance) => instance.id === id);
    return idx > 0 ? 16 : offset2;
  };
  const __default__$1 = vue.defineComponent({
    name: "ElMessage"
  });
  const _sfc_main$2 = /* @__PURE__ */ vue.defineComponent({
    ...__default__$1,
    props: messageProps,
    emits: messageEmits,
    setup(__props, { expose }) {
      const props2 = __props;
      const { Close } = TypeComponents;
      const { ns: ns2, zIndex: zIndex2 } = useGlobalComponentSettings("message");
      const { currentZIndex, nextZIndex } = zIndex2;
      const messageRef = vue.ref();
      const visible = vue.ref(false);
      const height = vue.ref(0);
      let stopTimer = void 0;
      const badgeType = vue.computed(() => props2.type ? props2.type === "error" ? "danger" : props2.type : "info");
      const typeClass = vue.computed(() => {
        const type3 = props2.type;
        return { [ns2.bm("icon", type3)]: type3 && TypeComponentsMap[type3] };
      });
      const iconComponent = vue.computed(() => props2.icon || TypeComponentsMap[props2.type] || "");
      const lastOffset = vue.computed(() => getLastOffset(props2.id));
      const offset2 = vue.computed(() => getOffsetOrSpace(props2.id, props2.offset) + lastOffset.value);
      const bottom = vue.computed(() => height.value + offset2.value);
      const customStyle = vue.computed(() => ({
        top: `${offset2.value}px`,
        zIndex: currentZIndex.value
      }));
      function startTimer() {
        if (props2.duration === 0)
          return;
        ({ stop: stopTimer } = useTimeoutFn(() => {
          close2();
        }, props2.duration));
      }
      function clearTimer() {
        stopTimer == null ? void 0 : stopTimer();
      }
      function close2() {
        visible.value = false;
      }
      function keydown({ code }) {
        if (code === EVENT_CODE.esc) {
          close2();
        }
      }
      vue.onMounted(() => {
        startTimer();
        nextZIndex();
        visible.value = true;
      });
      vue.watch(() => props2.repeatNum, () => {
        clearTimer();
        startTimer();
      });
      useEventListener(document, "keydown", keydown);
      useResizeObserver(messageRef, () => {
        height.value = messageRef.value.getBoundingClientRect().height;
      });
      expose({
        visible,
        bottom,
        close: close2
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.Transition, {
          name: vue.unref(ns2).b("fade"),
          onBeforeLeave: _ctx.onClose,
          onAfterLeave: ($event) => _ctx.$emit("destroy"),
          persisted: ""
        }, {
          default: vue.withCtx(() => [
            vue.withDirectives(vue.createElementVNode("div", {
              id: _ctx.id,
              ref_key: "messageRef",
              ref: messageRef,
              class: vue.normalizeClass([
                vue.unref(ns2).b(),
                { [vue.unref(ns2).m(_ctx.type)]: _ctx.type },
                vue.unref(ns2).is("center", _ctx.center),
                vue.unref(ns2).is("closable", _ctx.showClose),
                vue.unref(ns2).is("plain", _ctx.plain),
                _ctx.customClass
              ]),
              style: vue.normalizeStyle(vue.unref(customStyle)),
              role: "alert",
              onMouseenter: clearTimer,
              onMouseleave: startTimer
            }, [
              _ctx.repeatNum > 1 ? (vue.openBlock(), vue.createBlock(vue.unref(ElBadge), {
                key: 0,
                value: _ctx.repeatNum,
                type: vue.unref(badgeType),
                class: vue.normalizeClass(vue.unref(ns2).e("badge"))
              }, null, 8, ["value", "type", "class"])) : vue.createCommentVNode("v-if", true),
              vue.unref(iconComponent) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 1,
                class: vue.normalizeClass([vue.unref(ns2).e("icon"), vue.unref(typeClass)])
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(iconComponent))))
                ]),
                _: 1
              }, 8, ["class"])) : vue.createCommentVNode("v-if", true),
              vue.renderSlot(_ctx.$slots, "default", {}, () => [
                !_ctx.dangerouslyUseHTMLString ? (vue.openBlock(), vue.createElementBlock("p", {
                  key: 0,
                  class: vue.normalizeClass(vue.unref(ns2).e("content"))
                }, vue.toDisplayString(_ctx.message), 3)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
                  vue.createCommentVNode(" Caution here, message could've been compromised, never use user's input as message "),
                  vue.createElementVNode("p", {
                    class: vue.normalizeClass(vue.unref(ns2).e("content")),
                    innerHTML: _ctx.message
                  }, null, 10, ["innerHTML"])
                ], 2112))
              ]),
              _ctx.showClose ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 2,
                class: vue.normalizeClass(vue.unref(ns2).e("closeBtn")),
                onClick: vue.withModifiers(close2, ["stop"])
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(vue.unref(Close))
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-if", true)
            ], 46, ["id"]), [
              [vue.vShow, visible.value]
            ])
          ]),
          _: 3
        }, 8, ["name", "onBeforeLeave", "onAfterLeave"]);
      };
    }
  });
  var MessageConstructor = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["__file", "message.vue"]]);
  let seed$1 = 1;
  const normalizeOptions = (params) => {
    const options = !params || shared.isString(params) || vue.isVNode(params) || shared.isFunction(params) ? { message: params } : params;
    const normalized = {
      ...messageDefaults,
      ...options
    };
    if (!normalized.appendTo) {
      normalized.appendTo = document.body;
    } else if (shared.isString(normalized.appendTo)) {
      let appendTo = document.querySelector(normalized.appendTo);
      if (!isElement$2(appendTo)) {
        debugWarn("ElMessage", "the appendTo option is not an HTMLElement. Falling back to document.body.");
        appendTo = document.body;
      }
      normalized.appendTo = appendTo;
    }
    if (isBoolean$1(messageConfig.grouping) && !normalized.grouping) {
      normalized.grouping = messageConfig.grouping;
    }
    if (isNumber$2(messageConfig.duration) && normalized.duration === 3e3) {
      normalized.duration = messageConfig.duration;
    }
    if (isNumber$2(messageConfig.offset) && normalized.offset === 16) {
      normalized.offset = messageConfig.offset;
    }
    if (isBoolean$1(messageConfig.showClose) && !normalized.showClose) {
      normalized.showClose = messageConfig.showClose;
    }
    return normalized;
  };
  const closeMessage = (instance) => {
    const idx = instances.indexOf(instance);
    if (idx === -1)
      return;
    instances.splice(idx, 1);
    const { handler } = instance;
    handler.close();
  };
  const createMessage = ({ appendTo, ...options }, context) => {
    const id = `message_${seed$1++}`;
    const userOnClose = options.onClose;
    const container = document.createElement("div");
    const props2 = {
      ...options,
      id,
      onClose: () => {
        userOnClose == null ? void 0 : userOnClose();
        closeMessage(instance);
      },
      onDestroy: () => {
        vue.render(null, container);
      }
    };
    const vnode = vue.createVNode(MessageConstructor, props2, shared.isFunction(props2.message) || vue.isVNode(props2.message) ? {
      default: shared.isFunction(props2.message) ? props2.message : () => props2.message
    } : null);
    vnode.appContext = context || message._context;
    vue.render(vnode, container);
    appendTo.appendChild(container.firstElementChild);
    const vm = vnode.component;
    const handler = {
      close: () => {
        vm.exposed.visible.value = false;
      }
    };
    const instance = {
      id,
      vnode,
      vm,
      handler,
      props: vnode.component.props
    };
    return instance;
  };
  const message = (options = {}, context) => {
    if (!isClient)
      return { close: () => void 0 };
    const normalized = normalizeOptions(options);
    if (normalized.grouping && instances.length) {
      const instance2 = instances.find(({ vnode: vm }) => {
        var _a2;
        return ((_a2 = vm.props) == null ? void 0 : _a2.message) === normalized.message;
      });
      if (instance2) {
        instance2.props.repeatNum += 1;
        instance2.props.type = normalized.type;
        return instance2.handler;
      }
    }
    if (isNumber$2(messageConfig.max) && instances.length >= messageConfig.max) {
      return { close: () => void 0 };
    }
    const instance = createMessage(normalized, context);
    instances.push(instance);
    return instance.handler;
  };
  messageTypes.forEach((type3) => {
    message[type3] = (options = {}, appContext) => {
      const normalized = normalizeOptions(options);
      return message({ ...normalized, type: type3 }, appContext);
    };
  });
  function closeAll$1(type3) {
    for (const instance of instances) {
      if (!type3 || type3 === instance.props.type) {
        instance.handler.close();
      }
    }
  }
  message.closeAll = closeAll$1;
  message._context = null;
  const ElMessage = withInstallFunction(message, "$message");
  const _sfc_main$1 = vue.defineComponent({
    name: "ElMessageBox",
    directives: {
      TrapFocus
    },
    components: {
      ElButton,
      ElFocusTrap,
      ElInput,
      ElOverlay,
      ElIcon,
      ...TypeComponents
    },
    inheritAttrs: false,
    props: {
      buttonSize: {
        type: String,
        validator: isValidComponentSize
      },
      modal: {
        type: Boolean,
        default: true
      },
      lockScroll: {
        type: Boolean,
        default: true
      },
      showClose: {
        type: Boolean,
        default: true
      },
      closeOnClickModal: {
        type: Boolean,
        default: true
      },
      closeOnPressEscape: {
        type: Boolean,
        default: true
      },
      closeOnHashChange: {
        type: Boolean,
        default: true
      },
      center: Boolean,
      draggable: Boolean,
      overflow: Boolean,
      roundButton: {
        default: false,
        type: Boolean
      },
      container: {
        type: String,
        default: "body"
      },
      boxType: {
        type: String,
        default: ""
      }
    },
    emits: ["vanish", "action"],
    setup(props2, { emit }) {
      const {
        locale,
        zIndex: zIndex2,
        ns: ns2,
        size: btnSize
      } = useGlobalComponentSettings("message-box", vue.computed(() => props2.buttonSize));
      const { t: t2 } = locale;
      const { nextZIndex } = zIndex2;
      const visible = vue.ref(false);
      const state2 = vue.reactive({
        autofocus: true,
        beforeClose: null,
        callback: null,
        cancelButtonText: "",
        cancelButtonClass: "",
        confirmButtonText: "",
        confirmButtonClass: "",
        customClass: "",
        customStyle: {},
        dangerouslyUseHTMLString: false,
        distinguishCancelAndClose: false,
        icon: "",
        inputPattern: null,
        inputPlaceholder: "",
        inputType: "text",
        inputValue: null,
        inputValidator: null,
        inputErrorMessage: "",
        message: null,
        modalFade: true,
        modalClass: "",
        showCancelButton: false,
        showConfirmButton: true,
        type: "",
        title: void 0,
        showInput: false,
        action: "",
        confirmButtonLoading: false,
        cancelButtonLoading: false,
        confirmButtonLoadingIcon: vue.markRaw(loading_default),
        cancelButtonLoadingIcon: vue.markRaw(loading_default),
        confirmButtonDisabled: false,
        editorErrorMessage: "",
        validateError: false,
        zIndex: nextZIndex()
      });
      const typeClass = vue.computed(() => {
        const type3 = state2.type;
        return { [ns2.bm("icon", type3)]: type3 && TypeComponentsMap[type3] };
      });
      const contentId = useId();
      const inputId = useId();
      const iconComponent = vue.computed(() => state2.icon || TypeComponentsMap[state2.type] || "");
      const hasMessage = vue.computed(() => !!state2.message);
      const rootRef = vue.ref();
      const headerRef = vue.ref();
      const focusStartRef = vue.ref();
      const inputRef = vue.ref();
      const confirmRef = vue.ref();
      const confirmButtonClasses = vue.computed(() => state2.confirmButtonClass);
      vue.watch(() => state2.inputValue, async (val) => {
        await vue.nextTick();
        if (props2.boxType === "prompt" && val !== null) {
          validate();
        }
      }, { immediate: true });
      vue.watch(() => visible.value, (val) => {
        var _a2, _b;
        if (val) {
          if (props2.boxType !== "prompt") {
            if (state2.autofocus) {
              focusStartRef.value = (_b = (_a2 = confirmRef.value) == null ? void 0 : _a2.$el) != null ? _b : rootRef.value;
            } else {
              focusStartRef.value = rootRef.value;
            }
          }
          state2.zIndex = nextZIndex();
        }
        if (props2.boxType !== "prompt")
          return;
        if (val) {
          vue.nextTick().then(() => {
            var _a22;
            if (inputRef.value && inputRef.value.$el) {
              if (state2.autofocus) {
                focusStartRef.value = (_a22 = getInputElement()) != null ? _a22 : rootRef.value;
              } else {
                focusStartRef.value = rootRef.value;
              }
            }
          });
        } else {
          state2.editorErrorMessage = "";
          state2.validateError = false;
        }
      });
      const draggable2 = vue.computed(() => props2.draggable);
      const overflow = vue.computed(() => props2.overflow);
      useDraggable(rootRef, headerRef, draggable2, overflow);
      vue.onMounted(async () => {
        await vue.nextTick();
        if (props2.closeOnHashChange) {
          window.addEventListener("hashchange", doClose);
        }
      });
      vue.onBeforeUnmount(() => {
        if (props2.closeOnHashChange) {
          window.removeEventListener("hashchange", doClose);
        }
      });
      function doClose() {
        if (!visible.value)
          return;
        visible.value = false;
        vue.nextTick(() => {
          if (state2.action)
            emit("action", state2.action);
        });
      }
      const handleWrapperClick = () => {
        if (props2.closeOnClickModal) {
          handleAction(state2.distinguishCancelAndClose ? "close" : "cancel");
        }
      };
      const overlayEvent = useSameTarget(handleWrapperClick);
      const handleInputEnter = (e) => {
        if (state2.inputType !== "textarea") {
          e.preventDefault();
          return handleAction("confirm");
        }
      };
      const handleAction = (action) => {
        var _a2;
        if (props2.boxType === "prompt" && action === "confirm" && !validate()) {
          return;
        }
        state2.action = action;
        if (state2.beforeClose) {
          (_a2 = state2.beforeClose) == null ? void 0 : _a2.call(state2, action, state2, doClose);
        } else {
          doClose();
        }
      };
      const validate = () => {
        if (props2.boxType === "prompt") {
          const inputPattern = state2.inputPattern;
          if (inputPattern && !inputPattern.test(state2.inputValue || "")) {
            state2.editorErrorMessage = state2.inputErrorMessage || t2("el.messagebox.error");
            state2.validateError = true;
            return false;
          }
          const inputValidator = state2.inputValidator;
          if (typeof inputValidator === "function") {
            const validateResult = inputValidator(state2.inputValue);
            if (validateResult === false) {
              state2.editorErrorMessage = state2.inputErrorMessage || t2("el.messagebox.error");
              state2.validateError = true;
              return false;
            }
            if (typeof validateResult === "string") {
              state2.editorErrorMessage = validateResult;
              state2.validateError = true;
              return false;
            }
          }
        }
        state2.editorErrorMessage = "";
        state2.validateError = false;
        return true;
      };
      const getInputElement = () => {
        const inputRefs = inputRef.value.$refs;
        return inputRefs.input || inputRefs.textarea;
      };
      const handleClose = () => {
        handleAction("close");
      };
      const onCloseRequested = () => {
        if (props2.closeOnPressEscape) {
          handleClose();
        }
      };
      if (props2.lockScroll) {
        useLockscreen(visible);
      }
      return {
        ...vue.toRefs(state2),
        ns: ns2,
        overlayEvent,
        visible,
        hasMessage,
        typeClass,
        contentId,
        inputId,
        btnSize,
        iconComponent,
        confirmButtonClasses,
        rootRef,
        focusStartRef,
        headerRef,
        inputRef,
        confirmRef,
        doClose,
        handleClose,
        onCloseRequested,
        handleWrapperClick,
        handleInputEnter,
        handleAction,
        t: t2
      };
    }
  });
  function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_el_icon = vue.resolveComponent("el-icon");
    const _component_close = vue.resolveComponent("close");
    const _component_el_input = vue.resolveComponent("el-input");
    const _component_el_button = vue.resolveComponent("el-button");
    const _component_el_focus_trap = vue.resolveComponent("el-focus-trap");
    const _component_el_overlay = vue.resolveComponent("el-overlay");
    return vue.openBlock(), vue.createBlock(vue.Transition, {
      name: "fade-in-linear",
      onAfterLeave: ($event) => _ctx.$emit("vanish"),
      persisted: ""
    }, {
      default: vue.withCtx(() => [
        vue.withDirectives(vue.createVNode(_component_el_overlay, {
          "z-index": _ctx.zIndex,
          "overlay-class": [_ctx.ns.is("message-box"), _ctx.modalClass],
          mask: _ctx.modal
        }, {
          default: vue.withCtx(() => [
            vue.createElementVNode("div", {
              role: "dialog",
              "aria-label": _ctx.title,
              "aria-modal": "true",
              "aria-describedby": !_ctx.showInput ? _ctx.contentId : void 0,
              class: vue.normalizeClass(`${_ctx.ns.namespace.value}-overlay-message-box`),
              onClick: _ctx.overlayEvent.onClick,
              onMousedown: _ctx.overlayEvent.onMousedown,
              onMouseup: _ctx.overlayEvent.onMouseup
            }, [
              vue.createVNode(_component_el_focus_trap, {
                loop: "",
                trapped: _ctx.visible,
                "focus-trap-el": _ctx.rootRef,
                "focus-start-el": _ctx.focusStartRef,
                onReleaseRequested: _ctx.onCloseRequested
              }, {
                default: vue.withCtx(() => [
                  vue.createElementVNode("div", {
                    ref: "rootRef",
                    class: vue.normalizeClass([
                      _ctx.ns.b(),
                      _ctx.customClass,
                      _ctx.ns.is("draggable", _ctx.draggable),
                      { [_ctx.ns.m("center")]: _ctx.center }
                    ]),
                    style: vue.normalizeStyle(_ctx.customStyle),
                    tabindex: "-1",
                    onClick: vue.withModifiers(() => {
                    }, ["stop"])
                  }, [
                    _ctx.title !== null && _ctx.title !== void 0 ? (vue.openBlock(), vue.createElementBlock("div", {
                      key: 0,
                      ref: "headerRef",
                      class: vue.normalizeClass([_ctx.ns.e("header"), { "show-close": _ctx.showClose }])
                    }, [
                      vue.createElementVNode("div", {
                        class: vue.normalizeClass(_ctx.ns.e("title"))
                      }, [
                        _ctx.iconComponent && _ctx.center ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                          key: 0,
                          class: vue.normalizeClass([_ctx.ns.e("status"), _ctx.typeClass])
                        }, {
                          default: vue.withCtx(() => [
                            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.iconComponent)))
                          ]),
                          _: 1
                        }, 8, ["class"])) : vue.createCommentVNode("v-if", true),
                        vue.createElementVNode("span", null, vue.toDisplayString(_ctx.title), 1)
                      ], 2),
                      _ctx.showClose ? (vue.openBlock(), vue.createElementBlock("button", {
                        key: 0,
                        type: "button",
                        class: vue.normalizeClass(_ctx.ns.e("headerbtn")),
                        "aria-label": _ctx.t("el.messagebox.close"),
                        onClick: ($event) => _ctx.handleAction(_ctx.distinguishCancelAndClose ? "close" : "cancel"),
                        onKeydown: vue.withKeys(vue.withModifiers(($event) => _ctx.handleAction(_ctx.distinguishCancelAndClose ? "close" : "cancel"), ["prevent"]), ["enter"])
                      }, [
                        vue.createVNode(_component_el_icon, {
                          class: vue.normalizeClass(_ctx.ns.e("close"))
                        }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_close)
                          ]),
                          _: 1
                        }, 8, ["class"])
                      ], 42, ["aria-label", "onClick", "onKeydown"])) : vue.createCommentVNode("v-if", true)
                    ], 2)) : vue.createCommentVNode("v-if", true),
                    vue.createElementVNode("div", {
                      id: _ctx.contentId,
                      class: vue.normalizeClass(_ctx.ns.e("content"))
                    }, [
                      vue.createElementVNode("div", {
                        class: vue.normalizeClass(_ctx.ns.e("container"))
                      }, [
                        _ctx.iconComponent && !_ctx.center && _ctx.hasMessage ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                          key: 0,
                          class: vue.normalizeClass([_ctx.ns.e("status"), _ctx.typeClass])
                        }, {
                          default: vue.withCtx(() => [
                            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.iconComponent)))
                          ]),
                          _: 1
                        }, 8, ["class"])) : vue.createCommentVNode("v-if", true),
                        _ctx.hasMessage ? (vue.openBlock(), vue.createElementBlock("div", {
                          key: 1,
                          class: vue.normalizeClass(_ctx.ns.e("message"))
                        }, [
                          vue.renderSlot(_ctx.$slots, "default", {}, () => [
                            !_ctx.dangerouslyUseHTMLString ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.showInput ? "label" : "p"), {
                              key: 0,
                              for: _ctx.showInput ? _ctx.inputId : void 0
                            }, {
                              default: vue.withCtx(() => [
                                vue.createTextVNode(vue.toDisplayString(!_ctx.dangerouslyUseHTMLString ? _ctx.message : ""), 1)
                              ]),
                              _: 1
                            }, 8, ["for"])) : (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.showInput ? "label" : "p"), {
                              key: 1,
                              for: _ctx.showInput ? _ctx.inputId : void 0,
                              innerHTML: _ctx.message
                            }, null, 8, ["for", "innerHTML"]))
                          ])
                        ], 2)) : vue.createCommentVNode("v-if", true)
                      ], 2),
                      vue.withDirectives(vue.createElementVNode("div", {
                        class: vue.normalizeClass(_ctx.ns.e("input"))
                      }, [
                        vue.createVNode(_component_el_input, {
                          id: _ctx.inputId,
                          ref: "inputRef",
                          modelValue: _ctx.inputValue,
                          "onUpdate:modelValue": ($event) => _ctx.inputValue = $event,
                          type: _ctx.inputType,
                          placeholder: _ctx.inputPlaceholder,
                          "aria-invalid": _ctx.validateError,
                          class: vue.normalizeClass({ invalid: _ctx.validateError }),
                          onKeydown: vue.withKeys(_ctx.handleInputEnter, ["enter"])
                        }, null, 8, ["id", "modelValue", "onUpdate:modelValue", "type", "placeholder", "aria-invalid", "class", "onKeydown"]),
                        vue.createElementVNode("div", {
                          class: vue.normalizeClass(_ctx.ns.e("errormsg")),
                          style: vue.normalizeStyle({
                            visibility: !!_ctx.editorErrorMessage ? "visible" : "hidden"
                          })
                        }, vue.toDisplayString(_ctx.editorErrorMessage), 7)
                      ], 2), [
                        [vue.vShow, _ctx.showInput]
                      ])
                    ], 10, ["id"]),
                    vue.createElementVNode("div", {
                      class: vue.normalizeClass(_ctx.ns.e("btns"))
                    }, [
                      _ctx.showCancelButton ? (vue.openBlock(), vue.createBlock(_component_el_button, {
                        key: 0,
                        loading: _ctx.cancelButtonLoading,
                        "loading-icon": _ctx.cancelButtonLoadingIcon,
                        class: vue.normalizeClass([_ctx.cancelButtonClass]),
                        round: _ctx.roundButton,
                        size: _ctx.btnSize,
                        onClick: ($event) => _ctx.handleAction("cancel"),
                        onKeydown: vue.withKeys(vue.withModifiers(($event) => _ctx.handleAction("cancel"), ["prevent"]), ["enter"])
                      }, {
                        default: vue.withCtx(() => [
                          vue.createTextVNode(vue.toDisplayString(_ctx.cancelButtonText || _ctx.t("el.messagebox.cancel")), 1)
                        ]),
                        _: 1
                      }, 8, ["loading", "loading-icon", "class", "round", "size", "onClick", "onKeydown"])) : vue.createCommentVNode("v-if", true),
                      vue.withDirectives(vue.createVNode(_component_el_button, {
                        ref: "confirmRef",
                        type: "primary",
                        loading: _ctx.confirmButtonLoading,
                        "loading-icon": _ctx.confirmButtonLoadingIcon,
                        class: vue.normalizeClass([_ctx.confirmButtonClasses]),
                        round: _ctx.roundButton,
                        disabled: _ctx.confirmButtonDisabled,
                        size: _ctx.btnSize,
                        onClick: ($event) => _ctx.handleAction("confirm"),
                        onKeydown: vue.withKeys(vue.withModifiers(($event) => _ctx.handleAction("confirm"), ["prevent"]), ["enter"])
                      }, {
                        default: vue.withCtx(() => [
                          vue.createTextVNode(vue.toDisplayString(_ctx.confirmButtonText || _ctx.t("el.messagebox.confirm")), 1)
                        ]),
                        _: 1
                      }, 8, ["loading", "loading-icon", "class", "round", "disabled", "size", "onClick", "onKeydown"]), [
                        [vue.vShow, _ctx.showConfirmButton]
                      ])
                    ], 2)
                  ], 14, ["onClick"])
                ]),
                _: 3
              }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onReleaseRequested"])
            ], 42, ["aria-label", "aria-describedby", "onClick", "onMousedown", "onMouseup"])
          ]),
          _: 3
        }, 8, ["z-index", "overlay-class", "mask"]), [
          [vue.vShow, _ctx.visible]
        ])
      ]),
      _: 3
    }, 8, ["onAfterLeave"]);
  }
  var MessageBoxConstructor = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render], ["__file", "index.vue"]]);
  const messageInstance = /* @__PURE__ */ new Map();
  const getAppendToElement = (props2) => {
    let appendTo = document.body;
    if (props2.appendTo) {
      if (shared.isString(props2.appendTo)) {
        appendTo = document.querySelector(props2.appendTo);
      }
      if (isElement$2(props2.appendTo)) {
        appendTo = props2.appendTo;
      }
      if (!isElement$2(appendTo)) {
        debugWarn("ElMessageBox", "the appendTo option is not an HTMLElement. Falling back to document.body.");
        appendTo = document.body;
      }
    }
    return appendTo;
  };
  const initInstance = (props2, container, appContext = null) => {
    const vnode = vue.createVNode(MessageBoxConstructor, props2, shared.isFunction(props2.message) || vue.isVNode(props2.message) ? {
      default: shared.isFunction(props2.message) ? props2.message : () => props2.message
    } : null);
    vnode.appContext = appContext;
    vue.render(vnode, container);
    getAppendToElement(props2).appendChild(container.firstElementChild);
    return vnode.component;
  };
  const genContainer = () => {
    return document.createElement("div");
  };
  const showMessage = (options, appContext) => {
    const container = genContainer();
    options.onVanish = () => {
      vue.render(null, container);
      messageInstance.delete(vm);
    };
    options.onAction = (action) => {
      const currentMsg = messageInstance.get(vm);
      let resolve;
      if (options.showInput) {
        resolve = { value: vm.inputValue, action };
      } else {
        resolve = action;
      }
      if (options.callback) {
        options.callback(resolve, instance.proxy);
      } else {
        if (action === "cancel" || action === "close") {
          if (options.distinguishCancelAndClose && action !== "cancel") {
            currentMsg.reject("close");
          } else {
            currentMsg.reject("cancel");
          }
        } else {
          currentMsg.resolve(resolve);
        }
      }
    };
    const instance = initInstance(options, container, appContext);
    const vm = instance.proxy;
    for (const prop in options) {
      if (shared.hasOwn(options, prop) && !shared.hasOwn(vm.$props, prop)) {
        vm[prop] = options[prop];
      }
    }
    vm.visible = true;
    return vm;
  };
  function MessageBox(options, appContext = null) {
    if (!isClient)
      return Promise.reject();
    let callback;
    if (shared.isString(options) || vue.isVNode(options)) {
      options = {
        message: options
      };
    } else {
      callback = options.callback;
    }
    return new Promise((resolve, reject) => {
      const vm = showMessage(options, appContext != null ? appContext : MessageBox._context);
      messageInstance.set(vm, {
        options,
        callback,
        resolve,
        reject
      });
    });
  }
  const MESSAGE_BOX_VARIANTS = ["alert", "confirm", "prompt"];
  const MESSAGE_BOX_DEFAULT_OPTS = {
    alert: { closeOnPressEscape: false, closeOnClickModal: false },
    confirm: { showCancelButton: true },
    prompt: { showCancelButton: true, showInput: true }
  };
  MESSAGE_BOX_VARIANTS.forEach((boxType) => {
    MessageBox[boxType] = messageBoxFactory(boxType);
  });
  function messageBoxFactory(boxType) {
    return (message2, title, options, appContext) => {
      let titleOrOpts = "";
      if (shared.isObject(title)) {
        options = title;
        titleOrOpts = "";
      } else if (isUndefined(title)) {
        titleOrOpts = "";
      } else {
        titleOrOpts = title;
      }
      return MessageBox(Object.assign({
        title: titleOrOpts,
        message: message2,
        type: "",
        ...MESSAGE_BOX_DEFAULT_OPTS[boxType]
      }, options, {
        boxType
      }), appContext);
    };
  }
  MessageBox.close = () => {
    messageInstance.forEach((_2, vm) => {
      vm.doClose();
    });
    messageInstance.clear();
  };
  MessageBox._context = null;
  const _MessageBox = MessageBox;
  _MessageBox.install = (app) => {
    _MessageBox._context = app._context;
    app.config.globalProperties.$msgbox = _MessageBox;
    app.config.globalProperties.$messageBox = _MessageBox;
    app.config.globalProperties.$alert = _MessageBox.alert;
    app.config.globalProperties.$confirm = _MessageBox.confirm;
    app.config.globalProperties.$prompt = _MessageBox.prompt;
  };
  const ElMessageBox = _MessageBox;
  const notificationTypes = [
    "success",
    "info",
    "warning",
    "error"
  ];
  const notificationProps = buildProps({
    customClass: {
      type: String,
      default: ""
    },
    dangerouslyUseHTMLString: Boolean,
    duration: {
      type: Number,
      default: 4500
    },
    icon: {
      type: iconPropType
    },
    id: {
      type: String,
      default: ""
    },
    message: {
      type: definePropType([String, Object]),
      default: ""
    },
    offset: {
      type: Number,
      default: 0
    },
    onClick: {
      type: definePropType(Function),
      default: () => void 0
    },
    onClose: {
      type: definePropType(Function),
      required: true
    },
    position: {
      type: String,
      values: ["top-right", "top-left", "bottom-right", "bottom-left"],
      default: "top-right"
    },
    showClose: {
      type: Boolean,
      default: true
    },
    title: {
      type: String,
      default: ""
    },
    type: {
      type: String,
      values: [...notificationTypes, ""],
      default: ""
    },
    zIndex: Number
  });
  const notificationEmits = {
    destroy: () => true
  };
  const __default__ = vue.defineComponent({
    name: "ElNotification"
  });
  const _sfc_main = /* @__PURE__ */ vue.defineComponent({
    ...__default__,
    props: notificationProps,
    emits: notificationEmits,
    setup(__props, { expose }) {
      const props2 = __props;
      const { ns: ns2, zIndex: zIndex2 } = useGlobalComponentSettings("notification");
      const { nextZIndex, currentZIndex } = zIndex2;
      const { Close } = CloseComponents;
      const visible = vue.ref(false);
      let timer = void 0;
      const typeClass = vue.computed(() => {
        const type3 = props2.type;
        return type3 && TypeComponentsMap[props2.type] ? ns2.m(type3) : "";
      });
      const iconComponent = vue.computed(() => {
        if (!props2.type)
          return props2.icon;
        return TypeComponentsMap[props2.type] || props2.icon;
      });
      const horizontalClass = vue.computed(() => props2.position.endsWith("right") ? "right" : "left");
      const verticalProperty = vue.computed(() => props2.position.startsWith("top") ? "top" : "bottom");
      const positionStyle = vue.computed(() => {
        var _a2;
        return {
          [verticalProperty.value]: `${props2.offset}px`,
          zIndex: (_a2 = props2.zIndex) != null ? _a2 : currentZIndex.value
        };
      });
      function startTimer() {
        if (props2.duration > 0) {
          ({ stop: timer } = useTimeoutFn(() => {
            if (visible.value)
              close2();
          }, props2.duration));
        }
      }
      function clearTimer() {
        timer == null ? void 0 : timer();
      }
      function close2() {
        visible.value = false;
      }
      function onKeydown({ code }) {
        if (code === EVENT_CODE.delete || code === EVENT_CODE.backspace) {
          clearTimer();
        } else if (code === EVENT_CODE.esc) {
          if (visible.value) {
            close2();
          }
        } else {
          startTimer();
        }
      }
      vue.onMounted(() => {
        startTimer();
        nextZIndex();
        visible.value = true;
      });
      useEventListener(document, "keydown", onKeydown);
      expose({
        visible,
        close: close2
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.Transition, {
          name: vue.unref(ns2).b("fade"),
          onBeforeLeave: _ctx.onClose,
          onAfterLeave: ($event) => _ctx.$emit("destroy"),
          persisted: ""
        }, {
          default: vue.withCtx(() => [
            vue.withDirectives(vue.createElementVNode("div", {
              id: _ctx.id,
              class: vue.normalizeClass([vue.unref(ns2).b(), _ctx.customClass, vue.unref(horizontalClass)]),
              style: vue.normalizeStyle(vue.unref(positionStyle)),
              role: "alert",
              onMouseenter: clearTimer,
              onMouseleave: startTimer,
              onClick: _ctx.onClick
            }, [
              vue.unref(iconComponent) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 0,
                class: vue.normalizeClass([vue.unref(ns2).e("icon"), vue.unref(typeClass)])
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(iconComponent))))
                ]),
                _: 1
              }, 8, ["class"])) : vue.createCommentVNode("v-if", true),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns2).e("group"))
              }, [
                vue.createElementVNode("h2", {
                  class: vue.normalizeClass(vue.unref(ns2).e("title")),
                  textContent: vue.toDisplayString(_ctx.title)
                }, null, 10, ["textContent"]),
                vue.withDirectives(vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(ns2).e("content")),
                  style: vue.normalizeStyle(!!_ctx.title ? void 0 : { margin: 0 })
                }, [
                  vue.renderSlot(_ctx.$slots, "default", {}, () => [
                    !_ctx.dangerouslyUseHTMLString ? (vue.openBlock(), vue.createElementBlock("p", { key: 0 }, vue.toDisplayString(_ctx.message), 1)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
                      vue.createCommentVNode(" Caution here, message could've been compromised, never use user's input as message "),
                      vue.createElementVNode("p", { innerHTML: _ctx.message }, null, 8, ["innerHTML"])
                    ], 2112))
                  ])
                ], 6), [
                  [vue.vShow, _ctx.message]
                ]),
                _ctx.showClose ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                  key: 0,
                  class: vue.normalizeClass(vue.unref(ns2).e("closeBtn")),
                  onClick: vue.withModifiers(close2, ["stop"])
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(Close))
                  ]),
                  _: 1
                }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-if", true)
              ], 2)
            ], 46, ["id", "onClick"]), [
              [vue.vShow, visible.value]
            ])
          ]),
          _: 3
        }, 8, ["name", "onBeforeLeave", "onAfterLeave"]);
      };
    }
  });
  var NotificationConstructor = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "notification.vue"]]);
  const notifications = {
    "top-left": [],
    "top-right": [],
    "bottom-left": [],
    "bottom-right": []
  };
  const GAP_SIZE = 16;
  let seed = 1;
  const notify = function(options = {}, context = null) {
    if (!isClient)
      return { close: () => void 0 };
    if (typeof options === "string" || vue.isVNode(options)) {
      options = { message: options };
    }
    const position = options.position || "top-right";
    let verticalOffset = options.offset || 0;
    notifications[position].forEach(({ vm: vm2 }) => {
      var _a2;
      verticalOffset += (((_a2 = vm2.el) == null ? void 0 : _a2.offsetHeight) || 0) + GAP_SIZE;
    });
    verticalOffset += GAP_SIZE;
    const id = `notification_${seed++}`;
    const userOnClose = options.onClose;
    const props2 = {
      ...options,
      offset: verticalOffset,
      id,
      onClose: () => {
        close(id, position, userOnClose);
      }
    };
    let appendTo = document.body;
    if (isElement$2(options.appendTo)) {
      appendTo = options.appendTo;
    } else if (shared.isString(options.appendTo)) {
      appendTo = document.querySelector(options.appendTo);
    }
    if (!isElement$2(appendTo)) {
      debugWarn("ElNotification", "the appendTo option is not an HTMLElement. Falling back to document.body.");
      appendTo = document.body;
    }
    const container = document.createElement("div");
    const vm = vue.createVNode(NotificationConstructor, props2, vue.isVNode(props2.message) ? {
      default: () => props2.message
    } : null);
    vm.appContext = context != null ? context : notify._context;
    vm.props.onDestroy = () => {
      vue.render(null, container);
    };
    vue.render(vm, container);
    notifications[position].push({ vm });
    appendTo.appendChild(container.firstElementChild);
    return {
      close: () => {
        vm.component.exposed.visible.value = false;
      }
    };
  };
  notificationTypes.forEach((type3) => {
    notify[type3] = (options = {}) => {
      if (typeof options === "string" || vue.isVNode(options)) {
        options = {
          message: options
        };
      }
      return notify({
        ...options,
        type: type3
      });
    };
  });
  function close(id, position, userOnClose) {
    const orientedNotifications = notifications[position];
    const idx = orientedNotifications.findIndex(({ vm: vm2 }) => {
      var _a2;
      return ((_a2 = vm2.component) == null ? void 0 : _a2.props.id) === id;
    });
    if (idx === -1)
      return;
    const { vm } = orientedNotifications[idx];
    if (!vm)
      return;
    userOnClose == null ? void 0 : userOnClose(vm);
    const removedHeight = vm.el.offsetHeight;
    const verticalPos = position.split("-")[0];
    orientedNotifications.splice(idx, 1);
    const len = orientedNotifications.length;
    if (len < 1)
      return;
    for (let i2 = idx; i2 < len; i2++) {
      const { el, component: component2 } = orientedNotifications[i2].vm;
      const pos = Number.parseInt(el.style[verticalPos], 10) - removedHeight - GAP_SIZE;
      component2.props.offset = pos;
    }
  }
  function closeAll() {
    for (const orientedNotifications of Object.values(notifications)) {
      orientedNotifications.forEach(({ vm }) => {
        vm.component.exposed.visible.value = false;
      });
    }
  }
  notify.closeAll = closeAll;
  notify._context = null;
  const ElNotification = withInstallFunction(notify, "$notify");
  var Plugins = [
    ElInfiniteScroll,
    ElLoading,
    ElMessage,
    ElMessageBox,
    ElNotification,
    ElPopoverDirective
  ];
  var installer = makeInstaller([...Components, ...Plugins]);
  /**
    * gowiny-js-utils v1.0.7
    * https://gitee.com/gowiny/js-utils
    *
    * (c) 2022-present gowiny
    * @license MIT
    *
    * Date: 2022-03-24T10:27:26Z
    */
  function isString$1(val) {
    return typeof val === "string";
  }
  function isNumber$1(val) {
    return typeof val === "number";
  }
  function isObject(val) {
    return typeof val === "object";
  }
  async function queueInvoke(fns, target, args, assert2) {
    if (!fns) {
      return;
    }
    if (Array.isArray(fns)) {
      const len = fns.length;
      let result;
      for (let i2 = 0; i2 < len; i2++) {
        const item = fns[i2];
        result = await item.apply(target, args);
        if (assert2 && !await assert2(result)) {
          return result;
        }
      }
      return result;
    } else {
      return fns.apply(target, args);
    }
  }
  function invoke(fns, target, args) {
    if (!fns) {
      return;
    }
    let result;
    if (Array.isArray(fns)) {
      for (let i2 = 0; i2 < fns.length; i2++) {
        const item = fns[i2];
        result = item.apply(target, args);
      }
    } else {
      result = fns.apply(target, args);
    }
    return result;
  }
  var esErrors = Error;
  var _eval = EvalError;
  var range = RangeError;
  var ref = ReferenceError;
  var syntax = SyntaxError;
  var type = TypeError;
  var uri = URIError;
  var shams = function hasSymbols2() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (sym in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = shams;
  var hasSymbols$1 = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
  var test = {
    __proto__: null,
    foo: {}
  };
  var $Object = Object;
  var hasProto$1 = function hasProto2() {
    return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
  };
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var toStr$1 = Object.prototype.toString;
  var max = Math.max;
  var funcType = "[object Function]";
  var concatty = function concatty2(a2, b2) {
    var arr = [];
    for (var i2 = 0; i2 < a2.length; i2 += 1) {
      arr[i2] = a2[i2];
    }
    for (var j2 = 0; j2 < b2.length; j2 += 1) {
      arr[j2 + a2.length] = b2[j2];
    }
    return arr;
  };
  var slicy = function slicy2(arrLike, offset2) {
    var arr = [];
    for (var i2 = offset2 || 0, j2 = 0; i2 < arrLike.length; i2 += 1, j2 += 1) {
      arr[j2] = arrLike[i2];
    }
    return arr;
  };
  var joiny = function(arr, joiner) {
    var str = "";
    for (var i2 = 0; i2 < arr.length; i2 += 1) {
      str += arr[i2];
      if (i2 + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  var implementation$1 = function bind2(that) {
    var target = this;
    if (typeof target !== "function" || toStr$1.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(
          this,
          concatty(args, arguments)
        );
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(
        that,
        concatty(args, arguments)
      );
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i2 = 0; i2 < boundLength; i2++) {
      boundArgs[i2] = "$" + i2;
    }
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty2 = function Empty3() {
      };
      Empty2.prototype = target.prototype;
      bound.prototype = new Empty2();
      Empty2.prototype = null;
    }
    return bound;
  };
  var implementation = implementation$1;
  var functionBind = Function.prototype.bind || implementation;
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind$1 = functionBind;
  var hasown = bind$1.call(call, $hasOwn);
  var undefined$1;
  var $Error = esErrors;
  var $EvalError = _eval;
  var $RangeError = range;
  var $ReferenceError = ref;
  var $SyntaxError$1 = syntax;
  var $TypeError$3 = type;
  var $URIError = uri;
  var $Function = Function;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {
    }
  };
  var $gOPD$1 = Object.getOwnPropertyDescriptor;
  if ($gOPD$1) {
    try {
      $gOPD$1({}, "");
    } catch (e) {
      $gOPD$1 = null;
    }
  }
  var throwTypeError = function() {
    throw new $TypeError$3();
  };
  var ThrowTypeError = $gOPD$1 ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD$1(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols = hasSymbols$1();
  var hasProto = hasProto$1();
  var getProto = Object.getPrototypeOf || (hasProto ? function(x2) {
    return x2.__proto__;
  } : null);
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined$1 : getProto(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
    "%AsyncFromSyncIteratorPrototype%": undefined$1,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    // eslint-disable-line no-eval
    "%EvalError%": $EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
    "%JSON%": typeof JSON === "object" ? JSON : undefined$1,
    "%Map%": typeof Map === "undefined" ? undefined$1 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined$1 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined$1 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined$1,
    "%Symbol%": hasSymbols ? Symbol : undefined$1,
    "%SyntaxError%": $SyntaxError$1,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError$3,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet
  };
  if (getProto) {
    try {
      null.error;
    } catch (e) {
      var errorProto = getProto(getProto(e));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var doEval = function doEval2(name) {
    var value;
    if (name === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name === "%AsyncGenerator%") {
      var fn2 = doEval2("%AsyncGeneratorFunction%");
      if (fn2) {
        value = fn2.prototype;
      }
    } else if (name === "%AsyncIteratorPrototype%") {
      var gen = doEval2("%AsyncGenerator%");
      if (gen && getProto) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind = functionBind;
  var hasOwn$1 = hasown;
  var $concat$1 = bind.call(Function.call, Array.prototype.concat);
  var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
  var $replace$1 = bind.call(Function.call, String.prototype.replace);
  var $strSlice = bind.call(Function.call, String.prototype.slice);
  var $exec = bind.call(Function.call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath2(string2) {
    var first = $strSlice(string2, 0, 1);
    var last2 = $strSlice(string2, -1);
    if (first === "%" && last2 !== "%") {
      throw new $SyntaxError$1("invalid intrinsic syntax, expected closing `%`");
    } else if (last2 === "%" && first !== "%") {
      throw new $SyntaxError$1("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace$1(string2, rePropName, function(match, number, quote2, subString) {
      result[result.length] = quote2 ? $replace$1(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn$1(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError$3("intrinsic " + name + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError$1("intrinsic " + name + " does not exist!");
  };
  var getIntrinsic = function GetIntrinsic2(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) {
      throw new $TypeError$3("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError$3('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
      throw new $SyntaxError$1("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat$1([0, 1], alias));
    }
    for (var i2 = 1, isOwn = true; i2 < parts.length; i2 += 1) {
      var part = parts[i2];
      var first = $strSlice(part, 0, 1);
      var last2 = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last2 === '"' || last2 === "'" || last2 === "`")) && first !== last2) {
        throw new $SyntaxError$1("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn$1(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError$3("base intrinsic for " + name + " exists, but the property is not available.");
          }
          return void 0;
        }
        if ($gOPD$1 && i2 + 1 >= parts.length) {
          var desc = $gOPD$1(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn$1(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
  var callBind$1 = { exports: {} };
  var esDefineProperty;
  var hasRequiredEsDefineProperty;
  function requireEsDefineProperty() {
    if (hasRequiredEsDefineProperty)
      return esDefineProperty;
    hasRequiredEsDefineProperty = 1;
    var GetIntrinsic2 = getIntrinsic;
    var $defineProperty2 = GetIntrinsic2("%Object.defineProperty%", true) || false;
    if ($defineProperty2) {
      try {
        $defineProperty2({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty2 = false;
      }
    }
    esDefineProperty = $defineProperty2;
    return esDefineProperty;
  }
  var GetIntrinsic$3 = getIntrinsic;
  var $gOPD = GetIntrinsic$3("%Object.getOwnPropertyDescriptor%", true);
  if ($gOPD) {
    try {
      $gOPD([], "length");
    } catch (e) {
      $gOPD = null;
    }
  }
  var gopd$1 = $gOPD;
  var $defineProperty$1 = requireEsDefineProperty();
  var $SyntaxError = syntax;
  var $TypeError$2 = type;
  var gopd = gopd$1;
  var defineDataProperty = function defineDataProperty2(obj, property2, value) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new $TypeError$2("`obj` must be an object or a function`");
    }
    if (typeof property2 !== "string" && typeof property2 !== "symbol") {
      throw new $TypeError$2("`property` must be a string or a symbol`");
    }
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
      throw new $TypeError$2("`nonEnumerable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
      throw new $TypeError$2("`nonWritable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
      throw new $TypeError$2("`nonConfigurable`, if provided, must be a boolean or null");
    }
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
      throw new $TypeError$2("`loose`, if provided, must be a boolean");
    }
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    var desc = !!gopd && gopd(obj, property2);
    if ($defineProperty$1) {
      $defineProperty$1(obj, property2, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
      });
    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
      obj[property2] = value;
    } else {
      throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
    }
  };
  var $defineProperty = requireEsDefineProperty();
  var hasPropertyDescriptors = function hasPropertyDescriptors2() {
    return !!$defineProperty;
  };
  hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    if (!$defineProperty) {
      return null;
    }
    try {
      return $defineProperty([], "length", { value: 1 }).length !== 1;
    } catch (e) {
      return true;
    }
  };
  var hasPropertyDescriptors_1 = hasPropertyDescriptors;
  var GetIntrinsic$2 = getIntrinsic;
  var define = defineDataProperty;
  var hasDescriptors = hasPropertyDescriptors_1();
  var gOPD = gopd$1;
  var $TypeError$1 = type;
  var $floor$1 = GetIntrinsic$2("%Math.floor%");
  var setFunctionLength = function setFunctionLength2(fn2, length) {
    if (typeof fn2 !== "function") {
      throw new $TypeError$1("`fn` is not a function");
    }
    if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor$1(length) !== length) {
      throw new $TypeError$1("`length` must be a positive 32-bit integer");
    }
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn2 && gOPD) {
      var desc = gOPD(fn2, "length");
      if (desc && !desc.configurable) {
        functionLengthIsConfigurable = false;
      }
      if (desc && !desc.writable) {
        functionLengthIsWritable = false;
      }
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
      if (hasDescriptors) {
        define(
          /** @type {Parameters<define>[0]} */
          fn2,
          "length",
          length,
          true,
          true
        );
      } else {
        define(
          /** @type {Parameters<define>[0]} */
          fn2,
          "length",
          length
        );
      }
    }
    return fn2;
  };
  (function(module2) {
    var bind2 = functionBind;
    var GetIntrinsic2 = getIntrinsic;
    var setFunctionLength$1 = setFunctionLength;
    var $TypeError2 = type;
    var $apply = GetIntrinsic2("%Function.prototype.apply%");
    var $call = GetIntrinsic2("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic2("%Reflect.apply%", true) || bind2.call($call, $apply);
    var $defineProperty2 = requireEsDefineProperty();
    var $max = GetIntrinsic2("%Math.max%");
    module2.exports = function callBind2(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError2("a function is required");
      }
      var func = $reflectApply(bind2, $call, arguments);
      return setFunctionLength$1(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind2, $apply, arguments);
    };
    if ($defineProperty2) {
      $defineProperty2(module2.exports, "apply", { value: applyBind });
    } else {
      module2.exports.apply = applyBind;
    }
  })(callBind$1);
  var callBindExports = callBind$1.exports;
  var GetIntrinsic$1 = getIntrinsic;
  var callBind = callBindExports;
  var $indexOf = callBind(GetIntrinsic$1("String.prototype.indexOf"));
  var callBound$1 = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic$1(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
      return callBind(intrinsic);
    }
    return intrinsic;
  };
  var hasMap = typeof Map === "function" && Map.prototype;
  var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
  var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
  var mapForEach = hasMap && Map.prototype.forEach;
  var hasSet = typeof Set === "function" && Set.prototype;
  var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
  var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
  var setForEach = hasSet && Set.prototype.forEach;
  var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
  var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
  var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
  var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
  var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
  var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
  var booleanValueOf = Boolean.prototype.valueOf;
  var objectToString = Object.prototype.toString;
  var functionToString = Function.prototype.toString;
  var $match = String.prototype.match;
  var $slice = String.prototype.slice;
  var $replace = String.prototype.replace;
  var $toUpperCase = String.prototype.toUpperCase;
  var $toLowerCase = String.prototype.toLowerCase;
  var $test = RegExp.prototype.test;
  var $concat = Array.prototype.concat;
  var $join = Array.prototype.join;
  var $arrSlice = Array.prototype.slice;
  var $floor = Math.floor;
  var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
  var gOPS = Object.getOwnPropertySymbols;
  var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
  var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
  var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
  var isEnumerable = Object.prototype.propertyIsEnumerable;
  var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype ? function(O2) {
    return O2.__proto__;
  } : null);
  function addNumericSeparator(num, str) {
    if (num === Infinity || num === -Infinity || num !== num || num && num > -1e3 && num < 1e3 || $test.call(/e/, str)) {
      return str;
    }
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
      var int = num < 0 ? -$floor(-num) : $floor(num);
      if (int !== num) {
        var intStr = String(int);
        var dec = $slice.call(str, intStr.length + 1);
        return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
      }
    }
    return $replace.call(str, sepRegex, "$&_");
  }
  var utilInspect = require$$0;
  var inspectCustom = utilInspect.custom;
  var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
  var objectInspect = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has$3(opts, "quoteStyle") && (opts.quoteStyle !== "single" && opts.quoteStyle !== "double")) {
      throw new TypeError('option "quoteStyle" must be "single" or "double"');
    }
    if (has$3(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {
      throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    }
    var customInspect = has$3(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") {
      throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
    }
    if (has$3(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {
      throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    }
    if (has$3(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") {
      throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    }
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") {
      return "undefined";
    }
    if (obj === null) {
      return "null";
    }
    if (typeof obj === "boolean") {
      return obj ? "true" : "false";
    }
    if (typeof obj === "string") {
      return inspectString(obj, opts);
    }
    if (typeof obj === "number") {
      if (obj === 0) {
        return Infinity / obj > 0 ? "0" : "-0";
      }
      var str = String(obj);
      return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
      var bigIntStr = String(obj) + "n";
      return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") {
      depth = 0;
    }
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") {
      return isArray$3(obj) ? "[Array]" : "[Object]";
    }
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") {
      seen = [];
    } else if (indexOf(seen, obj) >= 0) {
      return "[Circular]";
    }
    function inspect2(value, from, noIndent) {
      if (from) {
        seen = $arrSlice.call(seen);
        seen.push(from);
      }
      if (noIndent) {
        var newOpts = {
          depth: opts.depth
        };
        if (has$3(opts, "quoteStyle")) {
          newOpts.quoteStyle = opts.quoteStyle;
        }
        return inspect_(value, newOpts, depth + 1, seen);
      }
      return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !isRegExp$1(obj)) {
      var name = nameOf(obj);
      var keys2 = arrObjKeys(obj, inspect2);
      return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys2.length > 0 ? " { " + $join.call(keys2, ", ") + " }" : "");
    }
    if (isSymbol(obj)) {
      var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
      return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
      var s2 = "<" + $toLowerCase.call(String(obj.nodeName));
      var attrs2 = obj.attributes || [];
      for (var i2 = 0; i2 < attrs2.length; i2++) {
        s2 += " " + attrs2[i2].name + "=" + wrapQuotes(quote(attrs2[i2].value), "double", opts);
      }
      s2 += ">";
      if (obj.childNodes && obj.childNodes.length) {
        s2 += "...";
      }
      s2 += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
      return s2;
    }
    if (isArray$3(obj)) {
      if (obj.length === 0) {
        return "[]";
      }
      var xs2 = arrObjKeys(obj, inspect2);
      if (indent && !singleLineValues(xs2)) {
        return "[" + indentedJoin(xs2, indent) + "]";
      }
      return "[ " + $join.call(xs2, ", ") + " ]";
    }
    if (isError(obj)) {
      var parts = arrObjKeys(obj, inspect2);
      if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) {
        return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect2(obj.cause), parts), ", ") + " }";
      }
      if (parts.length === 0) {
        return "[" + String(obj) + "]";
      }
      return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
      if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) {
        return utilInspect(obj, { depth: maxDepth - depth });
      } else if (customInspect !== "symbol" && typeof obj.inspect === "function") {
        return obj.inspect();
      }
    }
    if (isMap(obj)) {
      var mapParts = [];
      if (mapForEach) {
        mapForEach.call(obj, function(value, key) {
          mapParts.push(inspect2(key, obj, true) + " => " + inspect2(value, obj));
        });
      }
      return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
      var setParts = [];
      if (setForEach) {
        setForEach.call(obj, function(value) {
          setParts.push(inspect2(value, obj));
        });
      }
      return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) {
      return weakCollectionOf("WeakMap");
    }
    if (isWeakSet(obj)) {
      return weakCollectionOf("WeakSet");
    }
    if (isWeakRef(obj)) {
      return weakCollectionOf("WeakRef");
    }
    if (isNumber(obj)) {
      return markBoxed(inspect2(Number(obj)));
    }
    if (isBigInt(obj)) {
      return markBoxed(inspect2(bigIntValueOf.call(obj)));
    }
    if (isBoolean(obj)) {
      return markBoxed(booleanValueOf.call(obj));
    }
    if (isString(obj)) {
      return markBoxed(inspect2(String(obj)));
    }
    if (typeof window !== "undefined" && obj === window) {
      return "{ [object Window] }";
    }
    if (typeof globalThis !== "undefined" && obj === globalThis || typeof commonjsGlobal !== "undefined" && obj === commonjsGlobal) {
      return "{ [object globalThis] }";
    }
    if (!isDate(obj) && !isRegExp$1(obj)) {
      var ys2 = arrObjKeys(obj, inspect2);
      var isPlainObject2 = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
      var protoTag = obj instanceof Object ? "" : "null prototype";
      var stringTag2 = !isPlainObject2 && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
      var constructorTag = isPlainObject2 || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
      var tag = constructorTag + (stringTag2 || protoTag ? "[" + $join.call($concat.call([], stringTag2 || [], protoTag || []), ": ") + "] " : "");
      if (ys2.length === 0) {
        return tag + "{}";
      }
      if (indent) {
        return tag + "{" + indentedJoin(ys2, indent) + "}";
      }
      return tag + "{ " + $join.call(ys2, ", ") + " }";
    }
    return String(obj);
  };
  function wrapQuotes(s2, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s2 + quoteChar;
  }
  function quote(s2) {
    return $replace.call(String(s2), /"/g, "&quot;");
  }
  function isArray$3(obj) {
    return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isDate(obj) {
    return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isRegExp$1(obj) {
    return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isError(obj) {
    return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isString(obj) {
    return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isNumber(obj) {
    return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isBoolean(obj) {
    return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
  }
  function isSymbol(obj) {
    if (hasShammedSymbols) {
      return obj && typeof obj === "object" && obj instanceof Symbol;
    }
    if (typeof obj === "symbol") {
      return true;
    }
    if (!obj || typeof obj !== "object" || !symToString) {
      return false;
    }
    try {
      symToString.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  }
  function isBigInt(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) {
      return false;
    }
    try {
      bigIntValueOf.call(obj);
      return true;
    } catch (e) {
    }
    return false;
  }
  var hasOwn = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
  };
  function has$3(obj, key) {
    return hasOwn.call(obj, key);
  }
  function toStr(obj) {
    return objectToString.call(obj);
  }
  function nameOf(f2) {
    if (f2.name) {
      return f2.name;
    }
    var m2 = $match.call(functionToString.call(f2), /^function\s*([\w$]+)/);
    if (m2) {
      return m2[1];
    }
    return null;
  }
  function indexOf(xs2, x2) {
    if (xs2.indexOf) {
      return xs2.indexOf(x2);
    }
    for (var i2 = 0, l2 = xs2.length; i2 < l2; i2++) {
      if (xs2[i2] === x2) {
        return i2;
      }
    }
    return -1;
  }
  function isMap(x2) {
    if (!mapSize || !x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      mapSize.call(x2);
      try {
        setSize.call(x2);
      } catch (s2) {
        return true;
      }
      return x2 instanceof Map;
    } catch (e) {
    }
    return false;
  }
  function isWeakMap(x2) {
    if (!weakMapHas || !x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      weakMapHas.call(x2, weakMapHas);
      try {
        weakSetHas.call(x2, weakSetHas);
      } catch (s2) {
        return true;
      }
      return x2 instanceof WeakMap;
    } catch (e) {
    }
    return false;
  }
  function isWeakRef(x2) {
    if (!weakRefDeref || !x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      weakRefDeref.call(x2);
      return true;
    } catch (e) {
    }
    return false;
  }
  function isSet(x2) {
    if (!setSize || !x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      setSize.call(x2);
      try {
        mapSize.call(x2);
      } catch (m2) {
        return true;
      }
      return x2 instanceof Set;
    } catch (e) {
    }
    return false;
  }
  function isWeakSet(x2) {
    if (!weakSetHas || !x2 || typeof x2 !== "object") {
      return false;
    }
    try {
      weakSetHas.call(x2, weakSetHas);
      try {
        weakMapHas.call(x2, weakMapHas);
      } catch (s2) {
        return true;
      }
      return x2 instanceof WeakSet;
    } catch (e) {
    }
    return false;
  }
  function isElement(x2) {
    if (!x2 || typeof x2 !== "object") {
      return false;
    }
    if (typeof HTMLElement !== "undefined" && x2 instanceof HTMLElement) {
      return true;
    }
    return typeof x2.nodeName === "string" && typeof x2.getAttribute === "function";
  }
  function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
      var remaining = str.length - opts.maxStringLength;
      var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
      return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    var s2 = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s2, "single", opts);
  }
  function lowbyte(c2) {
    var n2 = c2.charCodeAt(0);
    var x2 = {
      8: "b",
      9: "t",
      10: "n",
      12: "f",
      13: "r"
    }[n2];
    if (x2) {
      return "\\" + x2;
    }
    return "\\x" + (n2 < 16 ? "0" : "") + $toUpperCase.call(n2.toString(16));
  }
  function markBoxed(str) {
    return "Object(" + str + ")";
  }
  function weakCollectionOf(type3) {
    return type3 + " { ? }";
  }
  function collectionOf(type3, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type3 + " (" + size + ") {" + joinedEntries + "}";
  }
  function singleLineValues(xs2) {
    for (var i2 = 0; i2 < xs2.length; i2++) {
      if (indexOf(xs2[i2], "\n") >= 0) {
        return false;
      }
    }
    return true;
  }
  function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === "	") {
      baseIndent = "	";
    } else if (typeof opts.indent === "number" && opts.indent > 0) {
      baseIndent = $join.call(Array(opts.indent + 1), " ");
    } else {
      return null;
    }
    return {
      base: baseIndent,
      prev: $join.call(Array(depth + 1), baseIndent)
    };
  }
  function indentedJoin(xs2, indent) {
    if (xs2.length === 0) {
      return "";
    }
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs2, "," + lineJoiner) + "\n" + indent.prev;
  }
  function arrObjKeys(obj, inspect2) {
    var isArr = isArray$3(obj);
    var xs2 = [];
    if (isArr) {
      xs2.length = obj.length;
      for (var i2 = 0; i2 < obj.length; i2++) {
        xs2[i2] = has$3(obj, i2) ? inspect2(obj[i2], obj) : "";
      }
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
      symMap = {};
      for (var k = 0; k < syms.length; k++) {
        symMap["$" + syms[k]] = syms[k];
      }
    }
    for (var key in obj) {
      if (!has$3(obj, key)) {
        continue;
      }
      if (isArr && String(Number(key)) === key && key < obj.length) {
        continue;
      }
      if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) {
        continue;
      } else if ($test.call(/[^\w$]/, key)) {
        xs2.push(inspect2(key, obj) + ": " + inspect2(obj[key], obj));
      } else {
        xs2.push(key + ": " + inspect2(obj[key], obj));
      }
    }
    if (typeof gOPS === "function") {
      for (var j2 = 0; j2 < syms.length; j2++) {
        if (isEnumerable.call(obj, syms[j2])) {
          xs2.push("[" + inspect2(syms[j2]) + "]: " + inspect2(obj[syms[j2]], obj));
        }
      }
    }
    return xs2;
  }
  var GetIntrinsic = getIntrinsic;
  var callBound = callBound$1;
  var inspect = objectInspect;
  var $TypeError = type;
  var $WeakMap = GetIntrinsic("%WeakMap%", true);
  var $Map = GetIntrinsic("%Map%", true);
  var $weakMapGet = callBound("WeakMap.prototype.get", true);
  var $weakMapSet = callBound("WeakMap.prototype.set", true);
  var $weakMapHas = callBound("WeakMap.prototype.has", true);
  var $mapGet = callBound("Map.prototype.get", true);
  var $mapSet = callBound("Map.prototype.set", true);
  var $mapHas = callBound("Map.prototype.has", true);
  var listGetNode = function(list, key) {
    var prev = list;
    var curr;
    for (; (curr = prev.next) !== null; prev = curr) {
      if (curr.key === key) {
        prev.next = curr.next;
        curr.next = /** @type {NonNullable<typeof list.next>} */
        list.next;
        list.next = curr;
        return curr;
      }
    }
  };
  var listGet = function(objects, key) {
    var node = listGetNode(objects, key);
    return node && node.value;
  };
  var listSet = function(objects, key, value) {
    var node = listGetNode(objects, key);
    if (node) {
      node.value = value;
    } else {
      objects.next = /** @type {import('.').ListNode<typeof value>} */
      {
        // eslint-disable-line no-param-reassign, no-extra-parens
        key,
        next: objects.next,
        value
      };
    }
  };
  var listHas = function(objects, key) {
    return !!listGetNode(objects, key);
  };
  var sideChannel = function getSideChannel2() {
    var $wm;
    var $m;
    var $o;
    var channel = {
      assert: function(key) {
        if (!channel.has(key)) {
          throw new $TypeError("Side channel does not contain " + inspect(key));
        }
      },
      get: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapGet($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapGet($m, key);
          }
        } else {
          if ($o) {
            return listGet($o, key);
          }
        }
      },
      has: function(key) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if ($wm) {
            return $weakMapHas($wm, key);
          }
        } else if ($Map) {
          if ($m) {
            return $mapHas($m, key);
          }
        } else {
          if ($o) {
            return listHas($o, key);
          }
        }
        return false;
      },
      set: function(key, value) {
        if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
          if (!$wm) {
            $wm = new $WeakMap();
          }
          $weakMapSet($wm, key, value);
        } else if ($Map) {
          if (!$m) {
            $m = new $Map();
          }
          $mapSet($m, key, value);
        } else {
          if (!$o) {
            $o = { key: {}, next: null };
          }
          listSet($o, key, value);
        }
      }
    };
    return channel;
  };
  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;
  var Format = {
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
  };
  var formats$3 = {
    "default": Format.RFC3986,
    formatters: {
      RFC1738: function(value) {
        return replace.call(value, percentTwenties, "+");
      },
      RFC3986: function(value) {
        return String(value);
      }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
  };
  var formats$2 = formats$3;
  var has$2 = Object.prototype.hasOwnProperty;
  var isArray$2 = Array.isArray;
  var hexTable = function() {
    var array = [];
    for (var i2 = 0; i2 < 256; ++i2) {
      array.push("%" + ((i2 < 16 ? "0" : "") + i2.toString(16)).toUpperCase());
    }
    return array;
  }();
  var compactQueue = function compactQueue2(queue) {
    while (queue.length > 1) {
      var item = queue.pop();
      var obj = item.obj[item.prop];
      if (isArray$2(obj)) {
        var compacted = [];
        for (var j2 = 0; j2 < obj.length; ++j2) {
          if (typeof obj[j2] !== "undefined") {
            compacted.push(obj[j2]);
          }
        }
        item.obj[item.prop] = compacted;
      }
    }
  };
  var arrayToObject = function arrayToObject2(source, options) {
    var obj = options && options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
    for (var i2 = 0; i2 < source.length; ++i2) {
      if (typeof source[i2] !== "undefined") {
        obj[i2] = source[i2];
      }
    }
    return obj;
  };
  var merge = function merge2(target, source, options) {
    if (!source) {
      return target;
    }
    if (typeof source !== "object") {
      if (isArray$2(target)) {
        target.push(source);
      } else if (target && typeof target === "object") {
        if (options && (options.plainObjects || options.allowPrototypes) || !has$2.call(Object.prototype, source)) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }
      return target;
    }
    if (!target || typeof target !== "object") {
      return [target].concat(source);
    }
    var mergeTarget = target;
    if (isArray$2(target) && !isArray$2(source)) {
      mergeTarget = arrayToObject(target, options);
    }
    if (isArray$2(target) && isArray$2(source)) {
      source.forEach(function(item, i2) {
        if (has$2.call(target, i2)) {
          var targetItem = target[i2];
          if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
            target[i2] = merge2(targetItem, item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i2] = item;
        }
      });
      return target;
    }
    return Object.keys(source).reduce(function(acc, key) {
      var value = source[key];
      if (has$2.call(acc, key)) {
        acc[key] = merge2(acc[key], value, options);
      } else {
        acc[key] = value;
      }
      return acc;
    }, mergeTarget);
  };
  var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
      acc[key] = source[key];
      return acc;
    }, target);
  };
  var decode = function(str, decoder2, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") {
      return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    try {
      return decodeURIComponent(strWithoutPlus);
    } catch (e) {
      return strWithoutPlus;
    }
  };
  var limit = 1024;
  var encode = function encode2(str, defaultEncoder, charset, kind, format2) {
    if (str.length === 0) {
      return str;
    }
    var string2 = str;
    if (typeof str === "symbol") {
      string2 = Symbol.prototype.toString.call(str);
    } else if (typeof str !== "string") {
      string2 = String(str);
    }
    if (charset === "iso-8859-1") {
      return escape(string2).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
      });
    }
    var out = "";
    for (var j2 = 0; j2 < string2.length; j2 += limit) {
      var segment = string2.length >= limit ? string2.slice(j2, j2 + limit) : string2;
      var arr = [];
      for (var i2 = 0; i2 < segment.length; ++i2) {
        var c2 = segment.charCodeAt(i2);
        if (c2 === 45 || c2 === 46 || c2 === 95 || c2 === 126 || c2 >= 48 && c2 <= 57 || c2 >= 65 && c2 <= 90 || c2 >= 97 && c2 <= 122 || format2 === formats$2.RFC1738 && (c2 === 40 || c2 === 41)) {
          arr[arr.length] = segment.charAt(i2);
          continue;
        }
        if (c2 < 128) {
          arr[arr.length] = hexTable[c2];
          continue;
        }
        if (c2 < 2048) {
          arr[arr.length] = hexTable[192 | c2 >> 6] + hexTable[128 | c2 & 63];
          continue;
        }
        if (c2 < 55296 || c2 >= 57344) {
          arr[arr.length] = hexTable[224 | c2 >> 12] + hexTable[128 | c2 >> 6 & 63] + hexTable[128 | c2 & 63];
          continue;
        }
        i2 += 1;
        c2 = 65536 + ((c2 & 1023) << 10 | segment.charCodeAt(i2) & 1023);
        arr[arr.length] = hexTable[240 | c2 >> 18] + hexTable[128 | c2 >> 12 & 63] + hexTable[128 | c2 >> 6 & 63] + hexTable[128 | c2 & 63];
      }
      out += arr.join("");
    }
    return out;
  };
  var compact = function compact2(value) {
    var queue = [{ obj: { o: value }, prop: "o" }];
    var refs = [];
    for (var i2 = 0; i2 < queue.length; ++i2) {
      var item = queue[i2];
      var obj = item.obj[item.prop];
      var keys2 = Object.keys(obj);
      for (var j2 = 0; j2 < keys2.length; ++j2) {
        var key = keys2[j2];
        var val = obj[key];
        if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
          queue.push({ obj, prop: key });
          refs.push(val);
        }
      }
    }
    compactQueue(queue);
    return value;
  };
  var isRegExp = function isRegExp2(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isBuffer = function isBuffer2(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };
  var combine = function combine2(a2, b2) {
    return [].concat(a2, b2);
  };
  var maybeMap = function maybeMap2(val, fn2) {
    if (isArray$2(val)) {
      var mapped = [];
      for (var i2 = 0; i2 < val.length; i2 += 1) {
        mapped.push(fn2(val[i2]));
      }
      return mapped;
    }
    return fn2(val);
  };
  var utils$2 = {
    arrayToObject,
    assign,
    combine,
    compact,
    decode,
    encode,
    isBuffer,
    isRegExp,
    maybeMap,
    merge
  };
  var getSideChannel = sideChannel;
  var utils$1 = utils$2;
  var formats$1 = formats$3;
  var has$1 = Object.prototype.hasOwnProperty;
  var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
      return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key) {
      return prefix + "[" + key + "]";
    },
    repeat: function repeat(prefix) {
      return prefix;
    }
  };
  var isArray$1 = Array.isArray;
  var push = Array.prototype.push;
  var pushToArray = function(arr, valueOrArray) {
    push.apply(arr, isArray$1(valueOrArray) ? valueOrArray : [valueOrArray]);
  };
  var toISO = Date.prototype.toISOString;
  var defaultFormat = formats$1["default"];
  var defaults$1 = {
    addQueryPrefix: false,
    allowDots: false,
    allowEmptyArrays: false,
    arrayFormat: "indices",
    charset: "utf-8",
    charsetSentinel: false,
    delimiter: "&",
    encode: true,
    encodeDotInKeys: false,
    encoder: utils$1.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats$1.formatters[defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
      return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
  };
  var isNonNullishPrimitive = function isNonNullishPrimitive2(v2) {
    return typeof v2 === "string" || typeof v2 === "number" || typeof v2 === "boolean" || typeof v2 === "symbol" || typeof v2 === "bigint";
  };
  var sentinel = {};
  var stringify$1 = function stringify2(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format2, formatter2, encodeValuesOnly, charset, sideChannel2) {
    var obj = object;
    var tmpSc = sideChannel2;
    var step = 0;
    var findFlag = false;
    while ((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag) {
      var pos = tmpSc.get(object);
      step += 1;
      if (typeof pos !== "undefined") {
        if (pos === step) {
          throw new RangeError("Cyclic object value");
        } else {
          findFlag = true;
        }
      }
      if (typeof tmpSc.get(sentinel) === "undefined") {
        step = 0;
      }
    }
    if (typeof filter === "function") {
      obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
      obj = serializeDate(obj);
    } else if (generateArrayPrefix === "comma" && isArray$1(obj)) {
      obj = utils$1.maybeMap(obj, function(value2) {
        if (value2 instanceof Date) {
          return serializeDate(value2);
        }
        return value2;
      });
    }
    if (obj === null) {
      if (strictNullHandling) {
        return encoder && !encodeValuesOnly ? encoder(prefix, defaults$1.encoder, charset, "key", format2) : prefix;
      }
      obj = "";
    }
    if (isNonNullishPrimitive(obj) || utils$1.isBuffer(obj)) {
      if (encoder) {
        var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults$1.encoder, charset, "key", format2);
        return [formatter2(keyValue) + "=" + formatter2(encoder(obj, defaults$1.encoder, charset, "value", format2))];
      }
      return [formatter2(prefix) + "=" + formatter2(String(obj))];
    }
    var values = [];
    if (typeof obj === "undefined") {
      return values;
    }
    var objKeys;
    if (generateArrayPrefix === "comma" && isArray$1(obj)) {
      if (encodeValuesOnly && encoder) {
        obj = utils$1.maybeMap(obj, encoder);
      }
      objKeys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
    } else if (isArray$1(filter)) {
      objKeys = filter;
    } else {
      var keys2 = Object.keys(obj);
      objKeys = sort ? keys2.sort(sort) : keys2;
    }
    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, "%2E") : prefix;
    var adjustedPrefix = commaRoundTrip && isArray$1(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
    if (allowEmptyArrays && isArray$1(obj) && obj.length === 0) {
      return adjustedPrefix + "[]";
    }
    for (var j2 = 0; j2 < objKeys.length; ++j2) {
      var key = objKeys[j2];
      var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
      if (skipNulls && value === null) {
        continue;
      }
      var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\./g, "%2E") : key;
      var keyPrefix = isArray$1(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
      sideChannel2.set(object, step);
      var valueSideChannel = getSideChannel();
      valueSideChannel.set(sentinel, sideChannel2);
      pushToArray(values, stringify2(
        value,
        keyPrefix,
        generateArrayPrefix,
        commaRoundTrip,
        allowEmptyArrays,
        strictNullHandling,
        skipNulls,
        encodeDotInKeys,
        generateArrayPrefix === "comma" && encodeValuesOnly && isArray$1(obj) ? null : encoder,
        filter,
        sort,
        allowDots,
        serializeDate,
        format2,
        formatter2,
        encodeValuesOnly,
        charset,
        valueSideChannel
      ));
    }
    return values;
  };
  var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
    if (!opts) {
      return defaults$1;
    }
    if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
      throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
    }
    if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
      throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
    }
    if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
      throw new TypeError("Encoder has to be a function.");
    }
    var charset = opts.charset || defaults$1.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var format2 = formats$1["default"];
    if (typeof opts.format !== "undefined") {
      if (!has$1.call(formats$1.formatters, opts.format)) {
        throw new TypeError("Unknown format option provided.");
      }
      format2 = opts.format;
    }
    var formatter2 = formats$1.formatters[format2];
    var filter = defaults$1.filter;
    if (typeof opts.filter === "function" || isArray$1(opts.filter)) {
      filter = opts.filter;
    }
    var arrayFormat;
    if (opts.arrayFormat in arrayPrefixGenerators) {
      arrayFormat = opts.arrayFormat;
    } else if ("indices" in opts) {
      arrayFormat = opts.indices ? "indices" : "repeat";
    } else {
      arrayFormat = defaults$1.arrayFormat;
    }
    if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
      throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
    }
    var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : defaults$1.allowDots : !!opts.allowDots;
    return {
      addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults$1.addQueryPrefix,
      allowDots,
      allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults$1.allowEmptyArrays,
      arrayFormat,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults$1.charsetSentinel,
      commaRoundTrip: opts.commaRoundTrip,
      delimiter: typeof opts.delimiter === "undefined" ? defaults$1.delimiter : opts.delimiter,
      encode: typeof opts.encode === "boolean" ? opts.encode : defaults$1.encode,
      encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults$1.encodeDotInKeys,
      encoder: typeof opts.encoder === "function" ? opts.encoder : defaults$1.encoder,
      encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults$1.encodeValuesOnly,
      filter,
      format: format2,
      formatter: formatter2,
      serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults$1.serializeDate,
      skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults$1.skipNulls,
      sort: typeof opts.sort === "function" ? opts.sort : null,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults$1.strictNullHandling
    };
  };
  var stringify_1 = function(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === "function") {
      filter = options.filter;
      obj = filter("", obj);
    } else if (isArray$1(options.filter)) {
      filter = options.filter;
      objKeys = filter;
    }
    var keys2 = [];
    if (typeof obj !== "object" || obj === null) {
      return "";
    }
    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
    var commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
    if (!objKeys) {
      objKeys = Object.keys(obj);
    }
    if (options.sort) {
      objKeys.sort(options.sort);
    }
    var sideChannel2 = getSideChannel();
    for (var i2 = 0; i2 < objKeys.length; ++i2) {
      var key = objKeys[i2];
      if (options.skipNulls && obj[key] === null) {
        continue;
      }
      pushToArray(keys2, stringify$1(
        obj[key],
        key,
        generateArrayPrefix,
        commaRoundTrip,
        options.allowEmptyArrays,
        options.strictNullHandling,
        options.skipNulls,
        options.encodeDotInKeys,
        options.encode ? options.encoder : null,
        options.filter,
        options.sort,
        options.allowDots,
        options.serializeDate,
        options.format,
        options.formatter,
        options.encodeValuesOnly,
        options.charset,
        sideChannel2
      ));
    }
    var joined = keys2.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
      if (options.charset === "iso-8859-1") {
        prefix += "utf8=%26%2310003%3B&";
      } else {
        prefix += "utf8=%E2%9C%93&";
      }
    }
    return joined.length > 0 ? prefix + joined : "";
  };
  var utils = utils$2;
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var defaults = {
    allowDots: false,
    allowEmptyArrays: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decodeDotInKeys: false,
    decoder: utils.decode,
    delimiter: "&",
    depth: 5,
    duplicates: "combine",
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1e3,
    parseArrays: true,
    plainObjects: false,
    strictDepth: false,
    strictNullHandling: false
  };
  var interpretNumericEntities = function(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
      return String.fromCharCode(parseInt(numberStr, 10));
    });
  };
  var parseArrayValue = function(val, options) {
    if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) {
      return val.split(",");
    }
    return val;
  };
  var isoSentinel = "utf8=%26%2310003%3B";
  var charsetSentinel = "utf8=%E2%9C%93";
  var parseValues = function parseQueryStringValues(str, options) {
    var obj = { __proto__: null };
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    cleanStr = cleanStr.replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    var limit2 = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit2);
    var skipIndex = -1;
    var i2;
    var charset = options.charset;
    if (options.charsetSentinel) {
      for (i2 = 0; i2 < parts.length; ++i2) {
        if (parts[i2].indexOf("utf8=") === 0) {
          if (parts[i2] === charsetSentinel) {
            charset = "utf-8";
          } else if (parts[i2] === isoSentinel) {
            charset = "iso-8859-1";
          }
          skipIndex = i2;
          i2 = parts.length;
        }
      }
    }
    for (i2 = 0; i2 < parts.length; ++i2) {
      if (i2 === skipIndex) {
        continue;
      }
      var part = parts[i2];
      var bracketEqualsPos = part.indexOf("]=");
      var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
      var key, val;
      if (pos === -1) {
        key = options.decoder(part, defaults.decoder, charset, "key");
        val = options.strictNullHandling ? null : "";
      } else {
        key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
        val = utils.maybeMap(
          parseArrayValue(part.slice(pos + 1), options),
          function(encodedVal) {
            return options.decoder(encodedVal, defaults.decoder, charset, "value");
          }
        );
      }
      if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
        val = interpretNumericEntities(val);
      }
      if (part.indexOf("[]=") > -1) {
        val = isArray(val) ? [val] : val;
      }
      var existing = has.call(obj, key);
      if (existing && options.duplicates === "combine") {
        obj[key] = utils.combine(obj[key], val);
      } else if (!existing || options.duplicates === "last") {
        obj[key] = val;
      }
    }
    return obj;
  };
  var parseObject = function(chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);
    for (var i2 = chain.length - 1; i2 >= 0; --i2) {
      var obj;
      var root2 = chain[i2];
      if (root2 === "[]" && options.parseArrays) {
        obj = options.allowEmptyArrays && (leaf === "" || options.strictNullHandling && leaf === null) ? [] : [].concat(leaf);
      } else {
        obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
        var cleanRoot = root2.charAt(0) === "[" && root2.charAt(root2.length - 1) === "]" ? root2.slice(1, -1) : root2;
        var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
        var index = parseInt(decodedRoot, 10);
        if (!options.parseArrays && decodedRoot === "") {
          obj = { 0: leaf };
        } else if (!isNaN(index) && root2 !== decodedRoot && String(index) === decodedRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
          obj = [];
          obj[index] = leaf;
        } else if (decodedRoot !== "__proto__") {
          obj[decodedRoot] = leaf;
        }
      }
      leaf = obj;
    }
    return leaf;
  };
  var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) {
      return;
    }
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    var segment = options.depth > 0 && brackets.exec(key);
    var parent2 = segment ? key.slice(0, segment.index) : key;
    var keys2 = [];
    if (parent2) {
      if (!options.plainObjects && has.call(Object.prototype, parent2)) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys2.push(parent2);
    }
    var i2 = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i2 < options.depth) {
      i2 += 1;
      if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys2.push(segment[1]);
    }
    if (segment) {
      if (options.strictDepth === true) {
        throw new RangeError("Input depth exceeded depth option of " + options.depth + " and strictDepth is true");
      }
      keys2.push("[" + key.slice(segment.index) + "]");
    }
    return parseObject(keys2, val, options, valuesParsed);
  };
  var normalizeParseOptions = function normalizeParseOptions2(opts) {
    if (!opts) {
      return defaults;
    }
    if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
      throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
    }
    if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") {
      throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
    }
    if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") {
      throw new TypeError("Decoder has to be a function.");
    }
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
    var duplicates = typeof opts.duplicates === "undefined" ? defaults.duplicates : opts.duplicates;
    if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") {
      throw new TypeError("The duplicates option must be either combine, first, or last");
    }
    var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
    return {
      allowDots,
      allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
      allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
      allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
      arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
      decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
      decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
      delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
      // eslint-disable-next-line no-implicit-coercion, no-extra-parens
      depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
      duplicates,
      ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
      interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
      parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
      parseArrays: opts.parseArrays !== false,
      plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
      strictDepth: typeof opts.strictDepth === "boolean" ? !!opts.strictDepth : defaults.strictDepth,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  var parse$1 = function(str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") {
      return options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
    }
    var tempObj = typeof str === "string" ? parseValues(str, options) : str;
    var obj = options.plainObjects ? /* @__PURE__ */ Object.create(null) : {};
    var keys2 = Object.keys(tempObj);
    for (var i2 = 0; i2 < keys2.length; ++i2) {
      var key = keys2[i2];
      var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
      obj = utils.merge(obj, newObj, options);
    }
    if (options.allowSparse === true) {
      return obj;
    }
    return utils.compact(obj);
  };
  var stringify = stringify_1;
  var parse = parse$1;
  var formats = formats$3;
  var lib = {
    formats,
    parse,
    stringify
  };
  const qs = /* @__PURE__ */ getDefaultExportFromCjs(lib);
  const UniLifecycleHooks = { INIT: "onInit", LOAD: "onLoad", SHOW: "onShow", READY: "onReady" }, StaticContext = { navLock: false, beforeEachLock: false, firstRequestState: "not", firstRequestListeners: [], handleFirstRequestResult(t2) {
    StaticContext.firstRequestListeners.forEach((e) => {
      e.success(t2);
    }), StaticContext.firstRequestListeners = [];
  }, app: void 0, route: void 0, toRoute: void 0, fromRoute: void 0, router: void 0 };
  function getRouteByPage(t2) {
    let e = t2.route || "";
    e.startsWith("/") || (e = "/" + e);
    return { fullPath: e, path: e };
  }
  function warn(t2, ...e) {
    const o2 = t2.options.debugger;
    o2 && (true === o2 || o2.info) && formatAppLog("warn", "at node_modules/@gowiny/uni-router/dist/index.esm.js:10", ...e);
  }
  function getCurrentPagePath() {
    const t2 = getCurrentPage();
    return t2 && t2.route ? "/" + t2.route : void 0;
  }
  function getCurrentPage() {
    const t2 = getCurrentPages();
    return t2.length > 0 ? t2[t2.length - 1] : void 0;
  }
  function getRouteByPath(t2, e, o2, a2) {
    a2 = a2 || formatFullPath(e, o2);
    const r2 = e.replace(/^\//, ""), n2 = t2.routeMap.pathMap[r2];
    let i2;
    return i2 = n2 ? { ...n2, fullPath: a2, path: e, query: o2 } : { fullPath: a2, path: e, query: o2 }, i2;
  }
  function getRouteByUrl(t2, e) {
    const o2 = t2.indexOf("?");
    let a2, r2;
    o2 > -1 ? (r2 = t2.substring(0, o2), a2 = t2.substring(o2 + 1)) : (r2 = t2, a2 = "");
    const n2 = a2 ? qs.parse(a2) : {}, i2 = r2.replace(/^\//, ""), c2 = e.routeMap.pathMap[i2];
    let u2;
    return u2 = c2 ? { ...c2, fullPath: t2, path: r2, query: n2 } : { fullPath: t2, path: r2, query: n2 }, u2;
  }
  function formatFullPath(t2, e) {
    const o2 = qs.stringify(e);
    return o2 ? `${t2}?${o2}` : t2;
  }
  function lockNavjump(t2, e, o2, a2 = false) {
    const r2 = {};
    if (isString$1(t2))
      r2.url = t2;
    else {
      const o3 = t2;
      let a3, n3 = o3.query;
      if (o3.name) {
        a3 = e.routeMap.nameMap[o3.name].path;
      } else
        a3 = o3.path, n3 = o3.query;
      const i2 = formatFullPath(a3, n3), c2 = { ...o3 };
      delete c2.name, delete c2.path, delete c2.query, Object.assign(r2, c2), r2.url = i2;
    }
    let n2;
    switch (r2.$force = a2, o2) {
      case "push":
        n2 = uni.navigateTo(r2);
        break;
      case "replace":
        n2 = uni.redirectTo(r2);
        break;
      case "pushTab":
        n2 = uni.switchTab(r2);
        break;
      case "replaceAll":
        n2 = uni.reLaunch(r2);
        break;
      default:
        throw new Error("路由类型不正确");
    }
    return n2;
  }
  function appendPages(t2, e, o2) {
    o2.forEach((o3) => {
      const a2 = o3.path, r2 = a2.startsWith("/") ? a2 : "/" + a2, n2 = { ...o3, path: r2 };
      e[r2] = n2, t2.push(n2);
    });
  }
  function parseRoutesFromPages({ pages: t2, subPackages: e = [] }) {
    const o2 = [], a2 = {};
    return appendPages(o2, a2, t2), e.forEach((t3) => {
      appendPages(o2, a2, t3.pages);
    }), o2;
  }
  async function callEachHooks(t2, e, o2, a2) {
    let r2 = t2.lifeCycleHooks[e];
    return await queueInvoke(r2, null, [o2, a2], (t3) => false !== t3 && !isObject(t3));
  }
  async function invokeAfterEach(t2, e, o2) {
    return await callEachHooks(t2, "ae", e, o2);
  }
  async function invokeBeforeEach(t2, e, o2) {
    StaticContext.beforeEachLock = true;
    try {
      const a2 = await callEachHooks(t2, "be", e, o2);
      if (true === a2 || null == a2)
        return true;
      if (false !== a2) {
        let e2, o3 = "push";
        if (isString$1(a2))
          e2 = { path: a2 }, o3 = "push";
        else if (isObject(a2)) {
          const t3 = a2;
          e2 = t3.to, o3 = t3.navType;
        }
        e2 && lockNavjump(e2, t2, o3, true);
      }
      return false;
    } finally {
      StaticContext.beforeEachLock = false;
    }
  }
  let IS_WAPPED = false;
  const oldMethods = { navigateTo: uni.navigateTo, redirectTo: uni.redirectTo, reLaunch: uni.reLaunch, switchTab: uni.switchTab, navigateBack: uni.navigateBack };
  function callOldMethod(t2, e) {
    const o2 = oldMethods[t2];
    o2 && o2(e);
  }
  function callNavError(t2, e, o2) {
    e.fail && e.fail(o2), e.complete && e.complete(), t2 && (StaticContext.navLock = false);
  }
  function callNavSuccess(t2, e) {
    callOldMethod(t2, { ...e, async success(...t3) {
      try {
        e.success && await e.success(...t3);
      } finally {
        StaticContext.route = StaticContext.toRoute, StaticContext.lastFullPath = StaticContext.route ? StaticContext.route.fullPath : void 0, StaticContext.router && StaticContext.toRoute && (StaticContext.router.route = StaticContext.route, await invokeAfterEach(StaticContext.router, StaticContext.toRoute, StaticContext.fromRoute)), StaticContext.navLock = false;
      }
    }, async fail(...t3) {
      try {
        formatAppLog("error", "at node_modules/@gowiny/uni-router/dist/index.esm.js:10", t3 && t3[0] ? t3[0].errMsg : ""), e.fail && await e.fail(...t3);
      } finally {
        StaticContext.navLock = false;
      }
    }, complete(...t3) {
      e.complete && e.complete(...t3);
    } });
  }
  function createWapper(t2) {
    return async function(e) {
      if ((StaticContext.navLock || StaticContext.beforeEachLock) && !e.$force)
        return StaticContext.router && warn(StaticContext.router, "当前页面正在处于跳转状态，请稍后再进行跳转...."), callNavError(false, e, "当前页面正在处于跳转状态，请稍后再进行跳转....");
      StaticContext.navLock = true;
      try {
        if (!StaticContext.router)
          return callNavSuccess(t2, e);
        const o2 = StaticContext.router;
        let a2;
        if ("navigateBack" == t2) {
          const t3 = isNumber$1(e.delta) ? e.delta : 1, r3 = getCurrentPages(), n2 = r3.length - t3 - 1;
          a2 = n2 < 0 ? getRouteByUrl(o2.indexRouteRule.path, o2) : getRouteByPage(r3[n2]);
        } else {
          a2 = getRouteByUrl(e.url, o2);
        }
        const r2 = StaticContext.route;
        StaticContext.toRoute = a2, StaticContext.fromRoute = r2, StaticContext.destFullPath = a2.fullPath;
        return await invokeBeforeEach(o2, a2, r2) ? callNavSuccess(t2, e) : callNavError(true, e, "路由守卫拦截");
      } catch (t3) {
        return callNavError(true, e, t3);
      }
    };
  }
  function addNavInterceptor() {
    IS_WAPPED || (IS_WAPPED = true, uni.navigateTo = createWapper("navigateTo"), uni.redirectTo = createWapper("redirectTo"), uni.reLaunch = createWapper("reLaunch"), uni.switchTab = createWapper("switchTab"), uni.navigateBack = createWapper("navigateBack"));
  }
  const DEFAULT_PROXY_METHODS = [UniLifecycleHooks.INIT, UniLifecycleHooks.LOAD, UniLifecycleHooks.SHOW, UniLifecycleHooks.READY];
  function getRouterData(t2) {
    return t2.__routerData || (t2.__routerData = {}), t2.__routerData;
  }
  function getOriHookDataMap(t2) {
    const e = getRouterData(t2);
    return e.oriHookDataMap || (e.oriHookDataMap = {}), e.oriHookDataMap;
  }
  function getOriHookData(t2, e) {
    const o2 = getOriHookDataMap(t2);
    let a2 = o2[e];
    return a2 || (a2 = { oldVal: [] }, o2[e] = a2), a2;
  }
  function invokeOriMethod(t2, e, o2) {
    const a2 = (getRouterData(e).oldMethods || {})[t2];
    if (a2)
      return a2.apply(e, o2);
  }
  function invokeOriHooks(t2, e, o2) {
    const a2 = getOriHookData(e, t2);
    invoke(a2.oldVal, e, o2);
  }
  function saveOriRoute(t2, e) {
    getRouterData(t2).oriRoute = e;
  }
  function getOriRoute(t2) {
    const e = getRouterData(t2);
    return e.oriRoute || (e.oriRoute = {}), e.oriRoute;
  }
  function saveCurrRouteByCurrPage(t2, e, o2 = {}) {
    const a2 = getCurrentPage();
    if (!a2 || !a2.route)
      return;
    const r2 = "/" + a2.route;
    saveOriRoute(e, { path: r2, query: o2 });
    const n2 = getRouteByPath(t2, r2, o2);
    t2.route = n2;
  }
  function wapperMethod(t2, e, o2, a2) {
    return wapperFun(t2, "method", e, o2, a2, invokeOriMethod);
  }
  async function wapperFun(t2, e, o2, a2, r2, n2) {
    const i2 = getRouterData(o2);
    if (true === (i2.hookLock || false)) {
      i2.hookListeners || (i2.hookListeners = []);
      const t3 = new Promise((t4, e3) => {
        i2.hookListeners.push({ success: t4, fail: e3 });
      });
      let e2;
      return await t3 && (e2 = n2(a2, o2, r2)), e2;
    }
    let c2;
    i2.hookLock = true;
    try {
      const u2 = getCurrentPagePath();
      let s2;
      if ("hook" !== e || UniLifecycleHooks.INIT != a2 && UniLifecycleHooks.LOAD != a2)
        s2 = getOriRoute(o2).query || {};
      else {
        s2 = r2[0] || {};
        Object.keys(s2).forEach((t3) => {
          const e2 = s2[t3];
          e2 && (s2[t3] = decodeURIComponent(e2));
        }), saveOriRoute(o2, { path: u2, query: s2 });
      }
      let l2 = true;
      if (u2) {
        const e2 = formatFullPath(u2, s2);
        if (StaticContext.destFullPath != e2) {
          const o3 = getRouteByPath(t2, u2, s2, e2), a3 = StaticContext.route;
          StaticContext.toRoute = o3, StaticContext.fromRoute = a3, l2 = await invokeBeforeEach(t2, o3, a3), l2 && (StaticContext.route = o3, t2.route = o3, StaticContext.lastFullPath = e2, await invokeAfterEach(t2, o3, a3));
        }
      }
      if (l2 && (c2 = n2(a2, o2, r2)), i2.hookListeners) {
        const t3 = i2.hookListeners;
        for (let e2 = 0; e2 < t3.length; e2++) {
          t3[e2].success(l2);
        }
        i2.hookListeners = [];
      }
    } catch (t3) {
      if (i2.hookListeners) {
        const e2 = i2.hookListeners;
        for (let o3 = 0; o3 < e2.length; o3++) {
          e2[o3].fail(t3);
        }
        i2.hookListeners = [];
      }
    }
    return i2.hookLock = false, c2;
  }
  function wapperHook(t2, e, o2, a2) {
    return wapperFun(t2, "hook", e, o2, a2, invokeOriHooks);
  }
  function wapperUniHooks(t2, e, o2) {
    return function(...a2) {
      wapperHook(t2, e, o2, a2);
    };
  }
  function appendRoutes(t2, e, o2 = "", a2) {
    if (!a2 || 0 == a2.length)
      return;
    const r2 = e.pathMap, n2 = e.nameMap;
    a2.forEach((a3) => {
      const { alias: i2, path: c2, name: u2 } = a3;
      if (null == c2)
        throw new Error(`请提供一个完整的路由对象，包括以绝对路径开始的 ‘path’ 字符串 ${JSON.stringify(a3)}`);
      if (r2[o2 + c2] = a3, u2 && (n2[u2] = a3), i2)
        if (Array.isArray(i2))
          i2.forEach((t3) => {
            r2[o2 + t3] = a3;
          });
        else {
          r2[o2 + i2] = a3;
        }
      appendRoutes(t2, e, a3.path, a3.children);
    });
  }
  function createRouteMap(t2, e) {
    const o2 = { pathMap: /* @__PURE__ */ Object.create(null), nameMap: /* @__PURE__ */ Object.create(null) };
    return appendRoutes(t2, o2, "", e), o2;
  }
  function registerEachHooks(t2, e, o2) {
    let a2 = t2.lifeCycleHooks[e];
    a2 || (a2 = [], t2.lifeCycleHooks[e] = a2), a2.push(o2);
  }
  function isPageHook(t2) {
    return "page" === t2.$mpType;
  }
  class RouterImpl {
    constructor(t2) {
      __publicField(this, "proxyMode");
      __publicField(this, "proxyMethods");
      __publicField(this, "routes");
      __publicField(this, "indexRouteRule");
      __publicField(this, "lifeCycleHooks", {});
      __publicField(this, "$locked", false);
      __publicField(this, "options");
      __publicField(this, "routeMap");
      __publicField(this, "route");
      this.options = t2, this.proxyMode = t2.proxyMode || "hook", this.proxyMethods = t2.proxyMethods || DEFAULT_PROXY_METHODS, this.routes = parseRoutesFromPages(t2.pageData), this.indexRouteRule = this.routes[0], this.routeMap = createRouteMap(this, this.routes);
    }
    setupRouter(t2) {
      t2.use(this);
    }
    push(t2) {
      return lockNavjump(t2, this, "push");
    }
    replace(t2) {
      return lockNavjump(t2, this, "replace");
    }
    replaceAll(t2) {
      return lockNavjump(t2, this, "replaceAll");
    }
    pushTab(t2) {
      return lockNavjump(t2, this, "pushTab");
    }
    back(...t2) {
      return uni.navigateBack(...t2);
    }
    beforeEach(t2) {
      registerEachHooks(this, "be", t2);
    }
    afterEach(t2) {
      registerEachHooks(this, "ae", t2);
    }
    async install(t2, ...e) {
      const o2 = this;
      let a2;
      StaticContext.app = t2, StaticContext.router = o2, Object.defineProperty(t2.config.globalProperties, "$Router", { get: () => o2 }), Object.defineProperty(t2.config.globalProperties, "$Route", { get: () => o2.route }), "hook" === o2.proxyMode ? a2 = { beforeCreate() {
        if (!isPageHook(this))
          return;
        const t3 = this;
        o2.proxyMethods.forEach((e2) => {
          const a3 = getOriHookData(t3, e2), r2 = t3.$[e2] || [], n2 = Array.isArray(r2) ? r2 : [r2];
          a3.oldVal = n2, a3.wapper = wapperUniHooks(o2, t3, e2);
          const i2 = [a3.wapper], c2 = i2;
          i2.push = function(...t4) {
            return a3.oldVal.push(...t4), i2.length;
          }, i2.pop = function() {
            return a3.oldVal.pop();
          }, i2.shift = function() {
            return a3.oldVal.shift();
          }, i2.unshift = function(...t4) {
            return a3.oldVal.unshift(...t4), i2.length;
          }, c2.splice = function(...t4) {
            return a3.oldVal.splice(...t4);
          }, i2.reverse = function() {
            return a3.oldVal.reverse();
          }, i2.sort = function() {
            return a3.oldVal.sort();
          }, a3.newVal = i2, Object.defineProperty(t3.$, e2, { get: () => a3.newVal, set(t4) {
            t4 !== a3.newVal && t4 !== a3.wapper && (t4 ? Array.isArray(t4) ? t4.indexOf(a3.wapper) > -1 ? t4.length > 1 && t4.forEach((t5) => {
              t5 !== a3.wapper && a3.oldVal.push(t5);
            }) : a3.oldVal = t4 : a3.oldVal = [t4] : a3.oldVal = []);
          } });
        });
      } } : "method" === o2.proxyMode && (a2 = { created() {
        if (!isPageHook(this))
          return;
        const t3 = this, e2 = getRouterData(t3), a3 = {};
        e2.oldMethods = a3, o2.proxyMethods.forEach((e3) => {
          const r2 = t3[e3];
          r2 ? (a3[e3] = r2, t3[e3] = (...a4) => wapperMethod(o2, t3, e3, a4)) : formatAppLog("warn", "at node_modules/@gowiny/uni-router/dist/index.esm.js:10", `此页面没有方法:${e3}`);
        });
      }, onInit(t3) {
        isPageHook(this) && saveCurrRouteByCurrPage(o2, this, t3);
      }, onLoad(t3) {
        isPageHook(this) && saveCurrRouteByCurrPage(o2, this, t3);
      } }), a2 && t2.mixin(a2), addNavInterceptor();
    }
  }
  function createRouter(t2) {
    return new RouterImpl(t2);
  }
  const router = createRouter({
    pageData: PAGE_DATA
  });
  const needLogin = [
    // '/pages/moto-cms/pub-list',
    // '/pages/moto-cms/article-editor'
  ];
  router.beforeEach((to, from) => {
    if (needLogin.includes(to.path)) {
      const token = uni.getStorageSync("moto-pc-token");
      if (!token) {
        uni.showToast({
          title: "需要登录后才能完成相应操作哦",
          icon: "none"
        });
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve({
              to: {
                path: "/pages/login/login"
              },
              navType: "push"
            });
          }, 500);
        });
      }
    }
  });
  function createApp() {
    const app = vue.createVueApp(App);
    app.config.globalProperties.$openApi = openApi;
    app.use(store);
    app.use(router);
    app.use(installer);
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(Vue, uni.VueShared);
